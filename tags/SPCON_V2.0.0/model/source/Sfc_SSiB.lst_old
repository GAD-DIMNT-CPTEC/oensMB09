%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /scratch/p01211/oens-1.0.0/model/source/Sfc_SSiB.f90
Compiled : 10/22/10  05:48:41
Compiler : Version 7.2.6
Target   : x86-64
Command  : /opt/cray/cce/7.2.6/cftn/x86-64/bin/ftn_driver.exe -hcpu=x86-64
           -hnetwork=seastar -hstatic -hbyteswapio -Onomodinline
           -Othread0,noomp -hthread0,noomp -Ovector2,pattern,unroll2 -rmda -c
           -I/opt/cray/portals/2.2.0-1.0301.22647.20.8.ss/include
           -I/opt/cray/pmi/1.0-1.0000.7901.22.1.ss/include
           -I/opt/cray/cce/7.2.6/craylibs/x86-64/include
           -L/opt/cray/portals/2.2.0-1.0301.22647.20.8.ss/lib64
           -L/opt/cray/pmi/1.0-1.0000.7901.22.1.ss/lib64
           -L/opt/cray/cce/7.2.6/craylibs/x86-64
           -L/opt/acml/4.4.0/gfortran64/lib -lcraymath -lacml_mv -lgfortran
           -I/opt/acml/4.4.0/gfortran64/include -L/opt/gcc/4.1.2/snos/lib64
           -D__CRAYXT -D__CRAYXT_COMPUTE_LINUX_TARGET -D__TARGET_LINUX__
           -I/opt/cray/mpt/5.1.0/xt/seastar/mpich2-cray/include
           -I/opt/cray/mpt/5.1.0/xt/seastar/sma/include
           -I/opt/xt-libsci/10.4.9.4/cray/include
           -L/opt/cray/mpt/5.1.0/xt/seastar/mpich2-cray/lib
           -L/opt/cray/mpt/5.1.0/xt/seastar/sma/lib64
           -L/opt/xt-libsci/10.4.9.4/cray/lib/72 -lsci -lsma -lmpichf90 -lmpich
           -lrt -lpmi -lalpslli -lalpsutil -lportals -lm
           -L/usr/lib/alps Sfc_SSiB.f90

ftnlx report
------------
Source   : /scratch/p01211/oens-1.0.0/model/source/Sfc_SSiB.f90
Date     : 10/22/2010  05:48:58


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          O p t i o n s   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Options :  -O cache2,fp2,scalar2,vector2,nomodinline,ipa3,noaggress,noautothread
           -O nodwarf,fusion2,nomsgs,negmsgs,nooverindex,pattern,shortcircuit2
           -O unroll2,nozeroinc
           -h cache2,fp2,thread0,noautothread,nocaf,cpu,nofunc_trace,network
           -h noomp_trace,noomp,nopat_trace,nosecond_underscore
           -s default32 
           -eh 
           -eM 
           -d acdgjlmnovwBDILPQRTZ 
           -e hkpqyS       
           -f free
           -m3
           -S /tmp/pe_10353/Sfc_SSiB.s


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - vector atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted              f - fused
     E - Cloned                
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
     P - Parallel             p - partial
     R - Redundant            r - unrolled
                              s - shortloop
     V - Vectorized           t - array syntax temp used
                              w - unwound


    1.                 !
    2.                 !  $Author: pkubota $
    3.                 !  $Date: 2009/03/03 16:36:38 $
    4.                 !  $Revision: 1.14 $
    5.                 !
    6.                 MODULE SFC_SSiB
    7.                 
    8.                   ! InitSSiB
    9.                   !
   10.                   !fysiks -----| pbl ------| root
   11.                   !            |           |
   12.                   !            |           | raduse
   13.                   !            |           |
   14.                   !            |           | stomat
   15.                   !            |           |
   16.                   !            |           | interc
   17.                   !            |           |
   18.                   !            |           | sflxes ------| vntlax
   19.                   !            |                          |
   20.                   !            |                          | rbrd
   21.                   !            |                          |
   22.                   !            |                          | cut
   23.                   !            |                          |
   24.                   !            |                          | stres2
   25.                   !            |                          |
   26.                   !            |                          | temres
   27.                   !            |                          |
   28.                   !            |                          | update
   29.                   !            |                          |
   30.                   !            |                          | airmod
   31.                   !            |
   32.                   !            | snowm
   33.                   !            |
   34.                   !            | runoff
   35.                   !            |
   36.                   !            | seasfc ------| vntlt1
   37.                   !            |
   38.                   !            | sextrp
   39.                   !            |
   40.                   !            | sibwet ------| extrak
   41.                   !            |
   42.                   !            | sibwet_GLSM ------| extrak
   43.                   !            | 
   44.                   !            | Albedo --- radalb
   45.                   !            |
   46.                   !            | radalb
   47.                   !            |
   48.                   !            | vegin
   49.                   !            |
   50.                   !            |re_assign_sib_soil_prop
   51.                   !            |
   52.                   !            | wheat
   53.                 
   54.                   USE Constants, ONLY :     &
   55.                        ityp, imon, icg, iwv, idp, ibd, tice,&
   56.                        gasr,          &
   57.                        pie,           &
   58.                        cp,            &
   59.                        hl,            &
   60.                        grav,          &
   61.                        stefan,        &
   62.                        snomel,        &
   63.                        tf,            &
   64.                        epsfac,        &
   65.                        clai,          &
   66.                        athird,        &
   67.                        cw,            &
   68.                        z0ice,         &
   69.                        oceald   ,     &
   70.                        icealn   ,     &
   71.                        icealv   ,     &
   72.                        r8,i8,r4
   73.                 
   74.                   USE Options, ONLY: &
   75.                        nfprt, nfctrl, nfsibd, nfalb,filta,epsflt,istrt,Model1D,yrl   ,monl,schemes
   76.                 
   77.                 
   78.                   IMPLICIT NONE
   79.                 
   80.                   PRIVATE
   81.                 
   82.                   PUBLIC :: InitSSiB
   83.                   PUBLIC :: fysiks
   84.                   PUBLIC :: seasfc
   85.                   PUBLIC :: sextrp
   86.                   PUBLIC :: radalb
   87.                   PUBLIC :: Albedo
   88.                   PUBLIC :: vegin
   89.                   PUBLIC :: re_assign_sib_soil_prop
   90.                   PUBLIC :: wheat
   91.                   PUBLIC :: sibwet
   92.                   PUBLIC :: sibwet_GLSM
   93.                   PUBLIC :: x0x
   94.                   PUBLIC :: xd
   95.                   PUBLIC :: xdc
   96.                   PUBLIC :: xbc
   97.                   PUBLIC :: CopySurfaceData
   98.                   PUBLIC :: SSiB_Driver
   99.                   REAL(KIND=r8)   :: expcut
  100.                   REAL(KIND=r8)   :: rbyg
  101.                 
  102.                   REAL(KIND=r8)   , ALLOCATABLE :: cedfu (:,:,:)
  103.                   REAL(KIND=r8)   , ALLOCATABLE :: cedir (:,:,:,:)
  104.                   REAL(KIND=r8)   , ALLOCATABLE :: cedfu1(:,:,:,:,:)
  105.                   REAL(KIND=r8)   , ALLOCATABLE :: cedir1(:,:,:,:,:,:)
  106.                   REAL(KIND=r8)   , ALLOCATABLE :: cedfu2(:,:,:,:,:)
  107.                   REAL(KIND=r8)   , ALLOCATABLE :: cedir2(:,:,:,:,:,:)
  108.                   REAL(KIND=r8)   , ALLOCATABLE :: cledfu(:,:,:)
  109.                   REAL(KIND=r8)   , ALLOCATABLE :: cledir(:,:,:,:)
  110.                   REAL(KIND=r8)   , ALLOCATABLE :: xmiu  (:,:)
  111.                   REAL(KIND=r8)   , ALLOCATABLE :: cether(:,:,:)
  112.                   REAL(KIND=r8)   , ALLOCATABLE :: xmiw  (:,:)
  113.                 
  114.                   REAL(KIND=r8)   , ALLOCATABLE :: ystpar(:,:)
  115.                   REAL(KIND=r8)   , ALLOCATABLE :: yopt  (:)
  116.                   REAL(KIND=r8)   , ALLOCATABLE :: yll   (:)
  117.                   REAL(KIND=r8)   , ALLOCATABLE :: yu    (:)
  118.                   REAL(KIND=r8)   , ALLOCATABLE :: yefac (:)
  119.                   REAL(KIND=r8)   , ALLOCATABLE :: yh1   (:)
  120.                   REAL(KIND=r8)   , ALLOCATABLE :: yh2   (:)
  121.                   REAL(KIND=r8)   , ALLOCATABLE :: yootd (:)
  122.                   REAL(KIND=r8)   , ALLOCATABLE :: yreen (:,:)
  123.                   REAL(KIND=r8)   , ALLOCATABLE :: ycover(:,:)
  124.                   REAL(KIND=r8)   , ALLOCATABLE :: ylt   (:,:)
  125.                 
  126.                 
  127.                   REAL(KIND=r8)   , ALLOCATABLE :: rstpar_fixed    (:,:,:)
  128.                   REAL(KIND=r8)   , ALLOCATABLE :: chil_fixed      (:,:)
  129.                   REAL(KIND=r8)   , ALLOCATABLE :: topt_fixed      (:,:)
  130.                   REAL(KIND=r8)   , ALLOCATABLE :: tll_fixed          (:,:)
  131.                   REAL(KIND=r8)   , ALLOCATABLE :: tu_fixed          (:,:)
  132.                   REAL(KIND=r8)   , ALLOCATABLE :: defac_fixed     (:,:)
  133.                   REAL(KIND=r8)   , ALLOCATABLE :: ph1_fixed          (:,:)
  134.                   REAL(KIND=r8)   , ALLOCATABLE :: ph2_fixed          (:,:)
  135.                   REAL(KIND=r8)   , ALLOCATABLE :: rootd     (:,:)
  136.                   REAL(KIND=r8)   , ALLOCATABLE :: bee          (:)
  137.                   REAL(KIND=r8)   , ALLOCATABLE :: phsat     (:)
  138.                   REAL(KIND=r8)   , ALLOCATABLE :: satco     (:)
  139.                   REAL(KIND=r8)   , ALLOCATABLE :: poros     (:)
  140.                   REAL(KIND=r8)   , ALLOCATABLE :: zdepth    (:,:)
  141.                   REAL(KIND=r8)   , ALLOCATABLE :: green_fixed     (:,:,:)
  142.                   REAL(KIND=r8)   , ALLOCATABLE :: xcover_fixed    (:,:,:)
  143.                   REAL(KIND=r8)   , ALLOCATABLE :: zlt_fixed          (:,:,:)
  144.                   REAL(KIND=r8)   , ALLOCATABLE :: x0x          (:,:)
  145.                   REAL(KIND=r8)   , ALLOCATABLE :: xd          (:,:)
  146.                   REAL(KIND=r8)   , ALLOCATABLE :: z2          (:,:)
  147.                   REAL(KIND=r8)   , ALLOCATABLE :: z1          (:,:)
  148.                   REAL(KIND=r8)   , ALLOCATABLE :: xdc          (:,:)
  149.                   REAL(KIND=r8)   , ALLOCATABLE :: xbc          (:,:)
  150.                   REAL(KIND=r8)   , ALLOCATABLE :: zlt(:, :, :)
  151.                   REAL(KIND=r8)   , ALLOCATABLE :: xcover  (:, :, :)
  152.                   REAL(KIND=r8)   , ALLOCATABLE :: ph2(:,:)
  153.                   REAL(KIND=r8)   , ALLOCATABLE :: ph1(:,:)
  154.                   REAL(KIND=r8)   , ALLOCATABLE :: green(:,:,:)
  155.                   REAL(KIND=r8)   , ALLOCATABLE :: defac(:,:)
  156.                   REAL(KIND=r8)   , ALLOCATABLE :: tu(:,:)
  157.                   REAL(KIND=r8)   , ALLOCATABLE :: tll(:,:)
  158.                   REAL(KIND=r8)   , ALLOCATABLE :: topt(:,:)
  159.                   REAL(KIND=r8)   , ALLOCATABLE :: rstpar(:,:,:)
  160.                   REAL(KIND=r8)   , ALLOCATABLE :: chil(:,:)
  161.                 
  162.                   REAL(KIND=r8)   , ALLOCATABLE :: vcover_gbl (:,:,:)
  163.                   REAL(KIND=r8)   , ALLOCATABLE :: zlt_gbl    (:,:,:)
  164.                   REAL(KIND=r8)   , ALLOCATABLE :: green_gbl  (:,:,:)
  165.                   REAL(KIND=r8)   , ALLOCATABLE :: chil_gbl   (:,:,:)
  166.                   REAL(KIND=r8)   , ALLOCATABLE :: topt_gbl   (:,:,:)
  167.                   REAL(KIND=r8)   , ALLOCATABLE :: tll_gbl    (:,:,:)
  168.                   REAL(KIND=r8)   , ALLOCATABLE :: tu_gbl     (:,:,:)
  169.                   REAL(KIND=r8)   , ALLOCATABLE :: defac_gbl  (:,:,:)
  170.                   REAL(KIND=r8)   , ALLOCATABLE :: ph2_gbl    (:,:,:)
  171.                   REAL(KIND=r8)   , ALLOCATABLE :: ph1_gbl    (:,:,:)
  172.                   REAL(KIND=r8)   , ALLOCATABLE :: rstpar_gbl (:,:,:,:)
  173.                 
  174.                 
  175.                   CHARACTER(LEN=200) :: path_in
  176.                   CHARACTER(LEN=200) :: fNameSibVeg
  177.                   CHARACTER(LEN=200) :: fNameSibAlb
  178.                 
  179.                 
  180.                 CONTAINS
  181.                 
  182.                 
  183.                   SUBROUTINE InitSSiB(ibMax ,jbMax,delsig,path,fNameSibVeg_in,fNameSibAlb_in)
  184.                     INTEGER, INTENT(IN) :: ibMax
  185.                     INTEGER, INTENT(IN) :: jbMax
  186.                     REAL(KIND=r8), INTENT(IN   ) ::  delsig(:)
  187.                     CHARACTER(LEN=*), INTENT(IN   ) ::  path
  188.                     CHARACTER(LEN=*), INTENT(IN   ) ::  fNameSibVeg_in
  189.                     CHARACTER(LEN=*), INTENT(IN   ) ::  fNameSibAlb_in
  190.                     expcut=- LOG(1.0e53_r8)
  191.                     rbyg  =gasr/grav*delsig(1)*0.5_r8
  192.                     path_in=path
  193.                     fNameSibVeg = fNameSibVeg_in
  194.                     fNameSibAlb = fNameSibAlb_in
  195.                     ALLOCATE(vcover_gbl(ibMax,jbMax,icg) )
  196.                     ALLOCATE(zlt_gbl   (ibMax,jbMax,icg))
  197.                     ALLOCATE(green_gbl (ibMax,jbMax,icg))
  198.                     ALLOCATE(chil_gbl  (ibMax,jbMax,icg))
  199.                     ALLOCATE(topt_gbl  (ibMax,jbMax,icg))
  200.                     ALLOCATE(tll_gbl   (ibMax,jbMax,icg))
  201.                     ALLOCATE(tu_gbl    (ibMax,jbMax,icg))
  202.                     ALLOCATE(defac_gbl (ibMax,jbMax,icg))
  203.                     ALLOCATE(ph2_gbl   (ibMax,jbMax,icg))
  204.                     ALLOCATE(ph1_gbl   (ibMax,jbMax,icg))
  205.                     ALLOCATE(rstpar_gbl(ibMax,jbMax,icg,iwv) )
  206.                   END SUBROUTINE InitSSiB
  207.                 
  208.                   SUBROUTINE SSiB_Driver(&
  209.                        jdt,latitu,bps,psb,dzm,em,gmt,gmq,&
  210.                        gmu,cu,cuni,ctni,ustar,cosz,sinclt,rhoair,&
  211.                        psy,rcp,wc,wg,fc,fg,hr,ect,&
  212.                        eci,egt,egi,egs,ec,eg,hc,hg,&
  213.                        ecidif,egidif,ecmass,egmass,etmass,hflux,chf,shf,&
  214.                        fluxef,roff,drag,ra,rb,rd,rc,rg,&
  215.                        tcta,tgta,ta,ea,etc,etg,btc,btg,&
  216.                        u2,radt,par,pd,rst,rsoil,phroot,hrr,&
  217.                        phsoil,cc,cg,satcap,snow,dtc,dtg,dtm,&
  218.                        dqm,stm,extk,radfac,closs,gloss,thermk,p1f,&
  219.                        p2f,tc,tg,td,capac,w,qm,tm,&
  220.                        um,vm,psur,ppc,ppl,radn,itype,dtc3x,&
  221.                        mon,nmax,ncols,zlwup,salb,tgeff,nsx ,tmtx,qmtx,&
  222.                        umtx,gt  ,gq,gu ,gv,gps,imask,kMax,ktm,initlz,tcm,tgm,tdm,wm ,&
  223.                        beam_visb,beam_visd,beam_nirb,beam_nird,cos2,dlwbot,capacm,td0,tg0, zenith,kt,iswrad,ilwrad,&
  224.                        xvisb,xvisd,xnirb,xnird,ppli,ppci,tsea, ssib, w0, tc0   ,capac0,intg,&
  225.                        slrad,tseam,tsurf,qsurf,colrad,sigki,delsig,sens,evap,umom,vmom,&
  226.                        zorl,rmi,rhi,cond,stor,z0x,speedm,Ustarm,z0sea,rho,d ,qsfc0,tsfc0, qsfcm,tsfcm,qsfc,tsfc,&
  227.                        qm0,qmm,tm0,tmm,mskant )
  228.                 
  229.                     IMPLICIT NONE
  230.                     INTEGER, INTENT(in   ) :: nCols
  231.                     INTEGER, INTENT(in   ) :: nmax
  232.                     INTEGER, INTENT(in   ) :: kMax
  233.                 
  234.                     REAL(KIND=r8)   , INTENT(in   ) :: dtc3x
  235.                     INTEGER, INTENT(inout) :: mon(ncols)
  236.                 
  237.                     INTEGER, INTENT(in   ) :: itype (ncols)
  238.                     !
  239.                     !     the size of working area is ncols*187
  240.                     !     atmospheric parameters as boudary values for sib
  241.                     !
  242.                     REAL(KIND=r8),    INTENT(inout) :: qm  (ncols)
  243.                     REAL(KIND=r8),    INTENT(inout) :: tm  (ncols)
  244.                     REAL(KIND=r8),    INTENT(inout) :: qm0 (ncols)
  245.                     REAL(KIND=r8),    INTENT(inout) :: qmm (ncols)
  246.                     REAL(KIND=r8),    INTENT(inout) :: tm0 (ncols)
  247.                     REAL(KIND=r8),    INTENT(inout) :: tmm (ncols)
  248.                     REAL(KIND=r8),    INTENT(in   ) :: um  (ncols)
  249.                     REAL(KIND=r8),    INTENT(in   ) :: vm  (ncols)
  250.                     REAL(KIND=r8),    INTENT(in out) :: psur(ncols)
  251.                     REAL(KIND=r8),    INTENT(in out) :: ppc (ncols)
  252.                     REAL(KIND=r8),    INTENT(in out   ) :: ppl (ncols)
  253.                     REAL(KIND=r8),    INTENT(in out) :: radn(ncols,3,2)
  254.                     !
  255.                     !     prognostic variables
  256.                     !
  257.                     REAL(KIND=r8),    INTENT(inout) :: tc   (ncols)
  258.                     REAL(KIND=r8),    INTENT(inout) :: tg   (ncols)
  259.                     REAL(KIND=r8),    INTENT(inout) :: td   (ncols)
  260.                     REAL(KIND=r8),    INTENT(inout) :: capac(ncols,2)
  261.                     REAL(KIND=r8),    INTENT(inout) :: w    (ncols,3)
  262.                     !
  263.                     !     variables calculated from above and ambient conditions
  264.                     !
  265.                     REAL(KIND=r8),    INTENT(inout) :: ra    (ncols)
  266.                     REAL(KIND=r8),    INTENT(inout  ) :: rb    (ncols)
  267.                     REAL(KIND=r8),    INTENT(inout  ) :: rd    (ncols)
  268.                     REAL(KIND=r8),    INTENT(inout  ) :: rc    (ncols)
  269.                     REAL(KIND=r8),    INTENT(inout  ) :: rg    (ncols)
  270.                     REAL(KIND=r8),    INTENT(inout  ) :: tcta  (ncols)
  271.                     REAL(KIND=r8),    INTENT(inout  ) :: tgta  (ncols)
  272.                     REAL(KIND=r8),    INTENT(inout  ) :: ta    (ncols)
  273.                     REAL(KIND=r8),    INTENT(inout  ) :: ea    (ncols)
  274.                     REAL(KIND=r8),    INTENT(inout  ) :: etc   (ncols)
  275.                     REAL(KIND=r8),    INTENT(inout  ) :: etg   (ncols)
  276.                     REAL(KIND=r8),    INTENT(inout  ) :: btc   (ncols)
  277.                     REAL(KIND=r8),    INTENT(inout  ) :: btg   (ncols)
  278.                     REAL(KIND=r8),    INTENT(inout) :: u2    (ncols)
  279.                     REAL(KIND=r8),    INTENT(inout  ) :: radt  (ncols,icg)
  280.                     REAL(KIND=r8),    INTENT(inout) :: par   (ncols,icg)
  281.                     REAL(KIND=r8),    INTENT(inout  ) :: pd    (ncols,icg)
  282.                     REAL(KIND=r8),    INTENT(inout  ) :: rst   (ncols,icg)
  283.                     REAL(KIND=r8),    INTENT(inout  ) :: rsoil (ncols)
  284.                     REAL(KIND=r8),    INTENT(inout  ) :: phroot(ncols,icg)
  285.                     REAL(KIND=r8),    INTENT(inout  ) :: hrr   (ncols)
  286.                     REAL(KIND=r8),    INTENT(inout  ) :: phsoil(ncols,idp)
  287.                     REAL(KIND=r8),    INTENT(inout  ) :: cc    (ncols)
  288.                     REAL(KIND=r8),    INTENT(inout  ) :: cg    (ncols)
  289.                     REAL(KIND=r8),    INTENT(inout) :: satcap(ncols,icg)
  290.                     REAL(KIND=r8),    INTENT(inout) :: snow  (ncols,icg)
  291.                     REAL(KIND=r8),    INTENT(inout  ) :: dtc   (ncols)
  292.                     REAL(KIND=r8),    INTENT(inout  ) :: dtg   (ncols)
  293.                     REAL(KIND=r8),    INTENT(inout  ) :: dtm   (ncols)
  294.                     REAL(KIND=r8),    INTENT(inout  ) :: dqm   (ncols)
  295.                     REAL(KIND=r8),    INTENT(inout  ) :: stm   (ncols,icg)
  296.                     REAL(KIND=r8),    INTENT(inout) :: extk  (ncols,icg,iwv,ibd)
  297.                     REAL(KIND=r8),    INTENT(inout) :: radfac(ncols,icg,iwv,ibd)
  298.                     REAL(KIND=r8),    INTENT(inout) :: closs (ncols)
  299.                     REAL(KIND=r8),    INTENT(inout) :: gloss (ncols)
  300.                     REAL(KIND=r8),    INTENT(inout) :: thermk(ncols)
  301.                     REAL(KIND=r8),    INTENT(inout) :: p1f   (ncols)
  302.                     REAL(KIND=r8),    INTENT(inout) :: p2f   (ncols)
  303.                     !
  304.                     !     heat fluxes : c-canopy, g-ground, t-trans, e-evap  in j m-2
  305.                     !
  306.                     REAL(KIND=r8),    INTENT(inout) :: ect   (ncols)
  307.                     REAL(KIND=r8),    INTENT(inout) :: eci   (ncols)
  308.                     REAL(KIND=r8),    INTENT(inout) :: egt   (ncols)
  309.                     REAL(KIND=r8),    INTENT(inout) :: egi   (ncols)
  310.                     REAL(KIND=r8),    INTENT(inout) :: egs   (ncols)
  311.                     REAL(KIND=r8),    INTENT(inout  ) :: ec    (ncols)
  312.                     REAL(KIND=r8),    INTENT(inout  ) :: eg    (ncols)
  313.                     REAL(KIND=r8),    INTENT(inout  ) :: hc    (ncols)
  314.                     REAL(KIND=r8),    INTENT(inout  ) :: hg    (ncols)
  315.                     REAL(KIND=r8),    INTENT(inout  ) :: ecidif(ncols)
  316.                     REAL(KIND=r8),    INTENT(inout  ) :: egidif(ncols)
  317.                     REAL(KIND=r8),    INTENT(inout  ) :: ecmass(ncols)
  318.                     REAL(KIND=r8),    INTENT(inout  ) :: egmass(ncols)
  319.                     REAL(KIND=r8),    INTENT(inout  ) :: etmass(ncols)
  320.                     REAL(KIND=r8),    INTENT(inout  ) :: hflux (ncols)
  321.                     REAL(KIND=r8),    INTENT(inout  ) :: chf   (ncols)
  322.                     REAL(KIND=r8),    INTENT(inout  ) :: shf   (ncols)
  323.                     REAL(KIND=r8),    INTENT(inout  ) :: fluxef(ncols)
  324.                     REAL(KIND=r8),    INTENT(inout) :: roff  (ncols)
  325.                     REAL(KIND=r8),    INTENT(inout) :: drag  (ncols)
  326.                     !
  327.                     !     this is for coupling with closure turbulence model
  328.                     !
  329.                     REAL(KIND=r8),    INTENT(in   ) :: bps   (ncols)
  330.                     REAL(KIND=r8),    INTENT(in   ) :: psb   (ncols)
  331.                     REAL(KIND=r8),    INTENT(in   ) :: dzm   (ncols)
  332.                     REAL(KIND=r8),    INTENT(in   ) :: em    (ncols)
  333.                     REAL(KIND=r8),    INTENT(inout) :: gmt   (ncols,3)
  334.                     REAL(KIND=r8),    INTENT(inout) :: gmq   (ncols,3)
  335.                     REAL(KIND=r8),    INTENT(inout) :: gmu   (ncols,4)
  336.                     REAL(KIND=r8),    INTENT(inout) :: cu    (ncols)
  337.                     REAL(KIND=r8),    INTENT(inout) :: cuni  (ncols)
  338.                     REAL(KIND=r8),    INTENT(inout) :: ctni  (ncols)
  339.                     REAL(KIND=r8),    INTENT(inout) :: ustar (ncols)
  340.                     REAL(KIND=r8),    INTENT(inout) :: cosz  (ncols)
  341.                     REAL(KIND=r8),    INTENT(in   ) :: sinclt(ncols)
  342.                     REAL(KIND=r8),    INTENT(in   ) :: rhoair(ncols)
  343.                     REAL(KIND=r8),    INTENT(in   ) :: psy   (ncols)
  344.                     REAL(KIND=r8),    INTENT(inout  ) :: rcp   (ncols)
  345.                     REAL(KIND=r8),    INTENT(inout) :: wc    (ncols)
  346.                     REAL(KIND=r8),    INTENT(inout) :: wg    (ncols)
  347.                     REAL(KIND=r8),    INTENT(inout) :: fc    (ncols)
  348.                     REAL(KIND=r8),    INTENT(inout) :: fg    (ncols)
  349.                     REAL(KIND=r8),    INTENT(inout) :: hr    (ncols)
  350.                 
  351.                     INTEGER, INTENT(in   ) :: jdt
  352.                     INTEGER, INTENT(in   ) :: latitu
  353.                 
  354.                     REAL(KIND=r8)   , INTENT(INOUT) :: zlwup    (ncols)
  355.                     REAL(KIND=r8)   , INTENT(INOUT) :: salb     (ncols,2,2)
  356.                     REAL(KIND=r8)   , INTENT(INOUT) :: tgeff    (ncols)
  357.                     INTEGER         , INTENT(IN   ) :: nsx      (ncols)
  358.                     REAL(KIND=r8)   , INTENT(INOUT) :: tmtx     (nCols,kmax,3)
  359.                     REAL(KIND=r8)   , INTENT(INOUT) :: qmtx     (nCols,kmax,3)
  360.                     REAL(KIND=r8)   , INTENT(INOUT) :: umtx     (nCols,kmax,4)
  361.                     REAL(KIND=r8)   , INTENT(INOUT) :: gt       (nCols,kmax)
  362.                     REAL(KIND=r8)   , INTENT(INOUT) :: gq       (nCols,kmax)
  363.                     REAL(KIND=r8)   , INTENT(IN   ) :: gu       (nCols,kmax)
  364.                     REAL(KIND=r8)   , INTENT(IN   ) :: gv       (nCols,kmax)
  365.                     REAL(KIND=r8)   , INTENT(IN   ) :: gps      (nCols)
  366.                     INTEGER(KIND=i8), INTENT(IN   ) :: imask    (nCols)
  367.                     INTEGER         , INTENT(IN   ) :: ktm
  368.                     INTEGER         , INTENT(IN   ) :: initlz
  369.                     REAL(KIND=r8)   , INTENT(INOUT) :: tcm      (ncols)
  370.                     REAL(KIND=r8)   , INTENT(INOUT) :: tgm      (ncols)
  371.                     REAL(KIND=r8)   , INTENT(INOUT) :: tdm      (ncols)
  372.                     REAL(KIND=r8)   , INTENT(INOUT) :: wm       (ncols,3)
  373.                     REAL(KIND=r8)   , INTENT(INOUT) :: td0      (ncols)
  374.                     REAL(KIND=r8)   , INTENT(INOUT) :: tg0      (ncols)
  375.                     REAL(KIND=r8)   , INTENT(IN   ) :: zenith   (nCols)
  376.                     INTEGER         , INTENT(IN   ) :: kt
  377.                     CHARACTER(len=*), INTENT(IN   ) :: iswrad
  378.                     CHARACTER(len=*), INTENT(IN   ) :: ilwrad
  379.                 
  380.                     REAL(KIND=r8), INTENT(IN   ) :: beam_visb(nCols)
  381.                     REAL(KIND=r8), INTENT(IN   ) :: beam_visd(nCols)
  382.                     REAL(KIND=r8), INTENT(IN   ) :: beam_nirb(nCols)
  383.                     REAL(KIND=r8), INTENT(IN   ) :: beam_nird(nCols)
  384.                     REAL(KIND=r8), INTENT(IN   ) :: cos2     (nCols)
  385.                     REAL(KIND=r8), INTENT(IN   ) :: dlwbot   (nCols)
  386.                     REAL(KIND=r8), INTENT(INOUT) :: capacm   (ncols,2)
  387.                 
  388.                     REAL(KIND=r8), INTENT(IN   ) :: xvisb    (nCols)
  389.                     REAL(KIND=r8), INTENT(IN   ) :: xvisd    (nCols)
  390.                     REAL(KIND=r8), INTENT(IN   ) :: xnirb    (nCols)
  391.                     REAL(KIND=r8), INTENT(IN   ) :: xnird    (nCols)
  392.                     REAL(KIND=r8), INTENT(IN   ) :: ppli     (nCols)
  393.                     REAL(KIND=r8), INTENT(IN   ) :: ppci     (nCols)
  394.                     REAL(KIND=r8), INTENT(INOUT) :: tsea     (nCols)
  395.                     REAL(KIND=r8), INTENT(IN   ) :: ssib     (ncols)
  396.                     REAL(KIND=r8), INTENT(INOUT) :: w0       (ncols,3)
  397.                     REAL(KIND=r8), INTENT(INOUT) :: tc0      (ncols)
  398.                     REAL(KIND=r8), INTENT(INOUT) :: capac0   (ncols,2)
  399.                     INTEGER      , INTENT(IN   ) :: intg
  400.                 
  401.                     REAL(KIND=r8), INTENT(IN   ) :: slrad    (nCols)
  402.                     REAL(KIND=r8), INTENT(INOUT) :: tseam    (nCols)
  403.                     REAL(KIND=r8), INTENT(INOUT) :: tsurf    (nCols)
  404.                     REAL(KIND=r8), INTENT(IN   ) :: qsurf    (nCols)
  405.                 
  406.                     REAL(KIND=r8), INTENT(IN   ) :: colrad   (nCols)
  407.                     REAL(KIND=r8), INTENT(IN   ) :: sigki    (1)
  408.                     REAL(KIND=r8), INTENT(IN   ) :: delsig   (1)
  409.                     REAL(KIND=r8), INTENT(INOUT) :: sens     (nCols)
  410.                     REAL(KIND=r8), INTENT(INOUT) :: evap     (nCols)
  411.                     REAL(KIND=r8), INTENT(INOUT) :: umom     (nCols)
  412.                     REAL(KIND=r8), INTENT(INOUT) :: vmom     (nCols)
  413.                     REAL(KIND=r8), INTENT(INOUT) :: zorl     (nCols)
  414.                 
  415.                     REAL(KIND=r8), INTENT(INOUT) :: rmi      (nCols)
  416.                     REAL(KIND=r8), INTENT(INOUT) :: rhi      (nCols)
  417.                     REAL(KIND=r8), INTENT(INOUT) :: cond     (nCols)
  418.                     REAL(KIND=r8), INTENT(INOUT) :: stor     (nCols)
  419.                 
  420.                     REAL(KIND=r8), INTENT(INOUT) :: z0x      (nCols)
  421.                     REAL(KIND=r8), INTENT(INOUT) :: speedm   (nCols)
  422.                     REAL(KIND=r8), INTENT(INOUT) :: Ustarm   (nCols)
  423.                     REAL(KIND=r8), INTENT(INOUT) :: z0sea    (nCols)
  424.                     REAL(KIND=r8), INTENT(INOUT) :: rho      (nCols)
  425.                     REAL(KIND=r8), INTENT(INOUT) :: d        (ncols)
  426.                     REAL(KIND=r8), INTENT(INOUT) :: qsfc0    (ncols)
  427.                     REAL(KIND=r8), INTENT(INOUT) :: tsfc0    (ncols)
  428.                     REAL(KIND=r8), INTENT(INOUT) :: qsfcm    (ncols)
  429.                     REAL(KIND=r8), INTENT(INOUT) :: tsfcm    (ncols)
  430.                     REAL(KIND=r8), INTENT(INOUT) :: qsfc     (ncols)
  431.                     REAL(KIND=r8), INTENT(INOUT) :: tsfc     (ncols)
  432.                     INTEGER(KIND=i8)      , INTENT(IN   ) :: mskant   (ncols)
  433.                     
  434.                     REAL(KIND=r8) :: rstpar2 (ncols,icg,iwv)
  435.                     REAL(KIND=r8) :: zlt2    (ncols,icg)
  436.                     REAL(KIND=r8) :: green2  (ncols,icg)
  437.                     REAL(KIND=r8) :: chil2   (ncols,icg)
  438.                     REAL(KIND=r8) :: vcover  (ncols,icg)
  439.                     REAL(KIND=r8) :: rdc     (ncols)
  440.                     REAL(KIND=r8) :: rbc     (ncols)
  441.                     REAL(KIND=r8) :: z0      (ncols)
  442.                     REAL(KIND=r8) :: topt2   (ncols,icg)
  443.                     REAL(KIND=r8) :: tll2    (ncols,icg)
  444.                     REAL(KIND=r8) :: tu2     (ncols,icg)
  445.                     REAL(KIND=r8) :: defac2  (ncols,icg)
  446.                     REAL(KIND=r8) :: xsea    (nCols)
  447.                     REAL(KIND=r8) :: tmin    (ncols)
  448.                     REAL(KIND=r8) :: tmax    (ncols)
  449.                     REAL(KIND=r8) :: ph22    (ncols,icg)
  450.                     REAL(KIND=r8) :: ph12    (ncols,icg)
  451.                 
  452.                     LOGICAL       :: InitMod
  453.                     INTEGER :: ncount,i,j,itr,ind,nint,IntSib
  454.  1------------<     DO j=1,icg
  455.  1 Vr4--------<        DO i=1,nmax
  456.  1 Vr4 A-----<>           vcover     (i,j)   =  vcover_gbl (i,latitu,j)
  457.  1 Vr4 A-----<>           zlt2       (i,j)   =  zlt_gbl    (i,latitu,j)
  458.  1 Vr4 A-----<>           green2     (i,j)   =  green_gbl  (i,latitu,j)
  459.  1 Vr4 A-----<>           chil2      (i,j)   =  chil_gbl   (i,latitu,j)
  460.  1 Vr4 A-----<>           topt2      (i,j)   =  topt_gbl   (i,latitu,j)
  461.  1 Vr4 A-----<>           tll2       (i,j)   =  tll_gbl    (i,latitu,j)
  462.  1 Vr4 A-----<>           tu2        (i,j)   =  tu_gbl     (i,latitu,j)
  463.  1 Vr4 A-----<>           defac2     (i,j)   =  defac_gbl  (i,latitu,j)
  464.  1 Vr4 A-----<>           ph12       (i,j)   =  ph1_gbl    (i,latitu,j)
  465.  1 Vr4 A-----<>           ph22       (i,j)   =  ph2_gbl    (i,latitu,j)
  466.  1 Vr4                    rstpar2    (i,j,1) =  rstpar_gbl (i,latitu,j,1)
  467.  1 Vr4                    rstpar2    (i,j,2) =  rstpar_gbl (i,latitu,j,2)
  468.  1 Vr4                    rstpar2    (i,j,3) =  rstpar_gbl (i,latitu,j,3)
  469.  1 Vr4-------->        END DO
  470.  1------------>     END DO
  471.                 
  472.                     ncount=0
  473.  1------------<     DO i=1,nCols
  474.  1                     IF(imask(i).GE.1_i8) THEN
  475.  1                        ncount=ncount+1
  476.  1                        rbc        (ncount)     =  xbc   (itype(ncount),mon(ncount))
  477.  1                        rdc        (ncount)     =  xdc   (itype(ncount),mon(ncount))
  478.  1                        z0x        (ncount)     =  x0x   (itype(ncount),mon(ncount))
  479.  1                        d          (ncount)     =  xd    (itype(ncount),mon(ncount))
  480.  1                     END IF
  481.  1------------>     END DO
  482.                 
  483.                     InitMod = (initlz >= 0 .AND. ktm == -1 .AND. kt == 0 .AND. nmax >= 1)
  484.                 
  485.                     IF(InitMod)THEN
  486.                        nint=2
  487.                        IntSib=5
  488.                     ELSE
  489.                        nint=1
  490.                        IntSib=1
  491.                     END IF
  492.                 
  493.                     IF(TRIM(iswrad).NE.'NON'.AND.TRIM(ilwrad).NE.'NON') THEN
  494.                        IF(InitMod)THEN
  495.                 
  496.  1------------<           DO ind=1,nint
  497.  1                           ncount=0
  498.  1 2----------<              DO i=1,nCols
  499.  1 2                            IF(imask(i).GE.1_i8) THEN
  500.  1 2                               ncount=ncount+1
  501.  1 2                               IF(ind.EQ.1) THEN
  502.  1 2                                  !
  503.  1 2                                  !     night
  504.  1 2                                  !
  505.  1 2                                  radn(ncount,1,1)=0.0e0_r8
  506.  1 2                                  radn(ncount,1,2)=0.0e0_r8
  507.  1 2                                  radn(ncount,2,1)=0.0e0_r8
  508.  1 2                                  radn(ncount,2,2)=0.0e0_r8
  509.  1 2                                  cosz(ncount)    =0.0e0_r8
  510.  1 2                               ELSE
  511.  1 2                                  !
  512.  1 2                                  !     noon
  513.  1 2                                  !
  514.  1 2                                  radn(ncount,1,1)=beam_visb (i)
  515.  1 2                                  radn(ncount,1,2)=beam_visd (i)
  516.  1 2                                  radn(ncount,2,1)=beam_nirb (i)
  517.  1 2                                  radn(ncount,2,2)=beam_nird (i)
  518.  1 2                                  cosz(ncount)    =cos2(i)
  519.  1 2                               END IF
  520.  1 2                               radn(ncount,3,1)=0.0e0_r8
  521.  1 2                               radn(ncount,3,2)=dlwbot(i)
  522.  1 2                               !
  523.  1 2                               !     precipitation
  524.  1 2                               !
  525.  1 2                               ppl (ncount)    =0.0e0_r8
  526.  1 2                               ppc (ncount)    =0.0e0_r8
  527.  1 2                            END IF
  528.  1 2---------->              END DO
  529.  1 2----------<              DO itr=1,IntSib
  530.  1 2                            CALL radalb( &
  531.  1 2                                 nmax              ,mon(1:nmax)         ,nmax                ,itype(1:nmax)       , &
  532.  1 2                                 tc(1:nmax)        ,tg(1:nmax)          ,capac(1:nmax,:)     , &
  533.  1 2                                 satcap(1:nmax,:)  ,extk(1:nmax,:,:,:)  ,radfac(1:nmax,:,:,:),closs(1:nmax)       , &
  534.  1 2                                 gloss(1:nmax)     ,thermk(1:nmax)      ,p1f(1:nmax)         ,p2f(1:nmax)         , &
  535.  1 2                                 zlwup(1:nmax)     ,salb(1:nmax,:,:)    ,tgeff(1:nmax)       ,cosz(1:nmax)        , &
  536.  1 2                                 nsx(1:nmax)       ,latitu  )
  537.  1 2            
  538.  1 2                            CALL fysiks(&
  539.  1 2                                 vcover(1:nmax,:)  ,z0x(1:nmax)         ,d(1:nmax)       ,rdc(1:nmax)     ,&
  540.  1 2                                 rbc(1:nmax)       ,z0(1:nmax)          ,jdt             ,latitu          ,&
  541.  1 2                                 bps(1:nmax)       ,psb(1:nmax)         ,dzm(1:nmax)     ,em(1:nmax)      ,&
  542.  1 2                                 gmt(1:nmax,:)     ,gmq(1:nmax,:)       ,gmu(1:nmax,:)   ,cu(1:nmax)      ,&
  543.  1 2                                 cuni(1:nmax)      ,ctni(1:nmax)        ,ustar(1:nmax)   ,cosz(1:nmax)    ,&
  544.  1 2                                 sinclt(1:nmax)    ,rhoair(1:nmax)      ,psy(1:nmax)     ,rcp(1:nmax)     ,&
  545.  1 2                                 wc(1:nmax)        ,wg(1:nmax)          ,fc(1:nmax)      ,fg(1:nmax)      ,&
  546.  1 2                                 hr(1:nmax)        ,ect(1:nmax)         ,eci(1:nmax)     ,egt(1:nmax)     ,&
  547.  1 2                                 egi(1:nmax)       ,egs(1:nmax)         ,ec(1:nmax)      ,eg(1:nmax)      ,&
  548.  1 2                                 hc(1:nmax)        ,hg(1:nmax)          ,ecidif(1:nmax)  ,egidif(1:nmax)  ,&
  549.  1 2                                 ecmass(1:nmax)    ,egmass(1:nmax)      ,etmass(1:nmax)  ,hflux(1:nmax)   ,&
  550.  1 2                                 chf(1:nmax)       ,shf(1:nmax)         ,fluxef(1:nmax)  ,roff(1:nmax)    ,&
  551.  1 2                                 drag(1:nmax)      ,ra(1:nmax)          ,rb(1:nmax)      ,rd(1:nmax)      ,&
  552.  1 2                                 rc(1:nmax)        ,rg(1:nmax)          ,tcta(1:nmax)    ,tgta(1:nmax)    ,&
  553.  1 2                                 ta(1:nmax)        ,ea(1:nmax)          ,etc(1:nmax)     ,etg(1:nmax)     ,&
  554.  1 2                                 btc(1:nmax)       ,btg(1:nmax)         ,u2(1:nmax)      ,radt(1:nmax,:)  ,&
  555.  1 2                                 par(1:nmax,:)     ,pd(1:nmax,:)        ,rst(1:nmax,:)   ,rsoil(1:nmax)   ,&
  556.  1 2                                 phroot(1:nmax,:)  ,hrr(1:nmax)         ,phsoil(1:nmax,:),cc(1:nmax)      ,&
  557.  1 2                                 cg(1:nmax)        ,satcap(1:nmax,:)    ,snow(1:nmax,:)  ,dtc(1:nmax)     ,&
  558.  1 2                                 dtg(1:nmax)       ,dtm(1:nmax)         ,dqm(1:nmax)     ,stm(1:nmax,:)   ,&
  559.  1 2                                 extk(1:nmax,:,:,:),radfac(1:nmax,:,:,:),closs(1:nmax)   ,gloss(1:nmax)   ,&
  560.  1 2                                 thermk(1:nmax)    ,p1f(1:nmax)         ,p2f(1:nmax)     ,tc(1:nmax)      ,&
  561.  1 2                                 tg(1:nmax)        ,td(1:nmax)          ,capac(1:nmax,:) ,w(1:nmax,:)     ,&
  562.  1 2                                 qm(1:nmax)        ,tm(1:nmax)          ,um(1:nmax)      ,vm(1:nmax)      ,&
  563.  1 2                                 psur(1:nmax)      ,ppc(1:nmax)         ,ppl(1:nmax)     ,radn(1:nmax,:,:),&
  564.  1 2                                 itype(1:nmax)     ,dtc3x               ,mon (1:nmax)    ,nmax            ,&
  565.  1 2                                 nmax              ,zlt2(1:nmax,:)      ,green2(1:nmax,:),chil2(1:nmax,:) ,&
  566.  1 2                                 rstpar2(1:nmax,:,:),topt2(1:nmax,:)    ,tll2(1:nmax,:)  ,tu2(1:nmax,:)   ,&
  567.  1 2                                 defac2(1:nmax,:)  ,ph12(1:nmax,:)      ,ph22(1:nmax,:)  )
  568.  1 2                            ncount=0
  569.  1 2 3--------<                 DO i=1,nCols
  570.  1 2 3                             IF(imask(i).GE.1_i8) THEN
  571.  1 2 3                                ncount=ncount+1
  572.  1 2 3                                tm (ncount  )=gt  (i,1)
  573.  1 2 3                                qm (ncount  )=gq  (i,1)
  574.  1 2 3                                gmt(ncount,1)=tmtx(i,1,1)
  575.  1 2 3                                gmt(ncount,2)=tmtx(i,1,2)
  576.  1 2 3                                gmt(ncount,3)=tmtx(i,1,3)
  577.  1 2 3                                gmq(ncount,1)=qmtx(i,1,1)
  578.  1 2 3                                gmq(ncount,2)=qmtx(i,1,2)
  579.  1 2 3                                gmq(ncount,3)=qmtx(i,1,3)
  580.  1 2 3                                gmu(ncount,1)=umtx(i,1,1)
  581.  1 2 3                                gmu(ncount,2)=umtx(i,1,2)
  582.  1 2 3                                gmu(ncount,3)=umtx(i,1,3)
  583.  1 2 3                                gmu(ncount,4)=umtx(i,1,4)
  584.  1 2 3                             END IF
  585.  1 2 3-------->                 END DO
  586.  1 2---------->              END DO
  587.  1 Vr2--------<              DO i=1,nmax
  588.  1 Vr2                          capac(i,1)=capacm(i,1)
  589.  1 Vr2                          capac(i,2)=capacm(i,2)
  590.  1 Vr2                          w    (i,1)=wm    (i,1)
  591.  1 Vr2                          w    (i,2)=wm    (i,2)
  592.  1 Vr2                          w    (i,3)=wm    (i,3)
  593.  1 Vr2 A-----<>                 td   (i)  =tdm   (i)
  594.  1 Vr2 A-----<>                 tc   (i)  =tcm   (i)
  595.  1 Vr2                          IF(ind.EQ.1) THEN
  596.  1 Vr2                             tmin (i) =tg (i)
  597.  1 Vr2                          ELSE
  598.  1 Vr2                             tmax (i) =tg (i)
  599.  1 Vr2                          END IF
  600.  1 Vr2                          tg   (i) =tgm(i)
  601.  1 Vr2-------->              END DO
  602.  1------------>           END DO
  603.  Vr4----------<           DO i=1,nmax
  604.  Vr4                         td   (i) =0.9_r8*0.5_r8*(tmax(i)+tmin(i))+0.1_r8*tdm(i)
  605.  Vr4                         tdm  (i) =td(i)
  606.  Vr4                         td0  (i) =td(i)
  607.  Vr4---------->           END DO
  608.                           !
  609.                           !     this is a start of equilibrium tg,tc comp.
  610.                           !
  611.                           ncount=0
  612.  1------------<           DO i=1,nCols
  613.  1                           IF(imask(i).GE.1_i8) THEN
  614.  1                              ncount=ncount+1
  615.  1                              cosz(ncount)    =zenith(i)
  616.  1                           END IF
  617.  1------------>           END DO
  618.  1------------<           DO i=1,nmax
  619.  1                           IF(cosz(i).LT.0.0e0_r8) THEN
  620.  1                              tgm  (i)  =tmin(i)
  621.  1                              tg0  (i)  =tmin(i)
  622.  1                           END IF
  623.  1------------>           END DO
  624.                           CALL radalb ( &
  625.                                nmax              ,mon(1:nmax)         ,nmax                ,itype(1:nmax)       , &
  626.                                tc(1:nmax)          ,tg(1:nmax)          ,capac(1:nmax,:)     , &
  627.                                satcap(1:nmax,:)  ,extk(1:nmax,:,:,:)  ,radfac(1:nmax,:,:,:),closs(1:nmax)       , &
  628.                                gloss(1:nmax)     ,thermk(1:nmax)      ,p1f(1:nmax)         ,p2f(1:nmax)         , &
  629.                                zlwup(1:nmax)     ,salb(1:nmax,:,:)    ,tgeff(1:nmax)       ,cosz(1:nmax)        , &
  630.                                nsx(1:nmax)       ,latitu    )
  631.                        END IF
  632.                     END IF
  633.                     IF(nmax.GE.1) THEN
  634.                        ncount=0
  635.  1------------<        DO i=1,nCols
  636.  1                        IF(imask(i).GE.1_i8) THEN
  637.  1                           ncount=ncount+1
  638.  1                           !
  639.  1                           !     this is for radiation interpolation
  640.  1                           !
  641.  1                           IF(cosz(ncount).GE.0.01746e0_r8 ) THEN
  642.  1                              radn(ncount,1,1)=xvisb (i)
  643.  1                              radn(ncount,1,2)=xvisd (i)
  644.  1                              radn(ncount,2,1)=xnirb (i)
  645.  1                              radn(ncount,2,2)=xnird (i)
  646.  1                           ELSE
  647.  1                              radn(ncount,1,1)=0.0e0_r8
  648.  1                              radn(ncount,1,2)=0.0e0_r8
  649.  1                              radn(ncount,2,1)=0.0e0_r8
  650.  1                              radn(ncount,2,2)=0.0e0_r8
  651.  1                           END IF
  652.  1                           radn(ncount,3,1)=0.0e0_r8
  653.  1                           radn(ncount,3,2)=dlwbot(i)
  654.  1                           !
  655.  1                           !     precipitation
  656.  1                           !
  657.  1                           ppl (ncount)    =ppli  (i)
  658.  1                           ppc (ncount)    =ppci  (i)
  659.  1                        END IF
  660.  1------------>        END DO
  661.                        CALL fysiks(&
  662.                             vcover(1:nmax,:)  ,z0x(1:nmax)         ,d(1:nmax)       ,rdc(1:nmax)     ,&
  663.                             rbc(1:nmax)       ,z0(1:nmax)          ,jdt             ,latitu          ,&
  664.                             bps(1:nmax)       ,psb(1:nmax)         ,dzm(1:nmax)     ,em(1:nmax)      ,&
  665.                             gmt(1:nmax,:)     ,gmq(1:nmax,:)       ,gmu(1:nmax,:)   ,cu(1:nmax)      ,&
  666.                             cuni(1:nmax)      ,ctni(1:nmax)        ,ustar(1:nmax)   ,cosz(1:nmax)    ,&
  667.                             sinclt(1:nmax)    ,rhoair(1:nmax)      ,psy(1:nmax)     ,rcp(1:nmax)     ,&
  668.                             wc(1:nmax)        ,wg(1:nmax)          ,fc(1:nmax)      ,fg(1:nmax)      ,&
  669.                             hr(1:nmax)        ,ect(1:nmax)         ,eci(1:nmax)     ,egt(1:nmax)     ,&
  670.                             egi(1:nmax)       ,egs(1:nmax)         ,ec(1:nmax)      ,eg(1:nmax)      ,&
  671.                             hc(1:nmax)        ,hg(1:nmax)          ,ecidif(1:nmax)  ,egidif(1:nmax)  ,&
  672.                             ecmass(1:nmax)    ,egmass(1:nmax)      ,etmass(1:nmax)  ,hflux(1:nmax)   ,&
  673.                             chf(1:nmax)       ,shf(1:nmax)         ,fluxef(1:nmax)  ,roff(1:nmax)    ,&
  674.                             drag(1:nmax)      ,ra(1:nmax)          ,rb(1:nmax)      ,rd(1:nmax)      ,&
  675.                             rc(1:nmax)        ,rg(1:nmax)          ,tcta(1:nmax)    ,tgta(1:nmax)    ,&
  676.                             ta(1:nmax)        ,ea(1:nmax)          ,etc(1:nmax)     ,etg(1:nmax)     ,&
  677.                             btc(1:nmax)       ,btg(1:nmax)         ,u2(1:nmax)      ,radt(1:nmax,:)  ,&
  678.                             par(1:nmax,:)     ,pd(1:nmax,:)        ,rst(1:nmax,:)   ,rsoil(1:nmax)   ,&
  679.                             phroot(1:nmax,:)  ,hrr(1:nmax)         ,phsoil(1:nmax,:),cc(1:nmax)      ,&
  680.                             cg(1:nmax)        ,satcap(1:nmax,:)    ,snow(1:nmax,:)  ,dtc(1:nmax)     ,&
  681.                             dtg(1:nmax)       ,dtm(1:nmax)         ,dqm(1:nmax)     ,stm(1:nmax,:)   ,&
  682.                             extk(1:nmax,:,:,:),radfac(1:nmax,:,:,:),closs(1:nmax)   ,gloss(1:nmax)   ,&
  683.                             thermk(1:nmax)    ,p1f(1:nmax)         ,p2f(1:nmax)     ,tc(1:nmax)      ,&
  684.                             tg(1:nmax)        ,td(1:nmax)          ,capac(1:nmax,:) ,w(1:nmax,:)     ,&
  685.                             qm(1:nmax)        ,tm(1:nmax)          ,um(1:nmax)      ,vm(1:nmax)      ,&
  686.                             psur(1:nmax)      ,ppc(1:nmax)         ,ppl(1:nmax)     ,radn(1:nmax,:,:),&
  687.                             itype(1:nmax)     ,dtc3x               ,mon (1:nmax)    ,nmax            ,&
  688.                             nmax              ,zlt2(1:nmax,:)      ,green2(1:nmax,:),chil2(1:nmax,:) ,&
  689.                             rstpar2(1:nmax,:,:),topt2(1:nmax,:)    ,tll2(1:nmax,:)  ,tu2(1:nmax,:)   ,&
  690.                             defac2(1:nmax,:)  ,ph12(1:nmax,:)      ,ph22(1:nmax,:)  )
  691.                     END IF
  692.                     !
  693.                     !     sib time integaration and time filter
  694.                     !
  695.  Vr4----------<     DO i=1,nmax
  696.  Vr4                   !tm(i)=ABS(ta(i))/bps(i)
  697.  Vr4                   !qm(i)=0.622e0_r8*EXP(21.65605e0_r8 -5418.0e0_r8 /tm(i))/gps(i)
  698.  Vr4                   qm(i)=MAX(1.0e-12_r8,qm(i))
  699.  Vr4---------->     END DO
  700.                     CALL sextrp ( &
  701.                          td    ,tg    ,tc    ,w     ,capac ,td0   ,tg0   ,tc0   ,w0    , &
  702.                          capac0,tdm   ,tgm   ,tcm   ,wm    ,capacm,istrt ,ncols ,nmax  , &
  703.                          epsflt,intg  ,latitu,tm0    ,qm0    ,tm    ,qm    ,tmm    ,qmm    )
  704.                     !
  705.                     !     fix soil moisture at selected locations
  706.                     !
  707.  1------------<     DO i=1,nmax
  708.  1                     IF(ssib(i).GT.0.0_r8)THEN
  709.  1                        qm(i)=MAX(1.0e-12_r8,qm(i))
  710.  1                        w0(i,1)=ssib(i)
  711.  1                        w0(i,2)=ssib(i)
  712.  1                        w0(i,3)=ssib(i)
  713.  1                        wm(i,1)=ssib(i)
  714.  1                        wm(i,2)=ssib(i)
  715.  1                        wm(i,3)=ssib(i)
  716.  1                     END IF
  717.  1------------>     END DO
  718.                     ncount=0
  719.  1------------<     DO i=1,nCols
  720.  1                     IF(imask(i).GE.1_i8) THEN
  721.  1                        ncount=ncount+1
  722.  1                        tmtx(i,1,3)=gmt(ncount,3)
  723.  1                        qmtx(i,1,3)=gmq(ncount,3)
  724.  1                        umtx(i,1,3)=gmu(ncount,3)
  725.  1                        umtx(i,1,4)=gmu(ncount,4)
  726.  1                        tsea(i)    =tgeff(ncount)
  727.  1                        z0x(ncount)=z0(ncount)
  728.  1                     END IF
  729.  1------------>     END DO
  730.                     !
  731.                     !     sea or sea ice
  732.                     ! gu gv gps colrad sigki delsig sens evap umom vmom rmi rhi cond stor zorl rnet ztn2 THETA_2M VELC_2m MIXQ_2M
  733.                     ! THETA_10M VELC_10M MIXQ_10M
  734.                     ! including case 1D physics
  735.  1------------<     DO i=1,nCols
  736.  1                     IF(mskant(i) == 1_i8)THEN
  737.  1                        xsea (i) = tseam(i)
  738.  1                        tsfc (i) = tsfcm(i)
  739.  1                        qsfc (i) = qsfcm(i)
  740.  1                     END IF   
  741.  1------------>     END DO
  742.                 
  743.                     CALL seasfc( &
  744.                             tmtx  (1:nCols,:,:)  ,umtx  (1:nCols,:,:),qmtx  (1:nCols,:,:)  ,&
  745.                             kmax                 ,kmax               ,slrad (1:nCols)      ,&
  746.                             tsurf (1:nCols)      ,qsurf (1:nCols)    ,gu    (1:nCols,1)    ,&
  747.                             gv    (1:nCols,1)    ,gt    (1:nCols,1)  ,gq    (1:nCols,1)    ,&
  748.                             gps   (1:nCols)      ,xsea  (1:nCols)    ,dtc3x                ,&
  749.                             SIN(colrad(1:nCols)) ,sigki (1)          ,delsig(1)            ,&
  750.                             sens  (1:nCols)      ,evap  (1:nCols)    ,umom  (1:nCols)      ,&
  751.                             vmom  (1:nCols)      ,rmi   (1:nCols)    ,rhi   (1:nCols)      ,&
  752.                             cond  (1:nCols)      ,stor  (1:nCols)    ,zorl  (1:nCols)      ,&
  753.                             nCols              ,speedm(1:nCols)      ,&
  754.                             Ustarm(1:nCols)      ,z0sea (1:nCols)    ,rho   (1:nCols)      ,&
  755.                 	    qsfc  (1:nCols)      ,tsfc  (1:nCols)    ,mskant(1:nCols)       )
  756.                 
  757.  1------------<     DO i=1,nCols
  758.  1                     IF(mskant(i) == 1_i8 .and. tsea(i).LE.0.0e0_r8.AND.tsurf(i).LT.tice+0.01e0_r8 ) THEN
  759.  1                  	  IF(intg.EQ.2) THEN
  760.  1                  	     IF(istrt.EQ.0) THEN
  761.  1                  		tseam(i)=filta*tsea (i) + epsflt*(tseam(i)+xsea(i))
  762.  1                  		qsfc (i)=MAX(1.0e-12_r8,qsfc(i))
  763.  1                  		tsfcm(i)=filta*tsfc0 (i) + epsflt*(tsfcm(i)+tsfc(i))
  764.  1                  		qsfcm(i)=filta*qsfc0 (i) + epsflt*(qsfcm(i)+qsfc(i))
  765.  1                  	     END IF
  766.  1                  	     tsea (i) = xsea(i)
  767.  1                  	     qsfc (i) = MAX(1.0e-12_r8,qsfc(i))
  768.  1                  	     tsfc0(i) = tsfc(i)
  769.  1                  	     qsfc0(i) = qsfc(i)
  770.  1                  	  ELSE
  771.  1                  	     tsea (i) = xsea(i)
  772.  1                  	     tseam(i) = xsea(i)
  773.  1                  	     qsfc (i) = MAX(1.0e-12_r8,qsfc(i))
  774.  1                  	     tsfc0(i) = tsfc(i)
  775.  1                  	     qsfc0(i) = qsfc(i)
  776.  1                  	     tsfcm(i) = tsfc(i)
  777.  1                  	     qsfcm(i) = qsfc(i)
  778.  1                  	  END IF
  779.  1                     END IF
  780.  1                     IF(mskant(i) == 1_i8 .and. tsea(i).LT.0.0e0_r8.AND.tsurf(i).GE.tice+0.01e0_r8) THEN
  781.  1                  	  tseam(i) = tsea (i)
  782.  1                  	  tsfcm(i) = tsfc0(i)
  783.  1                  	  qsfcm(i) = qsfc0(i)
  784.  1                     END IF
  785.  1------------>     END DO
  786.                 
  787.                   END SUBROUTINE SSiB_Driver
  788.                 
  789.                   SUBROUTINE CopySurfaceData(itype,mon,colrad2,xday,idatec,nsx,nCols,nmax,latitu)
  790.                     INTEGER      , INTENT(IN   ) :: nCols
  791.                     INTEGER      , INTENT(IN   ) :: nmax
  792.                     INTEGER      , INTENT(IN   ) :: latitu
  793.                     INTEGER      , INTENT(in )   :: itype   (nCols)
  794.                     INTEGER      , INTENT(in )   :: mon     (nCols)
  795.                     REAL(KIND=r8), INTENT(in )   :: colrad2 (nCols)
  796.                     REAL(KIND=r8), INTENT(in )   :: xday
  797.                     INTEGER      , INTENT(in )   :: idatec(4)
  798.                     INTEGER      , INTENT(inout) :: nsx     (nCols)
  799.                     INTEGER :: i,j
  800.  A-----------<>     xcover = xcover_fixed
  801.  A-----------<>     zlt    = zlt_fixed
  802.  A-----------<>     green  = green_fixed
  803.  A-----------<>     ph2    = ph2_fixed
  804.  A-----------<>     ph1    = ph1_fixed
  805.  A-----------<>     defac  = defac_fixed
  806.  A-----------<>     tu     = tu_fixed
  807.  A-----------<>     tll    = tll_fixed
  808.  A-----------<>     topt   = topt_fixed
  809.  A-----------<>     rstpar = rstpar_fixed
  810.  A-----------<>     chil   = chil_fixed
  811.  1------------<     DO j=1,icg
  812.  1 Vpr2-------<        DO i=1,nmax
  813.  1 Vpr2                   vcover_gbl (i,latitu,j) =  xcover_fixed(itype(i),mon(i),j)
  814.  1 Vpr2                   zlt_gbl    (i,latitu,j) =  zlt_fixed   (itype(i),mon(i),j)
  815.  1 Vpr2                   green_gbl  (i,latitu,j) =  green_fixed (itype(i),mon(i),j)
  816.  1 Vpr2                   chil_gbl   (i,latitu,j) =  chil_fixed  (itype(i),j)
  817.  1 Vpr2                   topt_gbl   (i,latitu,j) =  topt_fixed  (itype(i),j)
  818.  1 Vpr2                   tll_gbl    (i,latitu,j) =  tll_fixed   (itype(i),j)
  819.  1 Vpr2                   tu_gbl     (i,latitu,j) =  tu_fixed    (itype(i),j)
  820.  1 Vpr2                   defac_gbl  (i,latitu,j) =  defac_fixed (itype(i),j)
  821.  1 Vpr2                   ph1_gbl    (i,latitu,j) =  ph1_fixed   (itype(i),j)
  822.  1 Vpr2                   ph2_gbl    (i,latitu,j) =  ph2_fixed   (itype(i),j)
  823.  1 Vpr2                   rstpar_gbl (i,latitu,j,1)= rstpar_fixed(itype(i),j,1)
  824.  1 Vpr2                   rstpar_gbl (i,latitu,j,2)= rstpar_fixed(itype(i),j,2)
  825.  1 Vpr2                   rstpar_gbl (i,latitu,j,3)= rstpar_fixed(itype(i),j,3)
  826.  1 Vpr2------->        END DO
  827.  1------------>     END DO
  828.                     CALL wheat (latitu,itype ,nmax  ,colrad2 ,mon ,xday   ,yrl   , &
  829.                          idatec,monl  ,nsx    )
  830.                 
  831.                   END SUBROUTINE CopySurfaceData
  832.                   ! airmod :alteration of aerodynamic transfer properties in case of snow
  833.                   !         accumulation.
  834.                   !
  835.                 
  836.                 
  837.                 
  838.                   SUBROUTINE airmod (tg, capac, z0x, d, rdc, rbc, itype, &
  839.                        mon, nmax, ncols)
  840.                     !
  841.                     !
  842.                     !-----------------------------------------------------------------------
  843.                     !       input parameters
  844.                     !-----------------------------------------------------------------------
  845.                     !   tg............ground temperature
  846.                     !   tf............freezing point
  847.                     !   z2............height of canopy top
  848.                     !   capac(cg).....liquid water stored on canopy/ground cover foliage
  849.                     !                                                            (m)
  850.                     !   d.............displacement height                        (m)
  851.                     !   z0x...........roughness length                           (m)
  852.                     !   rdc...........constant related to aerodynamic resistance
  853.                     !                 between ground and canopy air space
  854.                     !   rbc...........constant related to bulk boundary layer
  855.                     !                 resistance
  856.                     !-----------------------------------------------------------------------
  857.                     !      output parameters
  858.                     !-----------------------------------------------------------------------
  859.                     !   d.............displacement height                        (m)
  860.                     !   z0x...........roughness length                           (m)
  861.                     !   rdc...........constant related to aerodynamic resistance
  862.                     !                 between ground and canopy air space
  863.                     !   rbc...........constant related to bulk boundary layer
  864.                     !                 resistance
  865.                     !-----------------------------------------------------------------------
  866.                     !=======================================================================
  867.                     !   ncols.........Numero de ponto por faixa de latitude
  868.                     !   ityp..........Numero do tipo de solo      13
  869.                     !   imon..........Numero maximo de meses no ano (12)
  870.                     !   mon...........Numero do mes do ano (1-12)
  871.                     !   nmax
  872.                     !   xd............Deslocamento do plano zero (m)
  873.                     !   itype.........Classe de textura do solo
  874.                     !=======================================================================
  875.                     INTEGER, INTENT(in   ) :: ncols
  876.                     INTEGER, INTENT(in   ) :: mon(ncols)
  877.                     INTEGER, INTENT(in   ) :: nmax
  878.                     !
  879.                     !     vegetation and soil parameters
  880.                     !
  881.                     INTEGER, INTENT(in   ) :: itype (ncols)
  882.                     REAL(KIND=r8),    INTENT(inout) :: z0x   (ncols)
  883.                     REAL(KIND=r8),    INTENT(inout) :: d     (ncols)
  884.                     REAL(KIND=r8),    INTENT(inout) :: rdc   (ncols)
  885.                     REAL(KIND=r8),    INTENT(inout) :: rbc   (ncols)
  886.                     !
  887.                     !     prognostic variables
  888.                     !
  889.                     REAL(KIND=r8),    INTENT(in   ) :: tg   (ncols)
  890.                     REAL(KIND=r8),    INTENT(in   ) :: capac(ncols,2)
  891.                     !
  892.                     REAL(KIND=r8)    :: sdep(ncols)
  893.                     REAL(KIND=r8)    :: xz  (ncols)
  894.                     !
  895.                     INTEGER :: i
  896.                     INTEGER :: ntyp
  897.                 
  898.  1------------<     DO i = 1, nmax
  899.  1                     IF( (tg(i) <= tf) .AND. (capac(i,2) >= 0.001_r8) )THEN
  900.  1                        ntyp=itype(i)
  901.  1                        xz  (i)=z2(ntyp,mon(i))
  902.  1                        sdep(i)=capac(i,2)*5.0_r8
  903.  1                        sdep(i)=MIN( sdep(i) , xz(i)*0.95_r8 )
  904.  1                        d  (i)=xz (i)-( xz(i)- d(i) )/xz(i)*(xz(i)-sdep(i))
  905.  1                        z0x(i)=z0x(i)/( xz(i)-xd(ntyp,mon(i)))*(xz(i)-d   (i))
  906.  1                        rdc(i)=rdc(i)*( xz(i)-sdep(i) )/xz(i)
  907.  1                        rbc(i)=rbc(i)*xz(i)/( xz(i)-sdep(i) )
  908.  1                     END IF
  909.  1------------>     END DO
  910.                   END SUBROUTINE airmod
  911.                 
  912.                 
  913.                 
  914.                 
  915.                 
  916.                   SUBROUTINE temres(&
  917.                        bps   ,psb   ,em    ,gmt   ,gmq   ,psy   ,rcp   ,wc    ,wg    , &
  918.                        fc    ,fg    ,hr    ,hgdtg ,hgdtc ,hgdtm ,hcdtg ,hcdtc ,hcdtm , &
  919.                        egdtg ,egdtc ,egdqm ,ecdtg ,ecdtc ,ecdqm ,deadtg,deadtc,deadqm, &
  920.                        ect   ,eci   ,egt   ,egi   ,egs   ,ec    ,eg    ,hc    ,hg    , &
  921.                        ecidif,egidif,ra    ,rb    ,rd    ,rc    ,rg    ,ta    ,ea    , &
  922.                        etc   ,etg   ,btc   ,btg   ,radt  ,rst   ,rsoil ,hrr   ,cc    , &
  923.                        cg    ,satcap,dtc   ,dtg   ,dtm   ,dqm   ,thermk,tc    ,tg    , &
  924.                        td    ,capac ,qm    ,tm    ,psur  ,dtc3x , &
  925.                        nmax  ,vcover,ncols )
  926.                     !
  927.                     !-----------------------------------------------------------------------
  928.                     ! temres :performs temperature tendency equations with interception loss.
  929.                     !-----------------------------------------------------------------------
  930.                     !     ncols.......Numero de ponto por faixa de latitude
  931.                     !     ityp........numero das classes de solo 13
  932.                     !     imon........Numero maximo de meses no ano (12)
  933.                     !     icg.........Parametros da vegetacao (icg=1 topo e icg=2 base)
  934.                     !     pie.........Constante Pi=3.1415926e0
  935.                     !     stefan .....Constante de Stefan Boltzmann
  936.                     !     cp..........specific heat of air (j/kg/k)
  937.                     !     hl..........heat of evaporation of water   (j/kg)
  938.                     !     grav........gravity constant      (m/s**2)
  939.                     !     tf..........Temperatura de congelamento (K)
  940.                     !     epsfac......Constante 0.622 Razao entre as massas moleculares do vapor
  941.                     !                 de agua e do ar seco
  942.                     !     dtc3x.......time increment dt
  943.                     !     nmax........
  944.                     !     xcover......Fracao de cobertura vegetal icg=1 topo
  945.                     !     xcover......Fracao de cobertura vegetal icg=2 base
  946.                     !     vcover......Fracao de cobertura vegetal icg=1 topo
  947.                     !     vcover......Fracao de cobertura vegetal icg=2 topo
  948.                     !     qm..........specific humidity of reference (fourier)
  949.                     !     tm..........Temperature of reference (fourier)
  950.                     !     psur........surface pressure in mb
  951.                     !     tc..........Temperatura da copa "dossel" canopy leaf temperature(K)
  952.                     !     tg..........Temperatura da superficie do solo ground temperature (K)
  953.                     !     td .........Temperatura do solo profundo (K)
  954.                     !     capac(iv)...Agua interceptada iv=1 no dossel "water store capacity of leaves"(m)
  955.                     !     capac(iv)...Agua interceptada iv=2 na cobertura do solo (m)
  956.                     !     ra..........Resistencia Aerodinamica (s/m)
  957.                     !     rb..........bulk boundary layer resistance             (s/m)
  958.                     !     rd..........aerodynamic resistance between ground
  959.                     !                 and canopy air space                       (s/m)
  960.                     !     rc..........Resistencia do topo da copa (s/m)
  961.                     !     rg..........Resistencia da base da copa (s/m)
  962.                     !     ta..........Temperatura no nivel de fonte de calor do dossel (K)
  963.                     !     ea..........Pressao de vapor
  964.                     !     etc.........Pressure of vapor at top of the copa
  965.                     !     etg.........Pressao de vapor no base da copa
  966.                     !     btc.........btc(i)=EXP(30.25353  -5418.0  /tc(i))/(tc(i)*tc(i)).
  967.                     !     btg.........btg(i)=EXP(30.25353  -5418.0  /tg(i))/(tg(i)*tg(i))
  968.                     !     radt........net heat received by canopy/ground vegetation
  969.                     !     rst.........Resisttencia Estomatica "Stomatal resistence" (s/m)
  970.                     !     rsoil ......Resistencia do solo (s/m)
  971.                     !     hrr.........rel. humidity in top layer
  972.                     !     cc..........heat capacity of the canopy
  973.                     !     cg..........heat capacity of the ground
  974.                     !     satcap......saturation liquid water capacity         (m)
  975.                     !     dtc.........dtc(i)=pblsib(i,2,5)*dtc3x
  976.                     !     dtg.........dtg(i)=pblsib(i,1,5)*dtc3x
  977.                     !     dtm.........dtm(i)=pblsib(i,3,5)*dtc3x
  978.                     !     dqm.........dqm(i)=pblsib(i,4,5)*dtc3x
  979.                     !     thermk......canopy emissivity
  980.                     !     ect.........Transpiracao(J/m*m)
  981.                     !     eci.........Evaporacao da agua interceptada (J/m*m)
  982.                     !     egt.........Transpiracao na base da copa (J/m*m)
  983.                     !     egi.........Evaporacao da neve (J/m*m)
  984.                     !     egs.........Evaporacao do solo arido (J/m*m)
  985.                     !     ec..........Soma da Transpiracao e Evaporacao da agua interceptada pelo
  986.                     !                 topo da copa   ec   (i)=eci(i)+ect(i)
  987.                     !     eg..........Soma da transpiracao na base da copa +  Evaporacao do solo arido
  988.                     !                 +  Evaporacao da neve  " eg   (i)=egt(i)+egs(i)+egi(i)"
  989.                     !     hc..........total sensible heat lost of top from the veggies.
  990.                     !     hg..........total sensible heat lost of base from the veggies.
  991.                     !     ecidif......check if interception loss term has exceeded canopy storage
  992.                     !                 ecidif(i)=MAX(0.0   , eci(i)-capac(i,1)*hl3 )
  993.                     !     egidif......check if interception loss term has exceeded canopy storage
  994.                     !                 ecidif(i)=MAX(0.0   , egi(i)-capac(i,1)*hl3 )
  995.                     !     hgdtg ......n.b. fluxes expressed in joules m-2
  996.                     !     hgdtc.......n.b. fluxes expressed in joules m-2
  997.                     !     hgdtm.......n.b. fluxes expressed in joules m-2
  998.                     !     hcdtg.......n.b. fluxes expressed in joules m-2
  999.                     !     hcdtc.......n.b. fluxes expressed in joules m-2
 1000.                     !     hcdtm.......n.b. fluxes expressed in joules m-2
 1001.                     !     egdtg.......partial derivative calculation for latent heat
 1002.                     !     egdtc.......partial derivative calculation for latent heat
 1003.                     !     egdqm.......partial derivative calculation for latent heat
 1004.                     !     ecdtg ......partial derivative calculation for latent heat
 1005.                     !     ecdtc ......partial derivative calculation for latent heat
 1006.                     !     ecdqm.......partial derivative calculation for latent heat
 1007.                     !     deadtg......
 1008.                     !     deadtc......
 1009.                     !     deadqm......
 1010.                     !     bps.........
 1011.                     !     psb.........
 1012.                     !     em..........Pressao de vapor da agua
 1013.                     !     gmt.........
 1014.                     !     gmq.........specific humidity of reference (fourier)
 1015.                     !     psy.........(cp/(hl*epsfac))*psur(i)
 1016.                     !     rcp.........densidade do ar vezes o calor especifico do ar
 1017.                     !     wc..........Minimo entre 1 e a razao entre a agua interceptada pelo
 1018.                     !                 indice de area foliar no topo da copa
 1019.                     !     wg..........Minimo entre 1 e a razao entre a agua interceptada pelo
 1020.                     !                 indice de area foliar na base da copa
 1021.                     !     fc..........Condicao de oravalho 0 ou 1 na topo da copa
 1022.                     !     fg..........Condicao de oravalho 0 ou 1 na base da copa
 1023.                     !     hr..........rel. humidity in top layer
 1024.                     !-----------------------------------------------------------------------
 1025.                 
 1026.                     INTEGER, INTENT(in   ) :: ncols
 1027.                 
 1028.                     REAL(KIND=r8),    INTENT(in   ) :: dtc3x
 1029.                     INTEGER, INTENT(in   ) :: nmax
 1030.                     !
 1031.                     !     vegetation and soil parameters
 1032.                     !
 1033.                     REAL(KIND=r8),    INTENT(in) :: vcover(ncols,icg)
 1034.                     !
 1035.                     !     the size of working area is ncols*187
 1036.                     !     atmospheric parameters as boudary values for sib
 1037.                     !
 1038.                     REAL(KIND=r8), INTENT(in   ) :: qm  (ncols)
 1039.                     REAL(KIND=r8), INTENT(in   ) :: tm  (ncols)
 1040.                     REAL(KIND=r8), INTENT(in   ) :: psur(ncols)
 1041.                     !
 1042.                     !     prognostic variables
 1043.                     !
 1044.                     REAL(KIND=r8), INTENT(in   ) :: tc   (ncols)
 1045.                     REAL(KIND=r8), INTENT(in   ) :: tg   (ncols)
 1046.                     REAL(KIND=r8), INTENT(in   ) :: td   (ncols)
 1047.                     REAL(KIND=r8), INTENT(in   ) :: capac(ncols,2)
 1048.                     !
 1049.                     !     variables calculated from above and ambient conditions
 1050.                     !
 1051.                     REAL(KIND=r8), INTENT(in   ) :: ra    (ncols)
 1052.                     REAL(KIND=r8), INTENT(in   ) :: rb    (ncols)
 1053.                     REAL(KIND=r8), INTENT(in   ) :: rd    (ncols)
 1054.                     REAL(KIND=r8), INTENT(inout  ) :: rc    (ncols)
 1055.                     REAL(KIND=r8), INTENT(inout  ) :: rg    (ncols)
 1056.                     REAL(KIND=r8), INTENT(inout  ) :: ta    (ncols)
 1057.                     REAL(KIND=r8), INTENT(inout  ) :: ea    (ncols)
 1058.                     REAL(KIND=r8), INTENT(in   ) :: etc   (ncols)
 1059.                     REAL(KIND=r8), INTENT(in   ) :: etg   (ncols)
 1060.                     REAL(KIND=r8), INTENT(in   ) :: btc   (ncols)
 1061.                     REAL(KIND=r8), INTENT(in   ) :: btg   (ncols)
 1062.                     REAL(KIND=r8), INTENT(inout) :: radt  (ncols,icg)
 1063.                     REAL(KIND=r8), INTENT(inout) :: rst   (ncols,icg)
 1064.                     REAL(KIND=r8), INTENT(in   ) :: rsoil (ncols)
 1065.                     REAL(KIND=r8), INTENT(in   ) :: hrr   (ncols)
 1066.                     REAL(KIND=r8), INTENT(in   ) :: cc    (ncols)
 1067.                     REAL(KIND=r8), INTENT(in   ) :: cg    (ncols)
 1068.                     REAL(KIND=r8), INTENT(in   ) :: satcap(ncols,icg)
 1069.                     REAL(KIND=r8), INTENT(inout  ) :: dtc   (ncols)
 1070.                     REAL(KIND=r8), INTENT(inout  ) :: dtg   (ncols)
 1071.                     REAL(KIND=r8), INTENT(inout  ) :: dtm   (ncols)
 1072.                     REAL(KIND=r8), INTENT(inout  ) :: dqm   (ncols)
 1073.                     REAL(KIND=r8), INTENT(in   ) :: thermk(ncols)
 1074.                     !
 1075.                     !     heat fluxes : c-canopy, g-ground, t-trans, e-evap  in j m-2
 1076.                     !
 1077.                     REAL(KIND=r8), INTENT(inout  ) :: ect   (ncols)
 1078.                     REAL(KIND=r8), INTENT(inout  ) :: eci   (ncols)
 1079.                     REAL(KIND=r8), INTENT(inout  ) :: egt   (ncols)
 1080.                     REAL(KIND=r8), INTENT(inout  ) :: egi   (ncols)
 1081.                     REAL(KIND=r8), INTENT(inout  ) :: egs   (ncols)
 1082.                     REAL(KIND=r8), INTENT(inout  ) :: ec    (ncols)
 1083.                     REAL(KIND=r8), INTENT(inout  ) :: eg    (ncols)
 1084.                     REAL(KIND=r8), INTENT(inout  ) :: hc    (ncols)
 1085.                     REAL(KIND=r8), INTENT(inout  ) :: hg    (ncols)
 1086.                     REAL(KIND=r8), INTENT(inout  ) :: ecidif(ncols)
 1087.                     REAL(KIND=r8), INTENT(inout  ) :: egidif(ncols)
 1088.                     !
 1089.                     !     derivatives
 1090.                     !
 1091.                     REAL(KIND=r8), INTENT(inout  ) :: hgdtg (ncols)
 1092.                     REAL(KIND=r8), INTENT(inout  ) :: hgdtc (ncols)
 1093.                     REAL(KIND=r8), INTENT(inout  ) :: hgdtm (ncols)
 1094.                     REAL(KIND=r8), INTENT(inout  ) :: hcdtg (ncols)
 1095.                     REAL(KIND=r8), INTENT(inout  ) :: hcdtc (ncols)
 1096.                     REAL(KIND=r8), INTENT(inout  ) :: hcdtm (ncols)
 1097.                     REAL(KIND=r8), INTENT(inout  ) :: egdtg (ncols)
 1098.                     REAL(KIND=r8), INTENT(inout  ) :: egdtc (ncols)
 1099.                     REAL(KIND=r8), INTENT(inout  ) :: egdqm (ncols)
 1100.                     REAL(KIND=r8), INTENT(inout  ) :: ecdtg (ncols)
 1101.                     REAL(KIND=r8), INTENT(inout  ) :: ecdtc (ncols)
 1102.                     REAL(KIND=r8), INTENT(inout  ) :: ecdqm (ncols)
 1103.                     REAL(KIND=r8), INTENT(inout  ) :: deadtg(ncols)
 1104.                     REAL(KIND=r8), INTENT(inout  ) :: deadtc(ncols)
 1105.                     REAL(KIND=r8), INTENT(inout  ) :: deadqm(ncols)
 1106.                     !
 1107.                     !     this is for coupling with closure turbulence model
 1108.                     !
 1109.                     REAL(KIND=r8), INTENT(in   ) :: bps   (ncols)
 1110.                     REAL(KIND=r8), INTENT(in   ) :: psb   (ncols)
 1111.                     REAL(KIND=r8), INTENT(in   ) :: em    (ncols)
 1112.                     REAL(KIND=r8), INTENT(in   ) :: gmt   (ncols,3)
 1113.                     REAL(KIND=r8), INTENT(in   ) :: gmq   (ncols,3)
 1114.                     REAL(KIND=r8), INTENT(in   ) :: psy   (ncols)
 1115.                     REAL(KIND=r8), INTENT(in   ) :: rcp   (ncols)
 1116.                     REAL(KIND=r8), INTENT(inout  ) :: wc    (ncols)
 1117.                     REAL(KIND=r8), INTENT(inout  ) :: wg    (ncols)
 1118.                     REAL(KIND=r8), INTENT(in   ) :: fc    (ncols)
 1119.                     REAL(KIND=r8), INTENT(in   ) :: fg    (ncols)
 1120.                     REAL(KIND=r8), INTENT(inout  ) :: hr    (ncols)
 1121.                 
 1122.                 
 1123.                     REAL(KIND=r8) :: vcover2(ncols,icg)
 1124.                 
 1125.                     REAL(KIND=r8)    :: pblsib(ncols,4,5)
 1126.                     REAL(KIND=r8)    :: coc
 1127.                     REAL(KIND=r8)    :: rsurf
 1128.                     REAL(KIND=r8)    :: cog1
 1129.                     REAL(KIND=r8)    :: cog2
 1130.                     REAL(KIND=r8)    :: d1
 1131.                     REAL(KIND=r8)    :: d2
 1132.                     REAL(KIND=r8)    :: d1i
 1133.                     REAL(KIND=r8)    :: top
 1134.                     REAL(KIND=r8)    :: ak    (ncols)
 1135.                     REAL(KIND=r8)    :: ah    (ncols)
 1136.                     REAL(KIND=r8)    :: cci   (ncols)
 1137.                     REAL(KIND=r8)    :: cgi   (ncols)
 1138.                     REAL(KIND=r8)    :: ecpot (ncols)
 1139.                     REAL(KIND=r8)    :: egpot (ncols)
 1140.                     REAL(KIND=r8)    :: ecf
 1141.                     REAL(KIND=r8)    :: egf
 1142.                     REAL(KIND=r8)    :: coct
 1143.                     REAL(KIND=r8)    :: cogt
 1144.                     REAL(KIND=r8)    :: cogs1
 1145.                     REAL(KIND=r8)    :: cogs2
 1146.                     REAL(KIND=r8)    :: psyi  (ncols)
 1147.                     REAL(KIND=r8)    :: fac1
 1148.                     REAL(KIND=r8)    :: rcdtc (ncols)
 1149.                     REAL(KIND=r8)    :: rcdtg (ncols)
 1150.                     REAL(KIND=r8)    :: rgdtc (ncols)
 1151.                     REAL(KIND=r8)    :: rgdtg (ncols)
 1152.                     REAL(KIND=r8), PARAMETER :: capi  =1.0_r8/4.0e-3_r8
 1153.                     REAL(KIND=r8)    :: timcon
 1154.                     REAL(KIND=r8)    :: timcn2
 1155.                     REAL(KIND=r8)    :: tim
 1156.                     REAL(KIND=r8)    :: dtc3xi
 1157.                     REAL(KIND=r8)    :: fak
 1158.                     REAL(KIND=r8)    :: fah
 1159.                     INTEGER :: i
 1160.                     REAL(KIND=r8)    :: stb4
 1161.                     REAL(KIND=r8)    :: stb8
 1162.                     REAL(KIND=r8)    :: hlat3
 1163.                 
 1164.                     timcon = pie/86400.0_r8
 1165.                     timcn2 = 2.0_r8   * timcon
 1166.                     tim    = 1.0_r8   + timcn2*dtc3x
 1167.                     dtc3xi = 1.0_r8   / dtc3x
 1168.                     fak    = 0.01_r8  * grav/cp
 1169.                     fah    = 0.01_r8  * grav/hl
 1170.  A-----------<>     vcover2=vcover
 1171.                 
 1172.  1------------<     DO i = 1, nmax
 1173.  1                     !
 1174.  1                     !                  --                                                   --
 1175.  1                     !                 |      razao entre a agua interceptada no topo da copa  |
 1176.  1                     !     wc = Minimo*| 1 , --------------------------------------------------|
 1177.  1                     !                 |     indice de area foliar no topo da copa             |
 1178.  1                     !                  --                                                   --
 1179.  1                     !
 1180.  1                     wc  (i)=MIN( 1.0_r8   , capac(i,1)/satcap(i,1))
 1181.  1                     !                  --                                                    --
 1182.  1                     !                 |       razao entre a agua interceptada na base da copa  |
 1183.  1                     !     wg = Minimo*| 1  ,---------------------------------------------------|
 1184.  1                     !                 |      indice de area foliar na base da copa             |
 1185.  1                     !                  --                                                    --
 1186.  1                     !
 1187.  1                     wg  (i)=MIN( 1.0_r8   , capac(i,2)/satcap(i,2))
 1188.  1                     !
 1189.  1                     ! Temperatura de congelamento (K)
 1190.  1                     !
 1191.  1                     IF (tg(i) <= tf) THEN
 1192.  1                        vcover2(i,2)=1.0_r8
 1193.  1                        wg    (i)  =MIN(1.0_r8   ,capac(i,2)*capi)
 1194.  1                        !
 1195.  1                        !     rsoil ......Resistencia do solo (s/m)
 1196.  1                        !
 1197.  1                        rst   (i,2)=rsoil(i)
 1198.  1                     END IF
 1199.  1                     !
 1200.  1                     !
 1201.  1                     !  DT     d    d[w'T']
 1202.  1                     ! ---- = --   ----------
 1203.  1                     !  Dt     dt     dz
 1204.  1                     !
 1205.  1                     !H =rho*cp*w'T'
 1206.  1                     !
 1207.  1                     !          H
 1208.  1                     !w'T' = -------
 1209.  1                     !        rho*cp
 1210.  1                     !
 1211.  1                     !  DT     d     1          dH
 1212.  1                     ! ---- = ---- --------- * -----
 1213.  1                     !  Dt     dt    rho*cp      dz
 1214.  1                     !
 1215.  1                     ! P =rho*R*T and P = rho*g*Z
 1216.  1                     !
 1217.  1                     !                           P
 1218.  1                     ! DP = rho*g*DZ and rho = ----
 1219.  1                     !                          R*T
 1220.  1                     !
 1221.  1                     ! 1             1
 1222.  1                     !----= rho*g* -----
 1223.  1                     ! DZ            DP
 1224.  1                     !
 1225.  1                     ! 1     1         1
 1226.  1                     !--- * ---- = g* -----
 1227.  1                     !rho    DZ        DP
 1228.  1                     !
 1229.  1                     !
 1230.  1                     !  DT     d      g      dH
 1231.  1                     ! ---- = ---- *----- * -----
 1232.  1                     !  Dt     dt     cp     dP
 1233.  1                     !
 1234.  1                     !           g      d
 1235.  1                     ! ak(i) = ----- * -----
 1236.  1                     !           cp     dP
 1237.  1              
 1238.  1                     !                grav            1
 1239.  1                     !ak(i) = 0.01 * ------ * ------------------
 1240.  1                     !                 cp      (psb(i)*bps(i))
 1241.  1                     !
 1242.  1                     !                                        -(R/Cp)
 1243.  1                     !                  g               sl(k)
 1244.  1                     ! ak(i) = 0.01 * ------- * -------------------------------
 1245.  1                     !                  cp        (P * (si(k) - si(k+1)))
 1246.  1                     !
 1247.  1                     ak  (i) =fak/(psb(i)*bps(i))
 1248.  1                     !
 1249.  1                     !L =rho*hl*w'Q'
 1250.  1                     !
 1251.  1                     !
 1252.  1                     !                 g                1
 1253.  1                     !ah(i) = 0.01 * ------ * --------------------------
 1254.  1                     !                 hl       (P * (si(k) - si(k+1)))
 1255.  1                     !
 1256.  1                     ah  (i) =fah/ psb(i)
 1257.  1                     !
 1258.  1                     !     cc..........heat capacity of the canopy
 1259.  1                     !     cg..........heat capacity of the ground
 1260.  1                     !
 1261.  1                     cgi (i) =1.0_r8   / cg(i)
 1262.  1                     cci (i) =1.0_r8   / cc(i)
 1263.  1                     !
 1264.  1                     ! rcp ---- densidade do ar vezes o calor especifico do ar
 1265.  1                     !
 1266.  1                     !(cp/(hl*epsfac))*psur(i)
 1267.  1                     !
 1268.  1                     psyi(i) =rcp(i)/psy(i)
 1269.  1------------>     END DO
 1270.                     !
 1271.                     !     partial derivative calculations for sensible heat
 1272.                     !
 1273.  V------------<     DO i = 1, nmax
 1274.  V                     !
 1275.  V                     !           1          1          1
 1276.  V                     ! d1     =------- + -------- + --------
 1277.  V                     !          ra(i)      rb(i)      rd(i)
 1278.  V                     !
 1279.  V                     !            rb(i)*rd(i) + ra(i)*rd(i) + ra(i)*rb(i)
 1280.  V                     ! d1     = --------------------------------------------
 1281.  V                     !                     ra(i)*rb(i)*rd(i)
 1282.  V                     !
 1283.  V                     d1     =1.0_r8/ra(i) + 1.0_r8/rb(i) + 1.0_r8/rd(i)
 1284.  V                     !
 1285.  V                     !          rcp(i)     rcp(i)     rcp(i)
 1286.  V                     ! d1i =  --------- + -------- + --------
 1287.  V                     !          ra(i)      rb(i)      rd(i)
 1288.  V                     !
 1289.  V                     !
 1290.  V                     !          rb(i)*rd(i)*rcp(i)  +   ra(i)*rd(i)*rcp(i)  +   ra(i)*rb(i)*rcp(i)
 1291.  V                     ! d1i =  ----------------------------------------------------------------------
 1292.  V                     !                              ra(i)*rb(i)*rd(i)
 1293.  V                     !
 1294.  V                     d1i    =rcp(i)/d1
 1295.  V                     !
 1296.  V                     !       --                                --
 1297.  V                     !      | tg(i)     tc(i)      tm(i)*bps(i)  |  /
 1298.  V                     !ta(i)=|------- + -------- + -------------- | /d1
 1299.  V                     !      | rd(i)      rb(i)         ra(i)     |/
 1300.  V                     !       --                                --
 1301.  V                     !
 1302.  V                     ta(i)=( tg(i)/rd(i) + tc(i)/rb(i) + tm(i)*bps(i)/ra(i) )/d1
 1303.  V                     !
 1304.  V                     !dtc3x = time increment dt
 1305.  V                     !rcp----densidade do ar vezes o calor especifico do ar
 1306.  V                     !
 1307.  V                     !
 1308.  V                     !   total sensible heat lost of top from the veggies.
 1309.  V                     !                  (tc(i)-ta(i))
 1310.  V                     !hc(i) = rcp(i) * ----------------*dt
 1311.  V                     !                      rb(i)
 1312.  V                     !
 1313.  V                     hc(i)=rcp(i) * ( tc(i) - ta(i) ) / rb(i) * dtc3x
 1314.  V                     !
 1315.  V                     !   total sensible heat lost of base from the veggies.
 1316.  V                     !
 1317.  V                     !                  (tg(i)-ta(i))
 1318.  V                     !hg(i) = rcp(i) * ---------------*dt
 1319.  V                     !                      rd(i)
 1320.  V                     !
 1321.  V                     hg(i)=rcp(i) * ( tg(i) - ta(i) ) / rd(i) * dtc3x
 1322.  V                     !                                              J
 1323.  V                     !     n.b. fluxes expressed in joules m-2  = ------
 1324.  V                     !                                             m^2
 1325.  V                     !          rcp(i)     rcp(i)     rcp(i)
 1326.  V                     ! d1i =  --------- + -------- + --------
 1327.  V                     !          ra(i)      rb(i)      rd(i)
 1328.  V                     !
 1329.  V                     !          rb(i)*rd(i)*rcp(i)  +   ra(i)*rd(i)*rcp(i)  +   ra(i)*rb(i)*rcp(i)
 1330.  V                     ! d1i =  ----------------------------------------------------------------------
 1331.  V                     !                              ra(i)*rb(i)*rd(i)
 1332.  V                     !
 1333.  V                     !                       --               --
 1334.  V                     !              d1i     |  1.0       1.0    |
 1335.  V                     !hcdtc(i) =  ------- * | ------ + -------- |
 1336.  V                     !             rb(i)    |  ra(i)     rd(i)  |
 1337.  V                     !                       --               --
 1338.  V                     !
 1339.  V                     hcdtc(i)= d1i   / rb(i)*( 1.0_r8/ra(i) + 1.0_r8/rd(i) )
 1340.  V                     !
 1341.  V                     !                -d1i
 1342.  V                     !hcdtg(i) =  ---------------
 1343.  V                     !             rb(i) * rd(i)
 1344.  V                     !
 1345.  V                     hcdtg(i)=-d1i   / ( rb(i)*rd(i) )
 1346.  V                     !
 1347.  V                     !                     ra(i)*rb(i)*rd(i)*rcp(i)
 1348.  V                     ! d1i     = --------------------------------------------
 1349.  V                     !              rb(i)*rd(i) + ra(i)*rd(i) + ra(i)*rb(i)
 1350.  V                     !
 1351.  V                     !               -d1i
 1352.  V                     ! hcdtm(i)= ----------------- * bps(i)
 1353.  V                     !            ( rb(i)*ra(i) )
 1354.  V                     !
 1355.  V                     !                          - rd(i)*rcp(i)
 1356.  V                     ! hcdtm(i)= ---------------------------------------------- * bps(i)
 1357.  V                     !              rb(i)*rd(i) + ra(i)*rd(i) + ra(i)*rb(i)
 1358.  V                     !
 1359.  V              
 1360.  V                     hcdtm(i)=-d1i   / ( rb(i)*ra(i) ) *bps(i)
 1361.  V                     !
 1362.  V                     !                        --               --
 1363.  V                     !               d1i     |  1.0       1.0    |
 1364.  V                     ! hgdtg(i) =  ------- * | ------ + -------- |
 1365.  V                     !              rd(i)    |  ra(i)     rb(i)  |
 1366.  V                     !                        --               --
 1367.  V                     !
 1368.  V                     hgdtg(i)= d1i   / rd(i)*( 1.0_r8/ra(i) + 1.0_r8/rb(i))
 1369.  V                     !
 1370.  V                     !                -d1i
 1371.  V                     !hgdtc(i) = -----------------
 1372.  V                     !            ( rd(i)*rb(i) )
 1373.  V                     !
 1374.  V                     !
 1375.  V                     hgdtc(i)=-d1i   / ( rd(i)*rb(i) )
 1376.  V                     !
 1377.  V                     !                    -d1i                (R/Cp)
 1378.  V                     ! hgdtm(i) = ----------------- *   sl(k)
 1379.  V                     !             ( rd(i)*ra(i) )
 1380.  V                     !
 1381.  V                     !
 1382.  V                     !                          - rb(i)*rcp(i)                          (R/Cp)
 1383.  V                     ! hgdtm(i)= ---------------------------------------------- * sl(k)
 1384.  V                     !              rb(i)*rd(i) + ra(i)*rd(i) + ra(i)*rb(i)
 1385.  V              
 1386.  V                     hgdtm(i)=-d1i   / ( rd(i)*ra(i) ) *bps(i)
 1387.  V                     !
 1388.  V------------>     END DO
 1389.                     !
 1390.                     !     partial derivative calculations for longwave radiation flux
 1391.                     !
 1392.                     stb4  = 4.0_r8 * stefan
 1393.                     stb8  = 8.0_r8 * stefan
 1394.                     !
 1395.  Vr4----------<     DO i = 1, nmax
 1396.  Vr4                   fac1     = vcover2(i,1)*(1.0_r8  - thermk(i))
 1397.  Vr4                   rcdtc(i) = fac1 * stb8 * tc(i)*tc(i)*tc(i)
 1398.  Vr4                   rcdtg(i) =-fac1 * stb4 * tg(i)*tg(i)*tg(i)
 1399.  Vr4                   rgdtc(i) =-fac1 * stb4 * tc(i)*tc(i)*tc(i)
 1400.  Vr4                   rgdtg(i) =        stb4 * tg(i)*tg(i)*tg(i)
 1401.  Vr4---------->     END DO
 1402.  V------------<     DO i = 1, nmax
 1403.  V                     !
 1404.  V                     !     partial derivative calculation for latent heat
 1405.  V                     !     modification for soil dryness : hr=rel. humidity in top layer
 1406.  V                     !
 1407.  V                     hr   (i)  = hrr(i)   * fg(i) + 1.0_r8 - fg(i)
 1408.  V                     !
 1409.  V                     !     fc = Condicao de oravalho 0 ou 1 na topo da copa
 1410.  V                     !
 1411.  V                     rc   (i)  = rst(i,1) * fc(i) + 2.0_r8 * rb(i)
 1412.  V                     !
 1413.  V                     !        ( 1.0_r8 - wc(i) )         wc(i)
 1414.  V                     ! coc = -------------------- + ------------------
 1415.  V                     !              rc(i)            (2.0_r8 * rb(i))
 1416.  V                     !
 1417.  V                     coc       = ( 1.0_r8 - wc(i) ) / rc(i) + wc(i)/(2.0_r8 * rb(i))
 1418.  V                     !
 1419.  V                     ! fg = Condicao de oravalho 0 ou 1 na base da copa
 1420.  V                     !
 1421.  V                     rg   (i)  = rst(i,2)*fg(i)
 1422.  V                     !
 1423.  V                     rsurf     = rsoil(i)*fg(i)
 1424.  V                     !
 1425.  V                     !     hr..........rel. humidity in top layer
 1426.  V                     !     vcover......Fracao de cobertura vegetal icg=1 topo
 1427.  V                     !     vcover......Fracao de cobertura vegetal icg=2 topo
 1428.  V                     !
 1429.  V                     !                      (1 - wg(i))            (1 - vcover(i,2))              vcover(i,2)
 1430.  V                     ! cog1 = vcover(i,2)*--------------- + hr(i)*------------------- + hr(i)*----------------------
 1431.  V                     !                     (rg(i)+rd(i))            (rsurf + rd(i))            (rsurf + rd(i) + 44)
 1432.  V                     !
 1433.  V                     cog1      =   vcover2(i,2)*(1.0_r8 - wg(i))/(rg(i)+rd(i)) &
 1434.  V                          + (1.0_r8 - vcover2(i,2))/(rsurf + rd(i)) * hr(i) &
 1435.  V                          + vcover2(i,2) / (rsurf + rd(i) + 44.0_r8) * hr(i)
 1436.  V                     !
 1437.  V                     !                      (1 - wg(i))      (1 - vcover(i,2))        vcover(i,2)
 1438.  V                     ! cog2 = vcover(i,2)*--------------- + ------------------- + ----------------------
 1439.  V                     !                     (rg(i)+rd(i))      (rsurf + rd(i))      (rsurf + rd(i) + 44)
 1440.  V                     !
 1441.  V                     cog2      = vcover2(i,2)*(1.0_r8 - wg(i))/(rg(i)+rd(i)) &
 1442.  V                          +     (1.0_r8 - vcover2(i,2))/(rsurf + rd(i)) &
 1443.  V                          +      vcover2(i,2)/(rsurf   +rd(i)+44.0_r8)
 1444.  V              
 1445.  V                     !                       (1 - wg(i))      hr(i)*(1 - vcover(i,2))      hr(i)*vcover(i,2)      wg(i)* vcover(i,2)
 1446.  V                     ! cog1 = vcover(i,2) * -------------- + ------------------------- + --------------------- + --------------------
 1447.  V                     !                      (rg(i)+rd(i))     (rsurf + rd(i))            (rsurf + rd(i) + 44)           rd(i)
 1448.  V                     !
 1449.  V                     !
 1450.  V                     cog1      = cog1 + wg(i) / rd(i)*vcover2(i,2)
 1451.  V                     !
 1452.  V                     !                      wg(i)
 1453.  V                     ! cog2      = cog2 + -------- * vcover(i,2)
 1454.  V                     !                      rd(i)
 1455.  V                     !
 1456.  V                     cog2      = cog2 + wg(i)/rd(i)*vcover2(i,2)
 1457.  V                     !
 1458.  V                     !        1.0       ( 1.0_r8 - wc(i) )         wc(i)
 1459.  V                     !d2 = --------- + -------------------- + ------------------ + cog2
 1460.  V                     !       ra(i)            rc(i)            (2.0_r8 * rb(i))
 1461.  V                     !
 1462.  V                     d2        = 1.0_r8/ra(i) + coc + cog2
 1463.  V                     !
 1464.  V                     !                                      em(i)
 1465.  V                     !top = coc * etc(i) + cog1 * etg(i) + -------
 1466.  V                     !                                      ra(i)
 1467.  V                     !
 1468.  V                     top       = coc * etc(i) + cog1 * etg(i) + em(i)/ra(i)
 1469.  V                     !
 1470.  V                     ea (i)    = top/d2
 1471.  V                     !
 1472.  V                     !       psyi(i) =rcp(i)/psy(i)
 1473.  V                     !
 1474.  V                     ! The rate of evaporation from the wetted portions of the vegetation
 1475.  V                     !
 1476.  V                     !        ( 1 - wc(i) )         wc(i)
 1477.  V                     ! coc = ---------------- + --------------
 1478.  V                     !            rc(i)          ( 2 * rb(i) )
 1479.  V                     !
 1480.  V                     !The latent heat fluxes from the canopy is defined by:
 1481.  V                     !
 1482.  V                     !
 1483.  V                     !            --        --                      --             --
 1484.  V                     !           |            |     rho(i) * cp    |  wc     1 - wc  |
 1485.  V                     !ec = LEc = | e[Tc] - ea | * -------------- * | ---- + ---------|
 1486.  V                     !           |            |       psy(i)       |  rb     rb + rc |
 1487.  V                     !            --        --                      --             --
 1488.  V                     !
 1489.  V                     ec (i)    = ( etc(i)-ea(i) )  *  coc * psyi(i) * dtc3x
 1490.  V                     !
 1491.  V                     !The latent heat fluxes from the ground is defined by:
 1492.  V                     !
 1493.  V                     !             --           --                       --        --
 1494.  V                     !            |               |      rho(i) * cp    |     1      |
 1495.  V                     ! eg = LEgs =|fh*e[Tgs] - ea | *  -------------- * |------------|
 1496.  V                     !            |               |        psy(i)       | rsurf + rd |
 1497.  V                     !             --           --                       --        --
 1498.  V                     !
 1499.  V                     eg (i)    = (etg(i)*cog1   - ea(i)*cog2   )*psyi(i)*dtc3x
 1500.  V                     !
 1501.  V                     deadtc(i) = btc(i) *  coc / d2
 1502.  V                     !
 1503.  V                     deadtg(i) = btg(i) * cog1 / d2
 1504.  V                     !
 1505.  V                     !                             psur(i)
 1506.  V                     ! deadqm(i) = epsfac * ------------------------------------------
 1507.  V                     !                       ( ( epsfac + qm(i) )**2  *  ra(i)*d2    )
 1508.  V                     !
 1509.  V                     deadqm(i) = epsfac * psur(i)/( (epsfac+qm(i))**2 * ra(i)*d2    )
 1510.  V                     !
 1511.  V                     ecdtc(i)  = (btc(i) - deadtc(i) ) * coc * psyi(i)
 1512.  V                     !
 1513.  V                     ecdtg(i)  = -deadtg(i) * coc   * psyi(i)
 1514.  V                     !
 1515.  V                     ecdqm(i)  = -deadqm(i) * coc   * psyi(i)
 1516.  V                     !
 1517.  V                     egdtg(i)  = ( btg(i) * cog1 - deadtg(i) * cog2 )*psyi(i)
 1518.  V                     !
 1519.  V                     egdtc(i)  = -deadtc(i) * cog2   * psyi(i)
 1520.  V                     !
 1521.  V                     egdqm(i)  = -deadqm(i) * cog2   * psyi(i)
 1522.  V                     !
 1523.  V------------>     END DO
 1524.                     !
 1525.                     !     solve for time changes of pbl and sib variables,
 1526.                     !     using a semi-implicit scheme.
 1527.                     !
 1528.  V------------<     DO i = 1, nmax
 1529.  V                     !
 1530.  V                     !     tg equation
 1531.  V                     !
 1532.  V                     !     cc..........heat capacity of the canopy
 1533.  V                     !     cg..........heat capacity of the ground
 1534.  V                     !
 1535.  V                     !            1.0                  1.0
 1536.  V                     ! cgi (i) = ----- = ---------------------------------
 1537.  V                     !           cg(i)     heat capacity of the ground
 1538.  V                     !
 1539.  V                     !           1.0                         1.0
 1540.  V                     ! cci (i) =------   =  --------------------------------------
 1541.  V                     !           cc(i)          heat capacity of the canopy
 1542.  V                     !
 1543.  V                     !             2 * pi * dt     s
 1544.  V                     !tim = 1.0 + ------------- = ---
 1545.  V                     !               86400.0       s
 1546.  V                     !
 1547.  V                     pblsib(i,1,1) = tim + dtc3x * cgi(i) * (hgdtg(i) + egdtg(i) + rgdtg(i))
 1548.  V                     pblsib(i,1,2) =       dtc3x * cgi(i) * (hgdtc(i) + egdtc(i) + rgdtc(i))
 1549.  V                     pblsib(i,1,3) =       dtc3x * cgi(i) * hgdtm(i)
 1550.  V                     pblsib(i,1,4) =       dtc3x * cgi(i) * egdqm(i)
 1551.  V                     !
 1552.  V                     !     tc equation
 1553.  V                     !
 1554.  V                     pblsib(i,2,1) =          dtc3x * cci(i) * ( hcdtg(i) + ecdtg(i) + rcdtg(i) )
 1555.  V                     !
 1556.  V                     pblsib(i,2,2) = 1.0_r8 + dtc3x * cci(i) * ( hcdtc(i) + ecdtc(i) + rcdtc(i) )
 1557.  V                     !
 1558.  V                     !
 1559.  V                     !               -d1i                  (R/Cp)
 1560.  V                     ! hcdtm(i)= ----------------- *  sl(k)
 1561.  V                     !            Cc(i)*( rb(i)*ra(i) )
 1562.  V                     !
 1563.  V                     pblsib(i,2,3) = dtc3x * cci(i) * hcdtm(i)
 1564.  V                     !
 1565.  V                     pblsib(i,2,4) = dtc3x * cci(i) * ecdqm(i)
 1566.  V                     !
 1567.  V                     !     tm equation
 1568.  V                     !
 1569.  V                     !                                        -(R/Cp)
 1570.  V                     !                  g               sl(k)
 1571.  V                     ! ak(i) = 0.01 * ------- * -------------------------------
 1572.  V                     !                  cp        (P * (si(k) - si(k+1)))
 1573.  V                     !
 1574.  V                     !
 1575.  V                     pblsib(i,3,1) = -dtc3x * ak(i) * ( hgdtg(i) + hcdtg(i) )
 1576.  V                     !
 1577.  V                     pblsib(i,3,2) = -dtc3x * ak(i) * ( hgdtc(i) + hcdtc(i) )
 1578.  V                     !
 1579.  V                     !
 1580.  V                     !      --   --  -(R/Cp)    --   --  -(R/Cp)
 1581.  V                     !     |  P    |           |       |
 1582.  V                     !bps  |-------|        == |sl(k)  |
 1583.  V                     !     |  P0   |           |       |
 1584.  V                     !      --   --             --   --
 1585.  V                     !
 1586.  V                     !             --   --  -(R/Cp)
 1587.  V                     !            |  P    |
 1588.  V                     !Tpot =  T * |-------|
 1589.  V                     !            |  P0   |
 1590.  V                     !             --   --
 1591.  V                     !
 1592.  V                     !
 1593.  V                     ! P =rho*R*T and P = rho*g*Z
 1594.  V                     !
 1595.  V                     !                           P
 1596.  V                     ! DP = rho*g*DZ and rho = ----
 1597.  V                     !                          R*T
 1598.  V                     !
 1599.  V                     !        P
 1600.  V                     ! DP = ----*g*DZ
 1601.  V                     !       R*T
 1602.  V                     !
 1603.  V                     !        R*T
 1604.  V                     ! DZ = ------*DP
 1605.  V                     !        g*P
 1606.  V                     !
 1607.  V                     !    1       g*P       1
 1608.  V                     !  ------ = ------ * ------
 1609.  V                     !    DZ      R*T       DP
 1610.  V                     !
 1611.  V                     !    T       g         P
 1612.  V                     !  ------ = ------ * ------
 1613.  V                     !    DZ      R         DP
 1614.  V                     !
 1615.  V                     !                                        -(R/Cp)
 1616.  V                     !                  g               sl(k)
 1617.  V                     ! ak(i) = 0.01 * ------- * -------------------------------
 1618.  V                     !                  cp        (P * (si(k) - si(k+1)))
 1619.  V                     !
 1620.  V                     !
 1621.  V                     ! pblsib(i,3,3) = gmt(i,2) - 2*dt*ak(i)*(hgdtm(i) + hcdtm(i))
 1622.  V                     !
 1623.  V                     !                             T      1
 1624.  V                     !Pbl_KMbyDZ_1  =   2*Dt * Km*---- * ----
 1625.  V                     !                             dZ     dZ
 1626.  V                     !
 1627.  V                     !                             T      1
 1628.  V                     !Pbl_KMbyDZ_1  =   2*Dt * Km*---- * ----
 1629.  V                     !                             dZ     dZ
 1630.  V                     !
 1631.  V                     !           --                                       --     --                                           --
 1632.  V                     !          |                                           |   |    Pbl_KMbyDZ_1(i,k)*Pbl_KMbyDZ_2(i,k+1)      |
 1633.  V                     !gmt(i,2) =|1.0 + Pbl_KMbyDZ_1(i,k) + Pbl_KMbyDZ_2(i,k)| - |-----------------------------------------------|
 1634.  V                     !          |                                           |   |1.0 + Pbl_KMbyDZ_1(i,k+1) + Pbl_KMbyDZ_2(i,k+1)|
 1635.  V                     !           --                                       --     --                                           --
 1636.  V              
 1637.  V                     pblsib(i,3,3) = gmt(i,2) - dtc3x * ak(i) * ( hgdtm(i) + hcdtm(i) )
 1638.  V                     pblsib(i,3,4) = 0.0_r8
 1639.  V                     !
 1640.  V                     !     qm equation
 1641.  V                     !
 1642.  V                     !
 1643.  V                     !                 g                1
 1644.  V                     !ah(i) = 0.01 * ------ * --------------------------
 1645.  V                     !                 hl       (P * (si(k) - si(k+1)))
 1646.  V                     !
 1647.  V                     pblsib(i,4,1) = - dtc3x * ah(i) * ( egdtg(i) + ecdtg(i) )
 1648.  V                     pblsib(i,4,2) = - dtc3x * ah(i) * ( egdtc(i) + ecdtc(i) )
 1649.  V                     pblsib(i,4,3) =   0.0_r8
 1650.  V                     !
 1651.  V                     pblsib(i,4,4) =   gmq(i,2) - dtc3x * ah(i) * ( egdqm(i) + ecdqm(i) )
 1652.  V                     !
 1653.  V                     !                                                           Rngs
 1654.  V                     ! radt = net heat received by canopy/ground vegetation  = --------
 1655.  V                     !                                                            dt
 1656.  V                     !
 1657.  V                     !      dTgs                          2*PI*Cgs
 1658.  V                     ! Cgs*------ = Rngs - Hgs - LHgs - ------------ * (Tgs - Td)
 1659.  V                     !      dt                            dayleg
 1660.  V                     !
 1661.  V                     !      dTgs     Rngs      Hgs     LHgs         2*PI
 1662.  V                     !     ------ = ------ - ------ - ------- - -------------- * (Tgs - Td)
 1663.  V                     !      dt       Cgs       Cgs      Cgs         dayleg
 1664.  V                     !
 1665.  V                     !               --                     --
 1666.  V                     !      dTgs    |  Rngs      Hgs     LHgs |        2*PI
 1667.  V                     !     ------ = | ------ - ------ - ------| - -------------- * (Tgs - Td)
 1668.  V                     !      dt      |  Cgs       Cgs      Cgs |        dayleg
 1669.  V                     !               --                     --
 1670.  V                     !
 1671.  V                     !               --                   --
 1672.  V                     !      dTgs    |                       |    1           2*PI
 1673.  V                     !     ------ = |  Rngs - ( Hgs + LHgs )| *------ - -------------- * (Tgs - Td)
 1674.  V                     !      dt      |                       |    Cgs        dayleg
 1675.  V                     !               --                   --
 1676.  V                     !
 1677.  V                     !                                                          cgi(i)         2*pi
 1678.  V                     !pblsib(i,1,5) = (radt(i,2)* cgi(i) - ( hg(i) + eg(i) ) * -------- )  - --------- * ( tg(i) - td(i) )
 1679.  V                     !                                                             dt          86400.0
 1680.  V                     !            2*pi
 1681.  V                     ! timcn2 = ---------
 1682.  V                     !           86400.0
 1683.  V                     pblsib(i,1,5) = (radt(i,2) - ( hg(i) + eg(i) ) * dtc3xi ) * cgi(i) - timcn2 * ( tg(i) - td(i) )
 1684.  V                     !
 1685.  V                     !      dTc
 1686.  V                     ! Cc*------ = Rnc - Hc - LHc
 1687.  V                     !      dt
 1688.  V                     !
 1689.  V                     !             --             --
 1690.  V                     !      dTc   |                 |     1
 1691.  V                     !    ------ =|Rnc - Hc - LHc   | * -----
 1692.  V                     !      dt    |                 |     Cc
 1693.  V                     !             --             --
 1694.  V                     !                 --                                     --
 1695.  V                     !                |                                   1     |     1
 1696.  V                     !pblsib(i,2,5) = |radt(i,1) - ( hc(i) + ec(i) ) * -------- | * -------
 1697.  V                     !                |                                   dt    |    cc(i)
 1698.  V                     !                 --                                     --
 1699.  V                     !                 --                                     --
 1700.  V                     !                |                                   1     |
 1701.  V                     !pblsib(i,2,5) = |radt(i,1) - ( hc(i) + ec(i) ) * -------- | * cci(i)
 1702.  V                     !                |                                   dt    |
 1703.  V                     !                 --                                     --
 1704.  V                     pblsib(i,2,5) = (radt(i,1) - ( hc(i) + ec(i) ) * dtc3xi ) * cci(i)
 1705.  V                     !
 1706.  V                     !                                         -(R/Cp)              --           --
 1707.  V                     !   dTm              g               sl(k)                    | hg(i) + hc(i) |
 1708.  V                     ! ------ =  0.01 * ------- * ------------------------------- *| --------------|
 1709.  V                     !   dt               cp        (P * (si(k) - si(k+1)))        |       dt      |
 1710.  V                     !                                                              --           --
 1711.  V                     !                                                                  --     --
 1712.  V                     !   dTm              m*kg*K                    1                  |   J     |
 1713.  V                     ! ------ =  0.01 * ----------- * ------------------------------- *| ------  |
 1714.  V                     !   dt              s^2*J                      Pa                 | m^2*s   |
 1715.  V                     !                                                                  --     --
 1716.  V                     !   dTm              m*kg*K                  m^2                  |   N*m   |
 1717.  V                     ! ------ =  0.01 * ----------- * ------------------------------- *| --------|
 1718.  V                     !   dt              s^2*N*m                   N                   | m^2*s   |
 1719.  V              
 1720.  V                     !   dTm              m*Kg*K*s^2         m^3
 1721.  V                     ! ------ =  0.01 * ------------- * ---------------
 1722.  V                     !   dt              s^2*kg*m*m          m^2*s
 1723.  V              
 1724.  V                     !   dTm                K            m
 1725.  V                     ! ------ =  0.01 * ------------- *-------
 1726.  V                     !   dt                 m            s
 1727.  V                     !
 1728.  V                     !   dTm             K
 1729.  V                     ! ------ =  0.01 * ----
 1730.  V                     !   dt              s
 1731.  V              
 1732.  V                     !
 1733.  V                     !                                               -(R/Cp)              --           --
 1734.  V                     !                          g               sl(k)                    | hg(i) + hc(i) |
 1735.  V                     ! pblsib(i,3,5) = 0.01 * ------- * ------------------------------- *| --------------|
 1736.  V                     !                          cp        (P * (si(k) - si(k+1)))        |       dt      |
 1737.  V                     !                                                                    --           --
 1738.  V                     !
 1739.  V                     pblsib(i,3,5) =  gmt(i,3) + ak(i) * ( hg(i) + hc(i) ) * dtc3xi
 1740.  V                     !
 1741.  V                     !                                                             --           --
 1742.  V                     !                         g                1                 | eg(i) + ec(i) |
 1743.  V                     !pblsib(i,4,5) = 0.01 * ------ * ------------------------- * | --------------|
 1744.  V                     !                         hl       (P * (si(k) - si(k+1)))   |       dt      |
 1745.  V                     !                                                             --           --
 1746.  V                     !
 1747.  V                     pblsib(i,4,5) =  gmq(i,3) + ah(i) * ( eg(i) + ec(i) ) * dtc3xi
 1748.  V------------>     END DO
 1749.                     !
 1750.                     !     solve 4 x 5 matrix equation
 1751.                     !
 1752.  V------------<     DO i = 1, nmax
 1753.  V                     pblsib(i,2,2) =  pblsib(i,2,2) - pblsib(i,2,1) * ( pblsib(i,1,2) / pblsib(i,1,1) )
 1754.  V                     pblsib(i,2,3) =  pblsib(i,2,3) - pblsib(i,2,1) * ( pblsib(i,1,3) / pblsib(i,1,1) )
 1755.  V                     pblsib(i,2,4) =  pblsib(i,2,4) - pblsib(i,2,1) * ( pblsib(i,1,4) / pblsib(i,1,1) )
 1756.  V                     pblsib(i,2,5) =  pblsib(i,2,5) - pblsib(i,2,1) * ( pblsib(i,1,5) / pblsib(i,1,1) )
 1757.  V                     pblsib(i,3,2) =  pblsib(i,3,2) - pblsib(i,3,1) * ( pblsib(i,1,2) / pblsib(i,1,1) )
 1758.  V                     pblsib(i,3,3) =  pblsib(i,3,3) - pblsib(i,3,1) * ( pblsib(i,1,3) / pblsib(i,1,1) )
 1759.  V                     pblsib(i,3,4) =  pblsib(i,3,4) - pblsib(i,3,1) * ( pblsib(i,1,4) / pblsib(i,1,1) )
 1760.  V                     pblsib(i,3,5) =  pblsib(i,3,5) - pblsib(i,3,1) * ( pblsib(i,1,5) / pblsib(i,1,1) )
 1761.  V                     pblsib(i,4,2) =  pblsib(i,4,2) - pblsib(i,4,1) * ( pblsib(i,1,2) / pblsib(i,1,1) )
 1762.  V                     pblsib(i,4,3) =  pblsib(i,4,3) - pblsib(i,4,1) * ( pblsib(i,1,3) / pblsib(i,1,1) )
 1763.  V                     pblsib(i,4,4) =  pblsib(i,4,4) - pblsib(i,4,1) * ( pblsib(i,1,4) / pblsib(i,1,1) )
 1764.  V                     pblsib(i,4,5) =  pblsib(i,4,5) - pblsib(i,4,1) * ( pblsib(i,1,5) / pblsib(i,1,1) )
 1765.  V                     pblsib(i,3,3) =  pblsib(i,3,3) - pblsib(i,3,2) * ( pblsib(i,2,3) / pblsib(i,2,2) )
 1766.  V                     pblsib(i,3,4) =  pblsib(i,3,4) - pblsib(i,3,2) * ( pblsib(i,2,4) / pblsib(i,2,2) )
 1767.  V                     pblsib(i,3,5) =  pblsib(i,3,5) - pblsib(i,3,2) * ( pblsib(i,2,5) / pblsib(i,2,2) )
 1768.  V                     pblsib(i,4,3) =  pblsib(i,4,3) - pblsib(i,4,2) * ( pblsib(i,2,3) / pblsib(i,2,2) )
 1769.  V                     pblsib(i,4,4) =  pblsib(i,4,4) - pblsib(i,4,2) * ( pblsib(i,2,4) / pblsib(i,2,2) )
 1770.  V                     pblsib(i,4,5) =  pblsib(i,4,5) - pblsib(i,4,2) * ( pblsib(i,2,5) / pblsib(i,2,2) )
 1771.  V                     pblsib(i,4,4) =  pblsib(i,4,4) - pblsib(i,4,3) * ( pblsib(i,3,4) / pblsib(i,3,3) )
 1772.  V                     pblsib(i,4,5) =  pblsib(i,4,5) - pblsib(i,4,3) * ( pblsib(i,3,5) / pblsib(i,3,3) )
 1773.  V              
 1774.  V                     pblsib(i,4,5) =     pblsib(i,4,5) / pblsib(i,4,4)
 1775.  V              
 1776.  V                     pblsib(i,3,5) =   ( pblsib(i,3,5) / pblsib(i,3,3) ) &
 1777.  V                          - ( pblsib(i,3,4) / pblsib(i,3,3) ) * pblsib(i,4,5)
 1778.  V              
 1779.  V                     pblsib(i,2,5) =   ( pblsib(i,2,5) / pblsib(i,2,2) ) &
 1780.  V                          - ( pblsib(i,2,4) / pblsib(i,2,2) ) * pblsib(i,4,5) &
 1781.  V                          - ( pblsib(i,2,3) / pblsib(i,2,2) ) * pblsib(i,3,5)
 1782.  V              
 1783.  V                     pblsib(i,1,5) =   ( pblsib(i,1,5) / pblsib(i,1,1) ) &
 1784.  V                          - ( pblsib(i,1,4) / pblsib(i,1,1) ) * pblsib(i,4,5) &
 1785.  V                          - ( pblsib(i,1,3) / pblsib(i,1,1) ) * pblsib(i,3,5) &
 1786.  V                          - ( pblsib(i,1,2) / pblsib(i,1,1) ) * pblsib(i,2,5)
 1787.  V------------>     END DO
 1788.  Vr2----------<     DO i = 1, nmax
 1789.  Vr2                   dtg(i) = pblsib(i,1,5) * dtc3x
 1790.  Vr2                   dtc(i) = pblsib(i,2,5) * dtc3x
 1791.  Vr2                   dtm(i) = pblsib(i,3,5) * dtc3x
 1792.  Vr2                   dqm(i) = pblsib(i,4,5) * dtc3x
 1793.  Vr2                   hc (i) = hc(i) + dtc3x * ( hcdtc(i) * dtc(i) + hcdtg(i) * dtg(i) + hcdtm(i) * dtm(i) )
 1794.  Vr2                   hg (i) = hg(i) + dtc3x * ( hgdtc(i) * dtc(i) + hgdtg(i) * dtg(i) + hgdtm(i) * dtm(i) )
 1795.  Vr2                   !
 1796.  Vr2                   !     check if interception loss term has exceeded canopy storage
 1797.  Vr2                   !
 1798.  Vr2                   ecpot(i)=( etc(i) - ea(i) ) + ( btc(i) - deadtc(i) ) * dtc(i) &
 1799.  Vr2                        -deadtg(i) * dtg(i) - deadqm(i) * dqm(i)
 1800.  Vr2                   egpot(i)=( etg(i) - ea(i) ) + ( btg(i) - deadtg(i) ) * dtg(i) &
 1801.  Vr2                        -deadtc(i) * dtc(i) - deadqm(i) * dqm(i)
 1802.  Vr2---------->     END DO
 1803.                     !----------------------------------------------------------------------
 1804.                     !     EVAPORATION LOSSES ARE EXPRESSED IN J M-2 : WHEN DIVIDED BY
 1805.                     !     ( hl*1000.) LOSS IS IN M M-2 (hl(J/kg))(1 J/kg ==> 1000J/m-3)
 1806.                     !     MASS TERMS ARE IN KG M-2 DT-1
 1807.                     !----------------------------------------------------------------------
 1808.                     hlat3=1.0e+03_r8*hl
 1809.  V------------<     DO i = 1, nmax
 1810.  V                     eci   (i) = ecpot(i) * wc(i) * psyi(i) / ( 2.0_r8 * rb(i) ) * dtc3x
 1811.  V                     ecidif(i) = MAX( 0.0_r8   , eci(i) - capac(i,1) * hlat3 )
 1812.  V                     hc    (i) = hc(i) + ecidif(i)
 1813.  V                     eci   (i) = MIN( eci(i) , capac(i,1) * hlat3 )
 1814.  V                     egi   (i) = egpot(i) * vcover2(i,2) * wg(i) * psyi(i) / rd(i)*dtc3x
 1815.  V                     egidif(i) = MAX( 0.0_r8 , egi(i) - capac(i,2) * hlat3 )
 1816.  V                     hg    (i) = hg(i) + egidif(i)
 1817.  V                     egi   (i) = MIN( egi(i) , capac(i,2) * hlat3 )
 1818.  V                     !
 1819.  V                     !     evaporation is given in j m-2, calculated from gradients
 1820.  V                     !
 1821.  V                     rsurf     = rsoil(i) * fg(i)
 1822.  V                     coct      = ( 1.0_r8 - wc(i) )/rc(i)
 1823.  V                     cogt      = vcover2(i,2) * ( 1.0_r8 - wg(i) ) / ( rg(i) + rd(i) )
 1824.  V                     cogs1     = ( 1.0_r8 - vcover2(i,2) ) * hr(i)/( rd(i) + rsurf ) &
 1825.  V                          + vcover2(i,2) / ( rd(i) + rsurf + 44.0_r8 ) * hr(i)
 1826.  V                     cogs2     = cogs1/hr(i)
 1827.  V                     ect  (i)  = ecpot(i)*coct*psyi(i)*dtc3x
 1828.  V                     ec   (i)  = eci(i)+ect(i)
 1829.  V                     egt  (i)  = egpot(i)*cogt*psyi(i)*dtc3x
 1830.  V                     egs  (i)  = (etg(i)+btg(i)*dtg(i))*cogs1    &
 1831.  V                          -(ea(i)+deadtg(i)*dtg(i)+deadtc(i)*dtc(i)+deadqm(i)*dqm(i) &
 1832.  V                          )   *cogs2
 1833.  V                     egs  (i)  = egs(i)*psyi(i)*dtc3x
 1834.  V                     eg   (i)  = egt(i)+egs(i)+egi(i)
 1835.  V                     !vcover2(i,2)=xcover(itype(i),mon(i),2)
 1836.  V------------>     END DO
 1837.                     !
 1838.                     !     test of dew condition. recalculation ensues if necessary.
 1839.                     !
 1840.  1------------<     DO i = 1, nmax
 1841.  1                     radt(i,1) = radt(i,1) - rcdtc(i) * dtc(i) - rcdtg(i) * dtg(i)
 1842.  1                     radt(i,2) = radt(i,2) - rgdtc(i) * dtc(i) - rgdtg(i) * dtg(i)
 1843.  1                     ecf    = SIGN(1.0_r8   ,ecpot(i)) * ( fc(i) * 2.0_r8 - 1.0_r8 )
 1844.  1                     egf    = SIGN(1.0_r8   ,egpot(i)) * ( fg(i) * 2.0_r8 - 1.0_r8 )
 1845.  1                     IF ( ecf <= 0.0_r8 ) THEN
 1846.  1                        hc (i) = hc(i) + eci(i) + ect(i)
 1847.  1                        eci(i) = 0.0_r8
 1848.  1                        ect(i) = 0.0_r8
 1849.  1                        ec (i) = 0.0_r8
 1850.  1                     END IF
 1851.  1                     IF (egf    <= 0.0_r8) THEN
 1852.  1                        hg (i) = hg(i)+egi(i)+egt(i)+egs(i)
 1853.  1                        egi(i) = 0.0_r8
 1854.  1                        egt(i) = 0.0_r8
 1855.  1                        egs(i) = 0.0_r8
 1856.  1                        eg (i) = 0.0_r8
 1857.  1                     END IF
 1858.  1------------>     END DO
 1859.                   END SUBROUTINE temres
 1860.                 
 1861.                 
 1862.                 
 1863.                   ! cut    :performs vapor pressure calculation at level "a".
 1864.                 
 1865.                 
 1866.                 
 1867.                   SUBROUTINE cut( &
 1868.                        icheck,em    ,rhoair,rcp   ,wc    ,wg    ,fc    ,fg    ,hr    , &
 1869.                        ra    ,rb    ,rd    ,rc    ,rg    ,ea    ,etc   ,etg   ,rst   , &
 1870.                        rsoil ,vcover,nmax  ,ncols )
 1871.                     !
 1872.                     !-----------------------------------------------------------------------
 1873.                     !-----------------------------------------------------------------------
 1874.                     ! input parameters
 1875.                     !   fc      fg      hr      wc      wg      rhoair  cp
 1876.                     !   rst     ra      rb      rg      rd      rsurf   vcover
 1877.                     !   etc     etg     em
 1878.                     !-----------------------------------------------------------------------
 1879.                     ! output parameters
 1880.                     !   ea
 1881.                     !-----------------------------------------------------------------------
 1882.                     ! ncols......Numero de ponto por faixa de latitude
 1883.                     ! icg........Parametros da vegetacao (icg=1 topo e icg=2 base)
 1884.                     ! cp.........specific heat of air (j/kg/k)
 1885.                     ! nmax.......
 1886.                     ! vcover(iv).Fracao de cobertura da vegetacao iv=1 topo ()
 1887.                     ! vcover(iv).Fracao de cobertura da vegetacao iv=2 bottom ()
 1888.                     ! ra.........Resistencia Aerodinamica (s/m)
 1889.                     ! rb.........bulk boundary layer resistance             (s/m)
 1890.                     ! rd.........aerodynamic resistance between ground
 1891.                     !            and canopy air space                       (s/m)
 1892.                     ! rc.........Resistencia do topo da copa
 1893.                     ! rg.........Resistencia da base da copa
 1894.                     ! ea.........Pressao de vapor
 1895.                     ! etc........Pressao de vapor no topo da copa
 1896.                     ! etg........Pressao de vapor no base da copa
 1897.                     ! rst........Resistencia stomatal (s/m)
 1898.                     ! rsoil......Resistencia do solo (s/m)
 1899.                     ! em.........Pressao de vapor da agua
 1900.                     ! rhoair.....Desnsidade do ar
 1901.                     ! rcp........densidade do ar vezes o calor especifico do ar
 1902.                     ! wc.........Minimo entre 1 e a razao entre a agua interceptada pelo
 1903.                     !            indice de area foliar no topo da copa
 1904.                     ! wg.........Minimo entre 1 e a razao entre a agua interceptada pelo
 1905.                     !             indice de area foliar na parte inferior da copa
 1906.                     ! fc.........Condicao de oravalho 0 ou 1 no topo da copa
 1907.                     ! fg.........Condicao de oravalho 0 ou 1 na base da copa
 1908.                     ! hr.........Rel. humidity in top layer
 1909.                     ! icheck
 1910.                     !-----------------------------------------------------------------------
 1911.                     INTEGER, INTENT(in   ) :: ncols
 1912.                     INTEGER, INTENT(in   ) :: nmax
 1913.                     REAL(KIND=r8),    INTENT(in   ) :: vcover(ncols,icg)
 1914.                     !
 1915.                     !     variables calculated from above and ambient conditions
 1916.                     !
 1917.                     REAL(KIND=r8),    INTENT(in   ) :: ra    (ncols)
 1918.                     REAL(KIND=r8),    INTENT(in   ) :: rb    (ncols)
 1919.                     REAL(KIND=r8),    INTENT(in   ) :: rd    (ncols)
 1920.                     REAL(KIND=r8),    INTENT(inout  ) :: rc    (ncols)
 1921.                     REAL(KIND=r8),    INTENT(inout  ) :: rg    (ncols)
 1922.                     REAL(KIND=r8),    INTENT(inout  ) :: ea    (ncols)
 1923.                     REAL(KIND=r8),    INTENT(in   ) :: etc   (ncols)
 1924.                     REAL(KIND=r8),    INTENT(in   ) :: etg   (ncols)
 1925.                     REAL(KIND=r8),    INTENT(in   ) :: rst   (ncols,icg)
 1926.                     REAL(KIND=r8),    INTENT(in   ) :: rsoil (ncols)
 1927.                     !
 1928.                     !     this is for coupling with closure turbulence model
 1929.                     !
 1930.                     REAL(KIND=r8),    INTENT(in   ) :: em    (ncols)
 1931.                     REAL(KIND=r8),    INTENT(in   ) :: rhoair(ncols)
 1932.                     REAL(KIND=r8),    INTENT(inout  ) :: rcp   (ncols)
 1933.                     REAL(KIND=r8),    INTENT(in   ) :: wc    (ncols)
 1934.                     REAL(KIND=r8),    INTENT(in   ) :: wg    (ncols)
 1935.                     REAL(KIND=r8),    INTENT(in   ) :: fc    (ncols)
 1936.                     REAL(KIND=r8),    INTENT(in   ) :: fg    (ncols)
 1937.                     REAL(KIND=r8),    INTENT(in   ) :: hr    (ncols)
 1938.                     INTEGER, INTENT(in   ) :: icheck(ncols)
 1939.                 
 1940.                     REAL(KIND=r8) :: coc
 1941.                     REAL(KIND=r8) :: rsurf
 1942.                     REAL(KIND=r8) :: cog1
 1943.                     REAL(KIND=r8) :: cog2
 1944.                     REAL(KIND=r8) :: d2
 1945.                     REAL(KIND=r8) :: top
 1946.                     REAL(KIND=r8) :: xnum
 1947.                     REAL(KIND=r8) :: tem
 1948.                     INTEGER :: i
 1949.                 
 1950.  1------------<     DO i = 1, nmax
 1951.  1                     IF (icheck(i) == 1) THEN
 1952.  1                        rcp  (i) = rhoair(i)*cp
 1953.  1                        rc   (i) = rst(i,1)*fc(i)+rb(i)+rb(i)*fc(i)
 1954.  1                        coc      = (1.0_r8 -wc(i))/rc(i)+wc(i)/(2.0_r8 *rb(i))
 1955.  1                        rg   (i) = rst(i,2)*fg(i)
 1956.  1                        rsurf    = rsoil(i)*fg(i)
 1957.  1                        tem      = vcover(i,2)*(1.0_r8-wg(i))/(rg(i)+rd(i))
 1958.  1                        cog2     = tem    &
 1959.  1                             + (1.0_r8 -vcover(i,2))/(rsurf   +rd(i)) &
 1960.  1                             + vcover(i,2)/(rsurf   +rd(i)+44.0_r8)
 1961.  1                        cog1     = (cog2   -tem   )*hr(i)+tem
 1962.  1                        xnum     = wg(i)/rd(i)*vcover(i,2)
 1963.  1                        cog1     = cog1   +xnum
 1964.  1                        cog2     = cog2   +xnum
 1965.  1                        d2       = 1.0_r8 /ra(i)+coc+cog2
 1966.  1                        top      = coc*etc(i)+em(i)/ra(i)+cog1   *etg(i)
 1967.  1                        !
 1968.  1                        !     vapor pressure at level "a"
 1969.  1                        !
 1970.  1                        ea (i)  = top   /d2
 1971.  1                     END IF
 1972.  1------------>     END DO
 1973.                   END SUBROUTINE cut
 1974.                 
 1975.                 
 1976.                 
 1977.                   ! rbrd   :calculates bulk boundary layer resistance and aerodynamic
 1978.                   !         resistence betweenground and canopi air space4 as functions
 1979.                   !         of wind speed at top of canopy and temperatures.
 1980.                 
 1981.                 
 1982.                 
 1983.                   SUBROUTINE rbrd(rb    ,rd    ,tcta  ,tgta  ,u2    ,tg    ,rdc   ,rbc   ,itype , &
 1984.                        z2    ,mon   ,nmax  ,ncols , zlt2)
 1985.                     !
 1986.                     !
 1987.                     !         rb and rd as functions of u2 and temperatures. simplified( xue et
 1988.                     !         al. 1991)
 1989.                     !
 1990.                     !-----------------------------------------------------------------------
 1991.                     !       input parameters
 1992.                     !-----------------------------------------------------------------------
 1993.                     !   tcta..........diferenca entre tc-ta                      (k)
 1994.                     !   tgta..........diferenca entre tg-ta                      (k)
 1995.                     !   tg............ground temperature                         (k)
 1996.                     !   u2............wind speed at top of canopy                (m/s)
 1997.                     !   z2............height of canopy top                       (m)
 1998.                     !   zlt(cg).......canopy/ground cover leaf and stem area density
 1999.                     !                                                            (m**2/m**3)
 2000.                     !   rbc...........constant related to bulk boundary layer
 2001.                     !                 resistance
 2002.                     !   rdc...........constant related to aerodynamic resistance
 2003.                     !                 between ground and canopy air space
 2004.                     !-----------------------------------------------------------------------
 2005.                     !      output parameters
 2006.                     !-----------------------------------------------------------------------
 2007.                     !   rb............bulk boundary layer resistance             (s/m)
 2008.                     !   rd............aerodynamic resistance between ground      (s/m)
 2009.                     !                 and canopy air space
 2010.                     !-----------------------------------------------------------------------
 2011.                     !   ncols.........Numero de ponto por faixa de latitude
 2012.                     !   ityp..........numero das classes de solo 13
 2013.                     !   imon...........Numero maximo de meses no ano (12)
 2014.                     !   icg...........Parametros da vegetacao (icg=1 topo e icg=2 base)
 2015.                     !   mon...........Numero do mes do ano (1-12)
 2016.                     !   nmax .........
 2017.                     !   itype.........Classe de textura do solo
 2018.                     !=======================================================================
 2019.                     INTEGER, INTENT(in   ) :: ncols
 2020.                     INTEGER, INTENT(in   ) :: mon (ncols)
 2021.                     INTEGER, INTENT(in   ) :: nmax
 2022.                     !
 2023.                     !     vegetation and soil parameters
 2024.                     !
 2025.                     REAL(KIND=r8),    INTENT(in   ) :: z2    (ityp,imon)
 2026.                     INTEGER, INTENT(in   ) :: itype (ncols)
 2027.                     REAL(KIND=r8),    INTENT(in   ) :: rdc   (ncols)
 2028.                     REAL(KIND=r8),    INTENT(in   ) :: rbc   (ncols)
 2029.                     !
 2030.                     !     prognostic variables
 2031.                     !
 2032.                     REAL(KIND=r8),    INTENT(in   ) :: tg   (ncols)
 2033.                     !
 2034.                     !     variables calculated from above and ambient conditions
 2035.                     !
 2036.                     REAL(KIND=r8),    INTENT(inout  ) :: rb    (ncols)
 2037.                     REAL(KIND=r8),    INTENT(inout  ) :: rd    (ncols)
 2038.                     REAL(KIND=r8),    INTENT(in   ) :: tcta  (ncols)
 2039.                     REAL(KIND=r8),    INTENT(in   ) :: tgta  (ncols)
 2040.                     REAL(KIND=r8),    INTENT(in   ) :: u2    (ncols)
 2041.                     REAL(KIND=r8),    INTENT(in  ) :: zlt2(ncols,icg)
 2042.                 
 2043.                     REAL(KIND=r8) :: temdif(ncols)
 2044.                     REAL(KIND=r8) :: fih   (ncols)
 2045.                 
 2046.                     REAL(KIND=r8), PARAMETER :: factg=88.29_r8
 2047.                     INTEGER :: i
 2048.                     INTEGER :: ntyp
 2049.                 
 2050.  1------------<     DO i = 1, nmax
 2051.  1                     ntyp=itype(i)
 2052.  1                     IF (tcta(i) > 0.0_r8 ) THEN
 2053.  1                        temdif(i)=tcta(i)+0.1_r8
 2054.  1                     ELSE
 2055.  1                        temdif(i)=        0.1_r8
 2056.  1                     END IF
 2057.  1                     rb (i)=1.0_r8  /(SQRT(u2(i))/rbc(i)+zlt2(i,1)*0.004_r8 )
 2058.  1                     IF (tgta(i) > 0) THEN
 2059.  1                        temdif(i)=tgta(i)+0.1_r8
 2060.  1                     ELSE
 2061.  1                        temdif(i)=        0.1_r8
 2062.  1                     END IF
 2063.  1                     fih(i)=sqrt &
 2064.  1                          (1.0_r8 +factg*temdif(i)*z2(ntyp,mon(i))/(tg(i)*u2(i)*u2(i)))
 2065.  1                     rd(i) =rdc(i)/(u2(i)*fih(i))
 2066.  1------------>     END DO
 2067.                   END SUBROUTINE rbrd
 2068.                 
 2069.                 
 2070.                 
 2071.                   ! vntlax :performs ventilation mass flux, based on deardorff, mwr, 1972?.
 2072.                 
 2073.                 
 2074.                   SUBROUTINE vntlax(ustarn, &
 2075.                        icheck,bps   ,dzm   ,cu    ,cuni  ,ctni  ,ustar ,ra    ,ta    , &
 2076.                        u2    ,tm    ,um    ,vm    ,d     ,z0    ,itype ,z2    , &
 2077.                        mon   ,nmax  ,jstneu,ncols )
 2078.                     !
 2079.                     !
 2080.                     !-----------------------------------------------------------------------
 2081.                     !         input parameters
 2082.                     !-----------------------------------------------------------------------
 2083.                     !
 2084.                     !   ea..........Pressao de vapor
 2085.                     !   ta..........Temperatura no nivel de fonte de calor do dossel (K)
 2086.                     !   um..........Razao entre zonal pseudo-wind (fourier) e seno da
 2087.                     !               colatitude
 2088.                     !   vm..........Razao entre meridional pseudo-wind (fourier) e seno da
 2089.                     !               colatitude
 2090.                     !   qm..........specific humidity of reference (fourier)
 2091.                     !   tm..........Temperature of reference (fourier)
 2092.                     !   dzm  .......Altura media de referencia  para o vento para o calculo
 2093.                     !               da estabilidade do escoamento
 2094.                     !   grav........gravity constant      (m/s**2)
 2095.                     !   cpair.......specific heat of air (j/kg/k)
 2096.                     !   gasr........gas constant of dry air      (j/kg/k)
 2097.                     !   bps ........
 2098.                     !   z2..........height of canopy top
 2099.                     !   d...........displacement height                        (m)
 2100.                     !   epsfac......parametro para o gas 0.622
 2101.                     !
 2102.                     !
 2103.                     !
 2104.                     !-----------------------------------------------------------------------
 2105.                     !        output parameters
 2106.                     !-----------------------------------------------------------------------
 2107.                     !
 2108.                     !   ustar.........surface friction velocity  (m/s)
 2109.                     !   ra............Resistencia Aerodinamica (s/m)
 2110.                     !   u2............wind speed at top of canopy                (m/s)
 2111.                     !   ventmf........ventilation mass flux
 2112.                     !-----------------------------------------------------------------------
 2113.                     !=======================================================================
 2114.                     !   ncols........Numero de ponto por faixa de latitude
 2115.                     !   ityp.........Numero do tipo de solo
 2116.                     !   imon.........Numero maximo de meses no ano (12)
 2117.                     !   jstneu.......The first call to vntlat just gets the neutral values
 2118.                     !                of ustar and ventmf para jstneu=.TRUE..
 2119.                     !   mon..........Numero do mes do ano (1-12)
 2120.                     !   nmax.........
 2121.                     !   itype........Classe de textura do solo
 2122.                     !   z0...........roughness length
 2123.                     !   bps..........bps   (i)=sigki(1)=1.0e0/EXP(akappa*LOG(sig(k)))
 2124.                     !   cu...........friction  transfer coefficients.
 2125.                     !   ct...........heat transfer coefficients.
 2126.                     !   cuni.........neutral friction transfer  coefficients.
 2127.                     !   ctni.........neutral heat transfer coefficients.
 2128.                     !   icheck.......this version assumes dew-free conditions "icheck=1" to
 2129.                     !                estimate ea for buoyancy term in vntmf or ra.
 2130.                     !=======================================================================
 2131.                     INTEGER, INTENT(in   ) :: ncols
 2132.                 
 2133.                     LOGICAL, INTENT(in   ) :: jstneu
 2134.                     INTEGER, INTENT(in   ) :: mon(ncols)
 2135.                     INTEGER, INTENT(in   ) :: nmax
 2136.                     !
 2137.                     !     vegetation and soil parameters
 2138.                     !
 2139.                     REAL(KIND=r8),    INTENT(in   ) :: z2    (ityp,imon)
 2140.                     INTEGER, INTENT(in   ) :: itype (ncols)
 2141.                     REAL(KIND=r8),    INTENT(in   ) :: d     (ncols)
 2142.                     REAL(KIND=r8),    INTENT(in   ) :: z0    (ncols)
 2143.                     !
 2144.                     !     the size of working area is ncols*187
 2145.                     !     atmospheric parameters as boudary values for sib
 2146.                     !
 2147.                     REAL(KIND=r8),    INTENT(in   ) :: tm  (ncols)
 2148.                     REAL(KIND=r8),    INTENT(in   ) :: um  (ncols)
 2149.                     REAL(KIND=r8),    INTENT(in   ) :: vm  (ncols)
 2150.                     !
 2151.                     !     variables calculated from above and ambient conditions
 2152.                     !
 2153.                     REAL(KIND=r8),    INTENT(inout) :: ra    (ncols)
 2154.                     REAL(KIND=r8),    INTENT(in   ) :: ta    (ncols)
 2155.                     REAL(KIND=r8),    INTENT(inout) :: u2    (ncols)
 2156.                     !
 2157.                     !     this is for coupling with closure turbulence model
 2158.                     !
 2159.                     REAL(KIND=r8),    INTENT(in   ) :: bps   (ncols)
 2160.                     REAL(KIND=r8),    INTENT(in   ) :: dzm   (ncols)
 2161.                     REAL(KIND=r8),    INTENT(inout) :: cu    (ncols)
 2162.                     REAL(KIND=r8),    INTENT(inout) :: cuni  (ncols)
 2163.                     REAL(KIND=r8),    INTENT(inout) :: ctni  (ncols)
 2164.                     REAL(KIND=r8),    INTENT(inout) :: ustar (ncols)
 2165.                     INTEGER, INTENT(in   ) :: icheck(ncols)
 2166.                     REAL(KIND=r8),    INTENT(inout) :: ustarn(ncols)
 2167.                 
 2168.                 
 2169.                     !REAL(KIND=r8) :: thm(ncols)      !**(JP)** scalar
 2170.                     REAL(KIND=r8) :: thm
 2171.                     !REAL(KIND=r8) :: ros(ncols)      !**(JP)** unused
 2172.                     REAL(KIND=r8) :: speedm(ncols)
 2173.                     !REAL(KIND=r8) :: thvgm(ncols)    !**(JP)** scalar
 2174.                     REAL(KIND=r8) :: thvgm
 2175.                     !REAL(KIND=r8) :: rib(ncols)      !**(JP)** scalar
 2176.                     REAL(KIND=r8) :: rib
 2177.                     !REAL(KIND=r8) :: cui(ncols)      !**(JP)** scalar
 2178.                     REAL(KIND=r8) :: cui
 2179.                     !REAL(KIND=r8) :: ran(ncols)      !**(JP)** unused
 2180.                     !REAL(KIND=r8) :: cti(ncols)      !**(JP)** scalar
 2181.                     REAL(KIND=r8) :: cti
 2182.                     !REAL(KIND=r8) :: ct      (ncols)      !**(JP)** unused
 2183.                 
 2184.                     REAL(KIND=r8), PARAMETER ::  vkrmn=0.40_r8
 2185.                     REAL(KIND=r8), PARAMETER ::  fsc=66.85_r8
 2186.                     REAL(KIND=r8), PARAMETER ::  ftc=0.904_r8
 2187.                     REAL(KIND=r8), PARAMETER ::  fvc=0.315_r8
 2188.                     REAL(KIND=r8) :: rfac
 2189.                     REAL(KIND=r8) :: vkrmni
 2190.                     REAL(KIND=r8) :: g2
 2191.                     REAL(KIND=r8) :: zl
 2192.                     REAL(KIND=r8) :: xct1
 2193.                     REAL(KIND=r8) :: xct2
 2194.                     REAL(KIND=r8) :: xctu1
 2195.                     REAL(KIND=r8) :: xctu2
 2196.                     REAL(KIND=r8) :: grib
 2197.                     REAL(KIND=r8) :: grzl
 2198.                     REAL(KIND=r8) :: grz2
 2199.                     REAL(KIND=r8) :: fvv
 2200.                     REAL(KIND=r8) :: ftt
 2201.                     REAL(KIND=r8) :: rzl
 2202.                     REAL(KIND=r8) :: rz2
 2203.                     INTEGER :: i
 2204.                     INTEGER :: ntyp
 2205.                 
 2206.                 
 2207.                     rfac  =1.0e2_r8 /gasr
 2208.                 
 2209.                     vkrmni=1.0_r8  /vkrmn
 2210.                     g2 = 0.75_r8
 2211.                 
 2212.  1------------<     DO i = 1, nmax
 2213.  1                     IF (icheck(i) == 1) THEN
 2214.  1                        speedm(i)=SQRT(um(i)**2+vm(i)**2)
 2215.  1                        speedm(i)=MAX(2.0_r8  ,speedm(i))
 2216.  1                     END IF
 2217.  1------------>     END DO
 2218.                     !
 2219.                     !     cu and ct are the friction and heat transfer coefficients.
 2220.                     !     cun and ctn are the neutral friction and heat transfer
 2221.                     !     coefficients.
 2222.                     !
 2223.                     IF (jstneu) THEN
 2224.  1------------<        DO i = 1, nmax
 2225.  1                        ntyp=itype(i)
 2226.  1                        zl = z2(ntyp,mon(i)) + 11.785_r8  * z0(i)
 2227.  1                        cuni(i)=LOG((dzm(i)-d(i))/z0(i))*vkrmni
 2228.  1                        ustarn(i)=speedm(i)/cuni(i)
 2229.  1                        IF (zl < dzm(i)) THEN
 2230.  1                           xct1 = LOG((dzm(i)-d(i))/(zl-d(i)))
 2231.  1                           xct2 = LOG((zl-d(i))/z0(i))
 2232.  1                           xctu1 = xct1
 2233.  1                           xctu2 = LOG((zl-d(i))/(z2(ntyp,mon(i))-d(i)))
 2234.  1                           ctni(i) = (xct1 + g2 * xct2) *vkrmni
 2235.  1                        ELSE
 2236.  1                           xct2 =  LOG((dzm(i)-d(i))/z0(i))
 2237.  1                           xctu1 =  0.0_r8
 2238.  1                           xctu2 =  LOG((dzm(i)-d(i))/(z2(ntyp,mon(i))-d(i)))
 2239.  1                           ctni(i) = g2 * xct2 *vkrmni
 2240.  1                        END IF
 2241.  1                        !
 2242.  1                        !     neutral values of ustar and ventmf
 2243.  1                        !
 2244.  1                        u2(i) = speedm(i) - ustarn(i)*vkrmni*(xctu1 + g2*xctu2)
 2245.  1------------>        END DO
 2246.                        RETURN
 2247.                     END IF
 2248.                     !
 2249.                     !     stability branch based on bulk richardson number.
 2250.                     !
 2251.  1------------<     DO i = 1, nmax
 2252.  1                     IF (icheck(i) == 1) THEN
 2253.  1                        !
 2254.  1                        !     freelm(i)=.false.
 2255.  1                        !
 2256.  1                        thm= tm(i)*bps(i)
 2257.  1                        ntyp=itype(i)
 2258.  1                        zl = z2(ntyp,mon(i)) + 11.785_r8  * z0(i)
 2259.  1                        thvgm   = ta(i)-thm
 2260.  1                        rib     =-thvgm   *grav*(dzm(i)-d(i)) &
 2261.  1                             /(thm*(speedm(i)-u2(i))**2)
 2262.  1                        ! Manzi Suggestion:
 2263.  1                        ! rib   (i)=max(-10.0_r8  ,rib(i))
 2264.  1                        rib      =MAX(-1.5_r8  ,rib   )
 2265.  1                        rib      =MIN( 0.165_r8  ,rib   )
 2266.  1                        IF (rib    < 0.0_r8) THEN
 2267.  1                           grib = -rib
 2268.  1                           grzl = -rib   * (zl-d(i))/(dzm(i)-d(i))
 2269.  1                           grz2 = -rib   * z0(i)/(dzm(i)-d(i))
 2270.  1                           fvv = fvc*grib
 2271.  1                           IF (zl < dzm(i)) THEN
 2272.  1                              ftt = (ftc*grib) + (g2-1.0_r8) * (ftc*grzl) - g2 * (ftc*grz2)
 2273.  1                           ELSE
 2274.  1                              ftt = g2*((ftc*grib) - (ftc*grz2))
 2275.  1                           END IF
 2276.  1                           cui    = cuni(i) - fvv
 2277.  1                           cti    = ctni(i) - ftt
 2278.  1                        ELSE
 2279.  1                           rzl = rib   /(dzm(i)-d(i))*(zl-d(i))
 2280.  1                           rz2 = rib   /(dzm(i)-d(i))*z0(i)
 2281.  1                           fvv = fsc*rib
 2282.  1                           IF (zl < dzm(i)) THEN
 2283.  1                              ftt = (fsc*rib) + (g2-1) * (fsc*rzl) - g2 * (fsc*rz2)
 2284.  1                           ELSE
 2285.  1                              ftt = g2 * ((fsc*rib) - (fsc*rz2))
 2286.  1                           END IF
 2287.  1                           cui    = cuni(i) + fvv
 2288.  1                           cti    = ctni(i) + ftt
 2289.  1                        ENDIF
 2290.  1                        cu    (i)=1.0_r8/cui
 2291.  1                        !**(JP)** ct is not used anywhere else
 2292.  1                        !ct    (i)=1.0_r8/cti(i)
 2293.  1                        !
 2294.  1                        !
 2295.  1                        !     surface friction velocity and ventilation mass flux
 2296.  1                        !
 2297.  1                        ustar (i)=speedm(i)*cu(i)
 2298.  1                        ra(i) = cti    / ustar(i)
 2299.  1                        !**(JP)** ran is not used anywhere else
 2300.  1                        !ran(i) = ctni(i) / ustarn(i)
 2301.  1                        !ran(i) = MAX(ran(i), 0.8_r8 )
 2302.  1                        ra(i) = MAX(ra(i), 0.8_r8 )
 2303.  1                     END IF
 2304.  1------------>     END DO
 2305.                   END SUBROUTINE vntlax
ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 2305 
  Local variable "RFAC" is assigned a value but never used.

 2306.                 
 2307.                 
 2308.                 
 2309.                 
 2310.                   ! runoff :performs inter-layer moisture exchanges.
 2311.                 
 2312.                 
 2313.                 
 2314.                   SUBROUTINE runoff( &
 2315.                        roff  ,tg    ,td    ,capac ,w     ,itype ,dtc3x ,nmax  ,ncols    )
 2316.                     !
 2317.                     !-----------------------------------------------------------------------
 2318.                     ! input parameters
 2319.                     !-----------------------------------------------------------------------
 2320.                     !   w(3)     roff     slope    bee      satco     zdepth
 2321.                     !   phsat    poros    pie      dtc3x    snomel
 2322.                     !   w(3)
 2323.                     !
 2324.                     !-----------------------------------------------------------------------
 2325.                     ! output parameters
 2326.                     !-----------------------------------------------------------------------
 2327.                     !   w(3)     roff
 2328.                     !-----------------------------------------------------------------------
 2329.                     !
 2330.                     ! roff.......Runoff (escoamente superficial e drenagem)(m)
 2331.                     ! slope......Inclinacao de perda hidraulica na camada profunda do solo
 2332.                     ! bee........Fator de retencao da umidade no solo (expoente da umidade do
 2333.                     !            solo)
 2334.                     ! satco......Condutividade hidraulica do solo saturado(m/s)
 2335.                     ! zdepth(id).Profundidade das camadas de solo id=1 superficial
 2336.                     ! zdepth(id).Profundidade das camadas de solo id=2 camada de raizes
 2337.                     ! zdepth(id).Profundidade das camadas de solo id=3 camada de drenagem
 2338.                     ! phsat......Potencial matricial do solo saturado(m) (tensao do solo em
 2339.                     !            saturacao)
 2340.                     ! poros......Porosidade do solo
 2341.                     ! pie........pi = 3.1415926e0
 2342.                     ! dtc3x......time increment dt
 2343.                     ! snomel.....Calor latente de fusao(J/kg)
 2344.                     ! w(id)......Grau de saturacao de umidade do solo id=1 na camada superficial
 2345.                     ! w(id)......Grau de saturacao de umidade do solo id=2 na camada de raizes
 2346.                     ! w(id)......Grau de saturacao de umidade do solo id=3 na camada de drenagem
 2347.                     ! capac(iv)..Agua interceptada iv=1 no dossel (m)
 2348.                     ! capac(iv)..Agua interceptada iv=2 na cobertura do solo (m)
 2349.                     ! tg.........Temperatura da superficie do solo  (K)
 2350.                     ! td.........Temperatura do solo profundo (K)
 2351.                     ! itype......Classe de textura do solo
 2352.                     ! tf.........Temperatura de congelamento (K)
 2353.                     ! idp........Parametro para as camadas de solo idp=1->3
 2354.                     ! nmax.......
 2355.                     ! ncols......Numero de ponto por faixa de latitude
 2356.                     ! ityp.......13
 2357.                     !-----------------------------------------------------------------------
 2358.                     INTEGER, INTENT(in   ) :: ncols
 2359.                 
 2360.                     REAL(KIND=r8),    INTENT(in   ) :: dtc3x
 2361.                     INTEGER, INTENT(in   ) :: nmax
 2362.                 
 2363.                     INTEGER, INTENT(in   ) :: itype (ncols)
 2364.                     !
 2365.                     !     prognostic variables
 2366.                     !
 2367.                     REAL(KIND=r8),    INTENT(in   ) :: tg   (ncols)
 2368.                     REAL(KIND=r8),    INTENT(in   ) :: td   (ncols)
 2369.                     REAL(KIND=r8),    INTENT(in   ) :: capac(ncols,2)
 2370.                     REAL(KIND=r8),    INTENT(inout) :: w    (ncols,3)
 2371.                     !
 2372.                     !     heat fluxes : c-canopy, g-ground, t-trans, e-evap  in j m-2
 2373.                     !
 2374.                     REAL(KIND=r8),    INTENT(inout) :: roff (ncols)
 2375.                 
 2376.                     REAL(KIND=r8)    :: q3g   (ncols)
 2377.                     REAL(KIND=r8)    :: div   (ncols)
 2378.                     REAL(KIND=r8)    :: twi   (ncols,3)
 2379.                     REAL(KIND=r8)    :: twip  (ncols,3)
 2380.                     REAL(KIND=r8)    :: twipp (ncols,3)
 2381.                     REAL(KIND=r8)    :: avk   (ncols)
 2382.                     REAL(KIND=r8)    :: aaa_1, aaa_2
 2383.                     REAL(KIND=r8)    :: bbb_1, bbb_2
 2384.                     REAL(KIND=r8)    :: ccc_1, ccc_2
 2385.                     REAL(KIND=r8)    :: qqq_1, qqq_2
 2386.                 
 2387.                     REAL(KIND=r8)    :: subdt
 2388.                     REAL(KIND=r8)    :: subdti
 2389.                     REAL(KIND=r8)    :: slop
 2390.                     REAL(KIND=r8)    :: pows
 2391.                     REAL(KIND=r8)    :: wmax
 2392.                     REAL(KIND=r8)    :: wmin
 2393.                     REAL(KIND=r8)    :: pmax
 2394.                     REAL(KIND=r8)    :: pmin
 2395.                     REAL(KIND=r8)    :: dpdw
 2396.                     REAL(KIND=r8)    :: rsame
 2397.                     REAL(KIND=r8)    :: tsnow
 2398.                     REAL(KIND=r8)    :: areas
 2399.                     REAL(KIND=r8)    :: tgs
 2400.                     REAL(KIND=r8)    :: ts
 2401.                     REAL(KIND=r8)    :: props
 2402.                     REAL(KIND=r8)    :: dpdwdz
 2403.                     REAL(KIND=r8)    :: denom
 2404.                     REAL(KIND=r8)    :: rdenom
 2405.                     REAL(KIND=r8)    :: qmax
 2406.                     REAL(KIND=r8)    :: qmin
 2407.                     REAL(KIND=r8)    :: excess
 2408.                     REAL(KIND=r8)    :: deficit
 2409.                     INTEGER :: n
 2410.                     INTEGER :: i
 2411.                     INTEGER :: ntyp
 2412.                     REAL(KIND=r8),    PARAMETER     :: smal2 = 1.0e-3_r8
 2413.                 
 2414.                     subdt =dtc3x
 2415.                     subdti=1.0_r8 /dtc3x
 2416.  A-----------<>     q3g=0.0_r8
 2417.                     !
 2418.                     !     eliinate negative soil moisture
 2419.                     !
 2420.  1------------<     DO n = 1, nmax
 2421.  1                     IF (w(n,1) < 0.0_r8) w(n,1)=smal2
 2422.  1                     IF (w(n,2) < 0.0_r8) w(n,2)=smal2
 2423.  1                     IF (w(n,3) < 0.0_r8) w(n,3)=smal2
 2424.  1------------>     END DO
 2425.                 
 2426.  1------------<     DO i = 1, 3
 2427.  1 Vp---------<        DO n = 1, nmax
 2428.  1 Vp                     ntyp      =itype(n)
 2429.  1 Vp                     twi(n,i)=MIN(1.0_r8, MAX(0.03_r8,w(n,i)))
 2430.  1 Vp                     twip(n,i) =EXP(-bee(ntyp)*LOG(twi(n,i)))
 2431.  1 Vp                     twipp(n,i)=EXP((2.0_r8*bee(ntyp)+3.0_r8)*LOG(MIN(1.0_r8,twi(n,i))))
 2432.  1 Vp--------->        END DO
 2433.  1------------>     END DO
 2434.                 
 2435.  1------------<     DO n = 1, nmax
 2436.  1                     ntyp = itype(n)
 2437.  1                     slop = 0.1736_r8
 2438.  1                     IF (poros(ntyp) == 0.4352_r8) slop = 0.0872_r8
 2439.  1                     IF (poros(ntyp) == 0.4577_r8) slop = 0.3420_r8
 2440.  1                     !
 2441.  1                     !     calculation of gravitationally driven drainage from w(3) : taken
 2442.  1                     !     as an integral of time varying conductivity.addition of liston
 2443.  1                     !     baseflow term to original q3g to insure flow in
 2444.  1                     !     dry season. modified liston baseflow constant scaled
 2445.  1                     !     by available water.
 2446.  1                     !
 2447.  1                     !     q3g (q3) : equation (62) , se-86
 2448.  1                     !
 2449.  1                     pows    = 2.0_r8 *bee(ntyp)+2.0_r8
 2450.  1                     q3g (n) = EXP(-pows*LOG(twi(n,3))) &
 2451.  1                          +satco(ntyp)/(zdepth(ntyp,3)*poros(ntyp))* &
 2452.  1                          slop*pows*subdt
 2453.  1                     q3g (n) = EXP(LOG(q3g(n))/pows)
 2454.  1                     q3g (n) =-(1.0_r8 /q3g(n)-w(n,3)) &
 2455.  1                          *poros(ntyp)*zdepth(ntyp,3)*subdti
 2456.  1                     q3g (n) = MAX(0.0_r8 ,q3g(n))
 2457.  1                     q3g (n) = MIN(q3g(n), w(n,3)*poros(ntyp)*zdepth(ntyp,3) &
 2458.  1                          *subdti)
 2459.  1                     q3g (n) = q3g(n)+0.002_r8*poros(ntyp)*zdepth(ntyp,3)*0.5_r8 &
 2460.  1                          /86400.0_r8*w(n,3)
 2461.  1------------>     END DO
 2462.                     !
 2463.                     !     calculation of inter-layer exchanges of water due to gravitation
 2464.                     !     and hydraulic gradient. the values of w(x) + dw(x) are used to
 2465.                     !     calculate the potential gradients between layers.
 2466.                     !     modified calculation of mean conductivities follows milly and
 2467.                     !     eagleson (1982 ), reduces recharge flux to top layer.
 2468.                     !
 2469.                     !      dpdw           : estimated derivative of soil moisture potential
 2470.                     !                       with respect to soil wetness. assumption of
 2471.                     !                       gravitational drainage used to estimate likely
 2472.                     !                       minimum wetness over the time step.
 2473.                     !
 2474.                     !      qqq  (q     )  : equation (61) , s-86
 2475.                     !             i,i+1
 2476.                     !            -
 2477.                     !      avk  (k     )  : equation (4.14) , milly and eagleson (1982)
 2478.                     !             i,i+1
 2479.                     !
 2480.  1------------<     DO n = 1, nmax
 2481.  1                     ntyp=itype(n)
 2482.  1                     wmax = MAX( w(n,1), w(n,2), w(n,3), 0.05_r8 )
 2483.  1                     wmax = MIN( wmax, 1.0_r8 )
 2484.  1                     pmax = EXP(-bee(ntyp)*LOG(wmax))
 2485.  1                     wmin = EXP(-1.0_r8/bee(ntyp)*LOG(pmax-2.0_r8/(phsat(ntyp) &
 2486.  1                          *(zdepth(ntyp,1)+2.0_r8*zdepth(ntyp,2)+zdepth(ntyp,3)))))
 2487.  1                     wmin = MIN( w(n,1), w(n,2), w(n,3), wmin )
 2488.  1                     wmin = MAX( wmin, 0.02_r8 )
 2489.  1                     pmin = EXP(-bee(ntyp)*LOG(wmin))
 2490.  1                     dpdw = phsat(ntyp)*( pmax-pmin )/( wmax-wmin )
 2491.  1              
 2492.  1                     ! hand unrolling of next do loop, first iteration
 2493.  1              
 2494.  1                     rsame = 0.0_r8
 2495.  1                     avk(n)    =twip(n,1)*twipp(n,1)-twip(n,1+1)*twipp(n,1+1)
 2496.  1                     div(n)    =twip(n,1+1) - twip(n,1)
 2497.  1                     IF(ABS(div(n)).LE.1.0e-7_r8) rsame = 1.0_r8
 2498.  1                     avk(n)=satco(ntyp)*avk(n)/ &
 2499.  1                          ((1.0_r8 +3.0_r8 /bee(ntyp))*div(n)+ rsame)
 2500.  1                     avk(n)=MAX(avk(n),satco(ntyp)*MIN(twipp(n,1),twipp(n,1+1)))
 2501.  1                     avk(n)=MIN(avk(n),1.01_r8*(satco(ntyp) &
 2502.  1                          *MAX(twipp(n,1),twipp(n,1+1))))
 2503.  1                     !
 2504.  1                     !     conductivities and base flow reduced when temperature drops below
 2505.  1                     !     freezing
 2506.  1                     !
 2507.  1                     tsnow = MIN (tf-0.01_r8, tg(n))
 2508.  1                     areas = MIN (0.999_r8,13.2_r8*capac(n,2))
 2509.  1                     tgs = tsnow*areas + tg(n)*(1.0_r8-areas)
 2510.  1                     ts  = tgs*(2-1) + td(n)*(1-1)
 2511.  1                     props = (ts-(tf-10.0_r8))/10.0_r8
 2512.  1                     props = MAX(0.05_r8,MIN(1.0_r8, props))
 2513.  1                     avk(n) = avk(n) * props
 2514.  1                     q3g(n) = q3g(n) * props
 2515.  1                     !
 2516.  1                     !     backward implicit calculation of flows between soil layers
 2517.  1                     !
 2518.  1                     dpdwdz= dpdw * 2.0_r8/( zdepth(ntyp,1) + zdepth(ntyp,1+1) )
 2519.  1                     aaa_1=1.0_r8+avk(n)*dpdwdz* &
 2520.  1                          (1.0_r8/zdepth(ntyp,1)+1.0_r8/zdepth(ntyp,1+1))      &
 2521.  1                          *subdt/poros(ntyp)
 2522.  1                     bbb_1 =-avk(n)* dpdwdz*1.0_r8/zdepth(ntyp,2)*subdt/poros(ntyp)
 2523.  1                     ccc_1 = avk(n) * (dpdwdz * ( w(n,1)-w(n,1+1) )+1.0_r8+(1-1) &
 2524.  1                          *dpdwdz*q3g(n)*1.0_r8/zdepth(ntyp,3)*subdt/poros(ntyp))
 2525.  1              
 2526.  1                     ! hand unrolling of next do loop, second iteration
 2527.  1              
 2528.  1                     rsame = 0.0_r8
 2529.  1                     avk(n)    =twip(n,2)*twipp(n,2)-twip(n,2+1)*twipp(n,2+1)
 2530.  1                     div(n)    =twip(n,2+1) - twip(n,2)
 2531.  1                     IF(ABS(div(n)).LE.1.0e-7_r8) rsame = 1.0_r8
 2532.  1                     avk(n)=satco(ntyp)*avk(n)/ &
 2533.  1                          ((1.0_r8 +3.0_r8 /bee(ntyp))*div(n)+ rsame)
 2534.  1                     avk(n)=MAX(avk(n),satco(ntyp)*MIN(twipp(n,2),twipp(n,2+1)))
 2535.  1                     avk(n)=MIN(avk(n),1.01_r8*(satco(ntyp) &
 2536.  1                          *MAX(twipp(n,2),twipp(n,2+1))))
 2537.  1                     !
 2538.  1                     !     conductivities and base flow reduced when temperature drops below
 2539.  1                     !     freezing
 2540.  1                     !
 2541.  1                     tsnow = MIN (tf-0.01_r8, tg(n))
 2542.  1                     areas = MIN (0.999_r8,13.2_r8*capac(n,2))
 2543.  1                     tgs = tsnow*areas + tg(n)*(1.0_r8-areas)
 2544.  1                     ts  = tgs*(2-2) + td(n)*(2-1)
 2545.  1                     props = (ts-(tf-10.0_r8))/10.0_r8
 2546.  1                     props = MAX(0.05_r8,MIN(1.0_r8, props))
 2547.  1                     avk(n) = avk(n) * props
 2548.  1                     q3g(n) = q3g(n) * props
 2549.  1                     !
 2550.  1                     !     backward implicit calculation of flows between soil layers
 2551.  1                     !
 2552.  1                     dpdwdz= dpdw * 2.0_r8/( zdepth(ntyp,2) + zdepth(ntyp,2+1) )
 2553.  1                     aaa_2=1.0_r8+avk(n)*dpdwdz* &
 2554.  1                          (1.0_r8/zdepth(ntyp,2)+1.0_r8/zdepth(ntyp,2+1))      &
 2555.  1                          *subdt/poros(ntyp)
 2556.  1                     bbb_2 =-avk(n)* dpdwdz*1.0_r8/zdepth(ntyp,2)*subdt/poros(ntyp)
 2557.  1                     ccc_2 = avk(n) * (dpdwdz * ( w(n,2)-w(n,2+1) )+1.0_r8+(2-1) &
 2558.  1                          *dpdwdz*q3g(n)*1.0_r8/zdepth(ntyp,3)*subdt/poros(ntyp))
 2559.  1              
 2560.  1              
 2561.  1                     !       DO i = 1, 2
 2562.  1                     !          rsame = 0.0_r8
 2563.  1                     !          avk(n)    =twip(n,i)*twipp(n,i)-twip(n,i+1)*twipp(n,i+1)
 2564.  1                     !          div(n)    =twip(n,i+1) - twip(n,i)
 2565.  1                     !          IF(ABS(div(n)).LE.1.0e-7_r8) rsame = 1.0_r8
 2566.  1                     !          avk(n)=satco(ntyp)*avk(n)/ &
 2567.  1                     !               ((1.0_r8 +3.0_r8 /bee(ntyp))*div(n)+ rsame)
 2568.  1                     !          avk(n)=MAX(avk(n),satco(ntyp)*MIN(twipp(n,i),twipp(n,i+1)))
 2569.  1                     !          avk(n)=MIN(avk(n),1.01_r8*(satco(ntyp) &
 2570.  1                     !               *MAX(twipp(n,i),twipp(n,i+1))))
 2571.  1                     !          !
 2572.  1                     !          !     conductivities and base flow reduced when temperature drops below
 2573.  1                     !          !     freezing
 2574.  1                     !          !
 2575.  1                     !          tsnow = MIN (tf-0.01_r8, tg(n))
 2576.  1                     !          areas = MIN (0.999_r8,13.2_r8*capac(n,2))
 2577.  1                     !          tgs = tsnow*areas + tg(n)*(1.0_r8-areas)
 2578.  1                     !          ts  = tgs*(2-i) + td(n)*(i-1)
 2579.  1                     !          props = (ts-(tf-10.0_r8))/10.0_r8
 2580.  1                     !          props = MAX(0.05_r8,MIN(1.0_r8, props))
 2581.  1                     !          avk(n) = avk(n) * props
 2582.  1                     !          q3g(n) = q3g(n) * props
 2583.  1                     !          !
 2584.  1                     !          !     backward implicit calculation of flows between soil layers
 2585.  1                     !          !
 2586.  1                     !          dpdwdz= dpdw * 2.0_r8/( zdepth(ntyp,i) + zdepth(ntyp,i+1) )
 2587.  1                     !          aaa(i)=1.0_r8+avk(n)*dpdwdz* &
 2588.  1                     !               (1.0_r8/zdepth(ntyp,i)+1.0_r8/zdepth(ntyp,i+1))      &
 2589.  1                     !               *subdt/poros(ntyp)
 2590.  1                     !          bbb(i) =-avk(n)* dpdwdz*1.0_r8/zdepth(ntyp,2)*subdt/poros(ntyp)
 2591.  1                     !          ccc(i) = avk(n) * (dpdwdz * ( w(n,i)-w(n,i+1) )+1.0_r8+(i-1) &
 2592.  1                     !               *dpdwdz*q3g(n)*1.0_r8/zdepth(ntyp,3)*subdt/poros(ntyp))
 2593.  1                     !       END DO
 2594.  1                     denom    = ( aaa_1*aaa_2 - bbb_1*bbb_2 )
 2595.  1                     rdenom   = 0.0_r8
 2596.  1                     IF (ABS(denom) < 1.e-6_r8 ) rdenom = 1.0_r8
 2597.  1                     rdenom   = ( 1.0_r8-rdenom)/( denom + rdenom )
 2598.  1                     qqq_1   = ( aaa_2*ccc_1 - bbb_1*ccc_2 ) * rdenom
 2599.  1                     qqq_2   = ( aaa_1*ccc_2 - bbb_2*ccc_1 ) * rdenom
 2600.  1                     !
 2601.  1                     !     update wetness of each soil moisture layer due to layer interflow
 2602.  1                     !     and base flow.
 2603.  1                     !
 2604.  1                     w(n,3)  = w(n,3) - q3g(n)*subdt/(poros(ntyp)*zdepth(ntyp,3))
 2605.  1                     roff(n) = roff(n) + q3g(n) * subdt
 2606.  1              
 2607.  1                     ! hand unrolling of next do loop, first iteration
 2608.  1              
 2609.  1                     qmax     =  w(n,1)   * (poros(ntyp)*zdepth(ntyp,1)  /subdt)
 2610.  1                     qmin     = -w(n,1+1) * (poros(ntyp)*zdepth(ntyp,1+1)/subdt)
 2611.  1                     qqq_1   =  MIN( qqq_1,qmax)
 2612.  1                     qqq_1   =  MAX( qqq_1,qmin)
 2613.  1                     w(n,1)   =  w(n,1)  -qqq_1/(poros(ntyp)*zdepth(ntyp,1) /subdt)
 2614.  1                     w(n,1+1) =  w(n,1+1)+ &
 2615.  1                          qqq_1/(poros(ntyp)*zdepth(ntyp,1+1)/subdt)
 2616.  1              
 2617.  1                     ! hand unrolling of next do loop, second iteration
 2618.  1              
 2619.  1                     qmax     =  w(n,2)   * (poros(ntyp)*zdepth(ntyp,2)  /subdt)
 2620.  1                     qmin     = -w(n,2+1) * (poros(ntyp)*zdepth(ntyp,2+1)/subdt)
 2621.  1                     qqq_2   =  MIN( qqq_2,qmax)
 2622.  1                     qqq_2   =  MAX( qqq_2,qmin)
 2623.  1                     w(n,2)   =  w(n,2)  -qqq_2/(poros(ntyp)*zdepth(ntyp,2) /subdt)
 2624.  1                     w(n,2+1) =  w(n,2+1)+ &
 2625.  1                          qqq_2/(poros(ntyp)*zdepth(ntyp,2+1)/subdt)
 2626.  1                     !     DO i = 1, 2
 2627.  1                     !        qmax     =  w(n,i)   * (poros(ntyp)*zdepth(ntyp,i)  /subdt)
 2628.  1                     !        qmin     = -w(n,i+1) * (poros(ntyp)*zdepth(ntyp,i+1)/subdt)
 2629.  1                     !        qqq(i)   =  MIN( qqq(i),qmax)
 2630.  1                     !        qqq(i)   =  MAX( qqq(i),qmin)
 2631.  1                     !        w(n,i)   =  w(n,i)  -qqq(i)/(poros(ntyp)*zdepth(ntyp,i) /subdt)
 2632.  1                     !        w(n,i+1) =  w(n,i+1)+ &
 2633.  1                     !             qqq(i)/(poros(ntyp)*zdepth(ntyp,i+1)/subdt)
 2634.  1                     !     END DO
 2635.  1              
 2636.  1                     ! hand unrolling of next do loop, first iteration
 2637.  1              
 2638.  1                     excess   = MAX(0.0_r8,(w(n,1) - 1.0_r8))
 2639.  1                     w(n,1)   = w(n,1) - excess
 2640.  1                     roff(n)  = roff(n) + excess * poros(ntyp)*zdepth(ntyp,1)
 2641.  1              
 2642.  1                     ! hand unrolling of next do loop, second iteration
 2643.  1              
 2644.  1                     excess   = MAX(0.0_r8,(w(n,2) - 1.0_r8))
 2645.  1                     w(n,2)   = w(n,2) - excess
 2646.  1                     roff(n)  = roff(n) + excess * poros(ntyp)*zdepth(ntyp,2)
 2647.  1              
 2648.  1                     ! hand unrolling of next do loop, third iteration
 2649.  1              
 2650.  1                     excess   = MAX(0.0_r8,(w(n,3) - 1.0_r8))
 2651.  1                     w(n,3)   = w(n,3) - excess
 2652.  1                     roff(n)  = roff(n) + excess * poros(ntyp)*zdepth(ntyp,3)
 2653.  1              
 2654.  1                     !     DO i = 1, 3
 2655.  1                     !        excess   = MAX(0.0_r8,(w(n,i) - 1.0_r8))
 2656.  1                     !        w(n,i)   = w(n,i) - excess
 2657.  1                     !        roff(n)  = roff(n) + excess * poros(ntyp)*zdepth(ntyp,i)
 2658.  1                     !     END DO
 2659.  1              
 2660.  1                     ! hand unrolling of next do loop, first iteration
 2661.  1              
 2662.  1                     deficit   = MAX (0.0_r8,(1.e-12_r8 - w(n,1)))
 2663.  1                     w(n,1)    = w(n,1) + deficit
 2664.  1                     w(n,1+1)  = w(n,1+1)-deficit*zdepth(ntyp,1)/zdepth(ntyp,1+1)
 2665.  1              
 2666.  1                     ! hand unrolling of next do loop, second iteration
 2667.  1              
 2668.  1                     deficit   = MAX (0.0_r8,(1.e-12_r8 - w(n,2)))
 2669.  1                     w(n,2)    = w(n,2) + deficit
 2670.  1                     w(n,2+1)  = w(n,2+1)-deficit*zdepth(ntyp,2)/zdepth(ntyp,2+1)
 2671.  1              
 2672.  1                     !
 2673.  1                     !     prevent negative values of www(i)
 2674.  1                     !
 2675.  1              
 2676.  1                     !       DO i = 1,2
 2677.  1                     !          deficit   = MAX (0.0_r8,(1.e-12_r8 - w(n,i)))
 2678.  1                     !          w(n,i)    = w(n,i) + deficit
 2679.  1                     !          w(n,i+1)  = w(n,i+1)-deficit*zdepth(ntyp,i)/zdepth(ntyp,i+1)
 2680.  1                     !       END DO
 2681.  1              
 2682.  1                     w(n,3)      = MAX (w(n,3),1.0e-12_r8)
 2683.  1------------>     END DO
 2684.                   END SUBROUTINE runoff
 2685.                 
 2686.                 
 2687.                   ! stres2 :calculates the adjustment to light dependent stomatal resistance
 2688.                   !         by temperature, humidity and stress factors (simplified).
 2689.                 
 2690.                 
 2691.                 
 2692.                   SUBROUTINE stres2( &
 2693.                        icount,ft1   ,fp1   ,icheck,ta    ,ea    ,rst   ,phsoil,stm   , &
 2694.                        tc    ,tg    ,w     ,vcover,itype , &
 2695.                        rootd ,zdepth,nmax  ,ncols ,topt2 ,tll2  ,tu2   , &
 2696.                        defac2,ph12  ,ph22)
 2697.                     !
 2698.                     !
 2699.                     !-----------------------------------------------------------------------
 2700.                     ! ityp........numero das classes de solo 13
 2701.                     ! icg.........Parametros da vegetacao (icg=1 topo e icg=2 base)
 2702.                     ! idp.........Parametro para as camadas de solo idp=1->3
 2703.                     ! icount......
 2704.                     ! ft1.........temperature  factor   simplified
 2705.                     ! fp1.........soil water potential factor simplified
 2706.                     ! hl........heat of evaporation of water   (j/kg)
 2707.                     ! nmax........
 2708.                     ! topt........Temperatura ideal de funcionamento estomatico
 2709.                     ! tll.........Temperatura minima de funcionamento estomatico
 2710.                     ! tu..........Temperatura maxima de funcionamento estomatico
 2711.                     ! defac.......Parametro de deficit de pressao de vapor d'agua
 2712.                     ! ph1.........Coeficiente para o efeito da agua no solo
 2713.                     ! ph2 ........Potencial de agua no solo para ponto de Wilting
 2714.                     ! rootd.......Profundidade das raizes
 2715.                     ! zdepth......Profundidade para as tres camadas de solo
 2716.                     ! itype.......Classe de textura do solo
 2717.                     ! vcover(iv)..Fracao de cobertura de vegetacao iv=1 Top
 2718.                     ! vcover(iv)..Fracao de cobertura de vegetacao iv=2 Bottom
 2719.                     ! tc..........Temperatura da copa "dossel"(K)
 2720.                     ! tg .........Temperatura da superficie do solo (K)
 2721.                     ! w(id).......Grau de saturacao de umidade do solo id=1 na camada superficial
 2722.                     ! w(id).......Grau de saturacao de umidade do solo id=2 na camada de raizes
 2723.                     ! w(id).......Grau de saturacao de umidade do solo id=3 na camada de drenagem
 2724.                     ! ta..........Temperatura no nivel de fonte de calor do dossel (K)
 2725.                     ! ea..........Pressao de vapor
 2726.                     ! rst ........Resisttencia Estomatica "Stomatal resistence" (s/m)
 2727.                     ! phsoil......soil moisture potential of the i-th soil layer
 2728.                     ! stm.........Resisttencia Estomatica "Stomatal resistence" (s/m)
 2729.                     ! icheck......this version assumes dew-free conditions "icheck=1" to
 2730.                     !             estimate ea for buoyancy term in vntmf or ra.
 2731.                     !-----------------------------------------------------------------------
 2732.                     INTEGER, INTENT(IN   ) :: ncols
 2733.                     INTEGER, INTENT(IN   ) :: icount
 2734.                     REAL(KIND=r8),    INTENT(INOUT) :: ft1   (ncols)
 2735.                     REAL(KIND=r8),    INTENT(INOUT) :: fp1   (ncols)
 2736.                     !
 2737.                     INTEGER, INTENT(in   ) :: nmax
 2738.                     !
 2739.                     !     vegetation and soil parameters
 2740.                     !
 2741.                     REAL(KIND=r8),    INTENT(in   ) :: rootd (ityp,icg)
 2742.                     REAL(KIND=r8),    INTENT(in   ) :: zdepth(ityp,idp)
 2743.                     INTEGER, INTENT(in   ) :: itype (ncols)
 2744.                     REAL(KIND=r8),    INTENT(in   ) :: vcover(ncols,icg)
 2745.                     !
 2746.                     !     prognostic variables
 2747.                     !
 2748.                     REAL(KIND=r8),    INTENT(in   ) :: tc   (ncols)
 2749.                     REAL(KIND=r8),    INTENT(in   ) :: tg   (ncols)
 2750.                     REAL(KIND=r8),    INTENT(in   ) :: w    (ncols,3)
 2751.                     !
 2752.                     !     variables calculated from above and ambient conditions
 2753.                     !
 2754.                     REAL(KIND=r8),    INTENT(in   ) :: ta    (ncols)
 2755.                     REAL(KIND=r8),    INTENT(in   ) :: ea    (ncols)
 2756.                     REAL(KIND=r8),    INTENT(inout) :: rst   (ncols,icg)
 2757.                     REAL(KIND=r8),    INTENT(in   ) :: phsoil(ncols,idp)
 2758.                     REAL(KIND=r8),    INTENT(in   ) :: stm   (ncols,icg)
 2759.                     INTEGER, INTENT(in   ) :: icheck(ncols)
 2760.                     REAL(KIND=r8)   , INTENT(in   ) :: topt2 (ncols,icg)
 2761.                     REAL(KIND=r8)   , INTENT(in   ) :: tll2  (ncols,icg)
 2762.                     REAL(KIND=r8)   , INTENT(in   ) :: tu2   (ncols,icg)
 2763.                     REAL(KIND=r8)   , INTENT(in   ) :: defac2(ncols,icg)
 2764.                     REAL(KIND=r8)   , INTENT(in   ) :: ph12  (ncols,icg)
 2765.                     REAL(KIND=r8)   , INTENT(in   ) :: ph22  (ncols,icg)
 2766.                     !
 2767.                     REAL(KIND=r8)    :: tv  (ncols)
 2768.                     REAL(KIND=r8)    :: d2  (ncols)
 2769.                     REAL(KIND=r8)    :: ft  (ncols)
 2770.                     REAL(KIND=r8)    :: drop(ncols)
 2771.                     REAL(KIND=r8)    :: fd  (ncols)
 2772.                     REAL(KIND=r8)    :: fp  (ncols)
 2773.                     REAL(KIND=r8)    :: ftpd(ncols)
 2774.                     REAL(KIND=r8)    :: dep(3)
 2775.                     REAL(KIND=r8)    :: hl3i
 2776.                     REAL(KIND=r8)    :: xrot
 2777.                     REAL(KIND=r8)    :: xdr
 2778.                     REAL(KIND=r8)    :: arg
 2779.                     INTEGER :: iveg
 2780.                     INTEGER :: i
 2781.                     INTEGER :: ntyp
 2782.                     !
 2783.                     !     humidity, temperature and transpiration factors
 2784.                     !
 2785.  D-----------<>     tv=0.0_r8   !  CALL reset(tv,ncols*13)
 2786.                     hl3i=1.0_r8   /(hl*1000.0_r8  )
 2787.                     iveg=1
 2788.                 
 2789.                     IF (icount == 1) THEN
 2790.                        !cdir novector
 2791.  1------------<        DO i = 1, nmax
 2792.  1                        IF (icheck(i) == 1) THEN
 2793.  1                           ntyp=itype(i)
 2794.  1                           IF ((ntyp == 11) .OR. (ntyp == 13)) THEN
 2795.  1                              CONTINUE
 2796.  1                           ELSE
 2797.  1                              IF (iveg == 1) THEN
 2798.  1                                 tv  (i)=tc(i)
 2799.  1                              ELSE
 2800.  1                                 tv  (i)=tg(i)
 2801.  1                              END IF
 2802.  1                              tv(i)=MIN((tu2 (i,iveg)-0.1_r8   ),tv(i))
 2803.  1                              tv(i)=MAX((tll2(i,iveg)+0.1_r8   ),tv(i))
 2804.  1                              d2(i)=(tu2  (i,iveg)-topt2(i,iveg)) &
 2805.  1                                   /(topt2(i,iveg)-tll2 (i,iveg))
 2806.  1                              ft(i)=(tv(i)-tll2(i,iveg))/ &
 2807.  1                                   (topt2(i,iveg)-tll2(i,iveg)) &
 2808.  1                                   *EXP(d2(i)*LOG( &
 2809.  1                                   (tu2 (i,iveg)-tv(i))/ &
 2810.  1                                   (tu2(i,iveg)-topt2(i,iveg)) ) )
 2811.  1                              ft(i) = MIN(ft(i), 1.e0_r8)
 2812.  1                              ft(i) = MAX(ft(i), 1.e-5_r8)
 2813.  1                              ft1(i) = ft(i)
 2814.  1                              !
 2815.  1                              !  simplified calculation of soil water potential factor, fp
 2816.  1                              !
 2817.  1                              xrot = rootd(ntyp,iveg)
 2818.  1                              dep(1) = 0.0e0_r8
 2819.  1                              dep(2) = 0.0e0_r8
 2820.  1                              dep(3) = 0.0e0_r8
 2821.  1                              dep(1) = MIN(zdepth(ntyp,1), xrot)
 2822.  1                              xrot = xrot - zdepth(ntyp,1)
 2823.  1                              IF (xrot > 0.0e0_r8) THEN
 2824.  1                                 dep(2) = MIN(zdepth(ntyp,2), xrot)
 2825.  1                                 xrot = xrot - zdepth(ntyp,2)
 2826.  1                              ENDIF
 2827.  1                              IF (xrot > 0.0e0_r8) THEN
 2828.  1                                 dep(3) = MIN(zdepth(ntyp,3), xrot)
 2829.  1                                 xrot = xrot - zdepth(ntyp,3)
 2830.  1                              ENDIF
 2831.  1                              xdr = (phsoil(i,1) * dep(1) + phsoil(i,2) * dep(2) &
 2832.  1                                   +phsoil(i,3) * dep(3)) / rootd(ntyp,iveg)
 2833.  1                              xdr = - xdr
 2834.  1                              IF (xdr <= 1.0e-5_r8) xdr = 1.0e-5_r8
 2835.  1                              xdr = LOG (xdr)
 2836.  1                              arg = -ph12(i,1)*(ph22(i,1)-xdr)
 2837.  1                              arg = MIN(arg,0.0_r8)
 2838.  1                              fp(i) = 1.e0_r8 - EXP(arg)
 2839.  1                              IF ((w(i,2) > 0.15e0_r8) .AND. (fp(i) < 0.05e0_r8)) fp(i)=0.05e0_r8
 2840.  1                              fp(i) = MIN(fp(i), 1.e0_r8)
 2841.  1                              fp(i) = MAX(fp(i), 1.e-5_r8)
 2842.  1                              fp1(i) = fp(i)
 2843.  1                           END IF
 2844.  1                        END IF
 2845.  1------------>        END DO
 2846.                     END IF
 2847.                 
 2848.  1------------<     DO i = 1, nmax
 2849.  1                     IF (icheck(i) == 1) THEN
 2850.  1                        ntyp=itype(i)
 2851.  1                        drop(i)=EXP(21.65605_r8   -5418.0_r8   /ta(i))      -ea(i)
 2852.  1                        fd(i) = MAX( 1.0e-5_r8,  1.0_r8/(1.0_r8+ defac2(i,iveg)*drop(i)))
 2853.  1                        fd(i) = MIN(fd(i), 1.e0_r8)
 2854.  1                     END IF
 2855.  1------------>     END DO
 2856.                 
 2857.  1------------<     DO i = 1, nmax
 2858.  1                     IF (icheck(i) == 1) THEN
 2859.  1                        ntyp=itype(i)
 2860.  1                        rst(i,2) = 1.e5_r8
 2861.  1                        IF ((ntyp == 11) .OR. (ntyp == 13)) THEN
 2862.  1                           rst(i,1) = 1.0e5_r8
 2863.  1                           CYCLE
 2864.  1                        END IF
 2865.  1                        ftpd(i)    =  fd(i)* ft1(i) * fp1(i)
 2866.  1                        rst(i,iveg)=stm(i,iveg)/(ftpd(i)*vcover(i,iveg))
 2867.  1                        rst(i,iveg)=MIN(rst(i,iveg),1.0e5_r8)
 2868.  1                     END IF
 2869.  1------------>     END DO
 2870.                 
 2871.                   END SUBROUTINE stres2
ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 2871 
  Local variable "HL3I" is assigned a value but never used.

 2872.                 
 2873.                 
 2874.                 
 2875.                   ! update :performs the updating of soil moisture stores
 2876.                   !         and interception capacity.
 2877.                 
 2878.                 
 2879.                   SUBROUTINE update( &
 2880.                        bps   ,deadtg,deadtc,deadqm,ect   ,eci   ,egt   ,egi   ,egs   , &
 2881.                        eg    ,hc    ,hg    ,ecmass,egmass,etmass,hflux ,chf   ,shf   , &
 2882.                        ra    ,rb    ,rd    ,ea    ,etc   ,etg   ,btc   ,btg   ,cc    , &
 2883.                        cg    ,dtc   ,dtg   ,dtm   ,dqm   ,tc    ,tg    ,td    ,capac , &
 2884.                        tm    ,nmax  ,dtc3x ,ncols)
 2885.                     !
 2886.                     !-----------------------------------------------------------------------
 2887.                     !-----------------------------------------------------------------------
 2888.                     !   ncols.......Numero de ponto por faixa de latitude
 2889.                     !   pie.........Constante Pi=3.1415926e0
 2890.                     !   hl..........heat of evaporation of water   (j/kg)
 2891.                     !   snomel......heat of melting
 2892.                     !   tf..........Temperatura de congelamento (K)
 2893.                     !   dtc3x.......time increment dt
 2894.                     !   nmax........
 2895.                     !   tm..........Temperature of reference (fourier)
 2896.                     !   tc..........Temperatura da copa "dossel" canopy leaf temperature(K)
 2897.                     !   tg..........Temperatura da superficie do solo ground temperature (K)
 2898.                     !   td..........Temperatura do solo profundo (K)
 2899.                     !   capac ......Agua interceptada iv=1 no dossel "water store capacity of leaves"(m)
 2900.                     !   capac.......Agua interceptada iv=2 na cobertura do solo (m)
 2901.                     !   ra..........Resistencia Aerodinamica (s/m)
 2902.                     !   rb .........bulk boundary layer resistance             (s/m)
 2903.                     !   rd..........aerodynamic resistance between ground
 2904.                     !               and canopy air space
 2905.                     !   ea..........Pressao de vapor
 2906.                     !   etc.........Pressure of vapor at top of the copa
 2907.                     !   etg.........Pressao de vapor no base da copa
 2908.                     !   btc.........btc(i)=EXP(30.25353  -5418.0  /tc(i))/(tc(i)*tc(i))
 2909.                     !   btg.........btg(i)=EXP(30.25353  -5418.0  /tg(i))/(tg(i)*tg(i))
 2910.                     !   cc..........heat capacity of the canopy
 2911.                     !   cg..........heat capacity of the ground
 2912.                     !   dtc.........dtc(i)=pblsib(i,2,5)*dtc3x
 2913.                     !   dtg.........dtg(i)=pblsib(i,1,5)*dtc3x
 2914.                     !   dtm.........dtm(i)=pblsib(i,3,5)*dtc3x
 2915.                     !   dqm.........dqm(i)=pblsib(i,4,5)*dtc3x
 2916.                     !   ect.........Transpiracao(J/m*m)
 2917.                     !   eci.........Evaporacao da interceptacao da agua (J/m*m)
 2918.                     !   egt ........Transpiracao na base da copa (J/m*m)  .
 2919.                     !   egi.........Evaporacao da neve (J/m*m)
 2920.                     !   egs.........Evaporacao do solo arido (J/m*m)
 2921.                     !   eg..........Soma da transpiracao na base da copa +  Evaporacao do solo arido
 2922.                     !              +  Evaporacao da neve  " eg   (i)=egt(i)+egs(i)+egi(i)"
 2923.                     !   hc..........total sensible heat lost of top from the veggies.
 2924.                     !   hg..........total sensible heat lost of base from the veggies.
 2925.                     !   ecmass......Mass of water lost of top from the veggies.
 2926.                     !   egmass......Mass of water lost of base from the veggies.
 2927.                     !   etmass......total mass of water lost from the veggies.
 2928.                     !   hflux.......total sensible heat lost from the veggies.
 2929.                     !   chf.........heat fluxes into the canopy  in w/m**2
 2930.                     !   shf.........heat fluxes into the ground, in w/m**2
 2931.                     !   deadtg......
 2932.                     !   deadtc......
 2933.                     !   deadqm......
 2934.                     !   bps.........
 2935.                     !-----------------------------------------------------------------------
 2936.                     INTEGER, INTENT(in   ) :: ncols
 2937.                 
 2938.                     REAL(KIND=r8),    INTENT(in   ) :: dtc3x
 2939.                     INTEGER, INTENT(in   ) :: nmax
 2940.                     !
 2941.                     !     the size of working area is ncols*187
 2942.                     !     atmospheric parameters as boudary values for sib
 2943.                     !
 2944.                     REAL(KIND=r8),    INTENT(in   ) :: tm  (ncols)
 2945.                     !
 2946.                     !     prognostic variables
 2947.                     !
 2948.                     REAL(KIND=r8),    INTENT(in   ) :: tc   (ncols)
 2949.                     REAL(KIND=r8),    INTENT(in   ) :: tg   (ncols)
 2950.                     REAL(KIND=r8),    INTENT(in   ) :: td   (ncols)
 2951.                     REAL(KIND=r8),    INTENT(inout) :: capac(ncols,2)
 2952.                     !
 2953.                     !     variables calculated from above and ambient conditions
 2954.                     !
 2955.                     REAL(KIND=r8),    INTENT(in   ) :: ra  (ncols)
 2956.                     REAL(KIND=r8),    INTENT(in   ) :: rb  (ncols)
 2957.                     REAL(KIND=r8),    INTENT(in   ) :: rd  (ncols)
 2958.                     REAL(KIND=r8),    INTENT(in   ) :: ea  (ncols)
 2959.                     REAL(KIND=r8),    INTENT(in   ) :: etc (ncols)
 2960.                     REAL(KIND=r8),    INTENT(in   ) :: etg (ncols)
 2961.                     REAL(KIND=r8),    INTENT(in   ) :: btc (ncols)
 2962.                     REAL(KIND=r8),    INTENT(in   ) :: btg (ncols)
 2963.                     REAL(KIND=r8),    INTENT(in   ) :: cc  (ncols)
 2964.                     REAL(KIND=r8),    INTENT(in   ) :: cg  (ncols)
 2965.                     REAL(KIND=r8),    INTENT(in   ) :: dtc (ncols)
 2966.                     REAL(KIND=r8),    INTENT(in   ) :: dtg (ncols)
 2967.                     REAL(KIND=r8),    INTENT(in   ) :: dtm (ncols)
 2968.                     REAL(KIND=r8),    INTENT(in   ) :: dqm (ncols)
 2969.                     !
 2970.                     !     heat fluxes : c-canopy, g-ground, t-trans, e-evap  in j m-2
 2971.                     !
 2972.                     REAL(KIND=r8),    INTENT(inout) :: ect   (ncols)
 2973.                     REAL(KIND=r8),    INTENT(inout) :: eci   (ncols)
 2974.                     REAL(KIND=r8),    INTENT(inout) :: egt   (ncols)
 2975.                     REAL(KIND=r8),    INTENT(inout) :: egi   (ncols)
 2976.                     REAL(KIND=r8),    INTENT(inout) :: egs   (ncols)
 2977.                     REAL(KIND=r8),    INTENT(in   ) :: eg    (ncols)
 2978.                     REAL(KIND=r8),    INTENT(in   ) :: hc    (ncols)
 2979.                     REAL(KIND=r8),    INTENT(in   ) :: hg    (ncols)
 2980.                     REAL(KIND=r8),    INTENT(inout  ) :: ecmass(ncols)
 2981.                     REAL(KIND=r8),    INTENT(inout  ) :: egmass(ncols)
 2982.                     REAL(KIND=r8),    INTENT(inout  ) :: etmass(ncols)
 2983.                     REAL(KIND=r8),    INTENT(inout  ) :: hflux (ncols)
 2984.                     REAL(KIND=r8),    INTENT(inout  ) :: chf   (ncols)
 2985.                     REAL(KIND=r8),    INTENT(inout  ) :: shf   (ncols)
 2986.                     !
 2987.                     !     derivatives
 2988.                     !
 2989.                     REAL(KIND=r8),    INTENT(in   ) :: deadtg(ncols)
 2990.                     REAL(KIND=r8),    INTENT(in   ) :: deadtc(ncols)
 2991.                     REAL(KIND=r8),    INTENT(in   ) :: deadqm(ncols)
 2992.                     !
 2993.                     !     this is for coupling with closure turbulence model
 2994.                     !
 2995.                     REAL(KIND=r8),    INTENT(in   ) :: bps  (ncols)
 2996.                 
 2997.                 
 2998.                 
 2999.                 
 3000.                     REAL(KIND=r8) :: tgen  (ncols)
 3001.                     REAL(KIND=r8) :: tcen  (ncols)
 3002.                     REAL(KIND=r8) :: tmen  (ncols)
 3003.                     REAL(KIND=r8) :: taen  (ncols)
 3004.                     REAL(KIND=r8) :: eaen  (ncols)
 3005.                     REAL(KIND=r8) :: d1    (ncols)
 3006.                     REAL(KIND=r8) :: estarc(ncols)
 3007.                     REAL(KIND=r8) :: estarg(ncols)
 3008.                     REAL(KIND=r8) :: facks (ncols)
 3009.                     INTEGER :: i
 3010.                     REAL(KIND=r8) :: timcon
 3011.                     REAL(KIND=r8) :: dtc3xi
 3012.                     REAL(KIND=r8) :: hlati
 3013.                     REAL(KIND=r8) :: hlat3i
 3014.                     REAL(KIND=r8) :: snofac
 3015.                     !
 3016.                     !     adjustment of temperatures and vapor pressure ,
 3017.                     !     sensible heat fluxes. n.b. latent heat fluxes cannot be derived
 3018.                     !     from estarc, estarg, ea due to linear result of implicit method
 3019.                     !
 3020.                     !
 3021.                     !
 3022.                     !
 3023.  Vr4----------<     DO i = 1, nmax
 3024.  Vr4                   tgen(i)=tg(i)+dtg(i)
 3025.  Vr4                   tcen(i)=tc(i)+dtc(i)
 3026.  Vr4                   tmen(i)=tm(i)+dtm(i)
 3027.  Vr4                   d1(i)=1.0_r8   /ra(i)+1.0_r8   /rb(i)+1.0_r8   /rd(i)
 3028.  Vr4                   !
 3029.  Vr4                   !     compute the fluxes consistent with the differencing scheme.
 3030.  Vr4                   !
 3031.  Vr4                   taen(i)=(tgen(i)/rd(i)+tcen(i)/ &
 3032.  Vr4                        rb(i)+tmen(i)*bps(i)/ra(i))/d1(i)
 3033.  Vr4                   eaen(i)=ea(i)+deadtc(i)*dtc(i)+deadtg(i)* &
 3034.  Vr4                        dtg(i)+deadqm(i)*dqm(i)
 3035.  Vr4                   !
 3036.  Vr4                   !     vapor pressures within the canopy and the moss.
 3037.  Vr4                   !
 3038.  Vr4                   estarc(i)=etc(i)+btc(i)*dtc(i)
 3039.  Vr4                   estarg(i)=etg(i)+btg(i)*dtg(i)
 3040.  Vr4---------->     END DO
 3041.  f------------<     DO i = 1, nmax
 3042.  f                     IF (tgen(i) <= tf) THEN
 3043.  f                        egs(i)=eg(i)-egi(i)
 3044.  f                        egt(i)=0.0_r8
 3045.  f                     END IF
 3046.  f------------>     END DO
 3047.                     !
 3048.                     !     heat fluxes into the canopy and the ground, in w/m**2
 3049.                     !
 3050.                     timcon=2.0_r8   *pie/86400.0_r8
 3051.                     dtc3xi=1.0_r8   /dtc3x
 3052.                     hlati =1.0_r8   /        hl
 3053.                     hlat3i=1.0_r8   /(1.0e3_r8*hl)
 3054.  Vr4----------<     DO i = 1, nmax
 3055.  Vr4                   chf(i)=dtc3xi*cc(i)*dtc(i)
 3056.  Vr4                   shf(i)=dtc3xi*cg(i)*dtg(i) + timcon*cg(i)*(tg(i)+dtg(i)-td(i))
 3057.  Vr4---------->     END DO
 3058.                     !
 3059.                     !     evaporation losses are expressed in j m-2 : when divided by
 3060.                     !     ( hl*1000.0_r8) loss is in m m-2
 3061.                     !
 3062.                     snofac=1.0_r8   /( 1.0_r8   +snomel*hlat3i)
 3063.  f------------<     DO i = 1, nmax
 3064.  f                     facks(i)=1.0_r8
 3065.  f                     IF (tcen(i) <= tf) facks(i)=snofac
 3066.  f                     IF ((ect(i)+eci(i)) <= 0.0_r8) THEN
 3067.  f                        eci(i)  =ect(i)+eci(i)
 3068.  f                        ect(i)  =0.0_r8
 3069.  f                        facks(i)=1.0_r8   /facks(i)
 3070.  f                     END IF
 3071.  f------------>     END DO
 3072.  Vr4----------<     DO i = 1, nmax
 3073.  Vr4                   capac(i,1)=capac(i,1)-eci(i)*facks(i)*hlat3i
 3074.  Vr4                   !
 3075.  Vr4                   !     mass terms are in kg m-2 dt-1
 3076.  Vr4                   !
 3077.  Vr4                   ecmass(i)=(ect(i)+eci(i)*facks(i))*hlati
 3078.  Vr4---------->     END DO
 3079.  1------------<     DO i = 1, nmax
 3080.  1                     facks(i)=1.0_r8
 3081.  1                     IF (tgen(i) <= tf) facks(i)=snofac
 3082.  1                     IF ((egt(i)+egi(i)) <= 0.0_r8) THEN
 3083.  1                        egi(i)  =egt(i)+egi(i)
 3084.  1                        egt(i)  =0.0_r8
 3085.  1                        facks(i)=1.0_r8  /facks(i)
 3086.  1                     END IF
 3087.  1------------>     END DO
 3088.  Vr2----------<     DO i = 1, nmax
 3089.  Vr2                   capac(i,2)=capac(i,2)-egi(i)*facks(i)*hlat3i
 3090.  Vr2                   egmass(i)=(egt(i)+egs(i)+egi(i)*facks(i))*hlati
 3091.  Vr2                   !
 3092.  Vr2                   !     total mass of water and total sensible heat lost from the veggies.
 3093.  Vr2                   !
 3094.  Vr2                   etmass(i)=ecmass(i)+egmass(i)
 3095.  Vr2                   hflux (i)=hc(i)+hg(i)
 3096.  Vr2---------->     END DO
 3097.                   END SUBROUTINE update
ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 3097 
  Local variable "ESTARC" is assigned a value but never used.

ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 3097 
  Local variable "TAEN" is assigned a value but never used.

ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 3097 
  Local variable "ESTARG" is assigned a value but never used.

ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 3097 
  Local variable "EAEN" is assigned a value but never used.

 3098.                 
 3099.                 
 3100.                 
 3101.                 
 3102.                 
 3103.                   SUBROUTINE sflxes(&
 3104.                        hgdtg ,hgdtc ,hgdtm ,hcdtg ,hcdtc ,hcdtm ,egdtg ,egdtc ,egdqm , &
 3105.                        ecdtg ,ecdtc ,ecdqm ,deadtg,deadtc,deadqm,icheck,bps   ,psb   , &
 3106.                        dzm   ,em    ,gmt   ,gmq   ,cu    ,cuni  ,ctni  ,ustar ,rhoair, &
 3107.                        psy   ,rcp   ,wc    ,wg    ,fc    ,fg    ,hr    ,ect   ,eci   , &
 3108.                        egt   ,egi   ,egs   ,ec    ,eg    ,hc    ,hg    ,ecidif,egidif, &
 3109.                        ecmass,egmass,etmass,hflux ,chf   ,shf   ,ra    ,rb    ,rd    , &
 3110.                        rc    ,rg    ,tcta  ,tgta  ,ta    ,ea    ,etc   ,etg   ,btc   , &
 3111.                        btg   ,u2    ,radt  ,rst   ,rsoil ,hrr   ,phsoil,cc    ,cg    , &
 3112.                        satcap,dtc   ,dtg   ,dtm   ,dqm   ,stm   ,thermk,tc    ,tg    , &
 3113.                        td    ,capac ,w     ,qm    ,tm    ,um    ,vm    ,psur  ,vcover, &
 3114.                        z0x   ,d     ,rdc   ,rbc   ,z0    ,itype ,dtc3x ,mon   ,nmax  , &
 3115.                        jstneu,ncols ,zlt2 ,topt2  ,tll2  ,tu2   ,defac2,ph12  ,ph22  )
 3116.                 
 3117.                     !-----------------------------------------------------------------------
 3118.                     ! sflxes :performs surface flux parameterization.
 3119.                     !-----------------------------------------------------------------------
 3120.                     !
 3121.                     !  ncols........Numero de ponto por faixa de latitude
 3122.                     !  ityp........numero das classes de solo 13
 3123.                     !  imon........Numero maximo de meses no ano (12)
 3124.                     !  icg.........Parametros da vegetacao (icg=1 topo e icg=2 base)
 3125.                     !  idp.........Camadas de solo (1 a 3)
 3126.                     !  pie.........Constante Pi=3.1415926e0
 3127.                     !  stefan......Constante de Stefan Boltzmann
 3128.                     !  cp..........specific heat of air (j/kg/k)
 3129.                     !  hl..........heat of evaporation of water   (j/kg)
 3130.                     !  grav........gravity constant      (m/s**2)
 3131.                     !  snomel......heat of melting (j m-1)
 3132.                     !  tf..........Temperatura de congelamento (K)
 3133.                     !  gasr........Constant of dry air      (j/kg/k)
 3134.                     !  epsfac......Constante 0.622 Razao entre as massas moleculares do vapor
 3135.                     !              de agua e do ar seco
 3136.                     !  jstneu......The first call to vntlat just gets the neutral values of ustar
 3137.                     !              and ventmf para jstneu=.TRUE..
 3138.                     !  dtc3x.......time increment dt
 3139.                     !  mon.........Number of month at year (1-12)
 3140.                     !  nmax........
 3141.                     !  topt........Temperatura ideal de funcionamento estomatico
 3142.                     !  tll.........Temperatura minima de funcionamento estomatico
 3143.                     !  tu..........Temperatura maxima de funcionamento estomatico
 3144.                     !  defac.......Parametro de deficit de pressao de vapor d'agua
 3145.                     !  ph1.........Coeficiente para o efeito da agua no solo
 3146.                     !  ph2.........Potencial de agua no solo para ponto de Wilting
 3147.                     !  rootd.......Profundidade das raizes
 3148.                     !  bee.........Expoente da curva de retencao "expoente para o solo umido"
 3149.                     !  phsat.......Tensao do solo saturado " Potencial de agua no solo saturado"
 3150.                     !  zdepth......Profundidade para as tres camadas de solo
 3151.                     !  zlt(icg)....Indice de area foliar "LEAF AREA INDEX" icg=1 topo da copa
 3152.                     !  zlt(icg)....Indice de area foliar "LEAF AREA INDEX" icg=2 base da copa
 3153.                     !  x0x.........Comprimento de rugosidade
 3154.                     !  xd..........Deslocamento do plano zero
 3155.                     !  z2..........Altura do topo do dossel
 3156.                     !  xdc.........Constant related to aerodynamic resistance
 3157.                     !              between ground and canopy air space
 3158.                     !  xbc.........Constant related to bulk boundary layer resistance
 3159.                     !  itype.......Classe de textura do solo
 3160.                     !  vcover(iv)..Fracao de cobertura de vegetacao iv=1 Top
 3161.                     !  vcover(iv)..Fracao de cobertura de vegetacao iv=2 Botto
 3162.                     !  z0x.........roughness length                           (m)
 3163.                     !  d...........Displacement height                        (m)
 3164.                     !  rdc.........Constant related to aerodynamic resistance
 3165.                     !              between ground and canopy air space
 3166.                     !  rbc.........Constant related to bulk boundary layer resistance
 3167.                     !  z0..........Roughness length
 3168.                     !  qm..........reference specific humidity (fourier)
 3169.                     !  tm .........reference temperature    (fourier)                (k)
 3170.                     !  um..........Razao entre zonal pseudo-wind (fourier) e seno da
 3171.                     !              colatitude
 3172.                     !  vm..........Razao entre meridional pseudo-wind (fourier) e seno da
 3173.                     !              colatitude
 3174.                     !  psur........surface pressure in mb
 3175.                     !  tc..........Temperatura da copa "dossel"(K)
 3176.                     !  tg..........Temperatura da superficie do solo (K)
 3177.                     !  td..........Temperatura do solo profundo (K)
 3178.                     !  capac(iv)...Agua interceptada iv=1 no dossel "water store capacity of leaves"(m)
 3179.                     !  capac(iv)...Agua interceptada iv=2 na cobertura do solo (m)
 3180.                     !  w(id).......Grau de saturacao de umidade do solo id=1 na camada superficial
 3181.                     !  w(id).......Grau de saturacao de umidade do solo id=2 na camada de raizes
 3182.                     !  w(id).......Grau de saturacao de umidade do solo id=3 na camada de drenagem
 3183.                     !  ra..........Resistencia Aerodinamica (s/m)
 3184.                     !  rb..........bulk boundary layer resistance             (s/m)
 3185.                     !  rd..........aerodynamic resistance between ground      (s/m)
 3186.                     !              and canopy air space
 3187.                     !  rc..........Resistencia do topo da copa
 3188.                     !  rg......... Resistencia da base da copa
 3189.                     !  tcta........Diferenca entre tc-ta                      (k)
 3190.                     !  tgta........Diferenca entre tg-ta                      (k)
 3191.                     !  ta..........Temperatura no nivel de fonte de calor do dossel (K)
 3192.                     !  ea..........Pressure of vapor
 3193.                     !  etc.........Pressure of vapor at top of the copa
 3194.                     !  etg.........Pressao de vapor no base da copa
 3195.                     !  btc.........btc(i)=EXP(30.25353  -5418.0  /tc(i))/(tc(i)*tc(i)).
 3196.                     !  btg.........btg(i)=EXP(30.25353  -5418.0  /tg(i))/(tg(i)*tg(i))
 3197.                     !  u2..........wind speed at top of canopy                (m/s)
 3198.                     !  radt........net heat received by canopy/ground vegetation
 3199.                     !  rst ........Resisttencia Estomatica "Stomatal resistence" (s/m)
 3200.                     !  rsoil ......Resistencia do solo (s/m)
 3201.                     !  hrr.........rel. humidity in top layer
 3202.                     !  phsoil......soil moisture potential of the i-th soil layer
 3203.                     !  cc..........heat capacity of the canopy
 3204.                     !  cg..........heat capacity of the ground
 3205.                     !  satcap......saturation liquid water capacity         (m)
 3206.                     !  dtc.........dtc(i)=pblsib(i,2,5)*dtc3x
 3207.                     !  dtg.........dtg(i)=pblsib(i,1,5)*dtc3x
 3208.                     !  dtm.........dtm(i)=pblsib(i,3,5)*dtc3x
 3209.                     !  dqm.........dqm(i)=pblsib(i,4,5)*dtc3x
 3210.                     !  stm ........Variavel utilizada mo cal. da Resistencia
 3211.                     !  thermk......canopy emissivity
 3212.                     !  ect.........Transpiracao no topo da copa (J/m*m)
 3213.                     !  eci.........Evaporacao da agua interceptada no topo da copa (J/m*m)
 3214.                     !  egt.........Transpiracao na base da copa (J/m*m)
 3215.                     !  egi.........Evaporacao da neve (J/m*m)
 3216.                     !  egs.........Evaporacao do solo arido (J/m*m)
 3217.                     !  ec..........Soma da Transpiracao e Evaporacao da agua interceptada pelo
 3218.                     !              topo da copa   ec   (i)=eci(i)+ect(i)
 3219.                     !  eg..........Soma da transpiracao na base da copa +  Evaporacao do solo arido
 3220.                     !              +  Evaporacao da neve  " eg   (i)=egt(i)+egs(i)+egi(i)"
 3221.                     !  hc..........total sensible heat lost of top from the veggies.
 3222.                     !  hg..........total sensible heat lost of base from the veggies.
 3223.                     !  ecidif......check if interception loss term has exceeded canopy storage
 3224.                     !              ecidif(i)=MAX(0.0   , eci(i)-capac(i,1)*hlat3 )
 3225.                     !  egidif......check if interception loss term has exceeded canopy storage
 3226.                     !              ecidif(i)=MAX(0.0   , egi(i)-capac(i,1)*hlat3 )
 3227.                     !  ecmass......Mass of water lost of top from the veggies.
 3228.                     !  egmass......Mass of water lost of base from the veggies.
 3229.                     !  etmass......total mass of water lost from the veggies.
 3230.                     !  hflux.......total sensible heat lost from the veggies.
 3231.                     !  chf.........heat fluxes into the canopy  in w/m**2
 3232.                     !  shf.........heat fluxes into the ground, in w/m**2
 3233.                     !  bps.........
 3234.                     !  psb.........
 3235.                     !  dzm.........Altura media de referencia  para o vento para o calculo
 3236.                     !               da estabilidade do escoamento
 3237.                     !  em..........Pressao de vapor da agua
 3238.                     !  gmt.........
 3239.                     !  gmq.........specific humidity of reference (fourier)
 3240.                     !  cu..........Friction  transfer coefficients.
 3241.                     !  cuni........neutral friction transfer  coefficients.
 3242.                     !  ctni........neutral heat transfer coefficients.
 3243.                     !  ustar.......surface friction velocity  (m/s)
 3244.                     !  rhoair......Desnsidade do ar
 3245.                     !  psy.........(cp/(hl*epsfac))*psur(i)
 3246.                     !  rcp.........densidade do ar vezes o calor especifico do ar
 3247.                     !  wc..........Minimo entre 1 e a razao entre a agua interceptada pelo
 3248.                     !              indice de area foliar no topo da copa
 3249.                     !  wg..........Minimo entre 1 e a razao entre a agua interceptada pelo
 3250.                     !              indice de area foliar na base da copa
 3251.                     !  fc..........Condicao de oravalho 0 ou 1 na topo da copa
 3252.                     !  fg..........Condicao de oravalho 0 ou 1 na base da copa
 3253.                     !  hr..........rel. humidity in top layer
 3254.                     !  icheck......this version assumes dew-free conditions "icheck=1" to
 3255.                     !              estimate ea for buoyancy term in vntmf or ra.
 3256.                     !  hgdtg.......n.b. fluxes expressed in joules m-2
 3257.                     !  hgdtc.......n.b. fluxes expressed in joules m-2
 3258.                     !  hgdtm.......n.b. fluxes expressed in joules m-2
 3259.                     !  hcdtg.......n.b. fluxes expressed in joules m-2
 3260.                     !  hcdtc.......n.b. fluxes expressed in joules m-2
 3261.                     !  hcdtm.......n.b. fluxes expressed in joules m-2
 3262.                     !  egdtg.......partial derivative calculation for latent heat
 3263.                     !  egdtc.......partial derivative calculation for latent heat
 3264.                     !  egdqm.......partial derivative calculation for latent heat
 3265.                     !  ecdtg.......partial derivative calculation for latent heat
 3266.                     !  ecdtc.......partial derivative calculation for latent heat
 3267.                     !  ecdqm.......partial derivative calculation for latent heat
 3268.                     !  deadtg......
 3269.                     !  deadtc......
 3270.                     !  deadqm......
 3271.                     !
 3272.                     !-----------------------------------------------------------------------
 3273.                     INTEGER, INTENT(in   ) :: ncols
 3274.                 
 3275.                     LOGICAL, INTENT(inout  ) :: jstneu
 3276.                 
 3277.                     REAL(KIND=r8)   , INTENT(in   ) :: dtc3x
 3278.                     INTEGER, INTENT(in   ) :: mon(ncols)
 3279.                     INTEGER, INTENT(in   ) :: nmax
 3280.                     !
 3281.                     INTEGER, INTENT(in   ) :: itype (ncols)
 3282.                     !
 3283.                     REAL(KIND=r8),    INTENT(in) :: vcover(ncols,icg)
 3284.                     REAL(KIND=r8),    INTENT(inout) :: z0x   (ncols)
 3285.                     REAL(KIND=r8),    INTENT(inout) :: d     (ncols)
 3286.                     REAL(KIND=r8),    INTENT(inout) :: rdc   (ncols)
 3287.                     REAL(KIND=r8),    INTENT(inout) :: rbc   (ncols)
 3288.                     REAL(KIND=r8),    INTENT(inout) :: z0    (ncols)
 3289.                     !
 3290.                     !     the size of working area is ncols*187
 3291.                     !     atmospheric parameters as boudary values for sib
 3292.                     !
 3293.                     REAL(KIND=r8),    INTENT(inout) :: qm  (ncols)
 3294.                     REAL(KIND=r8),    INTENT(inout) :: tm  (ncols)
 3295.                     REAL(KIND=r8),    INTENT(in   ) :: um  (ncols)
 3296.                     REAL(KIND=r8),    INTENT(in   ) :: vm  (ncols)
 3297.                     REAL(KIND=r8),    INTENT(inout) :: psur(ncols)
 3298.                     !
 3299.                     !     prognostic variables
 3300.                     !
 3301.                     REAL(KIND=r8),    INTENT(inout) :: tc   (ncols)
 3302.                     REAL(KIND=r8),    INTENT(inout) :: tg   (ncols)
 3303.                     REAL(KIND=r8),    INTENT(inout) :: td   (ncols)
 3304.                     REAL(KIND=r8),    INTENT(inout) :: capac(ncols,2)
 3305.                     REAL(KIND=r8),    INTENT(inout) :: w    (ncols,3)
 3306.                     !
 3307.                     !     variables calculated from above and ambient conditions
 3308.                     !
 3309.                     REAL(KIND=r8),    INTENT(inout) :: ra    (ncols)
 3310.                     REAL(KIND=r8),    INTENT(inout  ) :: rb    (ncols)
 3311.                     REAL(KIND=r8),    INTENT(inout  ) :: rd    (ncols)
 3312.                     REAL(KIND=r8),    INTENT(inout  ) :: rc    (ncols)
 3313.                     REAL(KIND=r8),    INTENT(inout  ) :: rg    (ncols)
 3314.                     REAL(KIND=r8),    INTENT(inout  ) :: tcta  (ncols)
 3315.                     REAL(KIND=r8),    INTENT(inout  ) :: tgta  (ncols)
 3316.                     REAL(KIND=r8),    INTENT(inout  ) :: ta    (ncols)
 3317.                     REAL(KIND=r8),    INTENT(inout  ) :: ea    (ncols)
 3318.                     REAL(KIND=r8),    INTENT(inout  ) :: etc   (ncols)
 3319.                     REAL(KIND=r8),    INTENT(inout  ) :: etg   (ncols)
 3320.                     REAL(KIND=r8),    INTENT(inout  ) :: btc   (ncols)
 3321.                     REAL(KIND=r8),    INTENT(inout  ) :: btg   (ncols)
 3322.                     REAL(KIND=r8),    INTENT(inout) :: u2    (ncols)
 3323.                     REAL(KIND=r8),    INTENT(inout) :: radt  (ncols,icg)
 3324.                     REAL(KIND=r8),    INTENT(inout) :: rst   (ncols,icg)
 3325.                     REAL(KIND=r8),    INTENT(inout  ) :: rsoil (ncols)
 3326.                     REAL(KIND=r8),    INTENT(inout  ) :: hrr   (ncols)
 3327.                     REAL(KIND=r8),    INTENT(inout) :: phsoil(ncols,idp)
 3328.                     REAL(KIND=r8),    INTENT(inout) :: cc    (ncols)
 3329.                     REAL(KIND=r8),    INTENT(inout) :: cg    (ncols)
 3330.                     REAL(KIND=r8),    INTENT(inout) :: satcap(ncols,icg)
 3331.                     REAL(KIND=r8),    INTENT(inout  ) :: dtc   (ncols)
 3332.                     REAL(KIND=r8),    INTENT(inout  ) :: dtg   (ncols)
 3333.                     REAL(KIND=r8),    INTENT(inout  ) :: dtm   (ncols)
 3334.                     REAL(KIND=r8),    INTENT(inout  ) :: dqm   (ncols)
 3335.                     REAL(KIND=r8),    INTENT(inout  ) :: stm   (ncols,icg)
 3336.                     REAL(KIND=r8),    INTENT(inout) :: thermk(ncols)
 3337.                     !
 3338.                     !     heat fluxes : c-canopy, g-ground, t-trans, e-evap  in j m-2
 3339.                     !
 3340.                     REAL(KIND=r8),    INTENT(inout) :: ect   (ncols)
 3341.                     REAL(KIND=r8),    INTENT(inout) :: eci   (ncols)
 3342.                     REAL(KIND=r8),    INTENT(inout) :: egt   (ncols)
 3343.                     REAL(KIND=r8),    INTENT(inout) :: egi   (ncols)
 3344.                     REAL(KIND=r8),    INTENT(inout) :: egs   (ncols)
 3345.                     REAL(KIND=r8),    INTENT(inout  ) :: ec    (ncols)
 3346.                     REAL(KIND=r8),    INTENT(inout  ) :: eg    (ncols)
 3347.                     REAL(KIND=r8),    INTENT(inout  ) :: hc    (ncols)
 3348.                     REAL(KIND=r8),    INTENT(inout  ) :: hg    (ncols)
 3349.                     REAL(KIND=r8),    INTENT(inout  ) :: ecidif(ncols)
 3350.                     REAL(KIND=r8),    INTENT(inout  ) :: egidif(ncols)
 3351.                     REAL(KIND=r8),    INTENT(inout  ) :: ecmass(ncols)
 3352.                     REAL(KIND=r8),    INTENT(inout  ) :: egmass(ncols)
 3353.                     REAL(KIND=r8),    INTENT(inout  ) :: etmass(ncols)
 3354.                     REAL(KIND=r8),    INTENT(inout  ) :: hflux (ncols)
 3355.                     REAL(KIND=r8),    INTENT(inout  ) :: chf   (ncols)
 3356.                     REAL(KIND=r8),    INTENT(inout  ) :: shf   (ncols)
 3357.                     !
 3358.                     !     this is for coupling with closure turbulence model
 3359.                     !
 3360.                     REAL(KIND=r8),    INTENT(in   ) :: bps   (ncols)
 3361.                     REAL(KIND=r8),    INTENT(in   ) :: psb   (ncols)
 3362.                     REAL(KIND=r8),    INTENT(in   ) :: dzm   (ncols)
 3363.                     REAL(KIND=r8),    INTENT(in   ) :: em    (ncols)
 3364.                     REAL(KIND=r8),    INTENT(inout) :: gmt   (ncols,3)
 3365.                     REAL(KIND=r8),    INTENT(inout) :: gmq   (ncols,3)
 3366.                     REAL(KIND=r8),    INTENT(inout) :: cu    (ncols)
 3367.                     REAL(KIND=r8),    INTENT(inout) :: cuni  (ncols)
 3368.                     REAL(KIND=r8),    INTENT(inout) :: ctni  (ncols)
 3369.                     REAL(KIND=r8),    INTENT(inout) :: ustar (ncols)
 3370.                     REAL(KIND=r8),    INTENT(in   ) :: rhoair(ncols)
 3371.                     REAL(KIND=r8),    INTENT(in   ) :: psy   (ncols)
 3372.                     REAL(KIND=r8),    INTENT(inout  ) :: rcp   (ncols)
 3373.                     REAL(KIND=r8),    INTENT(inout) :: wc    (ncols)
 3374.                     REAL(KIND=r8),    INTENT(inout) :: wg    (ncols)
 3375.                     REAL(KIND=r8),    INTENT(inout) :: fc    (ncols)
 3376.                     REAL(KIND=r8),    INTENT(inout) :: fg    (ncols)
 3377.                     REAL(KIND=r8),    INTENT(inout) :: hr    (ncols)
 3378.                     INTEGER, INTENT(inout  ) :: icheck(ncols)
 3379.                     !
 3380.                     !     derivatives
 3381.                     !
 3382.                     REAL(KIND=r8),    INTENT(inout  ) :: hgdtg (ncols)
 3383.                     REAL(KIND=r8),    INTENT(inout  ) :: hgdtc (ncols)
 3384.                     REAL(KIND=r8),    INTENT(inout  ) :: hgdtm (ncols)
 3385.                     REAL(KIND=r8),    INTENT(inout  ) :: hcdtg (ncols)
 3386.                     REAL(KIND=r8),    INTENT(inout  ) :: hcdtc (ncols)
 3387.                     REAL(KIND=r8),    INTENT(inout  ) :: hcdtm (ncols)
 3388.                     REAL(KIND=r8),    INTENT(inout  ) :: egdtg (ncols)
 3389.                     REAL(KIND=r8),    INTENT(inout  ) :: egdtc (ncols)
 3390.                     REAL(KIND=r8),    INTENT(inout  ) :: egdqm (ncols)
 3391.                     REAL(KIND=r8),    INTENT(inout  ) :: ecdtg (ncols)
 3392.                     REAL(KIND=r8),    INTENT(inout  ) :: ecdtc (ncols)
 3393.                     REAL(KIND=r8),    INTENT(inout  ) :: ecdqm (ncols)
 3394.                     REAL(KIND=r8),    INTENT(inout  ) :: deadtg(ncols)
 3395.                     REAL(KIND=r8),    INTENT(inout  ) :: deadtc(ncols)
 3396.                     REAL(KIND=r8),    INTENT(inout  ) :: deadqm(ncols)
 3397.                     !
 3398.                     REAL(KIND=r8),    INTENT(in   ) :: zlt2    (ncols,icg)
 3399.                     REAL(KIND=r8)   , INTENT(in   ) :: topt2   (ncols,icg)
 3400.                     REAL(KIND=r8)   , INTENT(in   ) :: tll2    (ncols,icg)
 3401.                     REAL(KIND=r8)   , INTENT(in   ) :: tu2     (ncols,icg)
 3402.                     REAL(KIND=r8)   , INTENT(in   ) :: defac2  (ncols,icg)
 3403.                     REAL(KIND=r8)   , INTENT(in   ) :: ph12    (ncols,icg)
 3404.                     REAL(KIND=r8)   , INTENT(in   ) :: ph22    (ncols,icg)
 3405.                     !
 3406.                 
 3407.                     REAL(KIND=r8) :: ustarn(ncols)
 3408.                 
 3409.                     REAL(KIND=r8) :: psit
 3410.                     REAL(KIND=r8) :: fac
 3411.                     REAL(KIND=r8) :: y1
 3412.                     REAL(KIND=r8) :: y2
 3413.                     REAL(KIND=r8) :: ecf (ncols)
 3414.                     REAL(KIND=r8) :: egf (ncols)
 3415.                     REAL(KIND=r8) :: dewc(ncols)
 3416.                     REAL(KIND=r8) :: dewg(ncols)
 3417.                     !
 3418.                     REAL(KIND=r8) :: tcsav (ncols)
 3419.                     REAL(KIND=r8) :: tgsav (ncols)
 3420.                     REAL(KIND=r8) :: tmsav (ncols)
 3421.                     REAL(KIND=r8) :: qmsav (ncols)
 3422.                     REAL(KIND=r8) :: tsav  (ncols)
 3423.                     REAL(KIND=r8) :: esav  (ncols)
 3424.                     REAL(KIND=r8) :: rdsav (ncols,2)
 3425.                     REAL(KIND=r8) :: wt
 3426.                     REAL(KIND=r8) :: ft1   (ncols)
 3427.                     REAL(KIND=r8) :: fp1   (ncols)
 3428.                     INTEGER :: idewco(ncols)
 3429.                     !
 3430.                     INTEGER, PARAMETER :: icmax = 10
 3431.                     REAL(KIND=r8),    PARAMETER :: small = 1.0e-3_r8
 3432.                     REAL(KIND=r8)    :: gxx
 3433.                     REAL(KIND=r8)    :: capaci
 3434.                     REAL(KIND=r8)    :: eee
 3435.                     REAL(KIND=r8)    :: dtmdt
 3436.                     REAL(KIND=r8)    :: dqmdt
 3437.                     REAL(KIND=r8)    :: vcover2(ncols,icg)
 3438.                 
 3439.                     INTEGER :: i
 3440.                     INTEGER :: ntyp
 3441.                     INTEGER :: ncount
 3442.                     INTEGER :: icount
 3443.                     !
 3444.  A-----------<>     vcover2=vcover
 3445.  Vr4----------<     DO i = 1, nmax
 3446.  Vr4 A-------<>        tcsav(i)=tc(i)
 3447.  Vr4 A-------<>        tgsav(i)=tg(i)
 3448.  Vr4 A-------<>        tmsav(i)=tm(i)
 3449.  Vr4 A-------<>        qmsav(i)=qm(i)
 3450.  Vr4                   rdsav(i,1)=radt(i,1)
 3451.  Vr4                   rdsav(i,2)=radt(i,2)
 3452.  Vr4                   stm(i,1)=rst(i,1)
 3453.  Vr4                   stm(i,2)=rst(i,2)
 3454.  Vr4---------->     END DO
 3455.                     !
 3456.                     !     airmod checks for the effects of snow
 3457.                     !
 3458.  I                  CALL airmod( &
 3459.                          tg    ,capac ,z0x   ,d     ,rdc   ,rbc   ,itype , &
 3460.                          mon   ,nmax  ,ncols )
 3461.                     !
 3462.                     !     sib roughness length
 3463.                     !
 3464.  A------------<     DO i = 1, nmax
 3465.  A                     z0    (i)=z0x(i)
 3466.  A------------>     END DO
 3467.                 
 3468.                     gxx   =grav/461.5_r8
 3469.                     capaci= 1.0_r8 /0.004_r8
 3470.                 
 3471.  1------------<     DO i = 1, nmax
 3472.  1                     ntyp   =itype(i)
 3473.  1                     wc  (i)=MIN(1.0_r8 ,capac(i,1)/satcap(i,1))
 3474.  1                     wg  (i)=MIN(1.0_r8 ,capac(i,2)/satcap(i,2))
 3475.  1                     !
 3476.  1                     !     rsoil function from fit to camillo and gurney (1985) data.
 3477.  1                     !     wetness of upper 0.5 cm of soil calculated from approximation
 3478.  1                     !     to milly flow equation with reduced (1/50) conductivity in
 3479.  1                     !     top layer.
 3480.  1                     !
 3481.  1                     wt = MAX(small,w(i,1))
 3482.  1                     wt=wt+(0.75_r8*zdepth(ntyp,1)/(zdepth(ntyp,1)+ &
 3483.  1                          zdepth(ntyp,2)))*(wt-(w(i,2)*w(i,2)/wt))*0.5_r8*50.0_r8
 3484.  1                     fac   =MIN(wt,0.99_r8)
 3485.  1                     fac   =MAX(fac   ,small)
 3486.  1                     rsoil(i)=101840.0_r8*(1.0_r8 - EXP(0.0027_r8 * LOG(fac   )))
 3487.  1                     !
 3488.  1                     !phsat =  " Potencial de agua no solo saturado"
 3489.  1                     !
 3490.  1                     psit = phsat(ntyp) * EXP(-bee(ntyp) * LOG(fac   ))
 3491.  1                     !
 3492.  1                     !        --     --
 3493.  1                     !       |  PSI*g  |
 3494.  1                     ! eee = |---------|
 3495.  1                     !       |  Tg*R   |
 3496.  1                     !        --     --
 3497.  1                     !
 3498.  1                     eee = psit * gxx/tg(i)
 3499.  1                     !
 3500.  1                     !The relative humidity of air at the soil surface
 3501.  1                     !
 3502.  1                     !           --     --
 3503.  1                     !          |  PSI*g  |
 3504.  1                     ! fh = exp*|---------|
 3505.  1                     !          |  Tg*R   |
 3506.  1                     !           --     --
 3507.  1                     !
 3508.  1                     hrr  (i)=MAX (small,EXP(eee))
 3509.  1                     !
 3510.  1                     hr   (i)=hrr(i)
 3511.  1                     !
 3512.  1                     IF (tg(i) <= tf) THEN
 3513.  1                        vcover2(i,2)=1.0_r8
 3514.  1                        wg    (i)  =MIN(1.0_r8 ,capac(i,2)*capaci)
 3515.  1                        rst   (i,2)=rsoil(i)
 3516.  1                        stm   (i,2)=rsoil(i)
 3517.  1                     END IF
 3518.  1                     !
 3519.  1 A---------<>        fc(i)=1.0_r8
 3520.  1 A---------<>        fg(i)=1.0_r8
 3521.  1------------>     END DO
 3522.                     !
 3523.                     !     this is the start of iteration of time integration
 3524.                     !     to avoid oscillation
 3525.                     !
 3526.                     ncount=0
 3527.                 7000 CONTINUE
 3528.                     ncount=ncount+1
 3529.  Vr4----------<     DO i = 1, nmax
 3530.  Vr4 A-------<>        icheck(i)=1
 3531.  Vr4                   !
 3532.  Vr4                   !  etc.........Pressure of vapor at top of the copa
 3533.  Vr4                   !  etg.........Pressao de vapor no base da copa
 3534.  Vr4                   !
 3535.  Vr4                   etc(i)=EXP(21.65605_r8  -5418.0_r8  / tc(i))
 3536.  Vr4                   etg(i)=EXP(21.65605_r8  -5418.0_r8  / tg(i))
 3537.  Vr4---------->     END DO
 3538.                     !
 3539.                     !     first guesses for ta and ea
 3540.                     !
 3541.                     IF (ncount == 1) THEN
 3542.  Vr4----------<        DO i = 1, nmax
 3543.  Vr4 A-------<>           ta (i)=tc(i)
 3544.  Vr4                      !
 3545.  Vr4                      !  ea..........Pressure of vapor
 3546.  Vr4                      !
 3547.  Vr4                      ea (i)=qm(i)*psur(i)/(epsfac+qm(i))
 3548.  Vr4---------->        END DO
 3549.                     END IF
 3550.                     !
 3551.                     !     the first call to vntlat just gets the neutral values of ustar
 3552.                     !     and ventmf.
 3553.                     !
 3554.                     jstneu=.TRUE.
 3555.                 
 3556.  I                  CALL vntlax(ustarn, &
 3557.                          icheck,bps   ,dzm   ,cu    ,cuni  ,ctni  ,ustar ,ra    ,ta    , &
 3558.                          u2    ,tm    ,um    ,vm    ,d     ,z0    ,itype ,z2    , &
 3559.                          mon   ,nmax  ,jstneu,ncols )
 3560.                 
 3561.                     jstneu=.FALSE.
 3562.                 
 3563.  I                  CALL vntlax(ustarn, &
 3564.                          icheck ,bps  ,dzm   ,cu    ,cuni  ,ctni  ,ustar ,ra    ,ta    , &
 3565.                          u2     ,tm   ,um    ,vm    ,d     ,z0    ,itype ,z2    , &
 3566.                          mon    ,nmax ,jstneu,ncols )
 3567.                 
 3568.  Vr4----------<     DO i = 1, nmax
 3569.  Vr4                   tcta(i)=tc(i)/bps(i)-tm(i)
 3570.  Vr4                   tgta(i)=tg(i)/bps(i)-tm(i)
 3571.  Vr4---------->     END DO
 3572.  I                  CALL rbrd( &
 3573.                          rb    ,rd    ,tcta  ,tgta  ,u2    ,tg    ,rdc   ,rbc   ,itype , &
 3574.                          z2    ,mon   ,nmax  ,ncols ,zlt2)
 3575.                     !
 3576.                     !     iterate for air temperature and ventilation mass flux
 3577.                     !     n.b. this version assumes dew-free conditions to estimate ea
 3578.                     !     for buoyancy term in vntmf or ra.
 3579.                     !
 3580.                     icount = 0
 3581.                 2000 icount = icount + 1
 3582.  1------------<     DO i = 1, nmax
 3583.  1                     IF (icheck(i) == 1) THEN
 3584.  1                        tsav(i) = ta (i)
 3585.  1                        esav(i) = ea (i)
 3586.  1                     END IF
 3587.  1------------>     END DO
 3588.  I                  CALL vntlax(ustarn, &
 3589.                          icheck,bps   ,dzm   ,cu    ,cuni  ,ctni  ,ustar ,ra    ,ta    , &
 3590.                          u2    ,tm    ,um    ,vm    ,d     ,z0    ,itype ,z2    , &
 3591.                          mon   ,nmax  ,jstneu,ncols )
 3592.                 
 3593.  I                  CALL cut( &
 3594.                          icheck,em    ,rhoair,rcp   ,wc    ,wg    ,fc    ,fg    ,hr    , &
 3595.                          ra    ,rb    ,rd    ,rc    ,rg    ,ea    ,etc   ,etg   ,rst   , &
 3596.                          rsoil ,vcover2,nmax  ,ncols )
 3597.                 
 3598.  I                  CALL stres2( &
 3599.                          icount,ft1   ,fp1   ,icheck,ta    ,ea    ,rst   ,phsoil,stm   , &
 3600.                          tc    ,tg    ,w     ,vcover2,itype ,&
 3601.                          rootd ,zdepth,nmax  ,ncols ,topt2 ,tll2  ,tu2   , &
 3602.                          defac2,ph12  ,ph22)
 3603.                 
 3604.  I                  CALL cut(  &
 3605.                          icheck,em    ,rhoair,rcp   ,wc    ,wg    ,fc    ,fg    ,hr    , &
 3606.                          ra    ,rb    ,rd    ,rc    ,rg    ,ea    ,etc   ,etg   ,rst   , &
 3607.                          rsoil ,vcover2,nmax  ,ncols )
 3608.                 
 3609.  1------------<     DO i = 1, nmax
 3610.  1                     IF (icheck(i) == 1) THEN
 3611.  1                        ta(i)= (tg(i)/rd(i)+tc(i)/rb(i)+tm(i)/ra(i)*bps(i)) &
 3612.  1                             /(1.0_r8 /rd(i)+1.0_r8 /rb(i)+1.0_r8 /ra(i))
 3613.  1                     END IF
 3614.  1------------>     END DO
 3615.                 
 3616.  1------------<     DO i = 1, nmax
 3617.  1                     IF (icheck(i) == 1) THEN
 3618.  1                        y1   =ABS(ta(i)-tsav(i))
 3619.  1                        y2   =ABS(ea(i)-esav(i))
 3620.  1                        IF((y1    <= 1.0e-2_r8 .AND. y2    <= 5.0e-3_r8) &
 3621.  1                             .OR. icount > icmax) THEN
 3622.  1                           icheck(i)=0
 3623.  1                        END IF
 3624.  1                     END IF
 3625.  1------------>     END DO
 3626.                 
 3627.  1------------<     DO i = 1, nmax
 3628.  1                     IF (icheck(i) == 1) GOTO 2000
 3629.  1------------>     END DO
 3630.                 
 3631.  A------------<     DO i = 1, nmax
 3632.  A                     fc    (i)=1.0_r8
 3633.  A                     fg    (i)=1.0_r8
 3634.  A                     idewco(i)=0
 3635.  A                     icheck(i)=1
 3636.  A------------>     END DO
 3637.                 
 3638.  V------------<     DO i = 1, nmax
 3639.  V                     tc(i)    =tcsav(i)
 3640.  V                     tg(i)    =tgsav(i)
 3641.  V A---------<>        tm(i)    =tmsav(i)
 3642.  V A---------<>        qm(i)    =qmsav(i)
 3643.  V                     radt(i,1)=rdsav(i,1)
 3644.  V                     radt(i,2)=rdsav(i,2)
 3645.  V                     etc(i)=EXP(21.65605_r8  -5418.0_r8  /tc(i))
 3646.  V                     etg(i)=EXP(21.65605_r8  -5418.0_r8  /tg(i))
 3647.  V                     btc(i)=EXP(30.25353_r8  -5418.0_r8  /tc(i))/(tc(i)*tc(i))
 3648.  V                     btg(i)=EXP(30.25353_r8  -5418.0_r8  /tg(i))/(tg(i)*tg(i))
 3649.  V------------>     END DO
 3650.                 
 3651.                 3000 CONTINUE
 3652.                 
 3653.  I                  CALL cut( &
 3654.                          icheck,em    ,rhoair,rcp   ,wc    ,wg    ,fc    ,fg    ,hr    , &
 3655.                          ra    ,rb    ,rd    ,rc    ,rg    ,ea    ,etc   ,etg   ,rst   , &
 3656.                          rsoil ,vcover2,nmax  ,ncols )
 3657.                 
 3658.  1------------<     DO i = 1, nmax
 3659.  1                     IF (icheck(i) == 1) THEN
 3660.  1                        ecf (i)=SIGN(1.0_r8  ,etc(i)-ea(i))
 3661.  1                        egf (i)=SIGN(1.0_r8  ,etg(i)-ea(i))
 3662.  1                        dewc(i)=fc(i)*2.0_r8  -1.0_r8
 3663.  1                        dewg(i)=fg(i)*2.0_r8  -1.0_r8
 3664.  1                        ecf (i)=ecf(i)*dewc(i)
 3665.  1                        egf (i)=egf(i)*dewg(i)
 3666.  1                     END IF
 3667.  1------------>     END DO
 3668.                 
 3669.  1------------<     DO i = 1, nmax
 3670.  1                     IF ( (ecf(i) > 0.0_r8  .AND. egf(i) > 0.0_r8 ).OR. &
 3671.  1                          idewco(i) == 3) THEN
 3672.  1                        icheck(i)=0
 3673.  1                     ELSE
 3674.  1                        idewco(i)=idewco(i)+1
 3675.  1                        IF (idewco(i) == 1) THEN
 3676.  1                           fc(i)=0.0_r8
 3677.  1                           fg(i)=1.0_r8
 3678.  1                        ELSE IF (idewco(i) == 2) THEN
 3679.  1                           fc(i)=1.0_r8
 3680.  1                           fg(i)=0.0_r8
 3681.  1                        ELSE IF (idewco(i) == 3) THEN
 3682.  1                           fc(i)=0.0_r8
 3683.  1                           fg(i)=0.0_r8
 3684.  1                        END IF
 3685.  1                     END IF
 3686.  1------------>     END DO
 3687.                 
 3688.  1------------<     DO i=1,nmax
 3689.  1                     IF (icheck(i) == 1) go to 3000
 3690.  1------------>     END DO
 3691.                 
 3692.                     CALL temres(&
 3693.                          bps   ,psb   ,em    ,gmt   ,gmq   ,psy   ,rcp   ,wc    ,wg    , &
 3694.                          fc    ,fg    ,hr    ,hgdtg ,hgdtc ,hgdtm ,hcdtg ,hcdtc ,hcdtm , &
 3695.                          egdtg ,egdtc ,egdqm ,ecdtg ,ecdtc ,ecdqm ,deadtg,deadtc,deadqm, &
 3696.                          ect   ,eci   ,egt   ,egi   ,egs   ,ec    ,eg    ,hc    ,hg    , &
 3697.                          ecidif,egidif,ra    ,rb    ,rd    ,rc    ,rg    ,ta    ,ea    , &
 3698.                          etc   ,etg   ,btc   ,btg   ,radt  ,rst   ,rsoil ,hrr   ,cc    , &
 3699.                          cg    ,satcap,dtc   ,dtg   ,dtm   ,dqm   ,thermk,tc    ,tg    , &
 3700.                          td    ,capac ,qm    ,tm    ,psur  ,dtc3x , &
 3701.                          nmax  ,vcover2,ncols)
 3702.                 
 3703.                     IF (ncount <= 1) THEN
 3704.  Vr4----------<        DO i = 1, nmax
 3705.  Vr4                      tc(i)=tc(i)+dtc(i)
 3706.  Vr4                      tg(i)=tg(i)+dtg(i)
 3707.  Vr4                      tm(i)=tm(i)+dtm(i)
 3708.  Vr4                      qm(i)=qm(i)+dqm(i)
 3709.  Vr4---------->        END DO
 3710.                        go to 7000
 3711.                     END IF
 3712.                 
 3713.  Vpr4 I------->     CALL update( &
 3714.                          bps   ,deadtg,deadtc,deadqm,ect   ,eci   ,egt   ,egi   ,egs   , &
 3715.                          eg    ,hc    ,hg    ,ecmass,egmass,etmass,hflux ,chf   ,shf   , &
 3716.                          ra    ,rb    ,rd    ,ea    ,etc   ,etg   ,btc   ,btg   ,cc    , &
 3717.                          cg    ,dtc   ,dtg   ,dtm   ,dqm   ,tc    ,tg    ,td    ,capac , &
 3718.                          tm    ,nmax  ,dtc3x ,ncols)
 3719.                 
 3720.  Vr2----------<     DO i = 1, nmax
 3721.  Vr2                   fac     =grav/(100.0_r8 *psb(i)*dtc3x)
 3722.  Vr2                   dtmdt   =(gmt(i,3) + hflux (i) * fac   /(cp*bps(i)))/gmt(i,2)
 3723.  Vr2                   dqmdt   =(gmq(i,3) + etmass(i) * fac)  / gmq(i,2)
 3724.  Vr2                   dtm  (i)=dtmdt   *   dtc3x
 3725.  Vr2                   dqm  (i)=dqmdt   *   dtc3x
 3726.  Vr2                   gmt(i,3)=dtmdt
 3727.  Vr2                   gmq(i,3)=dqmdt
 3728.  Vr2                   tm   (i)=tm(i)+dtm(i)
 3729.  Vr2                   qm   (i)=qm(i)+dqm(i)
 3730.  Vr2---------->     END DO
 3731.  Vpr2---------<     DO i = 1, nmax
 3732.  Vpr2                  ntyp=itype(i)
 3733.  Vpr2                  !vcover(i,2)=xcover(ntyp,mon(i),2)
 3734.  Vpr2                  d     (i)=xd (ntyp,mon(i))
 3735.  Vpr2                  z0x   (i)=x0x(ntyp,mon(i))
 3736.  Vpr2                  rdc   (i)=xdc(ntyp,mon(i))
 3737.  Vpr2                  rbc   (i)=xbc(ntyp,mon(i))
 3738.  Vpr2--------->     END DO
 3739.                   END SUBROUTINE sflxes
 3740.                   !
 3741.                   !
 3742.                   !
 3743.                   ! interc :calculation of (1) interception and drainage of rainfall and snow
 3744.                   !                        (2) specific heat terms fixed for time step
 3745.                   !                        (3) modifications for 4-th order model may not
 3746.                   !                            conserve energy;
 3747.                   !         modification: non-uniform precipitation convective ppn
 3748.                   !                       is described by area-intensity relationship :-
 3749.                   !
 3750.                   !                       f(x)=a*exp(-b*x)+c
 3751.                   !
 3752.                   !                       throughfall, interception and infiltration
 3753.                   !                       excess are functional on this relationship
 3754.                   !                       and proportion of large-scale ppn.
 3755.                 
 3756.                 
 3757.                 
 3758.                   SUBROUTINE interc( &
 3759.                        roff  ,cc    ,cg    ,satcap,snow  ,extk  ,tc    ,tg    ,td    , &
 3760.                        capac ,w     ,tm    ,ppc   ,ppl   ,vcover,itype ,dtc3x , &
 3761.                        nmax  ,ncols ,zlt2 )
 3762.                     !
 3763.                     !
 3764.                     !        input parameters
 3765.                     !-----------------------------------------------------------------------
 3766.                     !   ppc.............precipitation rate ( cumulus )           (mm/s)
 3767.                     !   ppl.............precipitation rate ( large scale )       (mm/s)
 3768.                     !   w(1)............soil wetnessof ground surface
 3769.                     !   poros...........porosity
 3770.                     !   pie.............pai=3.14159..
 3771.                     !   cw..............liquid water heat capacity               (j/m**3)
 3772.                     !   clai............heat capacity of foliage
 3773.                     !   capac(cg).......canopy/ground cover liquid water capacity(m)
 3774.                     !   satcap(cg)......saturation liquid water capacity         (m)
 3775.                     !   extk(cg,  ,  )..extinction coefficient
 3776.                     !   zlt(1)..........canopy leaf and stem area density        (m**2/m**3)
 3777.                     !   zlt(2)..........ground cover leaf and stem area index    (m**2/m**2)
 3778.                     !   vcover(cg)......vegetation cover
 3779.                     !   tm..............reference temperature                    (k)
 3780.                     !   tc..............canopy temperature                       (k)
 3781.                     !   tg..............ground temperature                       (k)
 3782.                     !   tf..............freezing point                           (k)
 3783.                     !   satco............mean soil hydraulic conductivity in the root zone
 3784.                     !                                                            (m/s)
 3785.                     !   dtc3x...........time increment dt
 3786.                     !   snomel..........heat of melting                          (j/kg)
 3787.                     !-----------------------------------------------------------------------
 3788.                     !     in subr. parameters
 3789.                     !-----------------------------------------------------------------------
 3790.                     !   chisl...........soil conductivity
 3791.                     !   difsl...........soil diffusivity
 3792.                     !-----------------------------------------------------------------------
 3793.                     !       output parameters
 3794.                     !-----------------------------------------------------------------------
 3795.                     !   roff............runoff
 3796.                     !   snow............snow amount
 3797.                     !   capac(cg).......canopy/ground cover liquid water capacity(m)
 3798.                     !   cc..............heat capacity of the canopy
 3799.                     !   cg..............heat capacity of the ground
 3800.                     !   w(1)............soil wetnessof ground surface
 3801.                     !-----------------------------------------------------------------------
 3802.                     !   ncols...........Numero de ponto por faixa de latitude
 3803.                     !   ityp............numero das classes de solo 13
 3804.                     !   imon............Numero maximo de meses no ano (12)
 3805.                     !   icg.............Parametros da vegetacao (icg=1 topo e icg=2 base)
 3806.                     !   iwv.............Compriment de onda iwv=1=visivel, iwv=2=infravermelho
 3807.                     !                   proximo, iwv=3 infravermelho termal
 3808.                     !   idp.............Camadas de solo (1 a 3)
 3809.                     !   ibd.............Estado da vegetacao  ibd=1 verde / ibd=2 seco
 3810.                     !   mon.............Numero do mes do ano (1-12)
 3811.                     !   nmax
 3812.                     !   zdepth..........Profundidade para as tres camadas de solo
 3813.                     !   itype...........Classe de textura do solo
 3814.                     !   td..............Temperatura do solo profundo (K)
 3815.                     !-----------------------------------------------------------------------
 3816.                     INTEGER, INTENT(in   ) :: ncols
 3817.                 
 3818.                     REAL(KIND=r8),    INTENT(in   ) :: dtc3x
 3819.                     INTEGER, INTENT(in   ) :: nmax
 3820.                 
 3821.                     INTEGER, INTENT(in   ) :: itype (ncols)
 3822.                     REAL(KIND=r8),    INTENT(in   ) :: vcover(ncols,icg)
 3823.                     !
 3824.                     !     the size of working area is ncols*187
 3825.                     !
 3826.                     !     atmospheric parameters as boudary values for sib
 3827.                     !
 3828.                     REAL(KIND=r8),    INTENT(in   ) :: tm  (ncols)
 3829.                     REAL(KIND=r8),    INTENT(in   ) :: ppc (ncols)
 3830.                     REAL(KIND=r8),    INTENT(in   ) :: ppl (ncols)
 3831.                     !
 3832.                     !     prognostic variables
 3833.                     !
 3834.                     REAL(KIND=r8),    INTENT(inout) :: tc   (ncols)
 3835.                     REAL(KIND=r8),    INTENT(inout) :: tg   (ncols)
 3836.                     REAL(KIND=r8),    INTENT(in   ) :: td   (ncols)
 3837.                     REAL(KIND=r8),    INTENT(inout) :: capac(ncols,2)
 3838.                     REAL(KIND=r8),    INTENT(inout) :: w    (ncols,3)
 3839.                     !
 3840.                     !     variables calculated from above and ambient conditions
 3841.                     !
 3842.                     REAL(KIND=r8),    INTENT(inout  ) :: cc    (ncols)
 3843.                     REAL(KIND=r8),    INTENT(inout  ) :: cg    (ncols)
 3844.                     REAL(KIND=r8),    INTENT(in   ) :: satcap(ncols,icg)
 3845.                     REAL(KIND=r8),    INTENT(inout) :: snow  (ncols,icg)
 3846.                     REAL(KIND=r8),    INTENT(in   ) :: extk  (ncols,icg,iwv,ibd)
 3847.                     !
 3848.                     !     heat fluxes : c-canopy, g-ground, t-trans, e-evap  in j m-2
 3849.                     !
 3850.                     REAL(KIND=r8),   INTENT(inout) :: roff  (ncols)
 3851.                     REAL(KIND=r8)   , INTENT(in   ) :: zlt2    (ncols,icg)
 3852.                 
 3853.                     !
 3854.                     REAL(KIND=r8)    :: ap         (ncols)
 3855.                     REAL(KIND=r8)    :: cp         (ncols)
 3856.                     REAL(KIND=r8)    :: totalp(ncols)
 3857.                     REAL(KIND=r8)    :: thru  (ncols)
 3858.                     REAL(KIND=r8)    :: fpi   (ncols)
 3859.                     REAL(KIND=r8)    :: chisl (ncols)
 3860.                     REAL(KIND=r8)    :: csoil (ncols)
 3861.                     REAL(KIND=r8)    :: p0         (ncols)
 3862.                     REAL(KIND=r8)    :: ts         (ncols)
 3863.                     REAL(KIND=r8)    :: specht(ncols)
 3864.                     REAL(KIND=r8)    :: spwet1(ncols)
 3865.                     REAL(KIND=r8)    :: zload (ncols)
 3866.                     REAL(KIND=r8)    :: ccp   (ncols)
 3867.                     REAL(KIND=r8)    :: cct   (ncols)
 3868.                     REAL(KIND=r8)    :: zmelt (ncols)
 3869.                     REAL(KIND=r8)    :: xsc   (ncols)
 3870.                     REAL(KIND=r8)    :: tti   (ncols)
 3871.                     REAL(KIND=r8)    :: xs         (ncols)
 3872.                     REAL(KIND=r8)    :: arg   (ncols)
 3873.                     REAL(KIND=r8)    :: tex   (ncols)
 3874.                     REAL(KIND=r8)    :: tsd   (ncols)
 3875.                     REAL(KIND=r8)    :: pinf  (ncols)
 3876.                     REAL(KIND=r8)    :: equdep(ncols)
 3877.                     REAL(KIND=r8)    :: roffo (ncols)
 3878.                     REAL(KIND=r8)    :: tsf   (ncols)
 3879.                     REAL(KIND=r8)    :: diff  (ncols)
 3880.                     REAL(KIND=r8)    :: freeze(ncols)
 3881.                     REAL(KIND=r8)    :: ccc   (ncols)
 3882.                     REAL(KIND=r8)    :: spwet (ncols)
 3883.                     REAL(KIND=r8)    :: snowp (ncols,2)
 3884.                     REAL(KIND=r8)    :: capacp(ncols,2)
 3885.                 
 3886.                     REAL(KIND=r8), PARAMETER :: pcoefs(2,2) = RESHAPE ( &
 3887.                          (/20.0_r8    ,0.0001_r8  ,0.206e-8_r8,0.9999_r8  /), &
 3888.                          (/2,2/))
 3889.                     REAL(KIND=r8), PARAMETER :: bp = 20.0_r8
 3890.                     REAL(KIND=r8), PARAMETER :: difsl = 5.0e-7_r8
 3891.                     REAL(KIND=r8)    :: d1x
 3892.                     REAL(KIND=r8)    :: theta
 3893.                     INTEGER :: i
 3894.                     INTEGER :: iveg
 3895.                     INTEGER :: ntyp
 3896.                     !
 3897.                     !     diffusivity of the soil
 3898.                     !            --          --
 3899.                     !           |    86400.0   |
 3900.                     !d1x   =SQRT|--------------|*0.5
 3901.                     !           |  (pie*difsl  |
 3902.                     !            --          --
 3903.                     d1x   =SQRT(86400.0_r8 /(pie*difsl))*0.5_r8
 3904.                     !
 3905.  A-----------<>     ap    = 0.0_r8 !  CALL reset(ap,ncols*33)
 3906.  1------------<     DO i = 1, nmax
 3907.  1                     ap(i)=pcoefs(2,1)
 3908.  1                     cp(i)=pcoefs(2,2)
 3909.  1                     totalp(i) = ppc(i) + ppl(i)
 3910.  1                     IF (totalp(i) >= 1.0e-8_r8) THEN
 3911.  1                        !
 3912.  1                        !       (ppc(i)*pcoefs(1,1) + ppl(i)*pcoefs(2,1))
 3913.  1                        !ap(i)=---------------------------------------------
 3914.  1                        !                     totalp(i)
 3915.  1                        !
 3916.  1                        ap(i)=(ppc(i)*pcoefs(1,1) + ppl(i)*pcoefs(2,1))/totalp(i)
 3917.  1                        !
 3918.  1                        !       (ppc(i)*pcoefs(1,1) + ppl(i)*pcoefs(2,1))
 3919.  1                        !ap(i)=---------------------------------------------
 3920.  1                        !                     totalp(i)
 3921.  1                        !
 3922.  1                        cp(i)=(ppc(i)*pcoefs(1,2) + ppl(i)*pcoefs(2,2))/totalp(i)
 3923.  1                        !
 3924.  1                     END IF
 3925.  1 A---------<>        roff(i)=0.0_r8
 3926.  1 A---------<>        thru(i)=0.0_r8
 3927.  1 A---------<>        fpi (i)=0.0_r8
 3928.  1                     !
 3929.  1                     !     conductivity of the soil, taking into account porosity
 3930.  1                     !
 3931.  1                     ntyp    = itype(i)
 3932.  1                     !
 3933.  1                     theta   = w(i,1)*poros(ntyp)
 3934.  1                     !
 3935.  1                     !            ( 9.8e-4 + 1.2e-3 * theta )
 3936.  1                     !chisl(i) = -----------------------------
 3937.  1                     !             ( 1.1 - 0.4 * theta )
 3938.  1                     !
 3939.  1                     chisl(i) = ( 9.8e-4_r8 + 1.2e-3_r8 *theta ) / ( 1.1_r8 - 0.4_r8 *theta )
 3940.  1                     !
 3941.  1                     chisl(i) = chisl(i)*4.186e2_r8
 3942.  1                     !
 3943.  1                     !     heat capacity of the soil
 3944.  1                     !
 3945.  1                     !            --          --
 3946.  1                     !           |    86400.0   |
 3947.  1                     !d1x   =SQRT|--------------|*0.5
 3948.  1                     !           |  (pie*difsl) |
 3949.  1                     !            --          --
 3950.  1                     csoil(i)=chisl(i)*d1x
 3951.  1                     !
 3952.  1                     !     precipitation is given in mm
 3953.  1                     !
 3954.  1                     p0(i)=totalp(i)*0.001_r8
 3955.  1------------>     END DO
 3956.                     !
 3957.                     !
 3958.                     !
 3959.  1------------<     DO iveg = 1, 2
 3960.  1              
 3961.  1                     IF (iveg == 1) THEN
 3962.  1 Vr4--------<           DO i = 1, nmax
 3963.  1 Vr4                       ntyp     =itype(i)
 3964.  1 Vr4 A-----<>              ts    (i)=tc (i)
 3965.  1 Vr4                       !  zlt(icg) = Indice de area foliar "LEAF AREA INDEX" icg=1 topo da copa /icg=2 base da copa
 3966.  1 Vr4                       !  clai     = heat capacity of foliage
 3967.  1 Vr4                       specht(i)=zlt2(i,1)*clai
 3968.  1 Vr4-------->           END DO
 3969.  1                     ELSE
 3970.  1 A----------<           DO i = 1, nmax
 3971.  1 A                         ts    (i)=tg (i)
 3972.  1 A                         specht(i)=csoil(i) !  heat capacity of the soil
 3973.  1 A---------->           END DO
 3974.  1                     END IF
 3975.  1              
 3976.  1 Vcr4-------<        DO i = 1, nmax
 3977.  1 Vcr4                   IF (iveg == 1 .OR. ts(i) > tf) THEN
 3978.  1 Vcr4                      !
 3979.  1 Vcr4                      ! capac(1/2) = canopy/ground cover liquid water capacity(m)
 3980.  1 Vcr4                      ! satcap(cg) = saturation liquid water capacity         (m)
 3981.  1 Vcr4                      !
 3982.  1 Vcr4                      xsc(i) = MAX(0.0_r8  , capac(i,iveg) - satcap(i,iveg))
 3983.  1 Vcr4                      !
 3984.  1 Vcr4                      capac(i,iveg) = capac(i,iveg) - xsc(i)
 3985.  1 Vcr4                      !
 3986.  1 Vcr4                      roff(i) = roff(i) + xsc(i)
 3987.  1 Vcr4                   END IF
 3988.  1 Vcr4------->        END DO
 3989.  1              
 3990.  1 2----------<        DO i = 1, nmax
 3991.  1 2                      ntyp=itype(i)
 3992.  1 2                      !
 3993.  1 2                      !   cw  = liquid water heat capacity (j/m**3)
 3994.  1 2                      !
 3995.  1 2                      spwet1(i)=MIN(0.05_r8 ,capac(i,iveg))*cw
 3996.  1 2                      !
 3997.  1 2                      capacp(i,iveg)=0.0_r8
 3998.  1 2                      !
 3999.  1 2                      snowp (i,iveg)=0.0_r8
 4000.  1 2                      !
 4001.  1 2                      IF (ts(i) > tf) THEN
 4002.  1 2                         capacp(i,iveg)=capac (i,iveg)
 4003.  1 2                      ELSE
 4004.  1 2                         snowp (i,iveg)=capac (i,iveg)
 4005.  1 2                      END IF
 4006.  1 2                      !
 4007.  1 2                      capac (i,iveg)=capacp(i,iveg)
 4008.  1 2                      !
 4009.  1 2                      snow  (i,iveg)=snowp (i,iveg)
 4010.  1 2                      !
 4011.  1 2                      zload (i)     =capac (i,iveg) + snow(i,iveg)
 4012.  1 2                      !
 4013.  1 2                      !                --                                            --
 4014.  1 2                      !               |             --                              -- |
 4015.  1 2                      !               |            | -extk(i,iveg,3,1) * zlt2(i,iveg) ||
 4016.  1 2                      !fpi   (i)     =| 1.0  -  EXP|----------------------------------|| * vcover(i,iveg)
 4017.  1 2                      !               |            |         vcover(i,iveg)           ||
 4018.  1 2                      !               |              --                              --|
 4019.  1 2                      !                --                                            --
 4020.  1 2                      !
 4021.  1 2                      fpi   (i)     =( 1.0_r8 -EXP(-extk(i,iveg,3,1)*zlt2(i,iveg) &
 4022.  1 2                           /vcover(i,iveg))) *vcover(i,iveg)
 4023.  1 2                      !
 4024.  1 2                      tti(i)=p0(i)*( 1.0_r8 -fpi(i) )
 4025.  1 2                      !
 4026.  1 2                      IF (iveg.EQ.2) tti(i) = p0(i)
 4027.  1 2---------->        END DO
 4028.  1                     !
 4029.  1                     !     proportional saturated area (xs) and leaf drainage(tex)
 4030.  1                     !
 4031.  1 2----------<        DO i = 1, nmax
 4032.  1 2                      xs(i)=1.0_r8
 4033.  1 2                      IF (p0(i) >= 1.0e-9_r8) THEN
 4034.  1 2                         !
 4035.  1 2                         !        (satcap(i,iveg) - zload(i))      cp(i)
 4036.  1 2                         !arg(i)=----------------------------- - ---------
 4037.  1 2                         !          (p0(i)*fpi(i)*ap(i))           ap(i)
 4038.  1 2                         !
 4039.  1 2                         arg(i)=(satcap(i,iveg)-zload(i))/ &
 4040.  1 2                              (p0(i)*fpi(i)*ap(i)) - cp(i)/ap(i)
 4041.  1 2                         IF (arg(i) >= 1.0e-9_r8) THEN
 4042.  1 2                            !
 4043.  1 2                            !         -1.0
 4044.  1 2                            !xs(i) = ------ * LOG(arg(i))
 4045.  1 2                            !          bp
 4046.  1 2                            !
 4047.  1 2                            xs(i)=-1.0_r8/bp * LOG( arg(i) )
 4048.  1 2                            xs(i)= MIN ( xs(i) , 1.0_r8 )
 4049.  1 2                            xs(i)= MAX ( xs(i) , 0.0_r8 )
 4050.  1 2                         END IF
 4051.  1 2                      END IF
 4052.  1 2---------->        END DO
 4053.  1              
 4054.  1 2----------<        DO i = 1, nmax
 4055.  1 2                      !                     --                                        --
 4056.  1 2                      !                    | ap(i)                                      |
 4057.  1 2                      !tex(i)=p0(i)*fpi(i)*|-------*(1.0 - EXP(-bp*xs(i))) + cp(i)*xs(i)|-(satcap(i,iveg) - zload(i))*xs(i)
 4058.  1 2                      !                    |  bp                                        |
 4059.  1 2                      !                     --                                        --
 4060.  1 2                      tex(i)=p0(i)*fpi(i)*(ap(i)/bp*(1.0_r8 -EXP(-bp*xs(i)))+cp(i)*xs(i)) &
 4061.  1 2                           -(satcap(i,iveg)-zload(i))*xs(i)
 4062.  1 2            
 4063.  1 2                      tex(i)= MAX ( tex(i), 0.0_r8 )
 4064.  1 2                      !
 4065.  1 2                      IF (iveg == 2) tex(i) = 0.0_r8
 4066.  1 2                      !
 4067.  1 2                      !     total throughfall (thru) and store augmentation
 4068.  1 2                      !
 4069.  1 2                      thru(i)=tti(i)+tex(i)
 4070.  1 2                      IF (iveg == 2 .AND. tg(i) <= tf) THEN
 4071.  1 2                         thru(i)=0.0_r8
 4072.  1 2                      END IF
 4073.  1 2            
 4074.  1 2                      pinf(i)=p0(i) - thru(i)
 4075.  1 2            
 4076.  1 2                      IF (tm(i) > tf) THEN
 4077.  1 2                         capac(i,iveg) = capac(i,iveg) + pinf(i)
 4078.  1 2                      ELSE
 4079.  1 2                         snow (i,iveg) = snow (i,iveg) + pinf(i)
 4080.  1 2                      END IF
 4081.  1 2---------->        END DO
 4082.  1              
 4083.  1                     IF (iveg == 2)   THEN
 4084.  1 2----------<           DO i = 1, nmax
 4085.  1 2                         ntyp=itype(i)
 4086.  1 2                         IF (tm(i) <= tf) THEN
 4087.  1 2                            snow  (i,iveg) = snowp(i,iveg) + p0(i)
 4088.  1 2                            thru  (i)=0.0_r8
 4089.  1 2                         ELSE
 4090.  1 2                            !
 4091.  1 2                            !     instantaneous overland flow contribution ( roff )
 4092.  1 2                            !
 4093.  1 2                            equdep(i)=satco(ntyp)*dtc3x
 4094.  1 2                            xs(i)=1.0_r8
 4095.  1 2                            IF (thru(i) >= 1.0e-9_r8) THEN
 4096.  1 2                               arg(i)=equdep(i)/( thru(i)*ap(i) ) -cp(i)/ap(i)
 4097.  1 2                               IF (arg(i) >= 1.0e-9_r8) THEN
 4098.  1 2                                  xs(i)=-1.0_r8 /bp* LOG( arg(i) )
 4099.  1 2                                  xs(i)= MIN ( xs(i), 1.0_r8 )
 4100.  1 2                                  xs(i)= MAX ( xs(i), 0.0_r8 )
 4101.  1 2                               END IF
 4102.  1 2                            END IF
 4103.  1 2                            roffo(i)=thru(i)* &
 4104.  1 2                                 (ap(i)/bp*(1.0_r8 -EXP(-bp*xs(i)))+cp(i)*xs(i)) &
 4105.  1 2                                 -equdep(i)*xs(i)
 4106.  1 2                            roffo(i)= MAX ( roffo(i), 0.0_r8 )
 4107.  1 2                            roff (i)= roff (i)+roffo(i)
 4108.  1 2                            w(i,1)=w(i,1)+(thru(i)-roffo(i))/ &
 4109.  1 2                                 ( poros(ntyp)*zdepth(ntyp,1))
 4110.  1 2                         END IF
 4111.  1 2---------->           END DO
 4112.  1                     END IF
 4113.  1                     !
 4114.  1                     !     temperature change due to addition of precipitation
 4115.  1                     !
 4116.  1 Vr2--------<        DO i = 1, nmax
 4117.  1 Vr2                    diff(i)=(capac (i,iveg)+snow (i,iveg) &
 4118.  1 Vr2                         -capacp(i,iveg)-snowp(i,iveg))*cw
 4119.  1 Vr2                    ccp(i)=specht(i)+spwet1(i)
 4120.  1 Vr2                    cct(i)=specht(i)+spwet1(i)+diff(i)
 4121.  1 Vr2                    tsd(i)=( ts(i)*ccp(i)+tm(i)*diff(i) )/cct(i)
 4122.  1 Vr2                    tsf(i)=( ts(i)-tf)*( tm(i)-tf)
 4123.  1 Vr2-------->        END DO
 4124.  1 2----------<        DO i = 1, nmax
 4125.  1 2                      IF (tsf(i) < 0.0_r8) THEN
 4126.  1 2                         IF (tsd(i) <= tf) THEN
 4127.  1 2                            !
 4128.  1 2                            !     freezing of water on canopy or ground
 4129.  1 2                            !
 4130.  1 2                            ccc(i)=capacp(i,iveg)*snomel
 4131.  1 2                            IF (ts(i) < tm(i)) ccc(i)=diff(i)*snomel/cw
 4132.  1 2                            tsd   (i)=( ts(i)*ccp(i)+tm(i)*diff(i)+ccc(i) )/cct(i)
 4133.  1 2                            freeze(i)= tf*cct(i)-( ts(i)*ccp(i)+tm(i)*diff(i) )
 4134.  1 2                            freeze(i)=( MIN ( ccc(i), freeze(i) ))/snomel
 4135.  1 2                            IF (tsd(i) > tf) tsd(i) = tf - 0.1_r8
 4136.  1 2                            snow (i,iveg)=snow (i,iveg)+freeze(i)
 4137.  1 2                            capac(i,iveg)=capac(i,iveg)-freeze(i)
 4138.  1 2                         ELSE
 4139.  1 2                            !
 4140.  1 2                            !     melting of water on canopy or ground
 4141.  1 2                            !
 4142.  1 2                            ccc(i)=- snow(i,iveg)*snomel
 4143.  1 2                            IF (ts(i) > tm(i)) ccc(i)=- diff(i)*snomel/cw
 4144.  1 2                            tsd   (i)=( ts(i)*ccp(i)+tm(i)*diff(i)+ccc(i) )/cct(i)
 4145.  1 2                            freeze(i)=( tf*cct(i)-( ts(i)*ccp(i)+tm(i)*diff(i) ))
 4146.  1 2                            freeze(i)= MAX ( ccc(i), freeze(i) ) /snomel
 4147.  1 2                            IF (tsd(i) <= tf) tsd(i) = tf - 0.1_r8
 4148.  1 2                            snow (i,iveg)=snow (i,iveg)+freeze(i)
 4149.  1 2                            capac(i,iveg)=capac(i,iveg)-freeze(i)
 4150.  1 2                         END IF
 4151.  1 2                      END IF
 4152.  1 2---------->        END DO
 4153.  1 A----------<        DO i = 1, nmax
 4154.  1 A                      IF (iveg == 1) THEN
 4155.  1 A                         tc(i)=tsd(i)
 4156.  1 A                      ELSE
 4157.  1 A                         tg(i)=tsd(i)
 4158.  1 A                      END IF
 4159.  1 A---------->        END DO
 4160.  1 2----------<        DO i = 1, nmax
 4161.  1 2                      IF (snow(i,iveg) >= 0.0000001_r8 .OR. iveg == 2) THEN
 4162.  1 2                         zmelt(i) = 0.0_r8
 4163.  1 2                         IF (td(i) > tf) THEN
 4164.  1 2                            zmelt(i)=capac(i,iveg)
 4165.  1 2                         ELSE
 4166.  1 2                            roff (i)=roff(i)+capac(i,iveg)
 4167.  1 2                         END IF
 4168.  1 2                         capac(i,iveg)=0.0_r8
 4169.  1 2                         !
 4170.  1 2                         !     if tg is less than tf water accumulates as snowpack in capac(2)
 4171.  1 2                         !
 4172.  1 2                         ntyp=itype(i)
 4173.  1 2                         w(i,1)=w(i,1)+zmelt(i)/( poros(ntyp)*zdepth(ntyp,1))
 4174.  1 2                      END IF
 4175.  1 2---------->        END DO
 4176.  1 Vr4--------<        DO i = 1, nmax
 4177.  1 Vr4                    !
 4178.  1 Vr4                    !     these lines exist to eliminate a cray compiler error
 4179.  1 Vr4                    !
 4180.  1 Vr4                    IF (iveg == 2) THEN
 4181.  1 Vr4                       IF (snow(i,2) > 0.0_r8 .AND. tg(i) > 273.16_r8) THEN
 4182.  1 Vr4                       END IF
 4183.  1 Vr4                       IF (capac(i,2) > 0.0_r8 .AND. tg(i) > 273.16_r8) THEN
 4184.  1 Vr4                       END IF
 4185.  1 Vr4                    END IF
 4186.  1 Vr4                    capac(i,iveg)=capac(i,iveg)+snow(i,iveg)
 4187.  1 Vr4                    snow (i,iveg)=0.0_r8
 4188.  1 Vr4 A-----<>           p0(i)=thru(i)
 4189.  1 Vr4-------->        END DO
 4190.  1------------>     END DO
 4191.                     !
 4192.                     !     calculation of canopy and ground heat capacities.
 4193.                     !
 4194.  Vr4----------<     DO i = 1, nmax
 4195.  Vr4                   ntyp=itype(i)
 4196.  Vr4                   cc(i)=zlt2(i,1)*clai+capac(i,1)*cw
 4197.  Vr4                   spwet(i)=MIN( 0.05_r8 , capac(i,2))*cw
 4198.  Vr4                   cg(i)=csoil(i)+spwet(i)
 4199.  Vr4---------->     END DO
 4200.                   END SUBROUTINE interc
 4201.                 
 4202.                 
 4203.                 
 4204.                   ! stomat :performs stomatal resistance.
 4205.                 
 4206.                 
 4207.                 
 4208.                   SUBROUTINE stomat( &
 4209.                        cosz  ,par   ,pd    ,rst   ,extk  ,vcover,itype ,nmax  ,ncols ,&
 4210.                        zlt2  ,green2,chil2 ,rstpar2)
 4211.                     !
 4212.                     !
 4213.                     !-----------------------------------------------------------------------
 4214.                     !      input parameters
 4215.                     !-----------------------------------------------------------------------
 4216.                     !   cosz.............cosine of zenith angle
 4217.                     !   extk(cg,vnt,bd)..extinction coefficient
 4218.                     !   zlt   (cg).......leaf area index
 4219.                     !   vcover(cg).......fraction of vegetation cover
 4220.                     !   green (cg).......fraction of grenn leaves
 4221.                     !   chil  (cg).......leaf orientation pameter
 4222.                     !   rstpar(cg,3).....coefficints related to par influence on
 4223.                     !                    stomatal resistance
 4224.                     !   radn   (vnt,bd)..downward sw/lw radiation at the surface
 4225.                     !   par   (cg).......par( photo-synthetic active radiation)
 4226.                     !   pd    (cg).......ratio of par(beam) to par(beam+diffuse)
 4227.                     !-----------------------------------------------------------------------
 4228.                     !     output parameters
 4229.                     !-----------------------------------------------------------------------
 4230.                     !   rst(cg)..........stomatal reistance
 4231.                     !-----------------------------------------------------------------------
 4232.                     !   itype............Classe de textura do solo
 4233.                     !   nmax
 4234.                     !   pie..............Constante Pi=3.1415926e0
 4235.                     !   athird...........Constante athird=1.0e0 /3.0e0
 4236.                     !   ncols............Numero de ponto por faixa de latitude
 4237.                     !   ityp.............numero das classes de solo 13
 4238.                     !   imon.............Numero maximo de meses no ano (12)
 4239.                     !   icg..............Parametros da vegetacao (icg=1 topo e icg=2 base)
 4240.                     !   iwv..............Compriment de onda iwv=1=visivel, iwv=2=infravermelho
 4241.                     !                    proximo, iwv=3 infravermelho termal
 4242.                     !   ibd..............Estado da vegetacao ibd=1 verde / ibd=2 seco
 4243.                     !-----------------------------------------------------------------------
 4244.                     !
 4245.                     INTEGER, INTENT(in   ) :: ncols
 4246.                     INTEGER, INTENT(in   ) :: nmax
 4247.                     REAL(KIND=r8)   , INTENT(in   ) :: rstpar2(ncols,icg,iwv)
 4248.                     INTEGER, INTENT(in   ) :: itype (ncols)
 4249.                     REAL(KIND=r8),    INTENT(in   ) :: vcover(ncols,icg)
 4250.                     REAL(KIND=r8)   , INTENT(in   ) :: zlt2    (ncols,icg)
 4251.                     REAL(KIND=r8)   , INTENT(in   ) :: green2  (ncols,icg)
 4252.                     REAL(KIND=r8)   , INTENT(in   ) :: chil2   (ncols,icg)
 4253.                 
 4254.                     !
 4255.                     !     variables calculated from above and ambient conditions
 4256.                     !
 4257.                     REAL(KIND=r8),    INTENT(in   ) :: par   (ncols,icg)
 4258.                     REAL(KIND=r8),    INTENT(in   ) :: pd    (ncols,icg)
 4259.                     REAL(KIND=r8),    INTENT(inout  ) :: rst   (ncols,icg)
 4260.                     REAL(KIND=r8),    INTENT(inout) :: extk  (ncols,icg,iwv,ibd)
 4261.                     !
 4262.                     !     this is for coupling with closure turbulence model
 4263.                     !
 4264.                     REAL(KIND=r8),    INTENT(in   ) :: cosz  (ncols)
 4265.                     !
 4266.                     REAL(KIND=r8)    :: f     (ncols)
 4267.                     REAL(KIND=r8)    :: gamma (ncols)
 4268.                     REAL(KIND=r8)    :: at    (ncols)
 4269.                     REAL(KIND=r8)    :: power1(ncols)
 4270.                     REAL(KIND=r8)    :: power2(ncols)
 4271.                     REAL(KIND=r8)    :: aa    (ncols)
 4272.                     REAL(KIND=r8)    :: bb    (ncols)
 4273.                     REAL(KIND=r8)    :: zat   (ncols)
 4274.                     REAL(KIND=r8)    :: zk    (ncols)
 4275.                     REAL(KIND=r8)    :: ekat  (ncols)
 4276.                     REAL(KIND=r8)    :: rho4  (ncols)
 4277.                     REAL(KIND=r8)    :: avflux(ncols)
 4278.                     !
 4279.                     INTEGER :: i
 4280.                     INTEGER :: iveg
 4281.                     INTEGER :: irad
 4282.                     REAL(KIND=r8)    :: fcon
 4283.                     REAL(KIND=r8)    :: xabc
 4284.                     REAL(KIND=r8)    :: xabd
 4285.                     REAL(KIND=r8)    :: ftemp
 4286.                     !
 4287.                     !
 4288.                     !     bounding of product of extinction coefficient and local l.a.i.
 4289.                     !
 4290.  Vr4----------<     DO i = 1, nmax
 4291.  Vr4                   f(i) = MAX( cosz(i), 0.01746_r8 )
 4292.  Vr4---------->     END DO
 4293.                     !
 4294.  1------------<     DO iveg = 1, 2
 4295.  1 2----------<        DO irad = 1, 2 !Estado da vegetacao irad=1 verde / irad=2 seco
 4296.  1 2 Vr4------<           DO i = 1, nmax
 4297.  1 2 Vr4                     !             --                   --
 4298.  1 2 Vr4                     !            |             150       |
 4299.  1 2 Vr4                     ! extk = MIN |  extk, -------------- |
 4300.  1 2 Vr4                     !            |         zlt2 * vcover |
 4301.  1 2 Vr4                     !             --                   --
 4302.  1 2 Vr4                     !
 4303.  1 2 Vr4                     extk(i,iveg,1,irad)=min(extk(i,iveg,1,irad),150.0_r8 / &
 4304.  1 2 Vr4                          zlt2(i,iveg)*vcover(i,iveg))
 4305.  1 2 Vr4------>           END DO
 4306.  1 2---------->        END DO
 4307.  1------------>     END DO
 4308.                     !
 4309.                     fcon  =0.25_r8*pie + athird
 4310.                     iveg=1
 4311.                     !
 4312.  1------------<     DO i = 1, nmax
 4313.  1                     IF (itype(i) == 13 .OR. itype(i) == 11) THEN
 4314.  1                        rst(i,iveg) = 1.0e5_r8
 4315.  1                     ELSE
 4316.  1                        !
 4317.  1                        !        zlt2           leaf area index
 4318.  1                        ! at = -------- = ------------------------------
 4319.  1                        !       vcover     fraction of vegetation cover
 4320.  1                        !
 4321.  1                        !
 4322.  1                        at(i) = zlt2(i,iveg)/vcover(i,iveg)
 4323.  1                        !
 4324.  1                        IF (par(i,iveg) <= 0.00101_r8) THEN
 4325.  1                           !
 4326.  1                           ! iwv........Compriment de onda iwv=1=visivel, iwv=2=infravermelho
 4327.  1                           !             proximo, iwv=3 infravermelho termal
 4328.  1                           !
 4329.  1                           !            rstpar(visivel)
 4330.  1                           ! xabc = ------------------------- + rstpar(infravermelho termal)
 4331.  1                           !          rstpar(infravermelho)
 4332.  1                           !
 4333.  1                           xabc = rstpar2(i,iveg,1) / rstpar2(i,iveg,2) + rstpar2(i,iveg,3)
 4334.  1                           !
 4335.  1                           !        0.5
 4336.  1                           ! xabd =------ *  at(i)
 4337.  1                           !        xabc
 4338.  1                           !
 4339.  1                           xabd = 0.5_r8  / xabc * at(i)
 4340.  1                           !
 4341.  1                           !          1
 4342.  1                           ! rst  = ------
 4343.  1                           !         xabd
 4344.  1                           !
 4345.  1                           rst(i,iveg) = 1.0_r8 / xabd
 4346.  1                        ELSE
 4347.  1                           !
 4348.  1                           !         (rstpar2(visivel) + rstpar2(infravermelho)* rstpar2(infravermelho termal))
 4349.  1                           ! gamma =---------------------------------------------------------------------------
 4350.  1                           !                          rstpar2(infravermelho termal)
 4351.  1                           !
 4352.  1                           gamma(i)  = (rstpar2(i,iveg,1) + rstpar2(i,iveg,2) &
 4353.  1                                * rstpar2(i,iveg,3))/ rstpar2(i,iveg,3)
 4354.  1                           !
 4355.  1                           !     single extinction coefficient using weighted
 4356.  1                           !     values of direct and diffus contributions to p.a.r.
 4357.  1                           !
 4358.  1                           !
 4359.  1                           !        zlt            leaf area index
 4360.  1                           ! at = -------- = ------------------------------
 4361.  1                           !       vcover     fraction of vegetation cover
 4362.  1                           !
 4363.  1                           !
 4364.  1                           at(i)     = zlt2(i,iveg)/vcover(i,iveg)
 4365.  1                           !
 4366.  1                           !           zlt          150
 4367.  1                           !power1 = -------- * --------------
 4368.  1                           !          vcover     zlt2 * vcover
 4369.  1                           !
 4370.  1                           power1(i) = at(i)*extk(i,iveg,1,1)!Estado da vegetacao irad=1 verde
 4371.  1                           power2(i) = at(i)*extk(i,iveg,1,2)!Estado da vegetacao irad=2 seco
 4372.  1                           !
 4373.  1                           ! chil2   Leaf orientation parameter
 4374.  1                           !  icg    Parameters of vagetation (icg=1 top e icg=2 bottom)
 4375.  1                           !
 4376.  1                           ! aa(i)   = 0.5 - (0.633 + 0.33 * chil2(i,icg)) * chil2(i,icg)
 4377.  1                           !
 4378.  1                           aa(i)     = 0.5_r8 -(0.633_r8 + 0.33_r8 * chil2(i,iveg)) * chil2(i,iveg)
 4379.  1                           !
 4380.  1                           bb(i)     = 0.877_r8 -1.754_r8 *aa(i)
 4381.  1                           !
 4382.  1                           !
 4383.  1                           !        LOG(( EXP(-power1(i)) + 1 ) * 0.5 ) * pd(i,iveg)
 4384.  1                           !zat = ------------------------------------------------------
 4385.  1                           !                       extk(i,iveg,1,1)
 4386.  1                           !
 4387.  1                           !
 4388.  1                           zat(i)    = LOG(( EXP(-power1(i))+1.0_r8 )*0.5_r8 ) * pd(i,iveg) / extk(i,iveg,1,1)
 4389.  1                           !
 4390.  1                           zat(i)    = zat(i) + LOG((EXP(-power2(i)) + 1.0_r8 )*0.5_r8 )*( 1.0_r8 -pd(i,iveg))/extk(i,iveg,1,2)
 4391.  1                           !
 4392.  1                           zk(i)     = 1.0_r8 /zat(i) * LOG(pd(i,iveg) *EXP( power1(i)*zat(i)/at(i) ) &
 4393.  1                                + (1.0_r8 -pd(i,iveg))*EXP( power2(i)*zat(i)/at(i) ))
 4394.  1                           !
 4395.  1                           !     canopy and ground cover bulk resistances using
 4396.  1                           !     ross-goudriaan leaf function , total par flux (avflux) and
 4397.  1                           !     mean extinction coefficient (zk)
 4398.  1                           !
 4399.  1                           ftemp       = MIN( zk(i)*at(i),20.0_r8 )
 4400.  1                           ekat (i)    = EXP( ftemp )
 4401.  1                           !
 4402.  1                           !                                    --          --
 4403.  1                           !                                   |  aa(i)       |
 4404.  1                           !avflux = par(i,iveg) * (pd(i,iveg)*|------ + bb(i)| + (1 - pd(i,iveg))*(bb(i) * fcon + aa(i)*1.5))
 4405.  1                           !                                   |  f(i)        |
 4406.  1                           !                                    --          --
 4407.  1                           !
 4408.  1                           avflux(i)   = par(i,iveg)*( pd(i,iveg)*( aa(i)/f(i)+bb(i)) &
 4409.  1                                + ( 1.0_r8 -pd(i,iveg))*( bb(i)*fcon+aa(i)*1.5_r8 ))
 4410.  1                           !
 4411.  1                           !                 gamma(i)
 4412.  1                           !rho4(i)     = ----------------
 4413.  1                           !                 avflux(i)
 4414.  1                           !
 4415.  1                           rho4(i)     = gamma(i)/avflux(i)
 4416.  1                           !
 4417.  1                           !                         rstpar2(i,iveg,2)
 4418.  1                           !rst(i,iveg) = ----------------------------------------------
 4419.  1                           !                            --                        --
 4420.  1                           !                           |  (rho4(i) * ekat(i) + 1.0) |
 4421.  1                           !               gamma(i)*LOG|----------------------------|
 4422.  1                           !                           |   (rho4(i) + 1.0 )         |
 4423.  1                           !                            --                        --
 4424.  1                           !
 4425.  1                           rst(i,iveg) = rstpar2(i,iveg,2) / gamma(i)*LOG((rho4(i)*ekat(i)+1.0_r8 )/(rho4(i)+1.0_r8 ))
 4426.  1                           !
 4427.  1                           !
 4428.  1                           !
 4429.  1                           !
 4430.  1                           !
 4431.  1                           rst(i,iveg)=rst(i,iveg) - LOG((rho4(i)+1.0_r8 /ekat(i))/(rho4(i)+1.0_r8 ))
 4432.  1                           !
 4433.  1                           !             rst(i,iveg)
 4434.  1                           ! rst =----------------------------
 4435.  1                           !         zk(i) * rstpar2(i,iveg,3)
 4436.  1                           !
 4437.  1                           !
 4438.  1                           rst(i,iveg)=rst(i,iveg)/(zk(i)*rstpar2(i,iveg,3))
 4439.  1                           !
 4440.  1                           !                      1
 4441.  1                           ! rst = --------------------------------
 4442.  1                           !          rst(i,iveg) * green2(i,iveg)
 4443.  1                           !
 4444.  1                           rst(i,iveg)=1.0_r8 /( rst(i,iveg)*green2(i,iveg))
 4445.  1                        END IF
 4446.  1                     END IF
 4447.  1------------>     END DO
 4448.                     !
 4449.  A------------<     DO i = 1, nmax
 4450.  A                     rst(i,2) = 1.0e5_r8
 4451.  A------------>     END DO
 4452.                     !
 4453.                   END SUBROUTINE stomat
 4454.                 
 4455.                 
 4456.                 
 4457.                   ! raduse :performs the absorption of radiation by surface.
 4458.                 
 4459.                 
 4460.                 
 4461.                   SUBROUTINE raduse(radt  ,par   ,pd    ,radfac,closs ,gloss ,thermk,p1f   , &
 4462.                        p2f   ,radn  ,vcover,nmax  ,ncols )
 4463.                     !
 4464.                     !-----------------------------------------------------------------------
 4465.                     ! input parameters
 4466.                     !-----------------------------------------------------------------------
 4467.                     !   tf...............freezing temperature
 4468.                     !   tg...............ground   temperature
 4469.                     !   polar............
 4470.                     !   radsav...........passesd from subr.radalb
 4471.                     !   radfac(cg,vn,bd).fractions of downward solar radiation at surface
 4472.                     !                    passed from subr.radalb
 4473.                     !   radn(vnt,bd).....downward sw/lw radiation at the surface
 4474.                     !   vcover(cg).......vegetation cover
 4475.                     !-----------------------------------------------------------------------
 4476.                     ! output parameters
 4477.                     !-----------------------------------------------------------------------
 4478.                     !   radt(cg).........net heat received by canopy/ground vegetation
 4479.                     !                    by radiation & conduction
 4480.                     !   par(cg)..........par incident on canopy
 4481.                     !   pd(cg)...........ratio of par beam to total par
 4482.                     !-----------------------------------------------------------------------
 4483.                     !
 4484.                     INTEGER, INTENT(in   ) :: ncols
 4485.                     INTEGER, INTENT(in   ) :: nmax
 4486.                     REAL(KIND=r8),    INTENT(in   ) :: vcover(ncols,icg)
 4487.                     !
 4488.                     !     the size of working area is ncols*187
 4489.                     !     atmospheric parameters as boudary values for sib
 4490.                     !
 4491.                     REAL(KIND=r8),    INTENT(in   ) :: radn  (ncols,3,2)
 4492.                     !
 4493.                     !     variables calculated from above and ambient conditions
 4494.                     !
 4495.                     REAL(KIND=r8),    INTENT(inout  ) :: radt  (ncols,icg)
 4496.                     REAL(KIND=r8),    INTENT(inout  ) :: par   (ncols,icg)
 4497.                     REAL(KIND=r8),    INTENT(inout  ) :: pd    (ncols,icg)
 4498.                     REAL(KIND=r8),    INTENT(in   ) :: radfac(ncols,icg,iwv,ibd)
 4499.                     REAL(KIND=r8),    INTENT(in   ) :: closs (ncols)
 4500.                     REAL(KIND=r8),    INTENT(in   ) :: gloss (ncols)
 4501.                     REAL(KIND=r8),    INTENT(in   ) :: thermk(ncols)
 4502.                     REAL(KIND=r8),    INTENT(in   ) :: p1f   (ncols)
 4503.                     REAL(KIND=r8),    INTENT(in   ) :: p2f   (ncols)
 4504.                 
 4505.                 
 4506.                     REAL(KIND=r8) :: p1 (ncols)
 4507.                     REAL(KIND=r8) :: p2 (ncols)
 4508.                 
 4509.                 
 4510.                     INTEGER :: i
 4511.                     INTEGER :: iveg
 4512.                     INTEGER :: iwave
 4513.                     INTEGER :: irad
 4514.  Vr4----------<     DO i = 1, nmax
 4515.  Vr4                   radt(i,1)=0.0_r8
 4516.  Vr4                   radt(i,2)=0.0_r8
 4517.  Vr4---------->     END DO
 4518.                     !
 4519.                     ! radn(1,1)=!Downward Surface shortwave fluxe visible beam (cloudy)
 4520.                     ! radn(1,2)=!Downward Surface shortwave fluxe visible diffuse (cloudy)
 4521.                     ! radn(2,1)=!Downward Surface shortwave fluxe Near-IR beam (cloudy)
 4522.                     ! radn(2,2)=!Downward Surface shortwave fluxe Near-IR diffuse (cloudy)
 4523.                     ! radfac(cg,vn,bd).fractions of downward solar radiation at surface
 4524.                     !                    passed from subr.radalb
 4525.                     !
 4526.                     !     summation of radiation fractions for canopy and ground
 4527.                     !
 4528.  1------------<     DO iveg = 1, 2
 4529.  1 2----------<        DO iwave = 1, 2
 4530.  1 2 b--------<           DO irad = 1, 2
 4531.  1 2 b Vbr4---<              DO i = 1, nmax
 4532.  1 2 b Vbr4                     radt(i,iveg)=radt(i,iveg)+radfac(i,iveg,iwave,irad)*radn(i,iwave,irad)
 4533.  1 2 b Vbr4--->              END DO
 4534.  1 2 b-------->           END DO
 4535.  1 2---------->        END DO
 4536.  1------------>     END DO
 4537.                     !
 4538.                     !     total long wave ( and polar ice conduction ) adjustments to
 4539.                     !     canopy and ground net radiation terms
 4540.                     !     thermk = canopy emissivity
 4541.  Vr2----------<     DO i = 1, nmax
 4542.  Vr2                   radt(i,1) = radt(i,1) + radn(i,3,2) * vcover(i,1)*(1.0_r8 -thermk(i)) - closs(i)
 4543.  Vr2                   radt(i,2) = radt(i,2) + radn(i,3,2) * (1.0_r8 - vcover(i,1)*(1.0_r8 -thermk(i))) - gloss(i)
 4544.  Vr2                   par(i,1)  = radn(i,1,1) + radn(i,1,2) + 0.001_r8! total par incident on canopy
 4545.  Vr2                   pd (i,1)  = (radn(i,1,1) + 0.001_r8 ) / par(i,1)! ratio of par beam on topo of the canopy to total par
 4546.  Vr2                   p1(i)     = p1f(i)*radn(i,1,1) + 0.001_r8 ! net par beam on topo of the canopy
 4547.  Vr2                   p2(i)     = p2f(i)*radn(i,1,2)            ! net par beam on base of the canopy
 4548.  Vr2                   par(i,2)  = p1(i)+p2(i)! net par incident on canopy and ground
 4549.  Vr2                   IF (par(i,1) <= 0.000001_r8) par(i,1) = 0.000001_r8
 4550.  Vr2                   IF (par(i,2) <= 0.000001_r8) par(i,2) = 0.000001_r8
 4551.  Vr2                   pd (i,2)  = p1(i)/par(i,2) !ratio of net par beam to net par incident on canopy and ground
 4552.  Vr2---------->     END DO
 4553.                   END SUBROUTINE raduse
 4554.                 
 4555.                 
 4556.                 
 4557.                   ! root   :performs soil moisture potentials in root zone of each
 4558.                   !         vegetation layer and summed soil+root resistance.
 4559.                 
 4560.                 
 4561.                 
 4562.                   SUBROUTINE root(phroot,phsoil,w     ,itype ,nmax  , ncols )
 4563.                     !
 4564.                     ! input parameters
 4565.                     !-----------------------------------------------------------------------
 4566.                     !   w(1).............wetness of surface store
 4567.                     !   w(2).............wetness of root zone
 4568.                     !   w(3).............wetness of recharge zone
 4569.                     !   phsat............soil moisture potential at saturation   (m)
 4570.                     !   bee..............empirical constant
 4571.                     !   zdepth(3)........depth of the i-th soil layer            (m)
 4572.                     !   rootd (cg).......rooting depth                           (m)
 4573.                     !   satco............mean soil hydraulic conductivity in the root zone
 4574.                     !                                                            (m/s)
 4575.                     !   rootl(cg)........root density                            (m/m**3)
 4576.                     !   rootca(cg).......root cross section                      (m**2)
 4577.                     !   rdres(cg)........resistance per unit root length         (s/m)
 4578.                     !   rplant(cg).......area averaged resistance imposed by the plant
 4579.                     !                    vascular system                         (s)
 4580.                     !-----------------------------------------------------------------------
 4581.                     ! output parameters
 4582.                     !-----------------------------------------------------------------------
 4583.                     !   vroot............root volume density                     (m**3/m**3)
 4584.                     !-----------------------------------------------------------------------
 4585.                     ! output parameters
 4586.                     !-----------------------------------------------------------------------
 4587.                     !   phsoil(3)........soil moisture potential of the i-th soil layer
 4588.                     !                                                            (m)
 4589.                     !   rootr(cg)........root resistance                         (s)
 4590.                     !-----------------------------------------------------------------------
 4591.                     !
 4592.                     !   imax.............Numero de ponto por faixa de latitude
 4593.                     !   ityp.............numero das classes de solo 13
 4594.                     !   icg..............Parametros da vegetacao (icg=1 topo e icg=2 base)
 4595.                     !   idp..............Camadas de solo (1 a 3)
 4596.                     !   nmax.............
 4597.                     !   itype............Classe de textura do solo
 4598.                     !   phroot...........Soil moisture potentials in root zone of each
 4599.                     !                    vegetation layer and summed soil+root resistance.
 4600.                     !
 4601.                     INTEGER, INTENT(in   ) :: ncols
 4602.                     INTEGER, INTENT(in   ) :: nmax
 4603.                 
 4604.                     INTEGER, INTENT(in   ) :: itype (ncols)
 4605.                     !
 4606.                     !     prognostic variables
 4607.                     !
 4608.                     REAL(KIND=r8),    INTENT(in   ) :: w    (ncols,3)
 4609.                     !
 4610.                     !     variables calculated from above and ambient conditions
 4611.                     !
 4612.                     REAL(KIND=r8),    INTENT(inout  ) :: phroot(ncols,icg)
 4613.                     REAL(KIND=r8),    INTENT(inout  ) :: phsoil(ncols,idp)
 4614.                 
 4615.                 
 4616.                     REAL(KIND=r8)     :: www   (ncols,3)
 4617.                     INTEGER  :: i
 4618.                     INTEGER  :: n
 4619.                 
 4620.  1------------<     DO i = 1, 3
 4621.  1 Vpr2-------<        DO n = 1, nmax
 4622.  1 Vpr2                   !      0
 4623.  1 Vpr2                   !w = -----
 4624.  1 Vpr2                   !      0s
 4625.  1 Vpr2                   !
 4626.  1 Vpr2                   www   (n,i) = MAX(0.10_r8 ,w(n,i))
 4627.  1 Vpr2                   !                            --          --
 4628.  1 Vpr2                   !                           |         0    |
 4629.  1 Vpr2                   ! phsoil(n,i) = phsat * EXP |-b*LOG(-----) |
 4630.  1 Vpr2                   !                           |         0s   |
 4631.  1 Vpr2                   !                            --          --
 4632.  1 Vpr2                   phsoil(n,i) = phsat(itype(n)) * EXP(-bee( itype(n))*LOG(www(n,i)))
 4633.  1 Vpr2                   !
 4634.  1 Vpr2------->        END DO
 4635.  1------------>     END DO
 4636.                     !
 4637.                     !   Soil moisture potentials in root zone of each
 4638.                     !   vegetation layer and summed soil+root resistance.
 4639.                     !
 4640.  iVAbr4-------<     DO n = 1, nmax
 4641.  iVAbr4                phroot(n,1)   = phsoil(n,1) - 0.01_r8
 4642.  iVAbr4 ib----<        DO i = 2, 3
 4643.  iVAbr4 ib                phroot(n,1) = MAX( phroot(n,1), phsoil(n,i))
 4644.  iVAbr4 ib---->        END DO
 4645.  iVAbr4                phroot(n,2)   = phroot(n,1)
 4646.  iVAbr4------->     END DO
 4647.                 
 4648.                   END SUBROUTINE root
 4649.                 
 4650.                 
 4651.                 
 4652.                   ! pbl    :performs planetary boundary layer parameterization.
 4653.                 
 4654.                 
 4655.                 
 4656.                   SUBROUTINE pbl(jstneu, hgdtg , hgdtc , hgdtm , hcdtg , hcdtc , hcdtm , &
 4657.                        egdtg , egdtc , egdqm , ecdtg , ecdtc , ecdqm , deadtg, &
 4658.                        deadtc, deadqm,icheck , ect   , eci   , egt   , egi   , &
 4659.                        egs   , ec    , eg    , hc    , hg    , ecidif, egidif, &
 4660.                        ecmass, egmass, etmass, hflux , chf   , shf   , roff  , &
 4661.                        bps   , psb   , dzm   , em    , gmt   , gmq   ,  cu   , &
 4662.                        cuni  , ctni  , ustar , cosz  , rhoair, psy   , rcp   , &
 4663.                        wc    , wg    , fc    , fg    , hr    , vcover, z0x   , &
 4664.                        d     , rdc   , rbc   , z0    , qm    , tm    , um    , &
 4665.                        vm    , psur  , ppc   , ppl   , radn  , ra    , rb    , &
 4666.                        rd    , rc    , rg    , tcta  , tgta  , ta    , ea    , &
 4667.                        etc   , etg   , btc   , btg   , u2    , radt  , par   , &
 4668.                        pd    , rst   , rsoil , phroot,  hrr  , phsoil, cc    , &
 4669.                        cg    , satcap, snow  , dtc   , dtg   , dtm   , dqm   , &
 4670.                        stm   , extk  , radfac, closs , gloss , thermk, p1f   , &
 4671.                        p2f   , tc    , tg    , td    , capac , w     , itype , &
 4672.                        dtc3x , mon   , nmax  , ncols ,zlt2  ,green2,chil2,rstpar2,&
 4673.                        topt2,tll2  ,tu2   , defac2,ph12  ,ph22)
 4674.                     !
 4675.                     ! jstneu......The first call to vntlat just gets the neutral values of ustar
 4676.                     !              and ventmf para jstneu=.TRUE..
 4677.                     ! hgdtg.......n.b. fluxes expressed in joules m-2
 4678.                     ! hgdtc.......n.b. fluxes expressed in joules m-2
 4679.                     ! hgdtm.......n.b. fluxes expressed in joules m-2
 4680.                     ! hcdtg.......n.b. fluxes expressed in joules m-2
 4681.                     ! hcdtc.......n.b. fluxes expressed in joules m-2
 4682.                     ! hcdtm.......n.b. fluxes expressed in joules m-2
 4683.                     ! egdtg.......partial derivative calculation for latent heat
 4684.                     ! egdtc.......partial derivative calculation for latent heat
 4685.                     ! egdqm.......partial derivative calculation for latent heat
 4686.                     ! ecdtg.......partial derivative calculation for latent heat
 4687.                     ! ecdtc.......partial derivative calculation for latent heat
 4688.                     ! ecdqm.......partial derivative calculation for latent heat
 4689.                     ! deadtg
 4690.                     ! deadtc
 4691.                     ! deadqm
 4692.                     ! icheck......this version assumes dew-free conditions "icheck=1" to
 4693.                     !              estimate ea for buoyancy term in vntmf or ra.
 4694.                     ! ect.........Transpiracao no topo da copa (J/m*m)
 4695.                     ! eci.........Evaporacao da agua interceptada no topo da copa (J/m*m)
 4696.                     ! egt.........Transpiracao na base da copa (J/m*m)
 4697.                     ! egi.........Evaporacao da neve (J/m*m)
 4698.                     ! egs.........Evaporacao do solo arido (J/m*m)
 4699.                     ! ec..........Soma da Transpiracao e Evaporacao da agua interceptada pelo
 4700.                     !              topo da copa   ec   (i)=eci(i)+ect(i)
 4701.                     ! eg..........Soma da transpiracao na base da copa +  Evaporacao do solo arido
 4702.                     !              +  Evaporacao da neve  " eg   (i)=egt(i)+egs(i)+egi(i)"
 4703.                     ! hc..........total sensible heat lost of top from the veggies.
 4704.                     ! hg..........total sensible heat lost of base from the veggies.
 4705.                     ! ecidif......check if interception loss term has exceeded canopy storage
 4706.                     !              ecidif(i)=MAX(0.0   , eci(i)-capac(i,1)*hlat3 )
 4707.                     ! egidif......check if interception loss term has exceeded canopy storage
 4708.                     !              ecidif(i)=MAX(0.0   , egi(i)-capac(i,1)*hlat3 )
 4709.                     ! ecmass......Mass of water lost of top from the veggies.
 4710.                     ! egmass......Mass of water lost of base from the veggies.
 4711.                     ! etmass......total mass of water lost from the veggies.
 4712.                     ! hflux.......total sensible heat lost from the veggies.
 4713.                     ! chf.........heat fluxes into the canopy  in w/m**2
 4714.                     ! shf.........heat fluxes into the ground, in w/m**2
 4715.                     ! roff........runoff
 4716.                     ! pie.........Constante Pi=3.1415926e0
 4717.                     ! stefan......Constante de Stefan Boltzmann
 4718.                     ! cpair.......specific heat of air (j/kg/k)
 4719.                     ! hlat........heat of evaporation of water   (j/kg)
 4720.                     ! grav........gravity constant      (m/s**2)
 4721.                     ! snomel......heat of melting (j m-1)
 4722.                     ! tf..........Temperatura de congelamento (K)
 4723.                     ! clai........heat capacity of foliage
 4724.                     ! cw..........liquid water heat capacity               (j/m**3)
 4725.                     ! gasr........Constant of dry air      (j/kg/k)
 4726.                     ! epsfac......Constante 0.622 Razao entre as massas moleculares do vapor
 4727.                     !              de agua e do ar seco
 4728.                     ! athird......Constante athird=1.0e0 /3.0e0
 4729.                     ! bps
 4730.                     ! psb
 4731.                     ! dzm.........Altura media de referencia  para o vento para o calculo
 4732.                     !               da estabilidade do escoamento
 4733.                     ! em..........Pressao de vapor da agua
 4734.                     ! gmt(i,k,3)..virtual temperature tendency due to vertical diffusion
 4735.                     ! gmq.........specific humidity of reference (fourier)
 4736.                     ! cu..........Friction  transfer coefficients.
 4737.                     ! cuni........neutral friction transfer  coefficients.
 4738.                     ! ctni........neutral heat transfer coefficients.
 4739.                     ! ustar.......surface friction velocity  (m/s)
 4740.                     ! cosz........cosine of zenith angle
 4741.                     ! rhoair......Desnsidade do ar
 4742.                     ! psy ........(cp/(hl*epsfac))*psur(i)
 4743.                     ! rcp.........densidade do ar vezes o calor especifico do ar
 4744.                     ! wc..........Minimo entre 1 e a razao entre a agua interceptada pelo
 4745.                     !              indice de area foliar no topo da copa
 4746.                     ! wg..........Minimo entre 1 e a razao entre a agua interceptada pelo
 4747.                     !              indice de area foliar na base da copa
 4748.                     ! fc..........Condicao de oravalho 0 ou 1 na topo da copa
 4749.                     ! fg..........Condicao de oravalho 0 ou 1 na base da copa
 4750.                     ! hr..........rel. humidity in top layer
 4751.                     ! vcover(iv)..Fracao de cobertura de vegetacao iv=1 Top
 4752.                     ! vcover(iv)..Fracao de cobertura de vegetacao iv=2 Botto
 4753.                     ! z0x.........roughness length
 4754.                     ! d...........Displacement height
 4755.                     ! rdc.........Constant related to aerodynamic resistance
 4756.                     !              between ground and canopy air space
 4757.                     ! rbc.........Constant related to bulk boundary layer resistance
 4758.                     ! z0..........Roughness length
 4759.                     ! qm..........reference specific humidity (fourier)
 4760.                     ! tm .........reference temperature    (fourier)                (k)
 4761.                     ! um..........Razao entre zonal pseudo-wind (fourier) e seno da
 4762.                     !              colatitude
 4763.                     ! vm..........Razao entre meridional pseudo-wind (fourier) e seno da
 4764.                     !              colatitude
 4765.                     ! psur........surface pressure in mb
 4766.                     ! ppc.........precipitation rate ( cumulus )           (mm/s)
 4767.                     ! ppl.........precipitation rate ( large scale )       (mm/s)
 4768.                     ! radn........downward sw/lw radiation at the surface
 4769.                     ! ra..........Resistencia Aerodinamica (s/m)
 4770.                     ! rb..........bulk boundary layer resistance             (s/m)
 4771.                     ! rd..........aerodynamic resistance between ground      (s/m)
 4772.                     !              and canopy air space
 4773.                     ! rc..........Resistencia do topo da copa
 4774.                     ! rg......... Resistencia da base da copa
 4775.                     ! tcta........Diferenca entre tc-ta                      (k)
 4776.                     ! tgta........Diferenca entre tg-ta                      (k)
 4777.                     ! ta..........Temperatura no nivel de fonte de calor do dossel (K)
 4778.                     ! ea..........Pressure of vapor
 4779.                     ! etc.........Pressure of vapor at top of the copa
 4780.                     ! etg.........Pressao de vapor no base da copa
 4781.                     ! btc.........btc(i)=EXP(30.25353  -5418.0  /tc(i))/(tc(i)*tc(i)).
 4782.                     ! btg.........btg(i)=EXP(30.25353  -5418.0  /tg(i))/(tg(i)*tg(i))
 4783.                     ! u2..........wind speed at top of canopy                (m/s)
 4784.                     ! radt........net heat received by canopy/ground vegetation
 4785.                     ! par.........par incident on canopy
 4786.                     ! pd..........ratio of par beam to total par
 4787.                     ! rst ........Resisttencia Estomatica "Stomatal resistence" (s/m)
 4788.                     ! rsoil ......Resistencia do solo (s/m)
 4789.                     ! phroot......Soil moisture potentials in root zone of each
 4790.                     !                    vegetation layer and summed soil+root resistance.
 4791.                     ! hrr.........rel. humidity in top layer
 4792.                     ! phsoil......soil moisture potential of the i-th soil layer
 4793.                     ! cc..........heat capacity of the canopy
 4794.                     ! cg..........heat capacity of the ground
 4795.                     ! satcap......saturation liquid water capacity         (m)
 4796.                     ! snow........snow amount
 4797.                     ! dtc.........dtc(i)=pblsib(i,2,5)*dtc3x
 4798.                     ! dtg.........dtg(i)=pblsib(i,1,5)*dtc3x
 4799.                     ! dtm.........dtm(i)=pblsib(i,3,5)*dtc3x
 4800.                     ! dqm ........dqm(i)=pblsib(i,4,5)*dtc3x
 4801.                     ! stm ........Variavel utilizada mo cal. da Resisttencia
 4802.                     ! extk........extinction coefficient
 4803.                     ! radfac......fractions of downward solar radiation at surface
 4804.                     !             passed from subr.radalb
 4805.                     ! closs.......radiation loss from canopy
 4806.                     ! gloss.......radiation loss from ground
 4807.                     ! thermk......canopy emissivity
 4808.                     ! p1f
 4809.                     ! p2f
 4810.                     ! tc..........Temperatura da copa "dossel"(K)
 4811.                     ! tg..........Temperatura da superficie do solo (K)
 4812.                     ! td..........Temperatura do solo profundo (K)
 4813.                     ! capac(iv)...Agua interceptada iv=1 no dossel "water store capacity
 4814.                     !             of leaves"(m)
 4815.                     ! capac(iv)...Agua interceptada iv=2 na cobertura do solo (m)
 4816.                     ! w(id).......Grau de saturacao de umidade do solo id=1 na camada superficial
 4817.                     ! w(id).......Grau de saturacao de umidade do solo id=2 na camada de raizes
 4818.                     ! w(id).......Grau de saturacao de umidade do solo id=3 na camada de drenagem
 4819.                     ! itype ......Classe de textura do solo
 4820.                     ! rstpar(cg,3).coefficints related to par influence on
 4821.                     !                    stomatal resistance
 4822.                     ! chil........leaf orientation pameter
 4823.                     ! topt........Temperatura ideal de funcionamento estomatico
 4824.                     ! tll.........Temperatura minima de funcionamento estomatico
 4825.                     ! tu..........Temperatura maxima de funcionamento estomatico
 4826.                     ! defac.......Parametro de deficit de pressao de vapor d'agua
 4827.                     ! ph1.........Coeficiente para o efeito da agua no solo
 4828.                     ! ph2.........Potencial de agua no solo para ponto de Wilting
 4829.                     ! rootd.......Profundidade das raizes
 4830.                     ! bee.........Expoente da curva de retencao "expoente para o solo umido"
 4831.                     ! phsat.......Tensao do solo saturado " Potencial de agua no solo saturado"
 4832.                     ! satco.......mean soil hydraulic conductivity in the root zone
 4833.                     ! poros.......porosity
 4834.                     ! zdepth......Profundidade para as tres camadas de solo
 4835.                     ! green.......fraction of grenn leaves
 4836.                     ! xcover(iv)..Fracao de cobertura de vegetacao iv=2 Bottom
 4837.                     ! zlt(icg)....Indice de area foliar "LEAF AREA INDEX" icg=1 topo da copa
 4838.                     ! zlt(icg)....Indice de area foliar "LEAF AREA INDEX" icg=2 base da copa
 4839.                     ! x0x.........Comprimento de rugosidade
 4840.                     ! xd..........Deslocamento do plano zero
 4841.                     ! z2..........Altura do topo do dossel
 4842.                     ! xdc.........Constant related to aerodynamic resistance
 4843.                     !             between ground and canopy air space
 4844.                     ! xbc.........Constant related to bulk boundary layer resistance
 4845.                     ! dtc3x.......time increment dt
 4846.                     ! mon.........Number of month at year (1-12)
 4847.                     ! nmax
 4848.                     ! ityp........numero das classes de solo 13
 4849.                     ! imon........Numero maximo de meses no ano (12)
 4850.                     ! icg.........Parametros da vegetacao (icg=1 topo e icg=2 base)
 4851.                     ! iwv.........Compriment de onda iwv=1=visivel, iwv=2=infravermelho
 4852.                     !             proximo, iwv=3 infravermelho termal
 4853.                     ! idp.........Camadas de solo (1 a 3)
 4854.                     ! ibd.........Estado da vegetacao ibd=1 verde / ibd=2 seco
 4855.                     ! ncols.......Numero de ponto por faixa de latitude
 4856.                     !
 4857.                     !
 4858.                     INTEGER, INTENT(in   ) :: ncols
 4859.                 
 4860.                     REAL(KIND=r8)   , INTENT(in   ) :: dtc3x
 4861.                     INTEGER, INTENT(in   ) :: mon(ncols)
 4862.                     INTEGER, INTENT(in   ) :: nmax
 4863.                 
 4864.                     INTEGER, INTENT(in   ) :: itype(ncols)
 4865.                     !
 4866.                     !     prognostic variables
 4867.                     !
 4868.                     REAL(KIND=r8),    INTENT(inout) :: tc   (ncols)
 4869.                     REAL(KIND=r8),    INTENT(inout) :: tg   (ncols)
 4870.                     REAL(KIND=r8),    INTENT(inout) :: td   (ncols)
 4871.                     REAL(KIND=r8),    INTENT(inout) :: capac(ncols,2)
 4872.                     REAL(KIND=r8),    INTENT(inout) :: w    (ncols,3)
 4873.                     !
 4874.                     !     variables calculated from above and ambient conditions
 4875.                     !
 4876.                     REAL(KIND=r8),    INTENT(inout) :: ra    (ncols)
 4877.                     REAL(KIND=r8),    INTENT(inout) :: rb    (ncols)
 4878.                     REAL(KIND=r8),    INTENT(inout) :: rd    (ncols)
 4879.                     REAL(KIND=r8),    INTENT(inout) :: rc    (ncols)
 4880.                     REAL(KIND=r8),    INTENT(inout) :: rg    (ncols)
 4881.                     REAL(KIND=r8),    INTENT(inout) :: tcta  (ncols)
 4882.                     REAL(KIND=r8),    INTENT(inout) :: tgta  (ncols)
 4883.                     REAL(KIND=r8),    INTENT(inout) :: ta    (ncols)
 4884.                     REAL(KIND=r8),    INTENT(inout) :: ea    (ncols)
 4885.                     REAL(KIND=r8),    INTENT(inout) :: etc   (ncols)
 4886.                     REAL(KIND=r8),    INTENT(inout) :: etg   (ncols)
 4887.                     REAL(KIND=r8),    INTENT(inout) :: btc   (ncols)
 4888.                     REAL(KIND=r8),    INTENT(inout) :: btg   (ncols)
 4889.                     REAL(KIND=r8),    INTENT(inout) :: u2    (ncols)
 4890.                     REAL(KIND=r8),    INTENT(inout) :: radt  (ncols,icg)
 4891.                     REAL(KIND=r8),    INTENT(inout) :: par   (ncols,icg)
 4892.                     REAL(KIND=r8),    INTENT(inout) :: pd    (ncols,icg)
 4893.                     REAL(KIND=r8),    INTENT(inout) :: rst   (ncols,icg)
 4894.                     REAL(KIND=r8),    INTENT(inout) :: rsoil (ncols)
 4895.                     REAL(KIND=r8),    INTENT(inout) :: phroot(ncols,icg)
 4896.                     REAL(KIND=r8),    INTENT(inout) :: hrr   (ncols)
 4897.                     REAL(KIND=r8),    INTENT(inout) :: phsoil(ncols,idp)
 4898.                     REAL(KIND=r8),    INTENT(inout) :: cc    (ncols)
 4899.                     REAL(KIND=r8),    INTENT(inout) :: cg    (ncols)
 4900.                     REAL(KIND=r8),    INTENT(inout) :: satcap(ncols,icg)
 4901.                     REAL(KIND=r8),    INTENT(inout) :: snow  (ncols,icg)
 4902.                     REAL(KIND=r8),    INTENT(inout) :: dtc   (ncols)
 4903.                     REAL(KIND=r8),    INTENT(inout) :: dtg   (ncols)
 4904.                     REAL(KIND=r8),    INTENT(inout) :: dtm   (ncols)
 4905.                     REAL(KIND=r8),    INTENT(inout) :: dqm   (ncols)
 4906.                     REAL(KIND=r8),    INTENT(inout) :: stm   (ncols,icg)
 4907.                     REAL(KIND=r8),    INTENT(inout) :: extk  (ncols,icg,iwv,ibd)
 4908.                     REAL(KIND=r8),    INTENT(in   ) :: radfac(ncols,icg,iwv,ibd)
 4909.                     REAL(KIND=r8),    INTENT(in   ) :: closs (ncols)
 4910.                     REAL(KIND=r8),    INTENT(in   ) :: gloss (ncols)
 4911.                     REAL(KIND=r8),    INTENT(inout) :: thermk(ncols)
 4912.                     REAL(KIND=r8),    INTENT(in   ) :: p1f   (ncols)
 4913.                     REAL(KIND=r8),    INTENT(in   ) :: p2f   (ncols)
 4914.                     !
 4915.                     !     the size of working area is ncols*187
 4916.                     !     atmospheric parameters as boudary values for sib
 4917.                     !
 4918.                     REAL(KIND=r8),    INTENT(inout) :: qm  (ncols)
 4919.                     REAL(KIND=r8),    INTENT(inout) :: tm  (ncols)
 4920.                     REAL(KIND=r8),    INTENT(in   ) :: um  (ncols)
 4921.                     REAL(KIND=r8),    INTENT(in   ) :: vm  (ncols)
 4922.                     REAL(KIND=r8),    INTENT(inout) :: psur(ncols)
 4923.                     REAL(KIND=r8),    INTENT(in   ) :: ppc (ncols)
 4924.                     REAL(KIND=r8),    INTENT(in   ) :: ppl (ncols)
 4925.                     REAL(KIND=r8),    INTENT(in   ) :: radn(ncols,3,2)
 4926.                 
 4927.                     REAL(KIND=r8)   , INTENT(in   ) :: zlt2    (ncols,icg)
 4928.                     REAL(KIND=r8)   , INTENT(in   ) :: green2  (ncols,icg)
 4929.                     REAL(KIND=r8)   , INTENT(in   ) :: chil2   (ncols,icg)
 4930.                     REAL(KIND=r8)   , INTENT(in   ) :: rstpar2(ncols,icg,iwv)
 4931.                     REAL(KIND=r8),    INTENT(inout) :: vcover  (ncols,icg)
 4932.                     REAL(KIND=r8),    INTENT(inout) :: z0x(ncols)
 4933.                     REAL(KIND=r8),    INTENT(inout) :: d  (ncols)
 4934.                     REAL(KIND=r8),    INTENT(inout) :: rdc(ncols)
 4935.                     REAL(KIND=r8),    INTENT(inout) :: rbc(ncols)
 4936.                     REAL(KIND=r8),    INTENT(inout) :: z0 (ncols)
 4937.                     REAL(KIND=r8)   , INTENT(in   ) :: topt2   (ncols,icg)
 4938.                     REAL(KIND=r8)   , INTENT(in   ) :: tll2    (ncols,icg)
 4939.                     REAL(KIND=r8)   , INTENT(in   ) :: tu2     (ncols,icg)
 4940.                     REAL(KIND=r8)   , INTENT(in   ) :: defac2  (ncols,icg)
 4941.                     REAL(KIND=r8)   , INTENT(in   ) :: ph12    (ncols,icg)
 4942.                     REAL(KIND=r8)   , INTENT(in   ) :: ph22    (ncols,icg)
 4943.                     !
 4944.                     !     this is for coupling with closure turbulence model
 4945.                     !
 4946.                     REAL(KIND=r8),    INTENT(in   ) :: bps   (ncols)
 4947.                     REAL(KIND=r8),    INTENT(in   ) :: psb   (ncols)
 4948.                     REAL(KIND=r8),    INTENT(in   ) :: dzm   (ncols)
 4949.                     REAL(KIND=r8),    INTENT(in   ) :: em    (ncols)
 4950.                     REAL(KIND=r8),    INTENT(inout) :: gmt   (ncols,3)
 4951.                     REAL(KIND=r8),    INTENT(inout) :: gmq   (ncols,3)
 4952.                     REAL(KIND=r8),    INTENT(inout) :: cu    (ncols)
 4953.                     REAL(KIND=r8),    INTENT(inout) :: cuni  (ncols)
 4954.                     REAL(KIND=r8),    INTENT(inout) :: ctni  (ncols)
 4955.                     REAL(KIND=r8),    INTENT(inout) :: ustar (ncols)
 4956.                     REAL(KIND=r8),    INTENT(in   ) :: cosz  (ncols)
 4957.                     REAL(KIND=r8),    INTENT(in   ) :: rhoair(ncols)
 4958.                     REAL(KIND=r8),    INTENT(in   ) :: psy   (ncols)
 4959.                     REAL(KIND=r8),    INTENT(inout  ) :: rcp   (ncols)
 4960.                     REAL(KIND=r8),    INTENT(inout) :: wc    (ncols)
 4961.                     REAL(KIND=r8),    INTENT(inout) :: wg    (ncols)
 4962.                     REAL(KIND=r8),    INTENT(inout) :: fc    (ncols)
 4963.                     REAL(KIND=r8),    INTENT(inout) :: fg    (ncols)
 4964.                     REAL(KIND=r8),    INTENT(inout) :: hr    (ncols)
 4965.                 
 4966.                     REAL(KIND=r8),    INTENT(inout) :: ect   (ncols)
 4967.                     REAL(KIND=r8),    INTENT(inout) :: eci   (ncols)
 4968.                     REAL(KIND=r8),    INTENT(inout) :: egt   (ncols)
 4969.                     REAL(KIND=r8),    INTENT(inout) :: egi   (ncols)
 4970.                     REAL(KIND=r8),    INTENT(inout) :: egs   (ncols)
 4971.                     REAL(KIND=r8),    INTENT(inout  ) :: ec    (ncols)
 4972.                     REAL(KIND=r8),    INTENT(inout  ) :: eg    (ncols)
 4973.                     REAL(KIND=r8),    INTENT(inout  ) :: hc    (ncols)
 4974.                     REAL(KIND=r8),    INTENT(inout  ) :: hg    (ncols)
 4975.                     REAL(KIND=r8),    INTENT(inout  ) :: ecidif(ncols)
 4976.                     REAL(KIND=r8),    INTENT(inout  ) :: egidif(ncols)
 4977.                     REAL(KIND=r8),    INTENT(inout  ) :: ecmass(ncols)
 4978.                     REAL(KIND=r8),    INTENT(inout  ) :: egmass(ncols)
 4979.                     REAL(KIND=r8),    INTENT(inout  ) :: etmass(ncols)
 4980.                     REAL(KIND=r8),    INTENT(inout  ) :: hflux (ncols)
 4981.                     REAL(KIND=r8),    INTENT(inout  ) :: chf   (ncols)
 4982.                     REAL(KIND=r8),    INTENT(inout  ) :: shf   (ncols)
 4983.                     REAL(KIND=r8),    INTENT(inout) :: roff  (ncols)
 4984.                 
 4985.                     INTEGER, INTENT(inout  ) :: icheck(ncols)
 4986.                     !
 4987.                     !     derivatives
 4988.                     !
 4989.                     REAL(KIND=r8),    INTENT(inout  ) :: hgdtg (ncols)
 4990.                     REAL(KIND=r8),    INTENT(inout  ) :: hgdtc (ncols)
 4991.                     REAL(KIND=r8),    INTENT(inout  ) :: hgdtm (ncols)
 4992.                     REAL(KIND=r8),    INTENT(inout  ) :: hcdtg (ncols)
 4993.                     REAL(KIND=r8),    INTENT(inout  ) :: hcdtc (ncols)
 4994.                     REAL(KIND=r8),    INTENT(inout  ) :: hcdtm (ncols)
 4995.                     REAL(KIND=r8),    INTENT(inout  ) :: egdtg (ncols)
 4996.                     REAL(KIND=r8),    INTENT(inout  ) :: egdtc (ncols)
 4997.                     REAL(KIND=r8),    INTENT(inout  ) :: egdqm (ncols)
 4998.                     REAL(KIND=r8),    INTENT(inout  ) :: ecdtg (ncols)
 4999.                     REAL(KIND=r8),    INTENT(inout  ) :: ecdtc (ncols)
 5000.                     REAL(KIND=r8),    INTENT(inout  ) :: ecdqm (ncols)
 5001.                     REAL(KIND=r8),    INTENT(inout  ) :: deadtg(ncols)
 5002.                     REAL(KIND=r8),    INTENT(inout  ) :: deadtc(ncols)
 5003.                     REAL(KIND=r8),    INTENT(inout  ) :: deadqm(ncols)
 5004.                     LOGICAL, INTENT(inout  ) :: jstneu
 5005.                 
 5006.                     !
 5007.  VAbr2 I------>     CALL root(phroot,phsoil,w     ,itype ,nmax  ,ncols  )
 5008.                 
 5009.  Vbr4 I------->     CALL raduse(radt  ,par   ,pd    ,radfac,closs ,gloss ,thermk,p1f   , &
 5010.                          p2f   ,radn  ,vcover,nmax  ,ncols   )
 5011.                 
 5012.  VcAr4 I------>     CALL stomat(cosz  ,par   ,pd    ,rst   ,extk  ,vcover,itype , &
 5013.                          nmax  ,ncols ,zlt2  ,green2,chil2 ,rstpar2)
 5014.                 
 5015.                     CALL interc( &
 5016.                          roff  ,cc    ,cg    ,satcap,snow  ,extk  ,tc    ,tg    ,td    , &
 5017.                          capac ,w     ,tm    ,ppc   ,ppl   ,vcover,itype ,dtc3x , &
 5018.                          nmax  ,ncols ,zlt2 )
 5019.                     !
 5020.                     !     surface flux
 5021.                     !
 5022.                     CALL sflxes( &
 5023.                          hgdtg ,hgdtc ,hgdtm ,hcdtg ,hcdtc ,hcdtm ,egdtg ,egdtc ,egdqm , &
 5024.                          ecdtg ,ecdtc ,ecdqm ,deadtg,deadtc,deadqm,icheck,bps   ,psb   , &
 5025.                          dzm   ,em    ,gmt   ,gmq   ,cu    ,cuni  ,ctni  ,ustar ,rhoair, &
 5026.                          psy   ,rcp   ,wc    ,wg    ,fc    ,fg    ,hr    ,ect   ,eci   , &
 5027.                          egt   ,egi   ,egs   ,ec    ,eg    ,hc    ,hg    ,ecidif,egidif, &
 5028.                          ecmass,egmass,etmass,hflux ,chf   ,shf   ,ra    ,rb    ,rd    , &
 5029.                          rc    ,rg    ,tcta  ,tgta  ,ta    ,ea    ,etc   ,etg   ,btc   , &
 5030.                          btg   ,u2    ,radt  ,rst   ,rsoil ,hrr   ,phsoil,cc    ,cg    , &
 5031.                          satcap,dtc   ,dtg   ,dtm   ,dqm   ,stm   ,thermk,tc    ,tg    , &
 5032.                          td    ,capac ,w     ,qm    ,tm    ,um    ,vm    ,psur  ,vcover, &
 5033.                          z0x   ,d     ,rdc   ,rbc   ,z0    ,itype ,dtc3x ,mon   ,nmax  , &
 5034.                          jstneu,ncols ,zlt2  ,topt2 ,tll2  ,tu2   , defac2,ph12  ,ph22 )
 5035.                   END SUBROUTINE pbl
 5036.                 
 5037.                 
 5038.                 
 5039.                 
 5040.                 
 5041.                 
 5042.                   SUBROUTINE snowm(&
 5043.                        chf   ,shf   ,fluxef,roff  ,cc    ,cg    ,snow  ,dtc   ,dtg   , &
 5044.                        tc    ,tg    ,td    ,capac ,w     ,itype ,dtc3x ,nmax  ,ncols  )
 5045.                     !
 5046.                     ! snowm  :calculates snowmelt and modification of temperatures;
 5047.                     !         this version deals with refreezing of water;
 5048.                     !         version modified to use force-restore heat fluxes.
 5049.                     !
 5050.                     !-----------------------------------------------------------------------
 5051.                     ! chf.........Fluxo de calor na copa (J/m*m)
 5052.                     ! shf.........Fluxo de calor no solo (J/m*m)
 5053.                     ! fluxef......modified to use force-restore heat fluxes
 5054.                     !             fluxef(i) = shf(i) - cg(i)*dtg(i)*dtc3xi " Garrat pg. 227"
 5055.                     ! roff........runoff (escoamente superficial e drenagem)(m)
 5056.                     ! cc..........heat capacity of the canopy
 5057.                     ! cg..........heat capacity of the ground
 5058.                     ! snow........snow amount
 5059.                     ! dtc ........dtc(i)=pblsib(i,2,5)*dtc3x
 5060.                     ! dtg ........dtg(i)=pblsib(i,1,5)*dtc3x
 5061.                     ! tc..........Temperatura da copa "dossel"(K)
 5062.                     ! tg..........Temperatura da superficie do solo (K)
 5063.                     ! td..........Temperatura do solo profundo (K)
 5064.                     ! capac(iv)...Agua interceptada iv=1 no dossel (m)
 5065.                     ! capac(iv)...Agua interceptada iv=2 na cobertura do solo (m)
 5066.                     ! w(id).......Grau de saturacao de umidade do solo id=1 na camada superficial
 5067.                     ! w(id).......Grau de saturacao de umidade do solo id=2 na camada de raizes
 5068.                     ! w(id).......Grau de saturacao de umidade do solo id=3 na camada de drenagem
 5069.                     ! poros.......Porosidade do solo (m"3/m"3)
 5070.                     ! zdepth(id)..Profundidade das camadas de solo id=1 superficial
 5071.                     ! zdepth(id)..Profundidade das camadas de solo id=2 camada de raizes
 5072.                     ! zdepth(id)..Profundidade das camadas de solo id=3 camada de drenagem
 5073.                     ! itype.......Classe de textura do solo
 5074.                     ! ncols.......Numero de ponto por faixa de latitude
 5075.                     ! ityp........13
 5076.                     ! icg.........Parametros da vegetacao (icg=1 topo e icg=2 base)
 5077.                     ! idp.........Camadas de solo (1 a 3)
 5078.                     ! snomel......Calor latente de fusao(J/kg)
 5079.                     ! tf..........Temperatura de congelamento (K)
 5080.                     ! dtc3x.......time increment dt
 5081.                     ! nmax........
 5082.                     !-----------------------------------------------------------------------
 5083.                     INTEGER, INTENT(in   ) :: ncols
 5084.                     REAL(KIND=r8),    INTENT(in   ) :: dtc3x
 5085.                     INTEGER, INTENT(in   ) :: nmax
 5086.                 
 5087.                     INTEGER, INTENT(in   ) :: itype (ncols)
 5088.                     !
 5089.                     !     prognostic variables
 5090.                     !
 5091.                     REAL(KIND=r8),    INTENT(inout) :: tc   (ncols)
 5092.                     REAL(KIND=r8),    INTENT(inout) :: tg   (ncols)
 5093.                     REAL(KIND=r8),    INTENT(in   ) :: td   (ncols)
 5094.                     REAL(KIND=r8),    INTENT(inout) :: capac(ncols,2)
 5095.                     REAL(KIND=r8),    INTENT(inout) :: w    (ncols,3)
 5096.                     !
 5097.                     !     variables calculated from above and ambient conditions
 5098.                     !
 5099.                     REAL(KIND=r8),    INTENT(in   ) :: cc    (ncols)
 5100.                     REAL(KIND=r8),    INTENT(in   ) :: cg    (ncols)
 5101.                     REAL(KIND=r8),    INTENT(inout) :: snow  (ncols,icg)
 5102.                     REAL(KIND=r8),    INTENT(in   ) :: dtc   (ncols)
 5103.                     REAL(KIND=r8),    INTENT(in   ) :: dtg   (ncols)
 5104.                     !
 5105.                     !     heat fluxes : c-canopy, g-ground, t-trans, e-evap  in j m-2
 5106.                     !
 5107.                     REAL(KIND=r8),    INTENT(in   ) :: chf   (ncols)
 5108.                     REAL(KIND=r8),    INTENT(in   ) :: shf   (ncols)
 5109.                     REAL(KIND=r8),    INTENT(inout  ) :: fluxef(ncols)
 5110.                     REAL(KIND=r8),    INTENT(inout) :: roff  (ncols)
 5111.                 
 5112.                     REAL(KIND=r8)    :: cct   (ncols)
 5113.                     REAL(KIND=r8)    :: ts         (ncols)
 5114.                     REAL(KIND=r8)    :: dts   (ncols)
 5115.                     REAL(KIND=r8)    :: flux  (ncols)
 5116.                     REAL(KIND=r8)    :: tta   (ncols)
 5117.                     REAL(KIND=r8)    :: ttb   (ncols)
 5118.                     REAL(KIND=r8)    :: dtf   (ncols)
 5119.                     REAL(KIND=r8)    :: work  (ncols)
 5120.                     REAL(KIND=r8)    :: hf         (ncols)
 5121.                     REAL(KIND=r8)    :: fcap  (ncols)
 5122.                     REAL(KIND=r8)    :: spwet (ncols)
 5123.                     REAL(KIND=r8)    :: dtf2  (ncols)
 5124.                     REAL(KIND=r8)    :: tn         (ncols)
 5125.                     REAL(KIND=r8)    :: change(ncols)
 5126.                     REAL(KIND=r8)    :: dtime1(ncols)
 5127.                     REAL(KIND=r8)    :: dtime2(ncols)
 5128.                 
 5129.                     INTEGER :: i
 5130.                     INTEGER :: iveg
 5131.                     INTEGER :: ntyp
 5132.                     REAL(KIND=r8)    :: dtc3xi
 5133.                 
 5134.                 
 5135.  A-----------<>     cct=0.0_r8
 5136.                     dtc3xi=1.0_r8 /dtc3x
 5137.                 
 5138.  1------------<     DO iveg = 1, 2
 5139.  1                     IF (iveg == 1) THEN
 5140.  1              
 5141.  1 A----------<           DO i = 1, nmax
 5142.  1 A                         cct (i)=cc (i)
 5143.  1 A                         ts  (i)=tc (i)
 5144.  1 A                         dts (i)=dtc(i)
 5145.  1 A                         flux(i)=chf(i)
 5146.  1 A---------->           END DO
 5147.  1              
 5148.  1                     ELSE
 5149.  1              
 5150.  1 Vr4--------<           DO i = 1, nmax
 5151.  1 Vr4                       cct (i)=cg (i)
 5152.  1 Vr4 A-----<>              ts  (i)=tg (i)
 5153.  1 Vr4                       dts (i)=dtg(i)
 5154.  1 Vr4                       flux(i)=cct(i)*dtg(i)*dtc3xi
 5155.  1 Vr4-------->           END DO
 5156.  1              
 5157.  1                     END IF
 5158.  1              
 5159.  1 Vr4--------<        DO i = 1, nmax
 5160.  1 Vr4                    tta(i) = ts(i) - dts(i)
 5161.  1 Vr4                    ttb(i) = ts(i)
 5162.  1 Vr4-------->        END DO
 5163.  1              
 5164.  1 2----------<        DO i = 1, nmax
 5165.  1 2                      IF (tta(i) <= tf) THEN
 5166.  1 2                         snow (i,iveg) = capac(i,iveg)
 5167.  1 2                         capac(i,iveg) = 0.0_r8
 5168.  1 2                      ELSE
 5169.  1 2                         snow (i,iveg) = 0.0_r8
 5170.  1 2                      END IF
 5171.  1 2---------->        END DO
 5172.  1              
 5173.  1 Vr4--------<        DO i = 1, nmax
 5174.  1 Vr4                    work(i)=(tta(i)-tf)*(ttb(i)-tf)
 5175.  1 Vr4-------->        END DO
 5176.  1              
 5177.  1 2----------<        DO i = 1, nmax
 5178.  1 2                      IF (work(i) < 0.0_r8) THEN
 5179.  1 2                         ntyp=itype(i)
 5180.  1 2                         dtf   (i)= tf - tta(i)
 5181.  1 2                         dtime1(i)= cct (i)* dtf(i)/ flux(i)
 5182.  1 2                         hf    (i)= flux(i)*(dtc3x-dtime1(i))
 5183.  1 2                         spwet (i)=  MIN ( 5.0_r8 , snow(i,iveg) )
 5184.  1 2                         IF (dts(i) <= 0.0_r8) THEN
 5185.  1 2                            fcap (i) =-capac(i,iveg)* snomel
 5186.  1 2                         ELSE
 5187.  1 2                            fcap (i) = spwet(i)     * snomel
 5188.  1 2                         END IF
 5189.  1 2                         dtime2(i)= fcap(i) / flux(i)
 5190.  1 2                         dtf2  (i)= flux(i) * (dtc3x-dtime1(i)-dtime2(i))/cct(i)
 5191.  1 2                         tn(i)    = tf + dtf2(i)
 5192.  1 2                         IF (ABS(hf(i)) < ABS(fcap(i))) THEN
 5193.  1 2                            ts(i)    = tf -0.1_r8
 5194.  1 2                         ELSE
 5195.  1 2                            ts(i)    = tn(i)
 5196.  1 2                         END IF
 5197.  1 2                         IF (ABS(hf(i)) < ABS(fcap(i))) THEN
 5198.  1 2                            change(i) = hf  (i)
 5199.  1 2                         ELSE
 5200.  1 2                            change(i) = fcap(i)
 5201.  1 2                         END IF
 5202.  1 2                         change(i)     =change(i)      / snomel
 5203.  1 2                         snow  (i,iveg)=snow  (i,iveg) - change(i)
 5204.  1 2                         capac (i,iveg)=capac (i,iveg) + change(i)
 5205.  1 2                         IF (snow(i,iveg) < 1.e-10_r8) snow(i,iveg)=0.0e0_r8
 5206.  1 2                         IF (iveg == 1)THEN
 5207.  1 2                            tc(i)=ts(i)
 5208.  1 2                         ELSE
 5209.  1 2                            tg(i)=ts(i)
 5210.  1 2                         END IF
 5211.  1 2                         IF (iveg == 2) THEN
 5212.  1 2                            IF (td(i) > tf) THEN
 5213.  1 2                               w (i,1)=w (i,1)+capac(i,iveg) &
 5214.  1 2                                    /(poros(ntyp)*zdepth(ntyp,1))
 5215.  1 2                            ELSE
 5216.  1 2                               roff(i)=roff(i)+capac(i,iveg)
 5217.  1 2                            END IF
 5218.  1 2                            capac(i,iveg) = 0.0_r8
 5219.  1 2                         END IF
 5220.  1 2                      END IF
 5221.  1 2---------->        END DO
 5222.  1 Vr4--------<        DO i = 1, nmax
 5223.  1 Vr4                    capac(i,iveg) =  capac(i,iveg) + snow(i,iveg)
 5224.  1 Vr4-------->        END DO
 5225.  1------------>     END DO
 5226.                 
 5227.                     !   modified to use force-restore heat fluxes
 5228.                 
 5229.  Vr4----------<     DO i = 1, nmax
 5230.  Vr4                   fluxef(i) = shf(i) - cg(i)*dtg(i)*dtc3xi
 5231.  Vr4---------->     END DO
 5232.                 
 5233.                   END SUBROUTINE snowm
 5234.                 
 5235.                 
 5236.                 
 5237.                 
 5238.                   ! fysiks :it is a physics driver; performs the following:
 5239.                   !         a) soil water budget prior to calling pbl
 5240.                   !         b) planetary boundary layer (pbl) parameterization
 5241.                   !         c) update sib variables
 5242.                   !         d) dumping of small capac values onto soil surface store
 5243.                   !         e) snowmelt/refreeze calculation
 5244.                   !         f) update deep soil temperature using effective soil heat flux
 5245.                   !         g) bare soil evaporation loss
 5246.                   !         h) extraction of transpiration loss from root zone
 5247.                   !         i) interflow, infiltration excess and loss to groundwater
 5248.                   !         j) increment prognostic variables and
 5249.                   !            adjust theta and sh to be consistent with dew formation
 5250.                   !         k) calculates soil water budget after calling pbl
 5251.                   !            and compares with previous budget.
 5252.                 
 5253.                   SUBROUTINE fysiks(vcover, z0x  , d    , rdc  , rbc  , z0   ,ndt   , &
 5254.                        latitu, bps  ,psb   ,dzm   ,em    ,gmt   ,gmq   , &
 5255.                        gmu   ,cu    , cuni ,ctni  ,ustar ,cosz  ,sinclt,rhoair, &
 5256.                        psy   ,rcp   , wc   ,wg    ,fc    ,fg    ,hr    , ect  , &
 5257.                        eci   , egt  , egi  , egs  , ec   , eg   , hc   , hg   , &
 5258.                        ecidif,egidif,ecmass,egmass,etmass,hflux , chf  , shf  , &
 5259.                        fluxef, roff , drag ,ra    , rb   , rd   , rc   , rg   , &
 5260.                        tcta  , tgta , ta   , ea   , etc  , etg  , btc  , btg  , &
 5261.                        u2    , radt , par  , pd   , rst  ,rsoil ,phroot, hrr  , &
 5262.                        phsoil, cc   , cg   ,satcap, snow , dtc  , dtg  , dtm  , &
 5263.                        dqm   , stm  , extk ,radfac, closs,gloss ,thermk, p1f  , &
 5264.                        p2f   , tc   , tg   , td   , capac, w    ,  qm  , tm   , &
 5265.                        um    , vm   , psur , ppc  , ppl  , radn ,itype ,dtc3x , &
 5266.                        mon   , nmax , ncols,zlt2  ,green2,chil2 ,rstpar2,topt2, &
 5267.                        tll2  ,tu2   , defac2,ph12  ,ph22 )
 5268.                     !
 5269.                     !
 5270.                     !-----------------------------------------------------------------------
 5271.                     !
 5272.                     !  roff.......Runoff (escoamente superficial e drenagem)(m)
 5273.                     !  slope......Inclinacao de perda hidraulica na camada profunda do solo
 5274.                     !  bee........Fator de retencao da umidade no solo (expoente da umidade do
 5275.                     !             solo)
 5276.                     !  satco......Condutividade hidraulica do solo saturado(m/s)
 5277.                     !  zdepth(id).Profundidade das camadas de solo id=1 superficial
 5278.                     !  zdepth(id).Profundidade das camadas de solo id=2 camada de raizes
 5279.                     !  zdepth(id).Profundidade das camadas de solo id=3 camada de drenagem
 5280.                     !  phsat......Potencial matricial do solo saturado(m) (tensao do solo em
 5281.                     !             saturacao)
 5282.                     !  poros......Porosidade do solo
 5283.                     !  dtc3x......time increment dt
 5284.                     !  snomel.....Calor latente de fusao(J/kg)
 5285.                     !  w(id)......Grau de saturacao de umidade do solo id=1 na camada superficial
 5286.                     !  w(id)......Grau de saturacao de umidade do solo id=2 na camada de raizes
 5287.                     !  w(id)......Grau de saturacao de umidade do solo id=3 na camada de drenagem
 5288.                     !  capac(iv)..Agua interceptada iv=1 no dossel (m)
 5289.                     !  capac(iv)..Agua interceptada iv=2 na cobertura do solo (m)
 5290.                     !  tg.........Temperatura da superficie do solo  (K)
 5291.                     !  td.........Temperatura do solo profundo (K)
 5292.                     !  itype......Classe de textura do solo
 5293.                     !  tf.........Temperatura de congelamento (K)
 5294.                     !  idp........Parametro para as camadas de solo idp=1->3
 5295.                     !  nmax.......
 5296.                     !  ncols......Number of grid points on a gaussian latitude circle
 5297.                     !  ityp.......Numero das classes de solo 13
 5298.                     !  imon.......Numero maximo de meses no ano (12)
 5299.                     !  icg........Parametros da vegetacao (icg=1 topo e icg=2 base)
 5300.                     !  iwv........Compriment de onda iwv=1=visivel, iwv=2=infravermelho
 5301.                     !             proximo, iwv=3 infravermelho termal
 5302.                     !  idp........Camadas de solo (1 a 3)
 5303.                     !  ibd........Estado da vegetacao ibd=1 verde / ibd=2 seco
 5304.                     !  pie........Constante Pi=3.1415926e0
 5305.                     !  stefan.....Constante de Stefan Boltzmann
 5306.                     !  cp.........specific heat of air (j/kg/k)
 5307.                     !  hl ........heat of evaporation of water   (j/kg)
 5308.                     !  grav.......gravity constant      (m/s**2)
 5309.                     !  snomel.....heat of melting (j m-1)
 5310.                     !  tf.........Temperatura de congelamento (K)
 5311.                     !  clai.......heat capacity of foliage
 5312.                     !  cw.........liquid water heat capacity               (j/m**3)
 5313.                     !  gasr.......Constant of dry air      (j/kg/k)
 5314.                     !  epsfac.....Constante 0.622 Razao entre as massas moleculares do vapor
 5315.                     !             de agua e do ar seco
 5316.                     !  athird.....Constante athird=1.0e0 /3.0e0
 5317.                     !  dtc3x......time increment dt
 5318.                     !  mon........Number of month at year (1-12)
 5319.                     !  nmax
 5320.                     !  rstpar.....Coefficints related to par influence on
 5321.                     !             stomatal resistance
 5322.                     !  chil.......Leaf orientation parameter
 5323.                     !  topt.......Temperatura ideal de funcionamento estomatico
 5324.                     !  tll........Temperatura minima de funcionamento estomatico
 5325.                     !  tu.........Temperatura maxima de funcionamento estomatico
 5326.                     !  defac......Parametro de deficit de pressao de vapor d'agua
 5327.                     !  ph1........Coeficiente para o efeito da agua no solo
 5328.                     !  ph2........Potencial de agua no solo para ponto de Wilting
 5329.                     !  rootd......Profundidade das raizes
 5330.                     !  bee........Expoente da curva de retencao "expoente para o solo umido"
 5331.                     !  phsat......Tensao do solo saturado " Potencial de agua no solo saturado"
 5332.                     !  satco......mean soil hydraulic conductivity in the root zone
 5333.                     !  poros......Porosity
 5334.                     !  zdepth.....Profundidade para as tres camadas de solo
 5335.                     !  green......Fraction of grenn leaves
 5336.                     !  xcover(iv).Fracao de cobertura de vegetacao iv=1 Top
 5337.                     !  xcover(iv).Fracao de cobertura de vegetacao iv=2 Bottom
 5338.                     !  zlt(icg)...Indice de area foliar "LEAF AREA INDEX" icg=1 topo da copa
 5339.                     !  zlt(icg)...Indice de area foliar "LEAF AREA INDEX" icg=2 base da copa
 5340.                     !  x0x........Comprimento de rugosidade
 5341.                     !  xd.........Deslocamento do plano zero
 5342.                     !  z2.........Altura do topo do dossel
 5343.                     !  xdc........Constant related to aerodynamic resistance
 5344.                     !             between ground and canopy air space
 5345.                     !  xbc........Constant related to bulk boundary layer resistance
 5346.                     !  itype......Classe de textura do solo
 5347.                     !  qm.........Reference specific humidity (fourier)
 5348.                     !  tm.........Reference temperature    (fourier)                (k)
 5349.                     !  um.........Razao entre zonal pseudo-wind (fourier) e seno da
 5350.                     !             colatitude
 5351.                     !  vm.........Razao entre meridional pseudo-wind (fourier) e seno da
 5352.                     !             colatitude
 5353.                     !  psur.......Surface pressure in mb
 5354.                     !  ppc........Precipitation rate ( cumulus )           (mm/s)
 5355.                     !  ppl........Precipitation rate ( large scale )       (mm/s)
 5356.                     !  radn.......Downward sw/lw radiation at the surface
 5357.                     !  tc.........Temperatura da copa "dossel"(K)
 5358.                     !  tg.........Temperatura da superficie do solo (K)
 5359.                     !  td.........Temperatura do solo profundo (K)
 5360.                     !  capac(iv)..Agua interceptada iv=1 no dossel "water store capacity
 5361.                     !             of leaves"(m)
 5362.                     !  capac(iv)..Agua interceptada iv=2 na cobertura do solo (m)
 5363.                     !  w(id)......Grau de saturacao de umidade do solo id=1 na camada superficial
 5364.                     !  w(id)......Grau de saturacao de umidade do solo id=2 na camada de raizes
 5365.                     !  w(id)......Grau de saturacao de umidade do solo id=3 na camada de drenagem
 5366.                     !  ra.........Resistencia Aerodinamica (s/m)
 5367.                     !  rb.........bulk boundary layer resistance
 5368.                     !  rd.........Aerodynamic resistance between ground      (s/m)
 5369.                     !             and canopy air space
 5370.                     !  rc.........Resistencia do topo da copa
 5371.                     !  rg.........Resistencia da base da copa
 5372.                     !  tcta.......Diferenca entre tc-ta                      (k)
 5373.                     !  tgta.......Diferenca entre tg-ta                      (k)
 5374.                     !  ta.........Temperatura no nivel de fonte de calor do dossel (K)
 5375.                     !  ea.........Pressure of vapor
 5376.                     !  etc........Pressure of vapor at top of the copa
 5377.                     !  etg........Pressao de vapor no base da copa
 5378.                     !  btc........btc(i)=EXP(30.25353  -5418.0  /tc(i))/(tc(i)*tc(i)).
 5379.                     !  btg........btg(i)=EXP(30.25353  -5418.0  /tg(i))/(tg(i)*tg(i))
 5380.                     !  u2.........wind speed at top of canopy
 5381.                     !  radt.......net heat received by canopy/ground vegetation
 5382.                     !  par........par incident on canopy
 5383.                     !  pd.........ratio of par beam to total par
 5384.                     !  rst .......Resisttencia Estomatica "Stomatal resistence" (s/m)
 5385.                     !  rsoil......Resistencia do solo (s/m)
 5386.                     !  phroot.....Soil moisture potentials in root zone of each
 5387.                     !             vegetation layer and summed soil+root resistance.
 5388.                     !  hrr........rel. humidity in top layer
 5389.                     !  phsoil.....soil moisture potential of the i-th soil layer
 5390.                     !  cc.........heat capacity of the canopy
 5391.                     !  cg.........heat capacity of the ground
 5392.                     !  satcap.....saturation liquid water capacity         (m)
 5393.                     !  snow.......snow amount
 5394.                     !  dtc........dtc(i)=pblsib(i,2,5)*dtc3x
 5395.                     !  dtg........dtg(i)=pblsib(i,1,5)*dtc3x
 5396.                     !  dtm........dtm(i)=pblsib(i,3,5)*dtc3x
 5397.                     !  dqm .......dqm(i)=pblsib(i,4,5)*dtc3x
 5398.                     !  stm .......Variavel utilizada mo cal. da Resisttencia
 5399.                     !  extk.......extinction coefficient
 5400.                     !  radfac.....Fractions of downward solar radiation at surface
 5401.                     !             passed from subr.radalb
 5402.                     !  closs......Radiation loss from canopy
 5403.                     !  gloss......Radiation loss from ground
 5404.                     !  thermk.....Canopy emissivity
 5405.                     !  p1f
 5406.                     !  p2f
 5407.                     !  ect........Transpiracao no topo da copa (J/m*m)
 5408.                     !  eci........Evaporacao da agua interceptada no topo da copa (J/m*m)
 5409.                     !  egt........Transpiracao na base da copa (J/m*m)
 5410.                     !  egi........Evaporacao da neve (J/m*m)
 5411.                     !  egs........Evaporacao do solo arido (J/m*m)
 5412.                     !  ec.........Soma da Transpiracao e Evaporacao da agua interceptada pelo
 5413.                     !             topo da copa   ec   (i)=eci(i)+ect(i)
 5414.                     !  eg.........Soma da transpiracao na base da copa +  Evaporacao do solo arido
 5415.                     !             +  Evaporacao da neve  " eg   (i)=egt(i)+egs(i)+egi(i)"
 5416.                     !  hc.........Total sensible heat lost of top from the veggies.
 5417.                     !  hg.........Total sensible heat lost of base from the veggies.
 5418.                     !  ecidif.....check if interception loss term has exceeded canopy storage
 5419.                     !             ecidif(i)=MAX(0.0   , eci(i)-capac(i,1)*hlat3 )
 5420.                     !  egidif.....check if interception loss term has exceeded canopy storage
 5421.                     !             ecidif(i)=MAX(0.0   , egi(i)-capac(i,1)*hlat3 )
 5422.                     !  ecmass.....Mass of water lost of top from the veggies.
 5423.                     !  egmass.....Mass of water lost of base from the veggies.
 5424.                     !  etmass.....Total mass of water lost from the veggies.
 5425.                     !  hflux......Total sensible heat lost from the veggies
 5426.                     !  chf........Heat fluxes into the canopy  in w/m**2
 5427.                     !  shf........Heat fluxes into the ground, in w/m**2
 5428.                     !  fluxef.....Modified to use force-restore heat fluxes
 5429.                     !             fluxef(i) = shf(i) - cg(i)*dtg(i)*dtc3xi " Garrat pg. 227"
 5430.                     !  roff.......runoff (escoamente superficial e drenagem)(m)
 5431.                     !  drag.......tensao superficial
 5432.                     !  bps
 5433.                     !  psb
 5434.                     !  dzm........Altura media de referencia  para o vento para o calculo
 5435.                     !             da estabilidade do escoamento
 5436.                     !  em.........Pressao de vapor da agua
 5437.                     !  gmt(i,k,3).temperature related matrix virtual temperature tendency
 5438.                     !             due to vertical diffusion
 5439.                     !  gmq........specific humidity related matrix specific humidity of
 5440.                     !             reference (fourier)
 5441.                     !  gmu........wind related matrix
 5442.                     !  cu.........Friction  transfer coefficients.
 5443.                     !  cuni.......Neutral friction transfer  coefficients.
 5444.                     !  ctni.......Neutral heat transfer coefficients.
 5445.                     !  ustar......Surface friction velocity  (m/s)
 5446.                     !  cosz.......Cosine of zenith angle
 5447.                     !  sinclt.....sinclt=SIN(colrad(latitu))"seno da colatitude"
 5448.                     !  rhoair.....Desnsidade do ar
 5449.                     !  psy........(cp/(hl*epsfac))*psur(i)
 5450.                     !  rcp........densidade do ar vezes o calor especifico do ar
 5451.                     !  wc.........Minimo entre 1 e a razao entre a agua interceptada pelo
 5452.                     !             indice de area foliar no topo da copa
 5453.                     !  wg.........Minimo entre 1 e a razao entre a agua interceptada pelo
 5454.                     !             indice de area foliar na base da copa
 5455.                     !  fc.........Condicao de oravalho 0 ou 1 na topo da copa
 5456.                     !  fg.........Condicao de oravalho 0 ou 1 na base da copa
 5457.                     !  hr.........rel. humidity in top layer
 5458.                     !  ndt
 5459.                     !  latitu
 5460.                     !  jstneu.....The first call to vntlat just gets the neutral values of ustar
 5461.                     !             and ventmf para jstneu=.TRUE..
 5462.                     !  hgdtg.......n.b. fluxes expressed in joules m-2
 5463.                     !  hgdtc.......n.b. fluxes expressed in joules m-2
 5464.                     !  hgdtm.......n.b. fluxes expressed in joules m-2
 5465.                     !  hcdtg.......n.b. fluxes expressed in joules m-2
 5466.                     !  hcdtc.......n.b. fluxes expressed in joules m-2
 5467.                     !  hcdtm.......n.b. fluxes expressed in joules m-2
 5468.                     !  egdtg.......partial derivative calculation for latent heat
 5469.                     !  egdtc.......partial derivative calculation for latent heat
 5470.                     !  egdqm.......partial derivative calculation for latent heat
 5471.                     !  ecdtg.......partial derivative calculation for latent heat
 5472.                     !  ecdtc.......partial derivative calculation for latent heat
 5473.                     !  ecdqm.......partial derivative calculation for latent heat
 5474.                     !  deadtg
 5475.                     !  deadtc
 5476.                     !  deadqm
 5477.                     !  icheck......this version assumes dew-free conditions "icheck=1" to
 5478.                     !              estimate ea for buoyancy term in vntmf or ra.
 5479.                     !  vcover(iv)..Fracao de cobertura de vegetacao iv=1 Top
 5480.                     !  vcover(iv)..Fracao de cobertura de vegetacao iv=2 Botto
 5481.                     !  z0x.........roughness length
 5482.                     !  d...........Displacement height
 5483.                     !  rdc.........Constant related to aerodynamic resistance
 5484.                     !              between ground and canopy air space
 5485.                     !  rbc.........Constant related to bulk boundary layer resistance
 5486.                     !  z0..........Roughness length
 5487.                     !-----------------------------------------------------------------------
 5488.                     !
 5489.                     INTEGER, INTENT(in   ) :: ncols
 5490.                 
 5491.                     REAL(KIND=r8)   , INTENT(in   ) :: dtc3x
 5492.                     INTEGER, INTENT(in   ) :: mon(ncols)
 5493.                     INTEGER, INTENT(in   ) :: nmax
 5494.                 
 5495.                     INTEGER, INTENT(in   ) :: itype (ncols)
 5496.                     !
 5497.                     !     the size of working area is ncols*187
 5498.                     !     atmospheric parameters as boudary values for sib
 5499.                     !
 5500.                     REAL(KIND=r8),    INTENT(inout) :: qm  (ncols)
 5501.                     REAL(KIND=r8),    INTENT(inout) :: tm  (ncols)
 5502.                     REAL(KIND=r8),    INTENT(in   ) :: um  (ncols)
 5503.                     REAL(KIND=r8),    INTENT(in   ) :: vm  (ncols)
 5504.                     REAL(KIND=r8),    INTENT(inout) :: psur(ncols)
 5505.                     REAL(KIND=r8),    INTENT(in   ) :: ppc (ncols)
 5506.                     REAL(KIND=r8),    INTENT(in   ) :: ppl (ncols)
 5507.                     REAL(KIND=r8),    INTENT(in   ) :: radn(ncols,3,2)
 5508.                     !
 5509.                     !     prognostic variables
 5510.                     !
 5511.                     REAL(KIND=r8),    INTENT(inout) :: tc   (ncols)
 5512.                     REAL(KIND=r8),    INTENT(inout) :: tg   (ncols)
 5513.                     REAL(KIND=r8),    INTENT(inout) :: td   (ncols)
 5514.                     REAL(KIND=r8),    INTENT(inout) :: capac(ncols,2)
 5515.                     REAL(KIND=r8),    INTENT(inout) :: w    (ncols,3)
 5516.                     !
 5517.                     !     variables calculated from above and ambient conditions
 5518.                     !
 5519.                     REAL(KIND=r8),    INTENT(inout) :: ra    (ncols)
 5520.                     REAL(KIND=r8),    INTENT(inout  ) :: rb    (ncols)
 5521.                     REAL(KIND=r8),    INTENT(inout  ) :: rd    (ncols)
 5522.                     REAL(KIND=r8),    INTENT(inout  ) :: rc    (ncols)
 5523.                     REAL(KIND=r8),    INTENT(inout  ) :: rg    (ncols)
 5524.                     REAL(KIND=r8),    INTENT(inout  ) :: tcta  (ncols)
 5525.                     REAL(KIND=r8),    INTENT(inout  ) :: tgta  (ncols)
 5526.                     REAL(KIND=r8),    INTENT(inout  ) :: ta    (ncols)
 5527.                     REAL(KIND=r8),    INTENT(inout  ) :: ea    (ncols)
 5528.                     REAL(KIND=r8),    INTENT(inout  ) :: etc   (ncols)
 5529.                     REAL(KIND=r8),    INTENT(inout  ) :: etg   (ncols)
 5530.                     REAL(KIND=r8),    INTENT(inout  ) :: btc   (ncols)
 5531.                     REAL(KIND=r8),    INTENT(inout  ) :: btg   (ncols)
 5532.                     REAL(KIND=r8),    INTENT(inout) :: u2    (ncols)
 5533.                     REAL(KIND=r8),    INTENT(inout  ) :: radt  (ncols,icg)
 5534.                     REAL(KIND=r8),    INTENT(inout) :: par   (ncols,icg)
 5535.                     REAL(KIND=r8),    INTENT(inout  ) :: pd    (ncols,icg)
 5536.                     REAL(KIND=r8),    INTENT(inout  ) :: rst   (ncols,icg)
 5537.                     REAL(KIND=r8),    INTENT(inout  ) :: rsoil (ncols)
 5538.                     REAL(KIND=r8),    INTENT(inout  ) :: phroot(ncols,icg)
 5539.                     REAL(KIND=r8),    INTENT(inout  ) :: hrr   (ncols)
 5540.                     REAL(KIND=r8),    INTENT(inout  ) :: phsoil(ncols,idp)
 5541.                     REAL(KIND=r8),    INTENT(inout  ) :: cc    (ncols)
 5542.                     REAL(KIND=r8),    INTENT(inout  ) :: cg    (ncols)
 5543.                     REAL(KIND=r8),    INTENT(inout) :: satcap(ncols,icg)
 5544.                     REAL(KIND=r8),    INTENT(inout) :: snow  (ncols,icg)
 5545.                     REAL(KIND=r8),    INTENT(inout  ) :: dtc   (ncols)
 5546.                     REAL(KIND=r8),    INTENT(inout  ) :: dtg   (ncols)
 5547.                     REAL(KIND=r8),    INTENT(inout  ) :: dtm   (ncols)
 5548.                     REAL(KIND=r8),    INTENT(inout  ) :: dqm   (ncols)
 5549.                     REAL(KIND=r8),    INTENT(inout  ) :: stm   (ncols,icg)
 5550.                     REAL(KIND=r8),    INTENT(inout) :: extk  (ncols,icg,iwv,ibd)
 5551.                     REAL(KIND=r8),    INTENT(in   ) :: radfac(ncols,icg,iwv,ibd)
 5552.                     REAL(KIND=r8),    INTENT(in   ) :: closs (ncols)
 5553.                     REAL(KIND=r8),    INTENT(in   ) :: gloss (ncols)
 5554.                     REAL(KIND=r8),    INTENT(inout) :: thermk(ncols)
 5555.                     REAL(KIND=r8),    INTENT(in   ) :: p1f   (ncols)
 5556.                     REAL(KIND=r8),    INTENT(in   ) :: p2f   (ncols)
 5557.                     !
 5558.                     !     heat fluxes : c-canopy, g-ground, t-trans, e-evap  in j m-2
 5559.                     !
 5560.                     REAL(KIND=r8),    INTENT(inout) :: ect   (ncols)
 5561.                     REAL(KIND=r8),    INTENT(inout) :: eci   (ncols)
 5562.                     REAL(KIND=r8),    INTENT(inout) :: egt   (ncols)
 5563.                     REAL(KIND=r8),    INTENT(inout) :: egi   (ncols)
 5564.                     REAL(KIND=r8),    INTENT(inout) :: egs   (ncols)
 5565.                     REAL(KIND=r8),    INTENT(inout  ) :: ec    (ncols)
 5566.                     REAL(KIND=r8),    INTENT(inout  ) :: eg    (ncols)
 5567.                     REAL(KIND=r8),    INTENT(inout  ) :: hc    (ncols)
 5568.                     REAL(KIND=r8),    INTENT(inout  ) :: hg    (ncols)
 5569.                     REAL(KIND=r8),    INTENT(inout  ) :: ecidif(ncols)
 5570.                     REAL(KIND=r8),    INTENT(inout  ) :: egidif(ncols)
 5571.                     REAL(KIND=r8),    INTENT(inout  ) :: ecmass(ncols)
 5572.                     REAL(KIND=r8),    INTENT(inout  ) :: egmass(ncols)
 5573.                     REAL(KIND=r8),    INTENT(inout  ) :: etmass(ncols)
 5574.                     REAL(KIND=r8),    INTENT(inout  ) :: hflux (ncols)
 5575.                     REAL(KIND=r8),    INTENT(inout  ) :: chf   (ncols)
 5576.                     REAL(KIND=r8),    INTENT(inout  ) :: shf   (ncols)
 5577.                     REAL(KIND=r8),    INTENT(inout  ) :: fluxef(ncols)
 5578.                     REAL(KIND=r8),    INTENT(inout) :: roff  (ncols)
 5579.                     REAL(KIND=r8),    INTENT(inout) :: drag  (ncols)
 5580.                     !
 5581.                     !     this is for coupling with closure turbulence model
 5582.                     !
 5583.                     REAL(KIND=r8),    INTENT(in   ) :: bps   (ncols)
 5584.                     REAL(KIND=r8),    INTENT(in   ) :: psb   (ncols)
 5585.                     REAL(KIND=r8),    INTENT(in   ) :: dzm   (ncols)
 5586.                     REAL(KIND=r8),    INTENT(in   ) :: em    (ncols)
 5587.                     REAL(KIND=r8),    INTENT(inout) :: gmt   (ncols,3)
 5588.                     REAL(KIND=r8),    INTENT(inout) :: gmq   (ncols,3)
 5589.                     REAL(KIND=r8),    INTENT(inout) :: gmu   (ncols,4)
 5590.                     REAL(KIND=r8),    INTENT(inout) :: cu    (ncols)
 5591.                     REAL(KIND=r8),    INTENT(inout) :: cuni  (ncols)
 5592.                     REAL(KIND=r8),    INTENT(inout) :: ctni  (ncols)
 5593.                     REAL(KIND=r8),    INTENT(inout) :: ustar (ncols)
 5594.                     REAL(KIND=r8),    INTENT(in   ) :: cosz  (ncols)
 5595.                     REAL(KIND=r8),    INTENT(in   ) :: sinclt(ncols)
 5596.                     REAL(KIND=r8),    INTENT(in   ) :: rhoair(ncols)
 5597.                     REAL(KIND=r8),    INTENT(in   ) :: psy   (ncols)
 5598.                     REAL(KIND=r8),    INTENT(inout  ) :: rcp   (ncols)
 5599.                     REAL(KIND=r8),    INTENT(inout) :: wc    (ncols)
 5600.                     REAL(KIND=r8),    INTENT(inout) :: wg    (ncols)
 5601.                     REAL(KIND=r8),    INTENT(inout) :: fc    (ncols)
 5602.                     REAL(KIND=r8),    INTENT(inout) :: fg    (ncols)
 5603.                     REAL(KIND=r8),    INTENT(inout) :: hr    (ncols)
 5604.                 
 5605.                     INTEGER, INTENT(in   ) :: ndt
 5606.                     INTEGER, INTENT(in   ) :: latitu
 5607.                 
 5608.                     REAL(KIND=r8)   , INTENT(in   ) :: rstpar2 (ncols,icg,iwv)
 5609.                     REAL(KIND=r8)   , INTENT(in   ) :: zlt2    (ncols,icg)
 5610.                     REAL(KIND=r8)   , INTENT(in   ) :: green2  (ncols,icg)
 5611.                     REAL(KIND=r8)   , INTENT(in   ) :: chil2   (ncols,icg)
 5612.                     REAL(KIND=r8),    INTENT(inout) :: vcover  (ncols,icg)
 5613.                     REAL(KIND=r8),    INTENT(inout) :: z0x(ncols)
 5614.                     REAL(KIND=r8),    INTENT(inout) :: d  (ncols)
 5615.                     REAL(KIND=r8),    INTENT(inout) :: rdc(ncols)
 5616.                     REAL(KIND=r8),    INTENT(inout) :: rbc(ncols)
 5617.                     REAL(KIND=r8),    INTENT(inout) :: z0 (ncols)
 5618.                     REAL(KIND=r8)   , INTENT(in   ) :: topt2   (ncols,icg)
 5619.                     REAL(KIND=r8)   , INTENT(in   ) :: tll2    (ncols,icg)
 5620.                     REAL(KIND=r8)   , INTENT(in   ) :: tu2     (ncols,icg)
 5621.                     REAL(KIND=r8)   , INTENT(in   ) :: defac2  (ncols,icg)
 5622.                     REAL(KIND=r8)   , INTENT(in   ) :: ph12    (ncols,icg)
 5623.                     REAL(KIND=r8)   , INTENT(in   ) :: ph22    (ncols,icg)
 5624.                 
 5625.                     LOGICAL :: jstneu
 5626.                     INTEGER :: icheck(ncols)
 5627.                 
 5628.                     !
 5629.                     !     derivatives
 5630.                     !
 5631.                     REAL(KIND=r8) :: hgdtg (ncols)
 5632.                     REAL(KIND=r8) :: hgdtc (ncols)
 5633.                     REAL(KIND=r8) :: hgdtm (ncols)
 5634.                     REAL(KIND=r8) :: hcdtg (ncols)
 5635.                     REAL(KIND=r8) :: hcdtc (ncols)
 5636.                     REAL(KIND=r8) :: hcdtm (ncols)
 5637.                     REAL(KIND=r8) :: egdtg (ncols)
 5638.                     REAL(KIND=r8) :: egdtc (ncols)
 5639.                     REAL(KIND=r8) :: egdqm (ncols)
 5640.                     REAL(KIND=r8) :: ecdtg (ncols)
 5641.                     REAL(KIND=r8) :: ecdtc (ncols)
 5642.                     REAL(KIND=r8) :: ecdqm (ncols)
 5643.                     REAL(KIND=r8) :: deadtg(ncols)
 5644.                     REAL(KIND=r8) :: deadtc(ncols)
 5645.                     REAL(KIND=r8) :: deadqm(ncols)
 5646.                 
 5647.                     REAL(KIND=r8)    :: ef    (ncols,3)
 5648.                     REAL(KIND=r8)    :: absoil(ncols)
 5649.                     REAL(KIND=r8)    :: totdep(ncols)
 5650.                     REAL(KIND=r8)    :: div   (ncols)
 5651.                     REAL(KIND=r8)    :: eft   (ncols)
 5652.                     REAL(KIND=r8)    :: aaa   (ncols)
 5653.                     REAL(KIND=r8)    :: dep   (ncols)
 5654.                 
 5655.                 
 5656.                     INTEGER :: i
 5657.                     INTEGER :: il
 5658.                     INTEGER :: ntyp
 5659.                     INTEGER :: iveg
 5660.                     REAL(KIND=r8)    :: hlat3i
 5661.                     REAL(KIND=r8)    :: gby100
 5662.                     REAL(KIND=r8)    :: timcon
 5663.                     REAL(KIND=r8)    :: totwb(ncols)
 5664.                     REAL(KIND=r8)    :: endwb(ncols)
 5665.                     REAL(KIND=r8)    :: cbal (ncols)
 5666.                     REAL(KIND=r8)    :: gbal (ncols)
 5667.                     REAL(KIND=r8)    :: d1
 5668.                     !
 5669.                     !     calculates soil water budget prior to calling pbl
 5670.                     !
 5671.  Vpr2---------<     DO i = 1, nmax
 5672.  Vpr2                  !
 5673.  Vpr2                  !  capac(1)..Agua interceptada no dossel (m)
 5674.  Vpr2                  !  capac(2)..Agua interceptada na cobertura do solo (m)
 5675.  Vpr2                  !
 5676.  Vpr2                  totwb(i)=w(i,1)*poros(itype(i))*zdepth(itype(i),1) &
 5677.  Vpr2                       +w(i,2)*poros(itype(i))*zdepth(itype(i),2) &
 5678.  Vpr2                       +w(i,3)*poros(itype(i))*zdepth(itype(i),3) &
 5679.  Vpr2                       +capac(i,1) + capac(i,2)
 5680.  Vpr2--------->     END DO
 5681.                     !
 5682.                     !     planetary boundary layer parameterization
 5683.                     !
 5684.                     CALL pbl(jstneu, hgdtg , hgdtc , hgdtm , hcdtg , hcdtc , hcdtm , &
 5685.                          egdtg , egdtc , egdqm , ecdtg , ecdtc , ecdqm , deadtg, &
 5686.                          deadtc, deadqm,icheck , ect   , eci   , egt   , egi   , &
 5687.                          egs   , ec    , eg    , hc    , hg    , ecidif, egidif, &
 5688.                          ecmass, egmass, etmass, hflux , chf   , shf   , roff  , &
 5689.                          bps   , psb   , dzm   , em    , gmt   , gmq   ,  cu   , &
 5690.                          cuni  , ctni  , ustar , cosz  , rhoair, psy   , rcp   , &
 5691.                          wc   , wg       , fc       , fg       , hr       , vcover, z0x   , &
 5692.                          d       , rdc   , rbc   , z0       , qm       , tm       , um       , &
 5693.                          vm       , psur  , ppc   , ppl   , radn  , ra       , rb       , &
 5694.                          rd       , rc       , rg       , tcta  , tgta  , ta       , ea       , &
 5695.                          etc   , etg   , btc   , btg   , u2       , radt  , par   , &
 5696.                          pd       , rst   , rsoil , phroot,  hrr  , phsoil, cc       , &
 5697.                          cg       , satcap, snow  , dtc   , dtg   , dtm   , dqm   , &
 5698.                          stm   , extk  , radfac, closs , gloss , thermk, p1f   , &
 5699.                          p2f   , tc       , tg       , td       , capac , w       , itype , &
 5700.                          dtc3x , mon   , nmax  , ncols ,zlt2  ,green2,chil2 ,rstpar2,&
 5701.                          topt2 ,tll2  ,tu2   , defac2,ph12  ,ph22 )
 5702.                 
 5703.                     !
 5704.                     !     continue to update sib variables
 5705.                     !
 5706.  Vr4----------<     DO i = 1, nmax
 5707.  Vr4                   tc(i) = tc(i) + dtc(i)
 5708.  Vr4                   tg(i) = tg(i) + dtg(i)
 5709.  Vr4---------->     END DO
 5710.                     !
 5711.                     !     dumping of small capac values onto soil surface store
 5712.                     !
 5713.  1------------<     DO iveg = 1, 2
 5714.  1 2----------<        DO i = 1, nmax
 5715.  1 2                      ntyp  =itype(i)
 5716.  1 2                      IF (capac(i,iveg) <= 1.e-6_r8)THEN
 5717.  1 2                         w(i,1)=w(i,1)+capac(i,iveg)/(poros(ntyp)*zdepth(ntyp,1))
 5718.  1 2                         capac(i,iveg)=0.0_r8
 5719.  1 2                      END IF
 5720.  1 2---------->        END DO
 5721.  1------------>     END DO
 5722.                     !
 5723.                     !     snowmelt/refreeze calculation
 5724.                     !
 5725.                     CALL snowm(&
 5726.                          chf   ,shf   ,fluxef,roff  ,cc    ,cg    ,snow  ,dtc   ,dtg   , &
 5727.                          tc    ,tg    ,td    ,capac ,w     ,itype ,dtc3x ,nmax  ,ncols   )
 5728.                     !
 5729.                     !     update deep soil temperature using effective soil heat flux
 5730.                     !
 5731.                     timcon=dtc3x/(2.0_r8 *SQRT(pie*365.0_r8 ))
 5732.                 
 5733.  Vpfr2--------<     DO i = 1, nmax
 5734.  Vpfr2                 td(i)=td(i)+fluxef(i)/cg(i)*timcon
 5735.  Vpfr2-------->     END DO
 5736.                     !
 5737.                     !     bare soil evaporation loss
 5738.                     !
 5739.                     hlat3i=1.0_r8/(hl*1000.0_r8 )
 5740.  f------------<     DO i = 1, nmax
 5741.  f                     ntyp=itype(i)
 5742.  f                     w(i,1)=w(i,1)-egs(i)*hlat3i/(poros(ntyp)*zdepth(ntyp,1))
 5743.  f------------>     END DO
 5744.                     !
 5745.                     !        extraction of transpiration loss from root zone
 5746.                     !
 5747.  1------------<     DO iveg = 1, 2
 5748.  1                     IF (iveg == 1) THEN
 5749.  1 Vr4--------<           DO i = 1, nmax
 5750.  1 Vr4                       absoil(i)=ect(i)*hlat3i
 5751.  1 Vr4-------->           END DO
 5752.  1                     ELSE
 5753.  1 Vr4--------<           DO i = 1, nmax
 5754.  1 Vr4                       absoil(i)=egt(i)*hlat3i
 5755.  1 Vr4-------->           END DO
 5756.  1                     END IF
 5757.  1 Vpr2-------<        DO i = 1, nmax
 5758.  1 Vpr2                   ntyp=itype(i)
 5759.  1 Vpr2                   ef(i,2)=0.0_r8
 5760.  1 Vpr2                   ef(i,3)=0.0_r8
 5761.  1 Vpr2                   totdep(i)=zdepth(ntyp,1)
 5762.  1 Vpr2------->        END DO
 5763.  1 2----------<        DO il = 2, 3
 5764.  1 2 Vpr2-----<           DO i = 1, nmax
 5765.  1 2 Vpr2                    ntyp=itype(i)
 5766.  1 2 Vpr2                    totdep(i)=totdep(i)+zdepth(ntyp,il)
 5767.  1 2 Vpr2                    div(i)=rootd(ntyp,iveg)
 5768.  1 2 Vpr2                    dep(i)=MAX(0.0_r8  ,rootd(ntyp,iveg)-totdep(i)+ &
 5769.  1 2 Vpr2                         zdepth(ntyp,il))
 5770.  1 2 Vpr2                    dep(i)=MIN(dep(i),zdepth(ntyp,il))
 5771.  1 2 Vpr2                    ef(i,il)=dep(i)/div(i)
 5772.  1 2 Vpr2----->           END DO
 5773.  1 2---------->        END DO
 5774.  1 Vr4--------<        DO i = 1, nmax
 5775.  1 Vr4                    eft(i  )=ef(i,2)+ef (i,3)
 5776.  1 Vr4                    eft(i) = MAX(eft(i),0.1e-5_r8)
 5777.  1 Vr4                    ef (i,2)=ef(i,2)/eft(i)
 5778.  1 Vr4                    ef (i,3)=ef(i,3)/eft(i)
 5779.  1 Vr4-------->        END DO
 5780.  1 2----------<        DO il = 2, 3
 5781.  1 2 Vpr2-----<           DO i = 1, nmax
 5782.  1 2 Vpr2                    ntyp=itype(i)
 5783.  1 2 Vpr2                    w(i,il)=w(i,il)-absoil(i)*ef(i,il)/ &
 5784.  1 2 Vpr2                         (poros(ntyp)*zdepth(ntyp,il))
 5785.  1 2 Vpr2----->           END DO
 5786.  1 2---------->        END DO
 5787.  1------------>     END DO
 5788.                     !
 5789.                     !     interflow, infiltration excess and loss to
 5790.                     !     groundwater .  all losses are assigned to variable 'roff' .
 5791.                     !
 5792.  b------------<     DO il = 1, 2
 5793.  b b----------<        DO i = 1, nmax
 5794.  b b                      IF (w(i,il) <= 0.0_r8) THEN
 5795.  b b                         ntyp=itype(i)
 5796.  b b                         w(i,il+1)=w(i,il+1)+w(i,il)* &
 5797.  b b                              zdepth(ntyp,il)/zdepth(ntyp,il+1)
 5798.  b b                         w(i,il  )=0.0_r8
 5799.  b b                      END IF
 5800.  b b---------->        END DO
 5801.  b------------>     END DO
 5802.                 
 5803.                     CALL runoff(&
 5804.                          roff  ,tg    ,td    ,capac ,w     ,itype ,dtc3x ,nmax  ,ncols )
 5805.                 
 5806.  1------------<     DO i = 1, nmax
 5807.  1                     ntyp = itype(i)
 5808.  1                     IF (w(i,1) > 1.0_r8) THEN
 5809.  1                        w(i,2)=w(i,2)+(w(i,1)-1.0_r8 )*zdepth(ntyp,1)/zdepth(ntyp,2)
 5810.  1                        w(i,1)=1.0_r8
 5811.  1                     ENDIF
 5812.  1                     IF (w(i,2) > 1.0_r8) THEN
 5813.  1                        w(i,3)= w(i,3)+(w(i,2)-1.0_r8 )*zdepth(ntyp,2)/zdepth(ntyp,3)
 5814.  1                        w(i,2)=1.0_r8
 5815.  1                     ENDIF
 5816.  1                     IF (w(i,3) > 1.0_r8) THEN
 5817.  1                        roff(i)=roff(i)+(w(i,3)-1.0_r8 )*poros(ntyp)*zdepth(ntyp,3)
 5818.  1                        w(i,3)=1.0_r8
 5819.  1                     END IF
 5820.  1------------>     END DO
 5821.                     !
 5822.                     !     increment prognostic variables
 5823.                     !
 5824.                     !     adjust theta and sh to be consistent with dew formation
 5825.                     !
 5826.                     gby100 = 0.01_r8  * grav
 5827.                 
 5828.  Vr2----------<     DO i = 1, nmax
 5829.  Vr2                   !
 5830.  Vr2                   !     solve implicit system for winds
 5831.  Vr2                   !
 5832.  Vr2                   ! psb(i) = psur(i) * ( si(k) - si(k+1) )
 5833.  Vr2                   !
 5834.  Vr2                   drag(i)  =rhoair(i)*cu(i)*ustar(i)
 5835.  Vr2                   !
 5836.  Vr2                   ! P=rho*G*Z ===> DP=rho*G*DZ
 5837.  Vr2                   !
 5838.  Vr2                   ! D                D
 5839.  Vr2                   !---- = rho * g * ----
 5840.  Vr2                   ! DZ               DP
 5841.  Vr2                   !                                D
 5842.  Vr2                   ! aaa = cu * ustar *  rho * g * ----
 5843.  Vr2                   !                                DP
 5844.  Vr2                   !
 5845.  Vr2                   !                                                   g
 5846.  Vr2                   ! aaa (i)  = rhoair(i)*cu(i)*ustar(i) * -------------------------------
 5847.  Vr2                   !                                       100*psur(i) * ( si(k) - si(k+1) )
 5848.  Vr2                   !
 5849.  Vr2                   aaa (i)  =drag  (i)*gby100/psb(i)
 5850.  Vr2            
 5851.  Vr2                   gmu (i,2) =  gmu(i,2) + dtc3x*aaa(i)
 5852.  Vr2                   gmu (i,3) = (gmu(i,3) - aaa(i) * um(i)*sinclt(i) ) / gmu(i,2)
 5853.  Vr2                   gmu (i,4) = (gmu(i,4) - aaa(i) * vm(i)*sinclt(i) ) / gmu(i,2)
 5854.  Vr2            
 5855.  Vr2                   d1     =1.0_r8/ra(i) + 1.0_r8/rb(i) + 1.0_r8/rd(i)
 5856.  Vr2            
 5857.  Vr2                   ta(i)  =( tg(i)/rd(i) + tc(i)/rb(i) + tm(i)*bps(i)/ra(i) )/d1
 5858.  Vr2            
 5859.  Vr2---------->     END DO
 5860.                     !
 5861.                     !     calculates soil water budget after calling pbl
 5862.                     !     and compares with previous budget
 5863.                     !
 5864.  Vpr2---------<     DO i = 1, nmax
 5865.  Vpr2                  ntyp=itype(i)
 5866.  Vpr2                  endwb(i)=w(i,1)*poros(ntyp)*zdepth(ntyp,1) &
 5867.  Vpr2                       +w(i,2)*poros(ntyp)*zdepth(ntyp,2) &
 5868.  Vpr2                       +w(i,3)*poros(ntyp)*zdepth(ntyp,3) &
 5869.  Vpr2                       +capac(i,1)+capac(i,2) &
 5870.  Vpr2                       -(ppl(i)+ppc(i))/1000.0_r8 + etmass(i)/1000.0_r8 + roff(i)
 5871.  Vpr2                  !IF (ABS(totwb(i)-endwb(i)) > 0.0001_r8) THEN
 5872.  Vpr2                  !  WRITE(UNIT=nfprt,FMT=998) latitu,i,ntyp,ndt, &
 5873.  Vpr2                  !       totwb(i),endwb(i),(totwb(i)-endwb(i)),w(i,1),w(i,2), &
 5874.  Vpr2                  !       w(i,3),capac(i,1),capac(i,2),ppl(i),ppc(i),etmass(i), &
 5875.  Vpr2                  !       roff(i),zlt(ntyp,12,1),zlt(ntyp,12,2), &
 5876.  Vpr2                  !       tc(i),tg(i),td(i),tm(i)
 5877.  Vpr2                  !END IF
 5878.  Vpr2                  !
 5879.  Vpr2                  !     calculates and compares energy budgets
 5880.  Vpr2                  !
 5881.  Vpr2                  cbal(i)=radt(i,1)-chf(i)-(ect(i)+hc(i)+eci(i))/dtc3x
 5882.  Vpr2                  gbal(i)=radt(i,2)-shf(i)-(egt(i)+egi(i)+hg(i)+egs(i))/dtc3x
 5883.  Vpr2                  !IF (ABS(cbal(i)-gbal(i)) > 5.0_r8) &
 5884.  Vpr2                  !    WRITE(UNIT=nfprt,FMT=999)latitu,i,ntyp,ndt, &
 5885.  Vpr2                  !    radt(i,1),radt(i,2),chf(i),shf(i),hflux(i), &
 5886.  Vpr2                  !    ect(i),eci(i),egt(i),egi(i),egs(i)
 5887.  Vpr2--------->     END DO
 5888.                     !cdir critical
 5889.  1------------<     DO i=1,nmax
 5890.  1                     ntyp=itype(i)
 5891.  1                     ! if(abs(totwb(i)-endwb(i)).gt.0.0001_r8) then
 5892.  1                     IF(ABS(totwb(i)-endwb(i)).GT.0.0005_r8) THEN
 5893.  1                        WRITE(UNIT=nfprt,FMT=998) latitu,i,ntyp,ndt, &
 5894.  1                             totwb(i),endwb(i),(totwb(i)-endwb(i)),w(i,1),w(i,2), &
 5895.  1                             w(i,3),capac(i,1),capac(i,2),ppl(i),ppc(i),etmass(i), &
 5896.  1                             roff(i),zlt(ntyp,12,1),zlt(ntyp,12,2), &
 5897.  1                             tc(i),tg(i),td(i),tm(i)
 5898.  1                     END IF
 5899.  1                     IF(ABS(cbal(i)-gbal(i)).GT.5.0_r8) &
 5900.  1                          WRITE(UNIT=nfprt,FMT=999)latitu,i,ntyp,ndt, &
 5901.  1                          radt(i,1),radt(i,2),chf(i),shf(i),hflux(i), &
 5902.  1                          ect(i),eci(i),egt(i),egi(i),egs(i)
 5903.  1------------>     END DO
 5904.                     !cdir end critical
 5905.                 
 5906.                 998    FORMAT(3I4,1X,'WATER BAL.',I8,/3E12.4/3E12.4/2E12.4/4E12.4/2E12.4/4E12.4)
 5907.                 999    FORMAT(3I4,1X,'ENERGY BAL.',I8/4E12.3/6E12.3)
 5908.                   END SUBROUTINE fysiks
 5909.                 
 5910.                 
 5911.                 
 5912.                   ! vntlt1 :performs ventilation mass flux, based on deardorff, mwr, 1972?.
 5913.                 
 5914.                 
 5915.                 
 5916.                   SUBROUTINE vntlt1 &
 5917.                        (rmi   ,rhi   ,gu    ,gv    ,gt    ,tsurf ,tsea  ,ncols , &
 5918.                        sigki ,cuni  ,cui   ,cu    ,ctni  ,cti   ,ct    ,speedm,tha   , &
 5919.                        thm   ,dzm   ,thvgm ,rib   ,z0    ,zorl  ,ustar ,sinclt,mskant  )
 5920.                     !
 5921.                     !==========================================================================
 5922.                     !==========================================================================
 5923.                     !==========================================================================
 5924.                     ! imax..........number of grid points on a gaussian latitude circle
 5925.                     ! z0ice.........Roughness length of ice
 5926.                     ! sinclt........sinclt=SIN(colrad(latitu))
 5927.                     ! rmi...........rmi   (i)=cu(i)*ustar(i), where
 5928.                     !               cu is friction  transfer coefficients
 5929.                     !               ustar is surface friction velocity  (m/s)
 5930.                     ! rhi...........rhi   (i)=ct(i)*ustar(i), where
 5931.                     !               ct is heat transfer coefficients.
 5932.                     !               ustar is surface friction velocity  (m/s)
 5933.                     ! gu............(zonal      velocity)*sin(colat)
 5934.                     ! gv............(meridional velocity)*sin(colat)
 5935.                     ! gt............temperature
 5936.                     ! tsurf.........earth's surface temperature used for radiation
 5937.                     !               for the first time step when ground temperature is not yet
 5938.                     !               computed (this is done by subr.tsinit ),
 5939.                     ! tsea..........effective surface radiative temperature ( tgeff )
 5940.                     ! zorl..........zorl (i)= 100.0 *zgrav*speedm(i)*rhi(i)
 5941.                     !               zgrav =0.032 /grav
 5942.                     ! delsig
 5943.                     ! sigki ........sigki (k)=1.0e0/EXP(akappa*LOG(sig(k))),  where "sig"
 5944.                     !               sigma coordinate at middle of layer and akappa=gasr/cp
 5945.                     ! cuni..........neutral friction transfer  coefficients.
 5946.                     ! cui...........cui   (i)=cuni(i)*EXP( aa-SQRT(aa*aa+bb*f))
 5947.                     !               cui   (i)=cuni(i)*EXP(-tt+SQRT(tt*tt+ss*f))
 5948.                     ! cu............Friction  transfer coefficients.
 5949.                     ! ctni..........neutral heat transfer coefficients.
 5950.                     ! cti...........cti   (i)=ctni(i)*EXP( qq-SQRT(qq*qq+rr*g))
 5951.                     !               cti   (i)=cui (i)
 5952.                     ! ct............heat transfer coefficients.
 5953.                     ! speedm........speedm(i)=SQRT(gu(i)**2+gv(i)**2)*sincli, where
 5954.                     !               sincli=1.0 /sinclt
 5955.                     ! tha...........tha   (i)= tsurf(i)
 5956.                     ! thm...........thm   (i)= gt(i)*sigki(1)
 5957.                     ! dzm...........dzm   (i)=gt(i)*rbyg
 5958.                     !               rbyg  =gasr/grav*delsig(1)*0.5
 5959.                     ! thvgm.........thvgm (i)= tha(i)-thm(i)
 5960.                     ! rib...........bulk richardson number.
 5961.                     ! z0............Roughness length
 5962.                     ! ustarr........surface friction velocity  (m/s)
 5963.                     ! gasr..........gas constant of dry air        (j/kg/k)
 5964.                     ! grav..........grav   gravity constant        (m/s**2)
 5965.                     !==========================================================================
 5966.                     !
 5967.                     INTEGER, INTENT(in   ) :: ncols
 5968.                     REAL(KIND=r8),    INTENT(in   ) :: sinclt(ncols)
 5969.                     REAL(KIND=r8),    INTENT(inout  ) :: rmi   (ncols)
 5970.                     REAL(KIND=r8),    INTENT(inout  ) :: rhi   (ncols)
 5971.                     REAL(KIND=r8),    INTENT(in   ) :: gu    (ncols)
 5972.                     REAL(KIND=r8),    INTENT(in   ) :: gv    (ncols)
 5973.                     REAL(KIND=r8),    INTENT(in   ) :: gt    (ncols)
 5974.                     REAL(KIND=r8),    INTENT(in   ) :: tsurf (ncols)
 5975.                     REAL(KIND=r8),    INTENT(in   ) :: tsea  (ncols)
 5976.                     REAL(KIND=r8),    INTENT(in   ) :: zorl  (ncols)
 5977.                     REAL(KIND=r8),    INTENT(in   ) :: sigki   (1)
 5978.                     REAL(KIND=r8),    INTENT(inout) :: cuni  (ncols)
 5979.                     REAL(KIND=r8),    INTENT(inout) :: cui   (ncols)
 5980.                     REAL(KIND=r8),    INTENT(inout) :: cu    (ncols)
 5981.                     REAL(KIND=r8),    INTENT(inout) :: ctni  (ncols)
 5982.                     REAL(KIND=r8),    INTENT(inout) :: cti   (ncols)
 5983.                     REAL(KIND=r8),    INTENT(inout) :: ct    (ncols)
 5984.                     REAL(KIND=r8),    INTENT(inout) :: speedm(ncols)
 5985.                     REAL(KIND=r8),    INTENT(inout) :: tha   (ncols)
 5986.                     REAL(KIND=r8),    INTENT(inout) :: thm   (ncols)
 5987.                     REAL(KIND=r8),    INTENT(inout) :: dzm   (ncols)
 5988.                     REAL(KIND=r8),    INTENT(inout) :: thvgm (ncols)
 5989.                     REAL(KIND=r8),    INTENT(inout) :: rib   (ncols)
 5990.                     REAL(KIND=r8),    INTENT(inout) :: z0    (ncols)
 5991.                     REAL(KIND=r8),    INTENT(inout) :: ustar (ncols)
 5992.                     INTEGER(KIND=i8), INTENT(in   ) :: mskant(ncols)
 5993.                 
 5994.                     REAL(KIND=r8),        PARAMETER :: vkrmn=0.40_r8
 5995.                     REAL(KIND=r8),        PARAMETER :: ribc=3.05_r8
 5996.                     REAL(KIND=r8),        PARAMETER :: aa=1.2270_r8
 5997.                     REAL(KIND=r8),        PARAMETER :: bb=1.2642_r8
 5998.                     REAL(KIND=r8),        PARAMETER :: tt=1.8900_r8
 5999.                     REAL(KIND=r8),        PARAMETER :: ss=5.0519_r8
 6000.                     REAL(KIND=r8),        PARAMETER :: ee=1.2743_r8
 6001.                     REAL(KIND=r8),        PARAMETER :: ff=3.4805_r8
 6002.                     REAL(KIND=r8),        PARAMETER :: gg=0.87581_r8
 6003.                     REAL(KIND=r8),        PARAMETER :: hh=-1.5630_r8
 6004.                     REAL(KIND=r8),        PARAMETER :: pp=10.815_r8
 6005.                     REAL(KIND=r8),        PARAMETER :: qq=1.3462_r8
 6006.                     REAL(KIND=r8),        PARAMETER :: rr=1.8380_r8
 6007.                     REAL(KIND=r8)                   :: sincli(ncols)
 6008.                     REAL(KIND=r8)                   :: f
 6009.                     REAL(KIND=r8)                   :: g
 6010.                     INTEGER                :: i
 6011.                 
 6012.  1------------<     DO i = 1, ncols
 6013.  1                     IF(mskant(i) == 1_i8)THEN
 6014.  1                        z0(i)=0.001_r8
 6015.  1                        IF (tsea(i) < 0.0_r8 .AND. ABS(tsea(i)) >= 271.17_r8) THEN
 6016.  1                           z0(i)=0.01_r8*zorl(i)
 6017.  1                        ELSE IF (tsea(i) < 0.0_r8 .AND. ABS(tsea(i)) < 271.17_r8) THEN
 6018.  1                          z0(i)=z0ice
 6019.  1                        END IF
 6020.  1                        sincli(i)=1.0_r8 /sinclt(i)
 6021.  1                     END IF  
 6022.  1------------>     END DO
 6023.                 
 6024.  1------------<     DO i = 1, ncols
 6025.  1                     IF(mskant(i) == 1_i8)THEN
 6026.  1                        IF (tsea(i) <= 0.0_r8) THEN
 6027.  1                           speedm(i)=SQRT(gu(i)**2+gv(i)**2)*sincli(i)
 6028.  1                           speedm(i)=MAX(2.0_r8 ,speedm(i))
 6029.  1                           dzm   (i)=gt(i)*rbyg
 6030.  1                           cuni(i)=LOG(dzm(i)/z0(i))/vkrmn*gg+hh
 6031.  1                           ctni(i)=cuni(i)
 6032.  1                           !
 6033.  1                           !     stability branch based on bulk richardson number.
 6034.  1                           !
 6035.  1                           thm   (i)= gt(i)*sigki(1)
 6036.  1                           tha   (i)= tsurf(i)
 6037.  1                           thvgm (i)= tha(i)-thm(i)
 6038.  1                           rib   (i)=-thvgm(i)*grav*dzm(i)/ (thm(i)*speedm(i)**2)
 6039.  1                           rib   (i)=MAX(-1.25_r8 ,rib(i))
 6040.  1                           rib   (i)=MIN( 1.25_r8 ,rib(i))
 6041.  1                           IF (rib(i) < 0.0_r8) THEN
 6042.  1                              f        =LOG(1.0_r8-ee*rib(i))
 6043.  1                              cui   (i)=cuni(i)*EXP( aa-SQRT(aa*aa+bb*f))
 6044.  1                              g        =LOG(1.0_r8-ff*rib(i))
 6045.  1                              cti   (i)=ctni(i)*EXP( qq-SQRT(qq*qq+rr*g))
 6046.  1                           ELSE
 6047.  1                              f        =LOG(1.0_r8+pp*rib(i))
 6048.  1                              cui   (i)=cuni(i)*EXP(-tt+SQRT(tt*tt+ss*f))
 6049.  1                              cti   (i)=cui (i)
 6050.  1                           END IF
 6051.  1                           cu    (i)=1.0_r8/cui(i)
 6052.  1                           ct    (i)=1.0_r8/cti(i)
 6053.  1                           !
 6054.  1                           !     surface friction velocity and ventilation mass flux
 6055.  1                           !
 6056.  1                           ustar (i)=speedm(i)*cu(i)
 6057.  1                           rmi   (i)=cu(i)*ustar(i)
 6058.  1                           rhi   (i)=ct(i)*ustar(i)
 6059.  1                        END IF
 6060.  1                     END IF
 6061.  1------------>     END DO
 6062.                   END SUBROUTINE vntlt1
ftn-5008 ftn: NOTE File = Sfc_SSiB.f90, Line = 6062 
  Named Constant "RIBC" is not used.

 6063.                 
 6064.                 
 6065.                 
 6066.                 
 6067.                 
 6068.                 
 6069.                   SUBROUTINE seasfc( &
 6070.                        tmtx  ,umtx  ,qmtx  ,kpbl  ,kqpbl ,slrad ,tsurf ,qsurf , &
 6071.                        gu    ,gv    ,gt    ,gq    ,gps   ,tsea  ,dtc3x ,sinclt, &
 6072.                        sigki ,delsig,sens  ,evap  ,umom  ,vmom  ,rmi   ,rhi   , &
 6073.                        cond  ,stor  ,zorl  ,ncols ,speedm,Ustarm,z0    , &
 6074.                        rho   ,qsfc  ,tsfc  ,mskant  )
 6075.                     !
 6076.                     !==========================================================================
 6077.                     ! ncols......Number of grid points on a gaussian latitude circle
 6078.                     ! kpbl.......Number of layers pbl process is included( for u v,t )
 6079.                     ! kqpbl......Number of layers pbl process is included( for q     )
 6080.                     ! tmtx.......Temperature related matrix
 6081.                     !            gmt(i,k,1)*d(gt(i,k-1))/dt+gmt(i,k,2)*d(gt(i,k))/dt=gmt(i,k,3)
 6082.                     !            gmt(i,1,1)=0.
 6083.                     !            gmt(*,*,1)...dimensionless
 6084.                     !            gmt(*,*,2)...dimensionless
 6085.                     !            gmt(*,*,3)...deg/sec
 6086.                     ! umtx.......Wind related matrix
 6087.                     !            gmu(i,k,1)*d(gu(i,k-1))/dt+gmu(i,k,2)*d(gu(i,k))/dt=gmu(i,k,3)
 6088.                     !            gmu(i,k,1)*d(gv(i,k-1))/dt+gmu(i,k,2)*d(gv(i,k))/dt=gmu(i,k,4)
 6089.                     !            gmu(i,1,1)=0.
 6090.                     !            gmu(*,*,1)...dimensionless
 6091.                     !            gmu(*,*,2)...dimensionless
 6092.                     !            gmu(*,*,3)...m/sec**2
 6093.                     !            gmu(*,*,4)...m/sec**2
 6094.                     ! qmtx.......specific humidity related matrix
 6095.                     !            gmq(i,k,1)*d(gq(i,k-1))/dt+gmq(i,k,2)*d(gq(i,k))/dt=gmq(i,k,3)
 6096.                     !            gmq(i,1,1)=0.
 6097.                     !            gmq(*,*,1)...dimensionless
 6098.                     !            gmq(*,*,2)...dimensionless
 6099.                     !            gmq(*,*,3)...kg/kg/sec
 6100.                     ! slrad......radiation interpolation
 6101.                     ! tsurff.....earth's surface temperature used for radiation
 6102.                     !            for the first time step when ground temperature is not yet
 6103.                     !            computed (this is done by subr.tsinit ),
 6104.                     ! qsurf......qsurf(i)=0.622e0*EXP(21.65605e0 -5418.0e0 /tsurf(i))/gps(i)
 6105.                     ! gu.........(zonal      velocity)*sin(colat)
 6106.                     ! gv.........(meridional velocity)*sin(colat)
 6107.                     ! gt.........Temperature
 6108.                     ! gq.........Specific humidity
 6109.                     ! gps........Surface pressure in mb
 6110.                     ! tsea.......effective surface radiative temperature ( tgeff )
 6111.                     ! dtc3x......time increment dt
 6112.                     ! sinclt.....sinclt=SIN(colrad(latitu))
 6113.                     ! sigki......sigki (k)=1.0e0/EXP(akappa*LOG(sig(k))),  where "sig"
 6114.                     !            sigma coordinate at middle of layer and akappa=gasr/cp
 6115.                     ! delsig
 6116.                     ! sens.......sensible heat flux
 6117.                     ! evap.......latent heat flux  "evaporation"
 6118.                     ! umom.......umom(i)=fmom*um(ncount),
 6119.                     !            where .fmom  momentum flux      in n/m**2
 6120.                     !            fmom= rhoair(ncount)*cu(ncount)*ustar(ncount)
 6121.                     !            um  (ncount)=gu (i,1)/sinclt
 6122.                     !            gu          = (zonal velocity)*sin(colat)
 6123.                     ! vmom.......vmom(i)=rho(i)*gv(i)*rmi(i)
 6124.                     !            rho  (i)=gps(i)/(gr100*gt(i))
 6125.                     !            gr100 =gasr*0.01
 6126.                     ! z0ice.......Roughness length of ice
 6127.                     ! rmi.........rmi   (i)=cu(i)*ustar(i), where
 6128.                     !             cu is friction  transfer coefficients
 6129.                     !             ustar is surface friction velocity  (m/s)
 6130.                     ! rhi.........rhi   (i)=ct(i)*ustar(i), where
 6131.                     !             ct is heat transfer coefficients.
 6132.                     !             ustar is surface friction velocity  (m/s)
 6133.                     ! cond........cond(i)=gice*(tsurf(i)-tice) or
 6134.                     !             cond(i)=(2.03/2.0)*(tsurf(i)-271.16)
 6135.                     ! stor........stor(i)=hscap*c0(i)
 6136.                     ! zorl........zorl (i)= 100.0 *zgrav*speedm(i)*rhi(i)
 6137.                     !             zgrav =0.032 /grav
 6138.                     ! cp..........specific heat of air           (j/kg/k)
 6139.                     ! hl..........heat of evaporation of water     (j/kg)
 6140.                     ! gasr........gas constant of dry air        (j/kg/k)
 6141.                     ! grav........grav   gravity constant        (m/s**2)
 6142.                     ! stefan......Stefan Boltzman constant
 6143.                     !==========================================================================
 6144.                     !
 6145.                     INTEGER, INTENT(in   ) :: ncols
 6146.                     INTEGER, INTENT(IN   ) :: kpbl
 6147.                     INTEGER, INTENT(IN   ) :: kqpbl
 6148.                     REAL(KIND=r8),    INTENT(INOUT) :: tmtx (ncols,kpbl,3)
 6149.                     REAL(KIND=r8),    INTENT(INOUT) :: umtx (ncols,kpbl,4)
 6150.                     REAL(KIND=r8),    INTENT(INOUT) :: qmtx (ncols,kqpbl,3)
 6151.                     REAL(KIND=r8),    INTENT(IN   ) :: slrad(ncols)
 6152.                     REAL(KIND=r8),    INTENT(INOUT) :: tsurf(ncols)
 6153.                     REAL(KIND=r8),    INTENT(IN   ) :: qsurf(ncols)
 6154.                     REAL(KIND=r8),    INTENT(IN   ) :: gu   (ncols)
 6155.                     REAL(KIND=r8),    INTENT(IN   ) :: gv   (ncols)
 6156.                     REAL(KIND=r8),    INTENT(INOUT) :: gt   (ncols)
 6157.                     REAL(KIND=r8),    INTENT(INOUT) :: gq   (ncols)
 6158.                     REAL(KIND=r8),    INTENT(IN   ) :: gps  (ncols)
 6159.                     REAL(KIND=r8),    INTENT(INOUT) :: tsea (ncols)
 6160.                     REAL(KIND=r8),    INTENT(IN   ) :: dtc3x
 6161.                     REAL(KIND=r8),    INTENT(IN   ) :: sinclt(ncols)
 6162.                     REAL(KIND=r8),    INTENT(IN   ) :: sigki(1)
 6163.                     REAL(KIND=r8),    INTENT(IN   ) :: delsig(1)
 6164.                     REAL(KIND=r8),    INTENT(INOUT  ) :: sens (ncols)
 6165.                     REAL(KIND=r8),    INTENT(INOUT  ) :: evap (ncols)
 6166.                     REAL(KIND=r8),    INTENT(INOUT  ) :: umom (ncols)
 6167.                     REAL(KIND=r8),    INTENT(INOUT  ) :: vmom (ncols)
 6168.                     REAL(KIND=r8),    INTENT(INOUT  ) :: rmi  (ncols)
 6169.                     REAL(KIND=r8),    INTENT(INOUT  ) :: rhi  (ncols)
 6170.                     REAL(KIND=r8),    INTENT(INOUT  ) :: cond (ncols)
 6171.                     REAL(KIND=r8),    INTENT(INOUT  ) :: stor (ncols)
 6172.                     REAL(KIND=r8),    INTENT(INOUT  ) :: zorl (ncols)
 6173.                     REAL(KIND=r8) :: rnet (ncols)
 6174.                     REAL(KIND=r8),    INTENT(INOUT    ) :: speedm  (ncols)
 6175.                     REAL(KIND=r8),    INTENT(OUT    ) :: Ustarm  (ncols)
 6176.                     REAL(KIND=r8),    INTENT(INOUT    ) :: z0      (ncols)
 6177.                     REAL(KIND=r8),    INTENT(OUT    ) :: rho   (ncols)
 6178.                     REAL(KIND=r8),    INTENT(INOUT    ) :: qsfc (ncols)
 6179.                     REAL(KIND=r8),    INTENT(INOUT    ) ::  tsfc (ncols)
 6180.                     INTEGER(KIND=i8)      ,    INTENT(IN )       :: mskant(ncols)
 6181.                     REAL(KIND=r8)    :: ah    (ncols)
 6182.                     REAL(KIND=r8)    :: al    (ncols)
 6183.                     REAL(KIND=r8)    :: am    (ncols)
 6184.                     REAL(KIND=r8)    :: cuni  (ncols)
 6185.                     REAL(KIND=r8)    :: cui   (ncols)
 6186.                     REAL(KIND=r8)    :: cu    (ncols)
 6187.                     REAL(KIND=r8)    :: ctni  (ncols)
 6188.                     REAL(KIND=r8)    :: cti   (ncols)
 6189.                     REAL(KIND=r8)    :: ct    (ncols)
 6190.                     REAL(KIND=r8)    :: um    (ncols)
 6191.                     REAL(KIND=r8)    :: vm    (ncols)
 6192.                     REAL(KIND=r8)    :: tha   (ncols)
 6193.                     REAL(KIND=r8)    :: thm   (ncols)
 6194.                     REAL(KIND=r8)    :: dzm   (ncols)
 6195.                     REAL(KIND=r8)    :: thvgm (ncols)
 6196.                     REAL(KIND=r8)    :: rib   (ncols)
 6197.                     REAL(KIND=r8)    :: ustar (ncols)
 6198.                     REAL(KIND=r8)    :: gtsav (ncols)
 6199.                     REAL(KIND=r8)    :: gqsav (ncols)
 6200.                     REAL(KIND=r8)    :: tmsav (ncols)
 6201.                     REAL(KIND=r8)    :: qmsav (ncols)
 6202.                     REAL(KIND=r8)    :: tssav (ncols)
 6203.                     REAL(KIND=r8)    :: dqg0  (ncols)
 6204.                     REAL(KIND=r8)    :: b00   (ncols)
 6205.                     REAL(KIND=r8)    :: b03   (ncols)
 6206.                     REAL(KIND=r8)    :: b04   (ncols)
 6207.                     REAL(KIND=r8)    :: c0    (ncols)
 6208.                     REAL(KIND=r8)    :: b30   (ncols)
 6209.                     REAL(KIND=r8)    :: b33   (ncols)
 6210.                     REAL(KIND=r8)    :: c3    (ncols)
 6211.                     REAL(KIND=r8)    :: b40   (ncols)
 6212.                     REAL(KIND=r8)    :: b44   (ncols)
 6213.                     REAL(KIND=r8)    :: c4    (ncols)
 6214.                 
 6215.                     INTEGER :: i
 6216.                     INTEGER :: ncount
 6217.                     REAL(KIND=r8)    :: gbyhl
 6218.                     REAL(KIND=r8)    :: gbycp
 6219.                     REAL(KIND=r8)    :: gr100
 6220.                     REAL(KIND=r8)    :: gb100
 6221.                     REAL(KIND=r8)    :: zgrav
 6222.                     REAL(KIND=r8)    :: gice
 6223.                     REAL(KIND=r8)    :: hscap
 6224.                     REAL(KIND=r8)    :: sl1kap
 6225.                     REAL(KIND=r8)    :: st4
 6226.                     REAL(KIND=r8)    :: dti
 6227.                     REAL(KIND=r8)    :: dtm
 6228.                     REAL(KIND=r8)    :: dtmdt
 6229.                     REAL(KIND=r8)    :: dqm
 6230.                     REAL(KIND=r8)    :: dqmdt
 6231.                     !*JPB REAL(KIND=r8), PARAMETER :: dd=0.05_r8
 6232.                     REAL(KIND=r8), PARAMETER :: dd=3.0_r8 ! Total depth of the ice slab (m), Using ECMWF value
 6233.                     REAL(KIND=r8), PARAMETER :: tice=271.16_r8
 6234.                     REAL(KIND=r8), PARAMETER :: dice=2.0_r8
 6235.                     REAL(KIND=r8), PARAMETER :: hice=2.03_r8
 6236.                     REAL(KIND=r8), PARAMETER :: rhoice=920.0_r8 ! Mean ice density (kg/m3)
 6237.                     REAL(KIND=r8), PARAMETER :: cice=2093.0_r8  ! Heat Capacity of Ice (J/Kg)
 6238.                 
 6239.                 
 6240.                     gr100 =gasr*0.01_r8
 6241.                     gbycp =grav/(cp*delsig(1)*100.0_r8 *sigki(1))
 6242.                     gbyhl =grav/(hl*delsig(1)*100.0_r8 )
 6243.                     gb100 =grav/(   delsig(1)*100.0_r8 )
 6244.                     zgrav =0.032_r8 /grav
 6245.                     gice  =hice/dice ! 2.03_r8/2.0_r8
 6246.                     hscap =rhoice*cice*dd/dtc3x
 6247.                     sl1kap=sigki(1)
 6248.                     st4   =stefan*4.0_r8
 6249.                     dti   =1.0_r8 /dtc3x
 6250.                 
 6251.  1------------<     DO i = 1, ncols
 6252.  1                     IF(mskant(i) == 1_i8)THEN
 6253.  1                        rnet (i)=-697.58_r8*slrad(i)
 6254.  1                        rho  (i)=gps(i)/(gr100*gt(i))
 6255.  1                        ah   (i)=gbycp/gps(i)
 6256.  1                        al   (i)=gbyhl/gps(i)
 6257.  1                        dqg0 (i)=0.622_r8 *EXP(30.25353_r8 -5418.0_r8 /tsurf(i)) &
 6258.  1                             /(tsurf(i)*tsurf(i)*gps(i))
 6259.  1                        gtsav(i)=gt   (i)
 6260.  1                        gqsav(i)=gq   (i)
 6261.  1                        tssav(i)=tsurf(i)
 6262.  1                        tmsav(i)=tmtx (i,1,3)
 6263.  1                        qmsav(i)=qmtx (i,1,3)
 6264.  1                      END IF
 6265.  1------------>     END DO
 6266.                 
 6267.  Af----------<>     c0  =0.0_r8
 6268.  f-----------<>     cond=0.0_r8
 6269.  f-----------<>     stor=0.0_r8
 6270.                 
 6271.                     ncount=0
 6272.                 8000 CONTINUE
 6273.                     ncount=ncount+1
 6274.  I                  CALL vntlt1 ( &
 6275.                          rmi   ,rhi   ,gu    ,gv    ,gt    ,tsurf ,tsea  ,ncols , &
 6276.                          sigki ,cuni  ,cui   ,cu    ,ctni  ,cti   ,ct    ,speedm,tha   , &
 6277.                          thm   ,dzm   ,thvgm ,rib   ,z0    ,zorl  ,ustar ,sinclt,mskant )
 6278.  1------------<     DO i = 1, ncols
 6279.  1                     IF(mskant(i) == 1_i8)THEN
 6280.  1                        gt  (i)    =gtsav(i)
 6281.  1                        gq  (i)    =gqsav(i)
 6282.  1                        tsurf(i)   =tssav(i)
 6283.  1                        tmtx(i,1,3)=tmsav(i)
 6284.  1                        qmtx(i,1,3)=qmsav(i)
 6285.  1                     END IF
 6286.  1------------>     END DO
 6287.  1------------<     DO i = 1, ncols
 6288.  1                     IF(mskant(i) == 1_i8)THEN
 6289.  1                        ! Solution of sea ice
 6290.  1                        IF (tsea(i) < 0.0_r8 .AND. ABS(tsea(i)) < tice+0.01_r8) THEN
 6291.  1                           b00(i)=   hscap+cp*rho(i)*rhi(i) &
 6292.  1                                +hl*rho(i)*rhi(i)*dqg0(i) &
 6293.  1                                +gice+st4*tsurf(i)**3
 6294.  1                           b03(i)=        -cp*rho(i)*rhi(i)*sl1kap
 6295.  1                           b04(i)=-hl*rho(i)*rhi(i)
 6296.  1                           ! Right side of eq.41 section III.A 
 6297.  1                           ! COLA Physics Description Manual
 6298.  1                           c0 (i)=rnet(i) -cp*rho(i)*rhi(i)*(tsurf(i)-sl1kap*gt(i)) &
 6299.  1                                -hl*rho(i)*rhi(i)*(qsurf(i)-       gq(i)) &
 6300.  1                                -gice*(tsurf(i)-tice)-stefan*tsurf(i)**4
 6301.  1                           b30(i)=               -ah (i)*cp*rho(i)*rhi(i)
 6302.  1                           b33(i)=tmtx(i,1,2)*dti-b30(i)*          sl1kap
 6303.  1                           c3 (i)=tmtx(i,1,3)    -b30(i)*(tsurf(i)-sl1kap*gt(i))
 6304.  1                           b40(i)=               -al(i)*hl*rho(i)*rhi(i)* dqg0 (i)
 6305.  1                           b44(i)=qmtx(i,1,2)*dti+al(i)*hl*rho(i)*rhi(i)
 6306.  1                           c4 (i)=qmtx(i,1,3)    + &
 6307.  1                                al(i)*hl*rho(i)*rhi(i)*(qsurf(i)-gq(i))
 6308.  1                           b00(i)=b00(i)-b30(i)*b03(i)/b33(i)-b40(i)*b04(i)/b44(i)
 6309.  1                           c0 (i)=c0 (i)-c3 (i)*b03(i)/b33(i)-c4 (i)*b04(i)/b44(i)
 6310.  1                           c0 (i)=c0 (i)/b00(i)
 6311.  1                           tsurf(i)=tsurf(i)+c0(i)
 6312.  1                           tmtx(i,1,3)=(c3(i)-b30(i)*c0(i))/(b33(i)*dtc3x)
 6313.  1                           qmtx(i,1,3)=(c4(i)-b40(i)*c0(i))/(b44(i)*dtc3x)
 6314.  1                        ! Solution of sea water
 6315.  1                        ELSE IF (tsea(i) < 0.0_r8 .AND. ABS(tsea(i)) > tice+0.01_r8) THEN
 6316.  1                           zorl (i)= 100.0_r8 *zgrav*speedm(i)*rhi(i)
 6317.  1                           sens (i)= rho(i)*cp*(tsurf(i)-gt(i)*sigki(1))*rhi(i)
 6318.  1                           evap (i)= rho(i)*hl*(qsurf(i)-gq(i))*rhi(i)
 6319.  1                           tmtx(i,1,3)=(tmtx(i,1,3)+ah(i)*sens(i)) &
 6320.  1                                /(tmtx(i,1,2)+dtc3x*ah(i)*rho(i)*cp*rhi(i))
 6321.  1                           qmtx(i,1,3)=(qmtx(i,1,3)+al(i)*evap(i)) &
 6322.  1                                /(qmtx(i,1,2)+dtc3x*al(i)*rho(i)*hl*rhi(i))
 6323.  1                        END IF
 6324.  1                     END IF	  
 6325.  1------------>     END DO
 6326.                 
 6327.  1------------<     DO i = 1, ncols
 6328.  1                     IF(mskant(i) == 1_i8)THEN
 6329.  1                        gt(i)=gt(i)+tmtx(i,1,3)*dtc3x
 6330.  1                        gq(i)=gq(i)+qmtx(i,1,3)*dtc3x
 6331.  1                     END IF
 6332.  1------------>     END DO
 6333.                 
 6334.                     IF (ncount == 1) go to 8000
 6335.                 
 6336.  1------------<     DO i = 1, ncols
 6337.  1                    IF(mskant(i) == 1_i8)THEN
 6338.  1                        sens(i)=rho(i)*cp*(tsurf(i)-gt(i)*sigki(1))*rhi(i)
 6339.  1                        evap(i)=rho(i)*hl*(qsurf(i)-gq(i)         )*rhi(i)
 6340.  1              
 6341.  1                        dtmdt=(ah(i)*sens(i))/(tmtx(i,1,2)+dtc3x*ah(i)*rho(i)*cp*rhi(i))
 6342.  1                        dqmdt=(al(i)*evap(i))/(qmtx(i,1,2)+dtc3x*al(i)*rho(i)*hl*rhi(i))
 6343.  1                        dtm=dtmdt*dtc3x
 6344.  1                        dqm=dqmdt*dtc3x
 6345.  1                        tsfc   (i)=gt(i)+dtm
 6346.  1                        qsfc   (i)=gq(i)+dqm
 6347.  1              
 6348.  1                        gt  (i)=gtsav(i)
 6349.  1                        gq  (i)=gqsav(i)
 6350.  1                        IF (tsea(i) < 0.0_r8 .AND. ABS(tsea(i)) < tice+0.01_r8) THEN
 6351.  1                           cond(i)=gice*(tsurf(i)-tice)
 6352.  1                           stor(i)=hscap*c0(i)
 6353.  1                           tsurf(i)=MIN(tsurf(i),tice)
 6354.  1                           tsea (i)=-   tsurf(i)
 6355.  1                        END IF
 6356.  1                     END IF
 6357.  1------------>     END DO
 6358.                 
 6359.  1------------<     DO i = 1, ncols
 6360.  1                     IF(mskant(i) == 1_i8)THEN
 6361.  1                        umom(i)=rho(i)*gu(i)*rmi(i)
 6362.  1                        vmom(i)=rho(i)*gv(i)*rmi(i)
 6363.  1                        am  (i)=gb100/gps(i)
 6364.  1                        umtx(i,1,3)=(umtx(i,1,3)-am(i)*umom(i)) &
 6365.  1                             /(umtx(i,1,2)+dtc3x*am(i)*rho(i)*rmi(i))
 6366.  1                        umtx(i,1,4)=(umtx(i,1,4)-am(i)*vmom(i)) &
 6367.  1                             /(umtx(i,1,2)+dtc3x*am(i)*rho(i)*rmi(i))
 6368.  1                        !
 6369.  1                           !     set surface stress use of pseudo winds to true winds
 6370.  1                        !     for output diagnostics
 6371.  1                        !
 6372.  1                        umom(i)=umom(i)/sinclt(i)
 6373.  1                        vmom(i)=vmom(i)/sinclt(i)
 6374.  1                        Ustarm(i) = sqrt(umom(i)**2 + vmom(i)**2)
 6375.  1                        IF(Ustarm(i)==0.0_r8)Ustarm(i)=0.007_r8
 6376.  1                        um  (i)=gu (i)/sinclt(i)
 6377.  1                        vm  (i)=gv (i)/sinclt(i)
 6378.  1                        speedm(i)=SQRT(um(i)**2 + vm(i)**2)
 6379.  1                        speedm(i)=MAX(2.0_r8 , speedm(i))
 6380.  1                     END IF
 6381.  1------------>     END DO
 6382.                   END SUBROUTINE seasfc
 6383.                 
 6384.                 
 6385.                   SUBROUTINE sextrp &
 6386.                        (td    ,tg    ,tc    ,w     ,capac ,td0   ,tg0   ,tc0   ,w0    , &
 6387.                        capac0,tdm   ,tgm   ,tcm   ,wm    ,capacm,istrt ,ncols ,nmax  , &
 6388.                        epsflt,intg  ,latitu,tm0   ,qm0   ,tm    ,qm    ,tmm    ,qmm     )
 6389.                     INTEGER, INTENT(in   ) :: istrt
 6390.                     INTEGER, INTENT(in   ) :: ncols
 6391.                     INTEGER, INTENT(in   ) :: nmax
 6392.                     REAL(KIND=r8)   , INTENT(in   ) :: epsflt
 6393.                     INTEGER, INTENT(in   ) :: intg
 6394.                     INTEGER, INTENT(in   ) :: latitu
 6395.                     REAL(KIND=r8),    INTENT(in   ) :: tm    (ncols)
 6396.                     REAL(KIND=r8),    INTENT(in   ) :: qm    (ncols)
 6397.                     REAL(KIND=r8),    INTENT(in   ) :: td    (ncols)
 6398.                     REAL(KIND=r8),    INTENT(in   ) :: tg    (ncols)
 6399.                     REAL(KIND=r8),    INTENT(in   ) :: tc    (ncols)
 6400.                     REAL(KIND=r8),    INTENT(in   ) :: w     (ncols,3)
 6401.                     REAL(KIND=r8),    INTENT(in   ) :: capac (ncols,2)
 6402.                     REAL(KIND=r8),    INTENT(inout) :: td0   (ncols)
 6403.                     REAL(KIND=r8),    INTENT(inout) :: tg0   (ncols)
 6404.                     REAL(KIND=r8),    INTENT(inout) :: tc0   (ncols)
 6405.                     REAL(KIND=r8),    INTENT(inout) :: w0    (ncols,3)
 6406.                     REAL(KIND=r8),    INTENT(inout) :: capac0(ncols,2)
 6407.                     REAL(KIND=r8),    INTENT(inout) :: tdm   (ncols)
 6408.                     REAL(KIND=r8),    INTENT(inout) :: tgm   (ncols)
 6409.                     REAL(KIND=r8),    INTENT(inout) :: tcm   (ncols)
 6410.                     REAL(KIND=r8),    INTENT(inout) :: wm    (ncols,3)
 6411.                     REAL(KIND=r8),    INTENT(inout) :: capacm(ncols,2)
 6412.                     REAL(KIND=r8),    INTENT(inout) :: tm0 (ncols)
 6413.                     REAL(KIND=r8),    INTENT(inout) :: qm0 (ncols)
 6414.                     REAL(KIND=r8),    INTENT(inout) :: tmm (ncols)
 6415.                     REAL(KIND=r8),    INTENT(inout) :: qmm (ncols)
 6416.                     INTEGER :: i, nc, ii
 6417.                 
 6418.                     IF (intg == 2) THEN
 6419.                        IF (istrt >= 1) THEN
 6420.  1------------<           DO i = 1, nmax
 6421.  1 A---------<>              tm0   (i)  =tm   (i)
 6422.  1 A---------<>              qm0   (i)  =qm   (i)
 6423.  1 A---------<>              td0   (i)  =td   (i)
 6424.  1                           tg0   (i)  =tg   (i)
 6425.  1 A---------<>              tc0   (i)  =tc   (i)
 6426.  1                           w0    (i,1)=w    (i,1)
 6427.  1                           w0    (i,2)=w    (i,2)
 6428.  1                           w0    (i,3)=w    (i,3)
 6429.  1                           capac0(i,1)=capac(i,1)
 6430.  1                           capac0(i,2)=capac(i,2)
 6431.  1                           IF (capac0(i,2) > 0.0_r8 .AND. tg0(i) > 273.16_r8) THEN
 6432.  1                              nc=0
 6433.  1                              ii=0
 6434.  1                              !DO ii = 1, ncols
 6435.  1                              !   IF (imask(ii) >= 1) nc=nc+1
 6436.  1                              !   IF (nc == i) EXIT
 6437.  1                              !END DO
 6438.  1                              WRITE(UNIT=nfprt,FMT=200)ii,latitu,i,capac0(i,2),tg0(i)
 6439.  1                           END IF
 6440.  1------------>           END DO
 6441.                        ELSE
 6442.  1------------<           DO i = 1, nmax
 6443.  1                           td0(i)=td0(i)+epsflt*(td(i)+tdm(i)-2.0_r8  *td0(i))
 6444.  1                           tg0(i)=tg0(i)+epsflt*(tg(i)+tgm(i)-2.0_r8  *tg0(i))
 6445.  1                           tc0(i)=tc0(i)+epsflt*(tc(i)+tcm(i)-2.0_r8  *tc0(i))
 6446.  1              
 6447.  1                           tm0(i)=tm0(i)+epsflt*(tm(i)+tmm(i)-2.0_r8  *tm0(i))
 6448.  1                           qm0(i)=qm0(i)+epsflt*(qm(i)+qmm(i)-2.0_r8  *qm0(i))
 6449.  1              
 6450.  1                           IF(w0    (i,1) > 0.0_r8 ) THEN
 6451.  1                              w0(i,1)=w0(i,1)+epsflt*(w(i,1)+wm(i,1)-2.0_r8  *w0(i,1))
 6452.  1                           END IF
 6453.  1                           IF(w0    (i,2) > 0.0_r8 ) THEN
 6454.  1                              w0(i,2)=w0(i,2)+epsflt*(w(i,2)+wm(i,2)-2.0_r8  *w0(i,2))
 6455.  1                           END IF
 6456.  1                           IF(w0    (i,3) > 0.0_r8 ) THEN
 6457.  1                              w0(i,3)=w0(i,3)+epsflt*(w(i,3)+wm(i,3)-2.0_r8  *w0(i,3))
 6458.  1                           END IF
 6459.  1                           IF(capac0(i,1) > 0.0_r8 ) THEN
 6460.  1                              capac0(i,1)=capac0(i,1) &
 6461.  1                                   +epsflt*(capac(i,1)+capacm(i,1)-2.0_r8*capac0(i,1))
 6462.  1                           END IF
 6463.  1                           IF(capac0(i,2) > 0.0_r8 ) THEN
 6464.  1                              capac0(i,2)=capac0(i,2) &
 6465.  1                                   +epsflt*(capac(i,2)+capacm(i,2)-2.0_r8*capac0(i,2))
 6466.  1                           END IF
 6467.  1------------>           END DO
 6468.  1------------<           DO i = 1, nmax
 6469.  1 A---------<>              tdm   (i)  =td0   (i)
 6470.  1                           tgm   (i)  =tg0   (i)
 6471.  1 A---------<>              tcm   (i)  =tc0   (i)
 6472.  1 A---------<>              tmm   (i)  =tm0   (i)
 6473.  1 A---------<>              qmm   (i)  =qm0   (i)
 6474.  1                           wm    (i,1)=w0    (i,1)
 6475.  1                           wm    (i,2)=w0    (i,2)
 6476.  1                           wm    (i,3)=w0    (i,3)
 6477.  1                           capacm(i,1)=capac0(i,1)
 6478.  1                           capacm(i,2)=capac0(i,2)
 6479.  1                           IF (capacm(i,2) > 0.0_r8) tgm(i)=MIN(tgm(i),273.06_r8)
 6480.  1------------>           END DO
 6481.  1------------<           DO i = 1, nmax
 6482.  1 A---------<>              td0   (i)  =td    (i)
 6483.  1                           tg0   (i)  =tg    (i)
 6484.  1 A---------<>              tc0   (i)  =tc    (i)
 6485.  1 A---------<>              tm0   (i)  =tm    (i)
 6486.  1 A---------<>              qm0   (i)  =qm    (i)
 6487.  1                           w0    (i,1)=w     (i,1)
 6488.  1                           w0    (i,2)=w     (i,2)
 6489.  1                           w0    (i,3)=w     (i,3)
 6490.  1                           capac0(i,1)=capac (i,1)
 6491.  1                           capac0(i,2)=capac (i,2)
 6492.  1                           IF (capac0(i,2) > 0.0_r8 .AND. tg0(i) > 273.16_r8) THEN
 6493.  1                              nc=0
 6494.  1                              ii=0
 6495.  1                              !DO ii = 1, ncols
 6496.  1                              !   IF (imask(ii) >= 1) nc=nc+1
 6497.  1                              !   IF (nc == i) EXIT
 6498.  1                              !END DO
 6499.  1                              WRITE(UNIT=nfprt,FMT=200)ii,latitu,i,capac0(i,2),tg0(i)
 6500.  1                           END IF
 6501.  1------------>           END DO
 6502.                        END IF
 6503.                     ELSE
 6504.  1------------<        DO i = 1, nmax
 6505.  1 A---------<>           tdm   (i)  =td   (i)
 6506.  1                        tgm   (i)  =tg   (i)
 6507.  1 A---------<>           tcm   (i)  =tc   (i)
 6508.  1 A---------<>           tmm   (i)  =tm   (i)
 6509.  1 A---------<>           qmm   (i)  =qm   (i)
 6510.  1                        wm    (i,1)=w    (i,1)
 6511.  1                        wm    (i,2)=w    (i,2)
 6512.  1                        wm    (i,3)=w    (i,3)
 6513.  1                        capacm(i,1)=capac(i,1)
 6514.  1                        capacm(i,2)=capac(i,2)
 6515.  1                        IF (capacm(i,2) > 0.0_r8 .AND. tgm(i) > 273.16_r8) THEN
 6516.  1                           nc=0
 6517.  1                           ii=0
 6518.  1                           !DO ii = 1, ncols
 6519.  1                           !   IF (imask(ii) >= 1) nc=nc+1
 6520.  1                           !   IF (nc == i) EXIT
 6521.  1                           !END DO
 6522.  1                           WRITE(UNIT=nfprt,FMT=650)ii,latitu,i,capacm(i,2),tgm(i)
 6523.  1                        END IF
 6524.  1------------>        END DO
 6525.  Vr4----------<        DO i = 1, nmax
 6526.  Vr4 A-------<>           td0   (i)  =td   (i)
 6527.  Vr4 A-------<>           tg0   (i)  =tg   (i)
 6528.  Vr4 A-------<>           tc0   (i)  =tc   (i)
 6529.  Vr4 A-------<>           tm0   (i)  =tm   (i)
 6530.  Vr4 A-------<>           qm0   (i)  =qm   (i)
 6531.  Vr4                      w0    (i,1)=w    (i,1)
 6532.  Vr4                      w0    (i,2)=w    (i,2)
 6533.  Vr4                      w0    (i,3)=w    (i,3)
 6534.  Vr4                      capac0(i,1)=capac(i,1)
 6535.  Vr4                      capac0(i,2)=capac(i,2)
 6536.  Vr4---------->        END DO
 6537.                     END IF
 6538.                 200 FORMAT(' CAPAC0 AND TG0 NOT CONSISTENT AT I,J,IS=',3I4, &
 6539.                          ' CAPAC=',G16.8,' TG=',G16.8)
 6540.                 650 FORMAT(' CAPACM AND TGM NOT CONSISTENT AT I,J,IS=',3I4, &
 6541.                          ' CAPAC=',G16.8,' TG=',G16.8)
 6542.                   END SUBROUTINE sextrp
ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 6542 
  Local variable "NC" is assigned a value but never used.

 6543.                 
 6544.                   SUBROUTINE Albedo( &
 6545.                             ncols     ,month2      ,nmax      ,itype      , &
 6546.                             tc        ,tg          ,tm        ,qm         , &
 6547.                             td        ,capac       ,w         ,tcm        , &
 6548.                             tgm       ,tmm         ,qmm       ,tdm        , &
 6549.                             capacm    ,wm          ,satcap    ,extk       , &
 6550.                             radfac    ,closs       ,gloss     ,thermk     , &
 6551.                             p1f       ,p2f         ,zlwup     ,salb       , &
 6552.                             tgeff     ,cosz        ,nsx       ,latco      , &
 6553.                             imask     ,avisb       ,avisd     ,anirb      , &
 6554.                             anird     ,tsea        ,zenith)
 6555.                    IMPLICIT NONE
 6556.                    INTEGER, INTENT(IN   ) :: ncols
 6557.                    INTEGER, INTENT(INOUT) :: month2     (ncols)
 6558.                    INTEGER, INTENT(IN   ) :: nmax
 6559.                    INTEGER, INTENT(IN   ) :: itype      (ncols)
 6560.                    REAL(KIND=r8),INTENT(OUT  ) :: tc	(ncols)
 6561.                    REAL(KIND=r8),INTENT(OUT  ) :: tg	(ncols)
 6562.                    REAL(KIND=r8),INTENT(OUT  ) :: tm    (ncols)
 6563.                    REAL(KIND=r8),INTENT(OUT  ) :: qm    (ncols)
 6564.                    REAL(KIND=r8),INTENT(OUT  ) :: td    (ncols)
 6565.                    REAL(KIND=r8),INTENT(OUT  ) :: capac (ncols,2)
 6566.                    REAL(KIND=r8),INTENT(OUT  ) :: w     (ncols,3)
 6567.                    REAL(KIND=r8),INTENT(IN   ) :: tcm   (ncols)
 6568.                    REAL(KIND=r8),INTENT(IN   ) :: tgm   (ncols)
 6569.                    REAL(KIND=r8),INTENT(IN   ) :: tmm   (ncols)
 6570.                    REAL(KIND=r8),INTENT(IN   ) :: qmm   (ncols)
 6571.                    REAL(KIND=r8),INTENT(IN   ) :: tdm   (ncols)
 6572.                    REAL(KIND=r8),INTENT(IN   ) :: capacm(ncols,2)
 6573.                    REAL(KIND=r8),INTENT(IN   ) :: wm    (ncols,3)
 6574.                    REAL(KIND=r8),INTENT(INOUT) :: satcap(ncols,icg)
 6575.                    REAL(KIND=r8),INTENT(INOUT) :: extk  (ncols,icg,iwv,ibd)
 6576.                    REAL(KIND=r8),INTENT(INOUT) :: radfac(ncols,icg,iwv,ibd)
 6577.                    REAL(KIND=r8),INTENT(INOUT) :: closs (ncols)
 6578.                    REAL(KIND=r8),INTENT(INOUT) :: gloss (ncols)
 6579.                    REAL(KIND=r8),INTENT(INOUT) :: thermk(ncols)
 6580.                    REAL(KIND=r8),INTENT(INOUT) :: p1f   (ncols)
 6581.                    REAL(KIND=r8),INTENT(INOUT) :: p2f   (ncols)
 6582.                    REAL(KIND=r8),INTENT(INOUT) :: zlwup (ncols)
 6583.                    REAL(KIND=r8),INTENT(INOUT) :: salb  (ncols,2,2)
 6584.                    REAL(KIND=r8),INTENT(INOUT) :: tgeff (ncols)
 6585.                    REAL(KIND=r8),INTENT(IN   ) :: cosz  (ncols)
 6586.                    INTEGER      ,INTENT(IN   ) :: nsx   (ncols)
 6587.                    INTEGER      ,INTENT(IN   ) :: latco
 6588.                    INTEGER(KIND=i8),INTENT(IN) :: imask (ncols)
 6589.                    REAL(KIND=r8),INTENT(OUT  ) :: avisb (ncols)
 6590.                    REAL(KIND=r8),INTENT(OUT  ) :: avisd (ncols)
 6591.                    REAL(KIND=r8),INTENT(OUT  ) :: anirb (ncols)
 6592.                    REAL(KIND=r8),INTENT(OUT  ) :: anird (ncols)
 6593.                    REAL(KIND=r8),INTENT(IN   ) :: tsea  (ncols)
 6594.                    REAL(KIND=r8),INTENT(IN   ) :: zenith(ncols)
 6595.                    INTEGER       :: i
 6596.                    REAL(KIND=r8) :: ocealb
 6597.                    REAL(KIND=r8) :: f
 6598.                    INTEGER       :: ncount
 6599.                    IF(nmax.GE.1) THEN
 6600.                 
 6601.  Vr4----------<        DO i=1,nmax
 6602.  Vr4 A-------<>           tm      (i)    = tmm   (i)
 6603.  Vr4 A-------<>           qm      (i)    = qmm   (i)
 6604.  Vr4 A-------<>           td      (i)    = tdm   (i)
 6605.  Vr4 A-------<>           tg      (i)    = tgm   (i)
 6606.  Vr4 A-------<>           tc      (i)    = tcm   (i)
 6607.  Vr4                      capac   (i,1)  = capacm(i,1)
 6608.  Vr4                      capac   (i,2)  = capacm(i,2)
 6609.  Vr4                      w       (i,1)  = wm    (i,1)
 6610.  Vr4                      w       (i,2)  = wm    (i,2)
 6611.  Vr4                      w       (i,3)  = wm    (i,3)
 6612.  Vr4---------->        END DO
 6613.                 
 6614.                        CALL radalb ( &
 6615.                             nmax              ,month2(1:nmax)      ,nmax                ,itype(1:nmax)       , &
 6616.                             tc(1:nmax)        ,tg(1:nmax)          ,capac(1:nmax,:)     ,satcap(1:nmax,:)    , &
 6617.                             extk(1:nmax,:,:,:),radfac(1:nmax,:,:,:),closs(1:nmax)       ,gloss(1:nmax)       , &
 6618.                             thermk(1:nmax)    ,p1f(1:nmax)         ,p2f(1:nmax)         ,zlwup(1:nmax)       , &
 6619.                             salb(1:nmax,:,:)  ,tgeff(1:nmax)       ,cosz(1:nmax)        ,nsx(1:nmax)         , &
 6620.                             latco     )
 6621.                    END IF
 6622.                    ncount=0
 6623.  1------------<    DO i=1,ncols
 6624.  1                    IF(imask(i).GE.1_i8) THEN
 6625.  1                       ncount=ncount+1
 6626.  1                       avisb(i)=salb(ncount,1,1)
 6627.  1                       avisd(i)=salb(ncount,1,2)
 6628.  1                       anirb(i)=salb(ncount,2,1)
 6629.  1                       anird(i)=salb(ncount,2,2)
 6630.  1                    ELSE IF(ABS(tsea(i)).GE.271.16e0_r8 +0.01e0_r8) THEN
 6631.  1                       f=MAX(zenith(i),0.0e0_r8 )
 6632.  1                       ocealb=0.12347e0_r8 +f*(0.34667e0_r8+f*(-1.7485e0_r8 + &
 6633.  1                            f*(2.04630e0_r8 -0.74839e0_r8 *f)))
 6634.  1                       avisb(i)=ocealb
 6635.  1                       avisd(i)=oceald
 6636.  1                       anirb(i)=ocealb
 6637.  1                       anird(i)=oceald
 6638.  1                    ELSE
 6639.  1                       avisb(i)=icealv
 6640.  1                       avisd(i)=icealv
 6641.  1                       anirb(i)=icealn
 6642.  1                       anird(i)=icealn
 6643.  1                    END IF
 6644.  1------------>    END DO
 6645.                 
 6646.                   END SUBROUTINE Albedo
 6647.                   
 6648.                   ! radalb :surface albedos via two stream approximation (direct and diffuse).
 6649.                 
 6650.                 
 6651.                 
 6652.                   SUBROUTINE radalb ( &
 6653.                             ncols             ,mon                 ,nmax                ,itype               , &
 6654.                             tc                ,tg                  ,capac               ,satcap              , &
 6655.                             extk              ,radfac              ,closs               ,gloss               , &
 6656.                             thermk            ,p1f                 ,p2f                 ,zlwup               , &
 6657.                             salb              ,tgeff               ,cosz                ,nsx                 , &
 6658.                             latitu )
 6659.                     !
 6660.                     !
 6661.                     ! reference  : a simple biosphere model (xue et al 1991)
 6662.                     !-----------------------------------------------------------------------
 6663.                     !     *** indices ***
 6664.                     !   cg =1...canopy
 6665.                     !   cg =2...ground cover
 6666.                     !   vn =1...visible      (0.0-0.7 micron)
 6667.                     !   vn =2...near-infrared(0.7-3.0 micron)
 6668.                     !   bd =1...beam
 6669.                     !   bd =2...diffuse
 6670.                     !   ld =1...live leaves
 6671.                     !   ld =2...dead leaves
 6672.                     !   vnt=1...visible      (0.0-0.7 micron)
 6673.                     !   vnt=2...near-infrared(0.7-3.0 micron)
 6674.                     !   vnt=3...thermal
 6675.                     !-----------------------------------------------------------------------
 6676.                     !        input parameters
 6677.                     !-----------------------------------------------------------------------
 6678.                     !   zlt(cg)..........leaf area index
 6679.                     !   z1...............bottom height of canopy
 6680.                     !   z2...............top    height of canopy
 6681.                     !   ref (cg,vnt,ld)..reflectance   of vegetation
 6682.                     !   tran(cg,vnt,ld)..transmittance of vegetation
 6683.                     !   green (cg).......fraction of green leaf area
 6684.                     !   chil  (cg).......leaf orientation factor
 6685.                     !   vcover(cg).......fraction of vegetation cover
 6686.                     !   soref (vnt)......ground albedo
 6687.                     !   chil  (cg).......leaf orientation factor
 6688.                     !   cosz.............cosine of solar zenith angle
 6689.                     !   tf...............water freezing temperature
 6690.                     !   tg...............ground temperature
 6691.                     !   tc...............canopy leaf temperature
 6692.                     !   capac(cg)........water store capacity of leaves
 6693.                     !   stefan...........stefan-boltsman constant
 6694.                     !-----------------------------------------------------------------------
 6695.                     !     in-subr. parameters
 6696.                     !-----------------------------------------------------------------------
 6697.                     !   albedo(cg,vnt,bd)
 6698.                     !-----------------------------------------------------------------------
 6699.                     !       output parameters
 6700.                     !-----------------------------------------------------------------------
 6701.                     !   extk(cg,vnt,bd)..extinction coefficient
 6702.                     !                    passed to subr.raduse through radsave
 6703.                     !   radfac(cg,vn,bd).fractions of downward solar radiation at surface
 6704.                     !                    passed to subr.raduse
 6705.                     !   salb(vn,bd)......surface albedo
 6706.                     !                    passed to subr.spmrad
 6707.                     !   tgeff............effective ground temperature
 6708.                     !                    passed to subr.spmrad
 6709.                     !   thermk...........canopy emissivity
 6710.                     !   radsav(1)........beam    extinction coefficient (par)
 6711.                     !   radsav(2)........diffuse extinction coefficient (par)
 6712.                     !   closs............radiation loss from canopy
 6713.                     !   gloss............radiation loss from ground
 6714.                     !-----------------------------------------------------------------------
 6715.                     !
 6716.                     !   ityp.......Numero das classes de solo 13
 6717.                     !   imon.......Numero maximo de meses no ano (12)
 6718.                     !   icg........Parametros da vegetacao (icg=1 topo e icg=2 base)
 6719.                     !   iwv........Compriment de onda iwv=1=visivel, iwv=2=infravermelho
 6720.                     !              proximo, iwv=3 infravermelho termal
 6721.                     !   ibd........Estado da vegetacao ibd=1 verde / ibd=2 seco
 6722.                     !   ncols......Number of grid points on a gaussian latitude circle
 6723.                     !   mon........Number of month at year (1-12)
 6724.                     !   nmax
 6725.                     !   itype......Classe de textura do solo
 6726.                     !   satcap.....saturation liquid water capacity         (m)
 6727.                     !   p1f........
 6728.                     !   p2f........
 6729.                     !   zlwup......zlwup(i)= stefan*( fac1(i)*tc4(i)+ &
 6730.                     !              (1.0  -vcover(i,1)*(1.0  -thermk(i)))*fac2(i)*tg4(i))
 6731.                     !   nsx........
 6732.                     !
 6733.                 
 6734.                     INTEGER, INTENT(IN   ) :: ncols
 6735.                     INTEGER, INTENT(INOUT) :: mon(ncols)
 6736.                     INTEGER, INTENT(IN   ) :: nmax
 6737.                     INTEGER, INTENT(IN   ) :: itype (ncols)
 6738.                     REAL(KIND=r8),    INTENT(IN   ) :: tc    (ncols)
 6739.                     REAL(KIND=r8),    INTENT(IN   ) :: tg    (ncols)
 6740.                     REAL(KIND=r8),    INTENT(IN   ) :: capac (ncols,2)
 6741.                     REAL(KIND=r8),    INTENT(INOUT  ) :: satcap(ncols,icg)
 6742.                     REAL(KIND=r8),    INTENT(INOUT  ) :: extk  (ncols,icg,iwv,ibd)
 6743.                     REAL(KIND=r8),    INTENT(INOUT  ) :: radfac(ncols,icg,iwv,ibd)
 6744.                     REAL(KIND=r8),    INTENT(INOUT  ) :: closs (ncols)
 6745.                     REAL(KIND=r8),    INTENT(INOUT  ) :: gloss (ncols)
 6746.                     REAL(KIND=r8),    INTENT(INOUT  ) :: thermk(ncols)
 6747.                     REAL(KIND=r8),    INTENT(INOUT  ) :: p1f   (ncols)
 6748.                     REAL(KIND=r8),    INTENT(INOUT  ) :: p2f   (ncols)
 6749.                     REAL(KIND=r8),    INTENT(INOUT  ) :: zlwup (ncols)
 6750.                     REAL(KIND=r8),    INTENT(INOUT  ) :: salb  (ncols,2,2)
 6751.                     REAL(KIND=r8),    INTENT(INOUT  ) :: tgeff (ncols)
 6752.                     REAL(KIND=r8),    INTENT(IN   ) :: cosz  (ncols)
 6753.                     INTEGER, INTENT(IN   ) :: nsx  (ncols)
 6754.                     INTEGER, INTENT(IN   ) :: latitu
 6755.                 
 6756.                     REAL(KIND=r8)   :: zlt2    (ncols,icg)
 6757.                     REAL(KIND=r8)   :: vcover  (ncols,icg)
 6758.                 
 6759.                 
 6760.                     REAL(KIND=r8) :: f     (ncols)
 6761.                     REAL(KIND=r8) :: deltg (ncols)
 6762.                     REAL(KIND=r8) :: fmelt (ncols)
 6763.                     REAL(KIND=r8) :: depcov(ncols)
 6764.                     REAL(KIND=r8) :: scov  (ncols)
 6765.                     REAL(KIND=r8) :: scov2 (ncols)
 6766.                     REAL(KIND=r8) :: tc4   (ncols)
 6767.                     REAL(KIND=r8) :: tg4   (ncols)
 6768.                     REAL(KIND=r8) :: fac1  (ncols)
 6769.                     REAL(KIND=r8) :: fac2  (ncols)
 6770.                     REAL(KIND=r8) :: zkat  (ncols)
 6771.                 
 6772.                     INTEGER, PARAMETER :: nk=3
 6773.                     REAL(KIND=r8)    :: temp(nmax,18)
 6774.                     REAL(KIND=r8)    :: xmi1(12,nk)
 6775.                     INTEGER :: i
 6776.                     INTEGER :: ntyp(ncols)
 6777.                     INTEGER :: monx(ncols)
 6778.                     INTEGER :: jj
 6779.                     INTEGER :: i1
 6780.                     INTEGER :: ml(nmax)
 6781.                     INTEGER :: k1
 6782.                     INTEGER :: k2
 6783.                     INTEGER :: ik
 6784.                     REAL(KIND=r8)    :: capaci
 6785.                     !    REAL(KIND=r8)    :: xf
 6786.                     !    REAL(KIND=r8)    :: xf2
 6787.                     !    REAL(KIND=r8)    :: sc1
 6788.                     !    REAL(KIND=r8)    :: sc2
 6789.                     REAL(KIND=r8)    :: xm1
 6790.                     !    REAL(KIND=r8)    :: xm2
 6791.                     REAL(KIND=r8)    :: xtm1
 6792.                     REAL(KIND=r8)    :: xtm2
 6793.                     REAL(KIND=r8)    :: stbi
 6794.                     LOGICAL :: flagtyp(nmax)
 6795.                     LOGICAL :: flagscov(nmax)
 6796.                 
 6797.  Vr4----------<     DO i = 1, nmax
 6798.  Vr4            
 6799.  Vr4                   zlt2       (i,1)   =  zlt_gbl    (i,latitu,1) !zlt   (itype(i),mon(i),1)
 6800.  Vr4                   zlt2       (i,2)   =  zlt_gbl    (i,latitu,2) !zlt   (itype(i),mon(i),2)
 6801.  Vr4                   vcover     (i,1)   =  vcover_gbl (i,latitu,1) !xcover(itype(i),mon(i),1)
 6802.  Vr4                   vcover     (i,2)   =  vcover_gbl (i,latitu,2) !xcover(itype(i),mon(i),2)
 6803.  Vr4                   f(i)= MAX ( cosz(i), 0.01746_r8  )
 6804.  Vr4---------->     END DO
 6805.                     !
 6806.                     !     maximum water storage values.
 6807.                     !
 6808.  f------------<     DO i = 1, nmax
 6809.  f                     deltg(i)=tf-tg(i)
 6810.  f                     fmelt(i)=1.0_r8
 6811.  f                     IF (ABS(deltg(i)) < 0.5_r8 .AND. deltg(i) > 0.0_r8) THEN
 6812.  f                        fmelt(i)=0.6_r8
 6813.  f                     END IF
 6814.  f------------>     END DO
 6815.  Af----------<>     ntyp=itype
 6816.  Vpr2---------<     DO i = 1, nmax
 6817.  Vpr2                  !ntyp=itype(i)
 6818.  Vpr2                  satcap(i,1)=zlt2(i,1)*1.0e-4_r8
 6819.  Vpr2                  satcap(i,2)=zlt2(i,2)*1.0e-4_r8
 6820.  Vpr2                  depcov(i  )=MAX(0.0_r8  ,capac(i,2)*5.0_r8  -z1(ntyp(i),mon(i)))
 6821.  Vpr2                  depcov(i  )=MIN(depcov(i),(z2(ntyp(i),mon(i))-z1(ntyp(i),mon(i)))*0.95_r8  )
 6822.  Vpr2                  satcap(i,1)=satcap(i,1) &
 6823.  Vpr2                       *(1.0_r8  -depcov(i)/(z2(ntyp(i),mon(i))-z1(ntyp(i),mon(i))))
 6824.  Vpr2--------->     END DO
 6825.                 
 6826.  1------------<     DO i = 1, nmax
 6827.  1                     scov(i)=0.0_r8
 6828.  1                     IF (tc(i) <= tf) THEN
 6829.  1                        scov(i)= MIN( 0.5_r8  , capac(i,1)/satcap(i,1))
 6830.  1                     END IF
 6831.  1------------>     END DO
 6832.                     capaci=1.0_r8  /0.004_r8
 6833.  f------------<     DO i = 1, nmax
 6834.  f                     IF (tg(i) > tf) THEN
 6835.  f                        scov2(i)=0.0_r8
 6836.  f                     ELSE
 6837.  f                        scov2(i)=MIN( 1.0_r8  , capac(i,2)*capaci)
 6838.  f                     END IF
 6839.  f------------>     END DO
 6840.                     !
 6841.                     !     terms which multiply incoming short wave fluxes
 6842.                     !     to give absorption of radiation by canopy and ground
 6843.                     !
 6844.  f-----------<>     monx = mon
 6845.  r6-----------<     DO i = 1, nmax
 6846.  r6                    IF (fmelt(i) == 1.0_r8) THEN
 6847.  r6                       ml(i) = 1
 6848.  r6                    ELSE
 6849.  r6                       ml(i) = 2
 6850.  r6                    END IF
 6851.  r6----------->     END DO
 6852.  A-----------<>     ntyp=itype
 6853.                 
 6854.  1------------<     DO i = 1, nmax
 6855.  1                     mon(i) = monx(i)
 6856.  1                     flagtyp(i) = .TRUE.
 6857.  1                     IF (ntyp(i) == 13) ntyp(i) = 11
 6858.  1                     IF (ntyp(i) == 12 .AND. nsx(i) > 0) THEN
 6859.  1                        ntyp(i) = 13
 6860.  1                        mon(i) = nsx(i)
 6861.  1                        IF (nsx(i) == 1 .AND. (monx(i) >= 9 .AND. monx(i) <= 11)) mon(i) = 7
 6862.  1                        flagtyp(i) = .FALSE.
 6863.  1                     END IF
 6864.  1------------>     END DO
 6865.  b------------<     DO jj = 1, nk
 6866.  b br8--------<        DO i=1, nmax
 6867.  b br8                    xmi1(mon(i),jj) = xmiu(mon(i),jj)
 6868.  b br8-------->        END DO
 6869.  b------------>     END DO
 6870.  b------------<     DO jj = 1, nk
 6871.  b b----------<        DO i=1, nmax
 6872.  b b                      IF (.NOT.flagtyp(i))xmi1(mon(i),jj) = xmiw(mon(i),jj)
 6873.  b b---------->        END DO
 6874.  b------------>     END DO
 6875.                     !
 6876.                     !        snow free case
 6877.                     !
 6878.  r8-----------<     DO i = 1, nmax
 6879.  r8                    flagscov(i) = scov(i) < 0.025_r8 .AND. scov2(i) < 0.025_r8
 6880.  r8----------->     END DO
 6881.                 
 6882.  1------------<     DO i1 = 1, 9
 6883.  1 2----------<        DO i = 1, nmax
 6884.  1 2                      IF (flagscov(i)) THEN
 6885.  1 2                         temp(i,i1) = cledir(ntyp(i),mon(i),i1,1) + cledir(ntyp(i),mon(i),i1,2) &
 6886.  1 2                              * f(i) + cledir(ntyp(i),mon(i),i1,3) * (f(i)*f(i))
 6887.  1 2                         temp(i,i1+9) = cledfu(ntyp(i),mon(i),i1)
 6888.  1 2                      END IF
 6889.  1 2---------->        END DO
 6890.  1------------>     END DO
 6891.  r8----------<>     flagscov = .NOT. flagscov
 6892.  1------------<     DO i1 = 1, 9
 6893.  1 2----------<        DO i = 1, nmax
 6894.  1 2                      IF (flagscov(i)) THEN
 6895.  1 2                         !
 6896.  1 2                         !     with snow cover
 6897.  1 2                         !
 6898.  1 2                         temp(i,i1) = cedir(ntyp(i),mon(i),i1,1) + f(i) * &
 6899.  1 2                              cedir(ntyp(i),mon(i),i1,2) + cedir(ntyp(i),mon(i),i1,3) * (f(i)*f(i))
 6900.  1 2                         temp(i,i1+9) = cedfu(ntyp(i),mon(i),i1)
 6901.  1 2                      END IF
 6902.  1 2---------->        END DO
 6903.  1------------>     END DO
 6904.  Vb-----------<     DO i1 = 1, 6
 6905.  Vb b---------<        DO i = 1, nmax
 6906.  Vb b                     IF (flagscov(i) .AND. ntyp(i) == 11) THEN
 6907.  Vb b                        !sc2 = scov2(i) * scov2(i)
 6908.  Vb b                        !sc1 = scov2(i)
 6909.  Vb b                        temp(i,i1)=cedir2(ml(i),ntyp(i),mon(i),i1,nk,1)+ &
 6910.  Vb b                             cedir2(ml(i),ntyp(i),mon(i),i1,nk,2) &
 6911.  Vb b                             *scov2(i) + cedir2(ml(i),ntyp(i),mon(i),i1,nk,3) *(scov2(i) * scov2(i)) + temp(i,i1)
 6912.  Vb b                        temp(i,i1+9) = cedfu2(ml(i),ntyp(i),mon(i),i1,1) +  &
 6913.  Vb b                             cedfu2(ml(i),ntyp(i),mon(i),i1,2) &
 6914.  Vb b                             * scov2(i) + cedfu2(ml(i),ntyp(i),mon(i),i1,3) * (scov2(i) * scov2(i)) + temp(i,i1+9)
 6915.  Vb b                     END IF
 6916.  Vb b--------->        END DO
 6917.  Vb----------->     END DO
 6918.  1------------<     DO i = 1, nmax
 6919.  1                     IF (flagscov(i) .AND. ntyp(i) /= 11) THEN
 6920.  1                        k2 = 1
 6921.  1                        k1 = 2
 6922.  1 2----------<           DO ik = nk, 1, -1
 6923.  1 2                         IF (f(i) >= xmi1(mon(i),ik)) THEN
 6924.  1 2                            CONTINUE
 6925.  1 2                         ELSE
 6926.  1 2                            k1 = ik + 1
 6927.  1 2                            k2 = ik
 6928.  1 2                            EXIT
 6929.  1 2                         END IF
 6930.  1 2---------->           END DO
 6931.  1                        !xm2 = xmi1(mon(i),k2)
 6932.  1                        IF (k1 <= nk) xm1 = xmi1(mon(i),k1)
 6933.  1                        !
 6934.  1                        !     snow cover at 1st layer
 6935.  1                        !
 6936.  1                        IF (scov(i) > 0.025_r8) THEN
 6937.  1                           !sc2 = scov(i) * scov(i)
 6938.  1                           !sc1 = scov(i)
 6939.  1                           IF (k2 >= nk .OR. k2 <= 1) THEN
 6940.  1 Vpw--------<                 DO i1 = 1, 6
 6941.  1 Vpw                             temp(i,i1)=cedir1(ml(i),ntyp(i),mon(i),i1,k2,1)+ &
 6942.  1 Vpw                                  cedir1(ml(i),ntyp(i),mon(i),i1,k2,2)*scov(i) + &
 6943.  1 Vpw                                  cedir1(ml(i),ntyp(i),mon(i),i1,k2,3)*(scov(i) * scov(i)) + temp(i,i1)
 6944.  1 Vpw-------->                 END DO
 6945.  1                           ELSE
 6946.  1 Vpw--------<                 DO i1 = 1, 6
 6947.  1 Vpw                             xtm1=cedir1(ml(i),ntyp(i),mon(i),i1,k1,1)+ &
 6948.  1 Vpw                                  cedir1(ml(i),ntyp(i),mon(i),i1,k1,2)*scov(i) + &
 6949.  1 Vpw                                  cedir1(ml(i),ntyp(i),mon(i),i1,k1,3)*(scov(i) * scov(i))
 6950.  1 Vpw                             xtm2=cedir1(ml(i),ntyp(i),mon(i),i1,k2,1)+ &
 6951.  1 Vpw                                  cedir1(ml(i),ntyp(i),mon(i),i1,k2,2)*scov(i)+ &
 6952.  1 Vpw                                  cedir1(ml(i),ntyp(i),mon(i),i1,k2,3) *(scov(i) * scov(i))
 6953.  1 Vpw                             temp(i,i1) = (xtm1*((xmi1(mon(i),k2))-f(i))+xtm2*(f(i)-xm1))/((xmi1(mon(i),k2))-xm1) &
 6954.  1 Vpw                                  + temp(i,i1)
 6955.  1 Vpw-------->                 END DO
 6956.  1                           END IF
 6957.  1 Vpw--------<              DO i1 = 1, 6
 6958.  1 Vpw                          temp(i,i1+9) = cedfu1(ml(i),ntyp(i),mon(i),i1,1) +  &
 6959.  1 Vpw                               cedfu1(ml(i),ntyp(i),mon(i),i1,2)*scov(i) + &
 6960.  1 Vpw                               cedfu1(ml(i),ntyp(i),mon(i),i1,3) * (scov(i) * scov(i)) + temp(i,i1+9)
 6961.  1 Vpw-------->              END DO
 6962.  1                        END IF
 6963.  1                        !
 6964.  1                        !     snow cover on ground
 6965.  1                        !
 6966.  1                        IF (scov2(i) > 0.025_r8) THEN
 6967.  1                           !sc2 = scov2(i) * scov2(i)
 6968.  1                           !sc1 = scov2(i)
 6969.  1                           IF (k2 >= nk .OR. k2 <= 1) THEN
 6970.  1 Vpw--------<                 DO i1 = 1, 6
 6971.  1 Vpw                             temp(i,i1)=cedir2(ml(i),ntyp(i),mon(i),i1,k2,1)+ &
 6972.  1 Vpw                                  cedir2(ml(i),ntyp(i),mon(i),i1,k2,2)*scov2(i) +  &
 6973.  1 Vpw                                  cedir2(ml(i),ntyp(i),mon(i),i1,k2,3)*(scov2(i) * scov2(i)) + temp(i,i1)
 6974.  1 Vpw-------->                 END DO
 6975.  1                           ELSE
 6976.  1 Vpw--------<                 DO i1 = 1, 6
 6977.  1 Vpw                             xtm1=cedir2(ml(i),ntyp(i),mon(i),i1,k1,1)+ &
 6978.  1 Vpw                                  cedir2(ml(i),ntyp(i),mon(i),i1,k1,2)*scov2(i) + &
 6979.  1 Vpw                                  cedir2(ml(i),ntyp(i),mon(i),i1,k1,3) *(scov2(i) * scov2(i))
 6980.  1 Vpw                             xtm2=cedir2(ml(i),ntyp(i),mon(i),i1,k2,1)+ &
 6981.  1 Vpw                                  cedir2(ml(i),ntyp(i),mon(i),i1,k2,2)*scov2(i)+ &
 6982.  1 Vpw                                  cedir2(ml(i),ntyp(i),mon(i),i1,k2,3) *(scov2(i) * scov2(i))
 6983.  1 Vpw                             temp(i,i1) = (xtm1*((xmi1(mon(i),k2))-f(i))+xtm2*(f(i)-xm1))/((xmi1(mon(i),k2))-xm1) &
 6984.  1 Vpw                                  + temp(i,i1)
 6985.  1 Vpw-------->                 END DO
 6986.  1                           END IF
 6987.  1 Vpw--------<              DO i1 = 1, 6
 6988.  1 Vpw                          temp(i,i1+9) = cedfu2(ml(i),ntyp(i),mon(i),i1,1) +  &
 6989.  1 Vpw                               cedfu2(ml(i),ntyp(i),mon(i),i1,2)* scov2(i) +  &
 6990.  1 Vpw                               cedfu2(ml(i),ntyp(i),mon(i),i1,3) * (scov2(i) * scov2(i)) + temp(i,i1+9)
 6991.  1 Vpw-------->              END DO
 6992.  1                        END IF
 6993.  1                     END IF
 6994.  1------------>     END DO
 6995.                     !500    CONTINUE
 6996.  Vpr2---------<     DO i = 1, nmax
 6997.  Vpr2                  radfac(i,1,1,2) = temp(i,10)
 6998.  Vpr2                  radfac(i,1,2,2) = temp(i,11)
 6999.  Vpr2                  radfac(i,2,1,2) = temp(i,12)
 7000.  Vpr2                  radfac(i,2,2,2) = temp(i,13)
 7001.  Vpr2                  salb(i,1,2) = temp(i,14)
 7002.  Vpr2                  salb(i,2,2) = temp(i,15)
 7003.  Vpr2                  p2f(i) =  temp(i,16)
 7004.  Vpr2                  extk(i,1,1,2) = temp(i,17)
 7005.  Vpr2                  extk(i,2,1,2) = temp(i,18)
 7006.  Vpr2                  radfac(i,1,1,1) = temp(i,1)
 7007.  Vpr2                  radfac(i,1,2,1) = temp(i,2)
 7008.  Vpr2                  radfac(i,2,1,1) = temp(i,3)
 7009.  Vpr2                  radfac(i,2,2,1) = temp(i,4)
 7010.  Vpr2                  salb(i,1,1) = temp(i,5)
 7011.  Vpr2                  salb(i,2,1) = temp(i,6)
 7012.  Vpr2                  p1f(i) =  temp(i,7)
 7013.  Vpr2                  extk(i,1,1,1) = temp(i,8) / f(i)
 7014.  Vpr2                  extk(i,2,1,1) = temp(i,9) / f(i)
 7015.  Vpr2                  extk(i,1,3,1) = cether(ntyp(i),mon(i),1)
 7016.  Vpr2                  extk(i,1,3,2) = cether(ntyp(i),mon(i),2)
 7017.  Vpr2                  extk(i,2,3,1) = cether(ntyp(i),mon(i),1)
 7018.  Vpr2                  extk(i,2,3,2) = cether(ntyp(i),mon(i),2)
 7019.  Vpr2--------->     END DO
 7020.  A-----------<>     mon = monx
 7021.                     !
 7022.                     !     long-wave flux terms from canopy and ground
 7023.                     !
 7024.                     stbi=1.0_r8  /stefan
 7025.  Vr4----------<     DO  i = 1, nmax
 7026.  Vr4                   tc4(i)=tc(i)*tc(i)*tc(i)*tc(i)
 7027.  Vr4                   tg4(i)=tg(i)*tg(i)*tg(i)*tg(i)
 7028.  Vr4                   !ntyp=itype(i)
 7029.  Vr4                   zkat(i)=extk(i,1,3,2)*zlt2(i,1)/vcover(i,1)
 7030.  Vr4                   zkat(i)=MAX(expcut  ,-zkat(i) )
 7031.  Vr4                   zkat(i)=MIN(-10.0e-5_r8, zkat(i) )
 7032.  Vr4                   thermk(i)=EXP(zkat(i))
 7033.  Vr4                   fac1 (i)=vcover(i,1)*( 1.0_r8  -thermk(i) )
 7034.  Vr4                   fac2 (i)=1.0_r8
 7035.  Vr4                   closs(i)=2.0_r8  *fac1(i)*stefan*tc4(i)
 7036.  Vr4                   closs(i)=closs(i)-fac2(i)*fac1(i)*stefan*tg4(i)
 7037.  Vr4                   gloss(i)= fac2(i)*stefan*tg4(i)
 7038.  Vr4                   gloss(i)= gloss(i)-fac1(i)*fac2(i)*stefan*tc4(i)
 7039.  Vr4                   !
 7040.  Vr4                   !     effective surface radiative temperature ( tgeff )
 7041.  Vr4                   !
 7042.  Vr4                   zlwup(i) = stefan*( fac1(i)*tc4(i) + &
 7043.  Vr4                        (1.0_r8  - vcover(i,1) * (1.0_r8  -thermk(i)))*fac2(i)*tg4(i))
 7044.  Vr4                   tgeff(i)=SQRT ( SQRT (( zlwup(i)*stbi )))
 7045.  Vr4---------->     END DO
 7046.                   END SUBROUTINE radalb
 7047.                 
 7048.                 
 7049.                 
 7050.                   ! vegin  :reads vegetation morphoLOGICAL and physioLOGICAL data.
 7051.                 
 7052.                 
 7053.                 
 7054.                 
 7055.                   SUBROUTINE vegin ( si1   , sl1)
 7056.                 
 7057.                     REAL(KIND=r8),  INTENT(in   ) :: si1
 7058.                     REAL(KIND=r8),  INTENT(in   ) :: sl1
 7059.                     INTEGER, PARAMETER ::  njj=6,nj=9, nk=3,ild=2
 7060.                 
 7061.                    ! Vegetation and Soil Parameters
 7062.                 
 7063.                    REAL (KIND=r4) rstpar_r4(ityp,icg,iwv), &
 7064.                                   chil_r4(ityp,icg), &
 7065.                                   topt_r4(ityp,icg), &
 7066.                                   tll_r4(ityp,icg), &
 7067.                                   tu_r4(ityp,icg), &
 7068.                                   defac_r4(ityp,icg), &
 7069.                                   ph1_r4(ityp,icg), &
 7070.                                   ph2_r4(ityp,icg), &
 7071.                                   rootd_r4(ityp,icg), &
 7072.                                   bee_r4(ityp), &
 7073.                                   phsat_r4(ityp), &
 7074.                                   satco_r4(ityp), &
 7075.                                   poros_r4(ityp), &
 7076.                                   zdepth_r4(ityp,idp), &
 7077.                                   green_r4(ityp,imon,icg), &
 7078.                                   xcover_r4(ityp,imon,icg), &
 7079.                                   zlt_r4(ityp,imon,icg), &
 7080.                                   x0x_r4(ityp,imon),&
 7081.                                   xd_r4(ityp,imon), &
 7082.                                   z2_r4   (ityp,imon), &
 7083.                                   z1_r4   (ityp,imon), &
 7084.                                   xdc_r4  (ityp,imon), &
 7085.                                   xbc_r4  (ityp,imon)
 7086.                 		  
 7087.                     REAL(KIND=r4) :: cedfu_r4 (ityp,imon,nj), &
 7088.                                      cedir_r4 (ityp,imon,nj,3), &
 7089.                                      cedfu1_r4(2,ityp,imon,njj,3), &
 7090.                                      cedir1_r4(2,ityp,imon,njj,nk,3), &
 7091.                                      cedfu2_r4(2,ityp,imon,njj,3), &
 7092.                                      cedir2_r4(2,ityp,imon,njj,nk,3), &
 7093.                                      cledfu_r4(ityp,imon,nj), &
 7094.                                      cledir_r4(ityp,imon,nj,3), &
 7095.                                      cether_r4(ityp,imon,2), &
 7096.                                      xmiu_r4  (imon,nk), &
 7097.                                      xmiw_r4  (imon,nk)
 7098.                 
 7099.                     INTEGER :: jcg
 7100.                     INTEGER :: jmon
 7101.                     INTEGER :: jtyp
 7102.                     INTEGER :: iv
 7103.                     INTEGER :: im
 7104.                     INTEGER :: i
 7105.                     REAL(KIND=r8)    :: f0001
 7106.                     REAL(KIND=r8)    :: yhil (2)
 7107.                     REAL(KIND=r8)    :: dz
 7108.                     REAL(KIND=r8)    :: dzcut
 7109.                     REAL(KIND=r8)    :: tvsgm
 7110.                     INTEGER :: ierr
 7111.                     !
 7112.                     ALLOCATE(cedfu (13,12, 9)           )
 7113.                     ALLOCATE(cedir (13,12, 9,3)      )
 7114.                     ALLOCATE(cedfu1( 2,13,12,6,3)    )
 7115.                     ALLOCATE(cedir1( 2,13,12,6,3,3)  )
 7116.                     ALLOCATE(cedfu2( 2,13,12,6,3)    )
 7117.                     ALLOCATE(cedir2( 2,13,12,6,3,3)  )
 7118.                     ALLOCATE(cledfu(13,12, 9)           )
 7119.                     ALLOCATE(cledir(13,12, 9,3)      )
 7120.                     ALLOCATE(xmiu  (12, 3)           )
 7121.                     ALLOCATE(cether(13,12, 2)           )
 7122.                     ALLOCATE(xmiw  (12, 3)           )
 7123.                     !
 7124.                     ALLOCATE(ystpar(2,3)             )
 7125.                     ALLOCATE(yopt  (2)               )
 7126.                     ALLOCATE(yll   (2)               )
 7127.                     ALLOCATE(yu    (2)               )
 7128.                     ALLOCATE(yefac (2)               )
 7129.                     ALLOCATE(yh1   (2)               )
 7130.                     ALLOCATE(yh2   (2)               )
 7131.                     ALLOCATE(yootd (2)               )
 7132.                     ALLOCATE(yreen (12,2)            )
 7133.                     ALLOCATE(ycover(12,2)            )
 7134.                     ALLOCATE(ylt   (12,2)            )
 7135.                     !
 7136.                     !     vegetation and soil parameters
 7137.                     !
 7138.                     ALLOCATE(rstpar_fixed(ityp,icg,iwv)   )
 7139.                     ALLOCATE(chil_fixed  (ityp,icg)          )
 7140.                     ALLOCATE(topt_fixed  (ityp,icg)          )
 7141.                     ALLOCATE(tll_fixed   (ityp,icg)          )
 7142.                     ALLOCATE(tu_fixed    (ityp,icg)          )
 7143.                     ALLOCATE(defac_fixed (ityp,icg)          )
 7144.                     ALLOCATE(ph1_fixed   (ityp,icg)          )
 7145.                     ALLOCATE(ph2_fixed   (ityp,icg)          )
 7146.                     ALLOCATE(rootd (ityp,icg)          )
 7147.                     ALLOCATE(bee   (ityp)          )
 7148.                     ALLOCATE(phsat (ityp)          )
 7149.                     ALLOCATE(satco (ityp)          )
 7150.                     ALLOCATE(poros (ityp)          )
 7151.                     ALLOCATE(zdepth(ityp,idp)          )
 7152.                     ALLOCATE(green_fixed (ityp,imon,icg)  )
 7153.                     ALLOCATE(xcover_fixed(ityp,imon,icg)  )
 7154.                     ALLOCATE(zlt_fixed   (ityp,imon,icg)  )
 7155.                     ALLOCATE(x0x   (ityp,imon)      )
 7156.                     ALLOCATE(xd    (ityp,imon)      )
 7157.                     ALLOCATE(z2    (ityp,imon)      )
 7158.                     ALLOCATE(z1    (ityp,imon)      )
 7159.                     ALLOCATE(xdc   (ityp,imon)      )
 7160.                     ALLOCATE(xbc   (ityp,imon)      )
 7161.                     ALLOCATE(zlt   (ityp,imon,icg)  )
 7162.                     ALLOCATE(xcover  (ityp, imon, icg))
 7163.                     ALLOCATE(ph2    (ityp,icg))
 7164.                     ALLOCATE(ph1    (ityp,icg))
 7165.                     ALLOCATE(green(ityp,imon,icg))
 7166.                     ALLOCATE(defac(ityp,icg))
 7167.                     ALLOCATE(tu   (ityp,icg))
 7168.                     ALLOCATE(tll  (ityp,icg))
 7169.                     ALLOCATE(topt (ityp,icg))
 7170.                     ALLOCATE(rstpar(ityp,icg,iwv))
 7171.                     ALLOCATE(chil  (ityp,icg))
 7172.                 
 7173.                     OPEN(UNIT=nfsibd, FILE=TRIM(fNameSibVeg),FORM='UNFORMATTED', ACCESS='SEQUENTIAL',&
 7174.                          ACTION='READ',STATUS='OLD', IOSTAT=ierr)
 7175.                     IF (ierr /= 0) THEN
 7176.                        WRITE(UNIT=nfprt,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
 7177.                             TRIM(fNameSibVeg), ierr
 7178.                        STOP "**(ERROR)**"
 7179.                     END IF
 7180.                 
 7181.                     OPEN (UNIT=nfalb, FILE=TRIM(fNameSibAlb),FORM='UNFORMATTED', ACCESS='SEQUENTIAL', &
 7182.                          ACTION='READ',STATUS='OLD', IOSTAT=ierr)
 7183.                     IF (ierr /= 0) THEN
 7184.                        WRITE(UNIT=nfprt,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
 7185.                             TRIM(fNameSibAlb), ierr
 7186.                        STOP "**(ERROR)**"
 7187.                     END IF
 7188.                    
 7189.                     READ (UNIT=nfsibd) rstpar_r4, chil_r4, topt_r4, tll_r4, tu_r4, defac_r4, ph1_r4, ph2_r4, &
 7190.                                        rootd_r4, bee_r4, phsat_r4, satco_r4, poros_r4, zdepth_r4
 7191.                     READ (UNIT=nfsibd) green_r4, xcover_r4, zlt_r4, x0x_r4, xd_r4, z2_r4, z1_r4, xdc_r4, xbc_r4
 7192.                 
 7193.  Vr2---------<>     rstpar_fixed = rstpar_r4
 7194.  Vwf---------<>     chil_fixed   = chil_r4
 7195.  f-----------<>     topt_fixed   = topt_r4
 7196.  f-----------<>     tll_fixed    = tll_r4
 7197.  f-----------<>     tu_fixed     = tu_r4
 7198.  f-----------<>     defac_fixed  = defac_r4
 7199.  f-----------<>     ph1_fixed    = ph1_r4
 7200.  Vw----------<>     ph2_fixed    = ph2_r4
 7201.  Vw----------<>     rootd        = rootd_r4
 7202.  Vwf---------<>     bee          = bee_r4
 7203.  f-----------<>     phsat        = phsat_r4
 7204.  f-----------<>     satco        = satco_r4
 7205.  f-----------<>     poros        = poros_r4
 7206.  Vr2---------<>     zdepth       = zdepth_r4
 7207.  Vfr2--------<>     green_fixed  = green_r4
 7208.  f-----------<>     xcover_fixed = xcover_r4
 7209.  f-----------<>     zlt_fixed    = zlt_r4
 7210.  Vfr2--------<>     x0x          = x0x_r4
 7211.  f-----------<>     xd           = xd_r4
 7212.  f-----------<>     z2           = z2_r4
 7213.  f-----------<>     z1           = z1_r4
 7214.  f-----------<>     xdc          = xdc_r4
 7215.  f-----------<>     xbc          = xbc_r4
 7216.                 
 7217.                     READ(UNIT=nfalb) cedfu_r4, cedir_r4, cedfu1_r4, cedir1_r4, cedfu2_r4, cedir2_r4, &
 7218.                          cledfu_r4, cledir_r4, xmiu_r4, cether_r4, xmiw_r4
 7219.  Vfr2--------<>     cedfu  = REAL(cedfu_r4 ,KIND=r8) 
 7220.  Vfr2--------<>     cedir  = REAL(cedir_r4 ,KIND=r8) 
 7221.  Vr2---------<>     cedfu1 = REAL(cedfu1_r4,KIND=r8) 
 7222.  Vr2---------<>     cedir1 = REAL(cedir1_r4,KIND=r8) 
 7223.  Vr2---------<>     cedfu2 = REAL(cedfu2_r4,KIND=r8) 
 7224.  Vr2---------<>     cedir2 = REAL(cedir2_r4,KIND=r8) 
 7225.  f-----------<>     cledfu = REAL(cledfu_r4,KIND=r8) 
 7226.  f-----------<>     cledir = REAL(cledir_r4,KIND=r8) 
 7227.  Vr2---------<>     cether = REAL(cether_r4,KIND=r8) 
 7228.  Vw----------<>     xmiu   = REAL(xmiu_r4  ,KIND=r8) 
 7229.  Vr2---------<>     xmiw   = REAL(xmiw_r4  ,KIND=r8) 
 7230.                     REWIND nfsibd
 7231.                 
 7232.                     REWIND nfalb
 7233.                 
 7234.                     f0001=0.0001_r8
 7235.                 
 7236.  f------------<     DO jcg =1, 2
 7237.  f 2----------<        DO jmon=1,12
 7238.  f 2 Vw-------<           DO jtyp=1,ityp
 7239.  f 2 Vw                      green_fixed(jtyp,jmon,jcg)=MAX(f0001,green_fixed(jtyp,jmon,jcg))
 7240.  f 2 Vw------->           END DO
 7241.  f 2---------->        END DO
 7242.  f------------>     END DO
 7243.                 
 7244.  f------------<     DO iv =1, 2
 7245.  f                     jtyp = 12
 7246.  f                     IF (iv.EQ.2) jtyp = 13
 7247.  f              
 7248.  f 2----------<        DO  im = 1,3
 7249.  f 2                      ystpar(iv,im)=rstpar_fixed(jtyp,1,im)
 7250.  f 2---------->        END DO
 7251.  f              
 7252.  f                     yhil  (iv)=chil_fixed  (jtyp,1)
 7253.  f                     yopt  (iv)=topt_fixed  (jtyp,1)
 7254.  f                     yll   (iv)=tll_fixed   (jtyp,1)
 7255.  f                     yu    (iv)=tu_fixed    (jtyp,1)
 7256.  f                     yefac (iv)=defac_fixed (jtyp,1)
 7257.  f                     yootd (iv)=rootd (jtyp,1)
 7258.  f                     yh1   (iv)=ph1_fixed   (jtyp,1)
 7259.  f                     yh2   (iv)=ph2_fixed   (jtyp,1)
 7260.  f              
 7261.  f------------>     END DO
 7262.                 
 7263.  iVp----------<     DO jmon=1,12
 7264.  iVp i--------<        DO iv = 1,2
 7265.  iVp i                    jtyp = 12
 7266.  iVp i                    IF (iv.EQ.2) jtyp = 13
 7267.  iVp i                    ylt   (jmon,iv)=zlt_fixed(jtyp,jmon,1)
 7268.  iVp i                    yreen (jmon,iv)=green_fixed (jtyp,jmon,1)
 7269.  iVp i                    ycover(jmon,iv)=xcover_fixed(jtyp,jmon,1)
 7270.  iVp i-------->        END DO
 7271.  iVp---------->     END DO
 7272.                 
 7273.  i------------<     DO iv = 1,2
 7274.  i i----------<        DO im = 1,3
 7275.  i i                      rstpar_fixed(13,iv,im) = 1000.0_r8
 7276.  i i---------->        END DO
 7277.  i                     chil_fixed  (13,iv) = 0.01_r8
 7278.  i                     topt_fixed  (13,iv) = 310.0_r8
 7279.  i                     tll_fixed   (13,iv) = 300.0_r8
 7280.  i                     tu_fixed    (13,iv) = 320.0_r8
 7281.  i                     defac_fixed (13,iv) = 0.0_r8
 7282.  i                     ph1_fixed   (13,iv) = 3.0_r8
 7283.  i                     ph2_fixed   (13,iv) = 6.0_r8
 7284.  i                     rootd (13,iv) = 2.1_r8
 7285.  i------------>     END DO
 7286.                 
 7287.                     bee(13) = 4.8_r8
 7288.                     phsat(13) = -0.167_r8
 7289.                     satco(13) = 0.762e-4_r8
 7290.                     poros(13) = 0.4352_r8
 7291.                 
 7292.  wf-----------<     DO i = 1, imon
 7293.  wf                    zlt_fixed(13,i,1) = 0.0001_r8
 7294.  wf                    zlt_fixed(13,i,2) = 0.0001_r8
 7295.  wf                    z2(13,i) = 0.1_r8
 7296.  wf                    z1(13,i) = 0.0001_r8
 7297.  wf                    xcover_fixed(13,i,1) = 0.0001_r8
 7298.  wf                    xcover_fixed(13,i,2) = 0.0001_r8
 7299.  wf                    x0x(13,i) = 0.01_r8
 7300.  wf                    xd(13,i) = 0.0004_r8
 7301.  wf                    xbc(13,i) = 35461.0_r8
 7302.  wf                    xdc(13,i) = 28.5_r8
 7303.  wf----------->     END DO
 7304.                 
 7305.                     zdepth(13,1) = 1.0_r8
 7306.                     zdepth(13,2) = 1.0_r8
 7307.                     zdepth(13,3) = 1.0_r8
 7308.                 
 7309.                     ! tvsgm - Global Mean Surface Virtual Temperature
 7310.                     ! dz - mean height of the first model layer
 7311.                     tvsgm=288.16_r8
 7312.                     dz=(gasr*tvsgm/grav)*LOG(si1/sl1)
 7313.                     ! Forest
 7314.                     !dzcut=0.75_r8*dz
 7315.                     dzcut=0.6_r8*dz
 7316.  f-----------<>     xd(1,1:imon)=MIN(xd(1,1:imon),dzcut)
 7317.                     ! Other
 7318.                     ! SiB calibration values
 7319.                     ! 45 m - height of the first tower level of measurements
 7320.                     ! 27 m - maximum calibrated displacement height
 7321.                     dzcut=(27.0_r8/45.0_r8)*dz
 7322.  Vw----------<>     xd(2:ityp,1:imon)=MIN(xd(2:ityp,1:imon),dzcut)
 7323.                   END SUBROUTINE vegin
ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 7323 
  Local variable "YHIL" is assigned a value but never used.

ftn-5008 ftn: NOTE File = Sfc_SSiB.f90, Line = 7323 
  Named Constant "ILD" is not used.

 7324.                 
 7325.                   !
 7326.                   !------------------------------------------------------------
 7327.                   !
 7328.                   SUBROUTINE re_assign_sib_soil_prop
 7329.                     IMPLICIT NONE
 7330.                 
 7331.                     REAL(KIND=r8)    :: GSWP_soil_input_data(10,12)
 7332.                     INTEGER :: nnn
 7333.                     !
 7334.                     !-------------------------------Soil data from GSWP-2 -------------------------------------
 7335.                     !
 7336.                     DATA GSWP_soil_input_data/  &
 7337.                                                 !1     2    3     4        5       6      7      8      9     10
 7338.                                                 !SAND(%) SILT CLAY QUARTZ  Wfc    Wwilt  Wsat    b    PHIsat  Ksat
 7339.                          92.0_r8, 5.0_r8, 3.0_r8,0.92_r8,0.132_r8,0.033_r8,0.373_r8, 3.30_r8,-0.05_r8,2.45E-05_r8,&!1  Sand
 7340.                          82.0_r8,12.0_r8, 6.0_r8,0.82_r8,0.156_r8,0.051_r8,0.386_r8, 3.80_r8,-0.07_r8,1.75E-05_r8,&!2  Loamy Sand
 7341.                          58.0_r8,32.0_r8,10.0_r8,0.60_r8,0.196_r8,0.086_r8,0.419_r8, 4.34_r8,-0.16_r8,8.35E-06_r8,&!3  Sandy Loam
 7342.                          10.0_r8,85.0_r8, 5.0_r8,0.25_r8,0.361_r8,0.045_r8,0.471_r8, 3.63_r8,-0.84_r8,1.10E-06_r8,&!4  Silt Loam
 7343.                          17.0_r8,70.0_r8,13.0_r8,0.40_r8,0.270_r8,0.169_r8,0.476_r8, 5.25_r8,-0.65_r8,2.36E-06_r8,&!5  Loam
 7344.                          58.0_r8,15.0_r8,27.0_r8,0.60_r8,0.253_r8,0.156_r8,0.412_r8, 7.32_r8,-0.12_r8,6.31E-06_r8,&!6  Sandy Clay Loam
 7345.                          32.0_r8,34.0_r8,34.0_r8,0.10_r8,0.301_r8,0.211_r8,0.447_r8, 8.34_r8,-0.28_r8,2.72E-06_r8,&!7  Silty Clay Loam
 7346.                          10.0_r8,56.0_r8,34.0_r8,0.35_r8,0.334_r8,0.249_r8,0.478_r8, 8.41_r8,-0.63_r8,1.44E-06_r8,&!8  Clay Loam
 7347.                          52.0_r8, 6.0_r8,42.0_r8,0.52_r8,0.288_r8,0.199_r8,0.415_r8, 9.70_r8,-0.12_r8,4.25E-06_r8,&!9  Sandy Clay
 7348.                          6.0_r8,47.0_r8,47.0_r8,0.10_r8,0.363_r8,0.286_r8,0.478_r8,10.78_r8,-0.58_r8,1.02E-06_r8,&!10 Silty Clay
 7349.                          22.0_r8,20.0_r8,58.0_r8,0.25_r8,0.353_r8,0.276_r8,0.450_r8,12.93_r8,-0.27_r8,1.33E-06_r8,&!11 Clay
 7350.                          43.0_r8,39.0_r8,18.0_r8,0.10_r8,0.250_r8,0.148_r8,0.437_r8, 5.96_r8,-0.24_r8,4.66E-06_r8 /!12 Silt
 7351.                     !
 7352.                     !-srf: avoid this for now, only use it when all arrays above are used like:
 7353.                     ! bee(int(soil_type(lon,lat))) and not the usual way: bee(isurf(lon,lat))),
 7354.                     ! where isurf is the vegetation index
 7355.                     !
 7356.  D------------<     DO nnn = 1,12
 7357.  D                     !
 7358.  D                     !   sslfc(nnn)  = GSWP_soil_input_data(5,nnn)        !not in use
 7359.  D                     !   sswlts(nnn) = GSWP_soil_input_data(6,nnn)        !not in use
 7360.  D                     !   sswlts(nnn) = max(0.06_r8,GSWP_soil_input_data(6,n) !not in use nn)
 7361.  D                     !
 7362.  D                     ! print*,nnn,'poros bee phsat satco'
 7363.  D                     ! print*,poros(nnn) , GSWP_soil_input_data(7,nnn)
 7364.  D                     ! print*,bee(nnn)   ,GSWP_soil_input_data(8,nnn)
 7365.  D                     ! print*,phsat(nnn) ,GSWP_soil_input_data(9,nnn)
 7366.  D                     ! print*,satco(nnn) ,GSWP_soil_input_data(10,nnn)
 7367.  D              
 7368.  D                     ! poros(nnn) = GSWP_soil_input_data(7,nnn)
 7369.  D                     ! bee  (nnn) = GSWP_soil_input_data(8,nnn)
 7370.  D                     ! phsat(nnn) = GSWP_soil_input_data(9,nnn)
 7371.  D                     ! satco(nnn) = GSWP_soil_input_data(10,nnn)
 7372.  D------------>     END DO
 7373.                     !srf- original SSIB from MCGA requires 13 soil classes, while USDA/GSWP2 has only 12
 7374.                     !srf- the soil class 13 is not changed here (see vegin.f90)
 7375.                     !  bee(13) = 4.8_r8
 7376.                     !  phsat(13) = -0.167_r8
 7377.                     !  satco(13) = 0.762e-4_r8
 7378.                     !  poros(13) = 0.4352_r8
 7379.                     !  zdepth(13,1) = 1.0_r8
 7380.                     !  zdepth(13,2) = 1.0_r8
 7381.                     !  zdepth(13,3) = 1.0_r8
 7382.                     !
 7383.                     RETURN
 7384.                   END SUBROUTINE re_assign_sib_soil_prop
 7385.                 
 7386.                   ! wheat  :determine wheat phenology for latitude and julian day?.
 7387.                 
 7388.                   SUBROUTINE wheat (latitu,itype ,nmax  ,colrad ,month ,xday   ,yrl   , &
 7389.                        idatec,monl  ,nsx    )
 7390.                     !==========================================================================
 7391.                     !==========================================================================
 7392.                     !  ityp.......Numero das classes de solo vegetacao 13
 7393.                     !  imon.......Number max of month at year (12)
 7394.                     !  icg........Parameters of vagetation (icg=1 top e icg=2 bottom)
 7395.                     !  iwv........Comprimento de onda iwv=1=visivel, iwv=2=infravermelho
 7396.                     !             proximo, iwv=3 infravermelho termal
 7397.                     !  nmax
 7398.                     !  itype......Classe de textura do solo ou classe de vegetacao
 7399.                     !  jmax.......Number of grid points on a gaussian longitude circle
 7400.                     !  colrad.....colatitude
 7401.                     !  month......Number of month at year (1-12)
 7402.                     !  xday.......is julian day - 1 with fraction of day
 7403.                     !  pie........Constante Pi=3.1415926e0
 7404.                     !  yrl........length of year in days
 7405.                     !  idatec.....idatec(1)=current hour of
 7406.                     !            idatec(2)=current day of month.
 7407.                     !            idatec(3)=current month of year.
 7408.                     !            idatec(4)=current year.
 7409.                     !  monl.......length of each month in days
 7410.                     !  ystpar.....Coefficints related to par influence on
 7411.                     !             stomatal resistance
 7412.                     !  yopt.......Temperatura ideal de funcionamento estomatico
 7413.                     !  yll........Temperatura minima de funcionamento estomatico
 7414.                     !  yu.........Temperatura maxima de funcionamento estomatico
 7415.                     !  yefac......Parametro de deficit de pressao de vapor d'agua
 7416.                     !  yh1........Coeficiente para o efeito da agua no solo
 7417.                     !  yh2........Potencial de agua no solo para ponto de Wilting
 7418.                     !  rstpar.....Coefficints related to par influence on
 7419.                     !             stomatal resistance
 7420.                     !  chil.......Leaf orientation parameter
 7421.                     !  topt.......Temperatura ideal de funcionamento estomatico
 7422.                     !  tll........Temperatura minima de funcionamento estomatico
 7423.                     !  tu.........Temperatura maxima de funcionamento estomatico
 7424.                     !  defac......Parametro de deficit de pressao de vapor d'agua
 7425.                     !  ph1........Coeficiente para o efeito da agua no solo
 7426.                     !  ph2........Potencial de agua no solo para ponto de Wilting
 7427.                     !  green......Fraction of grenn leaves
 7428.                     !  xcover(iv).Fracao de cobertura de vegetacao iv=1 Top
 7429.                     !  xcover(iv).Fracao de cobertura de vegetacao iv=2 Bottom
 7430.                     !  nsx........phenology dates to fall within one year period
 7431.                     !==========================================================================
 7432.                     INTEGER , PARAMETER :: itveg = 13 ! Number of Vegetation Types
 7433.                     INTEGER , PARAMETER :: isoil = 13 ! Number of Vegetation Types
 7434.                     INTEGER , PARAMETER :: imon = 12 ! Number of Months with Defined Vegetation Types
 7435.                     INTEGER , PARAMETER :: icg  = 2  ! Number of Vegetation Parameters
 7436.                     INTEGER , PARAMETER :: iwv  = 3  ! Number of Radiation Wavelengths
 7437.                     INTEGER , PARAMETER :: idp  = 3  ! Number of Soil Layer Parameters
 7438.                     INTEGER , PARAMETER :: ibd  = 2  ! Number of Vegetation Stage
 7439.                 
 7440.                     INTEGER, INTENT(in ) :: nmax
 7441.                     INTEGER, INTENT(in ) :: latitu
 7442.                     INTEGER, INTENT(in ) :: itype (nmax)
 7443.                     REAL(KIND=r8),    INTENT(in ) :: colrad(nmax)
 7444.                     INTEGER, INTENT(in ) :: month (nmax)
 7445.                     REAL(KIND=r8),    INTENT(in ) :: xday
 7446.                     REAL(KIND=r8),    INTENT(in ) :: yrl
 7447.                     INTEGER, INTENT(in ) :: idatec(4)
 7448.                     INTEGER, INTENT(in ) :: monl  (12)
 7449.                     INTEGER, INTENT(inout) :: nsx(nmax)
 7450.                     REAL(KIND=r8)    :: rday
 7451.                     REAL(KIND=r8)    :: thrsh
 7452.                     REAL(KIND=r8)    :: phi(nmax)
 7453.                     REAL(KIND=r8)    :: flip
 7454.                     REAL(KIND=r8)    :: rootgc (nmax)
 7455.                     REAL(KIND=r8)    :: chilw (nmax)
 7456.                     REAL(KIND=r8)    :: tlai(nmax)
 7457.                     REAL(KIND=r8)    :: xcover2(nmax)
 7458.                     REAL(KIND=r8)    :: grlf (nmax)
 7459.                     REAL(KIND=r8)    :: diff1 (nmax)
 7460.                     REAL(KIND=r8)    :: diff2 (nmax)
 7461.                     REAL(KIND=r8)    :: perc
 7462.                     REAL(KIND=r8)    :: x1
 7463.                     REAL(KIND=r8)    :: xdif1
 7464.                     REAL(KIND=r8)    :: xdif2
 7465.                     INTEGER :: i
 7466.                     INTEGER :: kold
 7467.                     INTEGER :: i1
 7468.                     INTEGER :: ns
 7469.                     INTEGER :: mind (nmax)
 7470.                     INTEGER :: index (nmax)
 7471.                     INTEGER :: icond
 7472.                     INTEGER :: kk
 7473.                     INTEGER :: mnl
 7474.                     REAL(KIND=r8) :: pie=3.1415926e0_r8
 7475.                     REAL(KIND=r8)    :: phenst(nmax,9)
 7476.                     LOGICAL    :: test(nmax)
 7477.                     INTEGER, PARAMETER :: iimon=12
 7478.                 
 7479.                     REAL(KIND=r8), PARAMETER :: wlai(9)=(/1.0_r8, 2.0_r8, 6.0_r8, 4.0_r8, 3.0_r8, 1.0_r8, 0.01_r8, 0.01_r8, 1.0_r8/)
 7480.                 
 7481.                     REAL(KIND=r8), PARAMETER :: xgren(iimon+1)=(/0.55_r8,0.68_r8,0.8_r8,0.9_r8,0.9_r8,0.9_r8,0.9_r8,0.81_r8,0.64_r8,&
 7482.                          0.53_r8,0.49_r8,0.48_r8,0.55_r8/)
 7483.                 
 7484.                     REAL(KIND=r8), PARAMETER :: vlt(iimon+1)=(/1.0_r8,6.0_r8,6.0_r8,6.0_r8,6.0_r8,6.0_r8,6.0_r8,6.0_r8,6.0_r8,3.78_r8,&
 7485.                          1.63_r8,1.0_r8,1.0_r8/)
 7486.                 
 7487.                     !    INTEGER, SAVE :: kmon(iimon+1)
 7488.                 
 7489.                     REAL(KIND=r8) :: xgreen(nmax,iimon+1)
 7490.                     INTEGER :: kmon(imon+1)
 7491.                 
 7492.                     INTEGER, PARAMETER :: ihead = 3
 7493.                     INTEGER, PARAMETER :: iwheat=12
 7494.                     REAL(KIND=r8),    PARAMETER :: syr   =365.25e0_r8
 7495.                     REAL(KIND=r8),    PARAMETER :: vcv   =0.569_r8
 7496.                     !
 7497.                     !     vlt and xgren are assumed to be correct at the beginning of the
 7498.                     !     month
 7499.                     !
 7500.  Af----------<>     nsx = 0
 7501.  f-----------<>     index= 0
 7502.  A-----------<>     phenst=0.0_r8
 7503.                     !
 7504.                     !     xday is julian day - 1 with fraction of day
 7505.                     !
 7506.                     rday=xday
 7507.                     !
 7508.                     !     for standard length years, determine the offset for the year
 7509.                     !     within the leap year period
 7510.                     !
 7511.                     thrsh=-MOD(idatec(4)+3,4)*0.25e0_r8
 7512.  f-----------<>     test=.TRUE.
 7513.  1------------<     DO i = 1, nmax
 7514.  1                     !pi === 180
 7515.  1                     !y  === x
 7516.  1                     !
 7517.  1                     ! X = (180 * Y)/pi
 7518.  1                     !
 7519.  1                     phi(i) = 90.0_r8-180.0e0_r8/pie * colrad(i)
 7520.  1                     !
 7521.  1                     !     constrain latitude range
 7522.  1                     !
 7523.  1                     !fixa o valor -55 ou +55 se o valor absoluto da latitude for maior que 55
 7524.  1                     IF (ABS(phi(i)) > 55.0_r8) phi(i)=SIGN(55.0_r8,phi(i))
 7525.  1                     !fixa o valor -20 ou +20 se a valor absoluto da latitude for menor que 20
 7526.  1                     IF (ABS(phi(i)) < 20.0_r8) phi(i)=SIGN(20.0_r8,phi(i))
 7527.  1              
 7528.  1------------>     ENDDO
 7529.  1------------<     DO i1 = 1, iimon+1
 7530.  1 Vr4--------<        DO i = 1, nmax
 7531.  1 Vr4                    xgreen(i,i1)=xgren(i1)
 7532.  1 Vr4-------->        END DO
 7533.  1------------>     END DO
 7534.                     !
 7535.                     !     search for any wheat vegetation points at this latitude
 7536.                     !     if found, set sib parameters for latitude and time of year
 7537.                     !
 7538.                     kold=0
 7539.  wr4----------<     DO i1 = 1, iimon
 7540.  wr4                   kmon(i1)=kold
 7541.  wr4                   !
 7542.  wr4                   !     add extra day for leap years if using standard length year
 7543.  wr4                   !
 7544.  wr4                   IF (MOD(idatec(4),4) == 0 .AND. i1 == 2)kmon(i1)=kmon(i1)+1
 7545.  wr4                   kold=kold+monl(i1)
 7546.  wr4---------->     END DO
 7547.  1------------<     DO i = 1, nmax
 7548.  1                     IF (itype(i) /= iwheat) CYCLE
 7549.  1                     flip =   0.0_r8
 7550.  1                     IF (phi(i)< 0.0e0_r8) flip = yrl/2.0_r8
 7551.  1                     !
 7552.  1                     !     determine julian day - 1 for each wheat phenology for this
 7553.  1                     !     latitude.  scale by length of year and adjust for south. hem.
 7554.  1                     !
 7555.  1                     phenst(i,2) = (4.50_r8 * ABS(phi(i)) - 65.0_r8) * (yrl/syr) + flip
 7556.  1                     phenst(i,3) = (4.74_r8 * ABS(phi(i)) - 47.2_r8) * (yrl/syr) + flip
 7557.  1                     phenst(i,4) = (4.86_r8 * ABS(phi(i)) - 31.8_r8) * (yrl/syr) + flip
 7558.  1                     phenst(i,5) = (4.55_r8 * ABS(phi(i)) -  2.0_r8) * (yrl/syr) + flip
 7559.  1                     phenst(i,6) = (4.35_r8 * ABS(phi(i)) + 10.5_r8) * (yrl/syr) + flip
 7560.  1              
 7561.  1              
 7562.  1                     phenst(i,7) = phenst(i,6) + 3.0_r8 * (yrl/syr)
 7563.  1                     phenst(i,1) = phenst(i,2) - ABS(5.21_r8 * ABS(phi(i)) - 0.3_r8)*(yrl/syr)
 7564.  1                     phenst(i,9) = phenst(i,1)
 7565.  1                     phenst(i,8) = phenst(i,9) - 5.0_r8*(yrl/syr)
 7566.  1------------>     END DO
 7567.  b------------<     DO ns = 1, 9
 7568.  b b----------<        DO i = 1, nmax
 7569.  b b                      IF (itype(i) /= iwheat) CYCLE
 7570.  b b                      !
 7571.  b b                      !     constrain phenology dates to fall within one year period
 7572.  b b                      !
 7573.  b b                      IF (phenst(i,ns) < 0.0e0_r8) phenst(i,ns) = phenst(i,ns) + yrl
 7574.  b b                      IF (phenst(i,ns) > yrl)      phenst(i,ns) = phenst(i,ns) - yrl
 7575.  b b---------->        END DO
 7576.  b------------>     END DO
 7577.                 
 7578.  b------------<     DO i1 = 1, 12
 7579.  b b----------<        DO i = 1, nmax
 7580.  b b                      IF (itype(i) /= iwheat) CYCLE
 7581.  b b                      !
 7582.  b b                      !     find month of the head phenology stage for this latitude
 7583.  b b                      !
 7584.  b b                      IF (phenst(i,ihead) <= kmon(i1+1)) THEN
 7585.  b b                         mind(i) = i1
 7586.  b b                         IF (i1 <= 4) THEN
 7587.  b b                            xgreen(i,i1+1) = 0.9_r8
 7588.  b b                            xgreen(i,i1+2) = 0.9_r8
 7589.  b b                         END IF
 7590.  b b                      END IF
 7591.  b b---------->        END DO
 7592.  b------------>     END DO
 7593.                 
 7594.  1------------<     DO ns = 1,8
 7595.  1 2----------<        DO i = 1, nmax
 7596.  1 2                      IF (itype(i) /= iwheat) CYCLE
 7597.  1 2                      rootgc(i) = 1.0_r8
 7598.  1 2                      chilw(i)  =-0.02_r8
 7599.  1 2                      tlai(i)   = 0.5_r8
 7600.  1 2                      grlf(i)   = 0.6_r8
 7601.  1 2                      xcover2(i)=xcover(iwheat,month(i),1)
 7602.  1 2                      !
 7603.  1 2                      !     find growth stage given latitude and day
 7604.  1 2                      !
 7605.  1 2                      IF(test(i))THEN
 7606.  1 2                         diff1(i) =  phenst(i,ns+1)- phenst(i,ns)
 7607.  1 2                         diff2(i) = rday- phenst(i,ns)
 7608.  1 2                         IF ( phenst(i,ns) >=  phenst(i,ns+1)) THEN
 7609.  1 2                            IF ((rday <  phenst(i,ns)) .OR. (rday >  phenst(i,ns+1))) THEN
 7610.  1 2                               !
 7611.  1 2                               !     phenology stages overlap the end of year?
 7612.  1 2                               !
 7613.  1 2                               icond = 0
 7614.  1 2                               IF (rday >=  phenst(i,ns)   .AND. rday <= yrl  ) icond = 1
 7615.  1 2                               IF (rday >= thrsh .AND. rday <=  phenst(i,ns+1)) icond = 2
 7616.  1 2                               IF (icond /= 2) THEN
 7617.  1 2                                  diff1(i) = yrl    -  phenst(i,ns) +  phenst(i,ns+1)
 7618.  1 2                                  diff2(i) = rday   -  phenst(i,ns)
 7619.  1 2                               ELSE
 7620.  1 2                                  diff1(i) = yrl   -  phenst(i,ns) + phenst(i,ns+1)
 7621.  1 2                                  diff2(i) = yrl   -  phenst(i,ns) + rday
 7622.  1 2                               END IF
 7623.  1 2                            END IF
 7624.  1 2                            IF (icond /= 0) THEN
 7625.  1 2                               !
 7626.  1 2                               !     date found in phenology stage
 7627.  1 2                               !
 7628.  1 2                               perc =  diff2(i)/diff1(i)
 7629.  1 2                               !
 7630.  1 2                               !     kk is current month number
 7631.  1 2                               !
 7632.  1 2                               kk=idatec(2)
 7633.  1 2                               mnl=monl(kk)
 7634.  1 2                               IF (MOD(idatec(4),4) == 0 .AND. kk == 2)mnl=mnl+1
 7635.  1 2                               IF (rday > phenst(i,ihead)) THEN
 7636.  1 2                                  IF (kk /= mind(i)) THEN
 7637.  1 2                                     x1 = vlt(kk)
 7638.  1 2                                     xdif1 = mnl
 7639.  1 2                                     xdif2 = rday - kmon(kk)
 7640.  1 2                                  ELSE
 7641.  1 2                                     x1    = wlai(ihead)
 7642.  1 2                                     xdif1 = kmon(kk+1) - phenst(i,ihead)
 7643.  1 2                                     xdif2 = rday - phenst(i,ihead)
 7644.  1 2                                  END IF
 7645.  1 2                                  tlai(i) = x1 - (x1-vlt(kk+1)) / xdif1 * xdif2
 7646.  1 2                               ELSE
 7647.  1 2                                  tlai(i) =  perc*(wlai(ns+1)-wlai(ns)) + wlai(ns)
 7648.  1 2                               END IF
 7649.  1 2                               IF (rday > phenst(i,ihead+1)) THEN
 7650.  1 2                                  xcover2(i)=vcv + (0.9_r8 - vcv) * (yrl - rday)/(yrl - phenst(i,ihead+1))
 7651.  1 2                               ELSE
 7652.  1 2                                  xcover2(i)=0.90_r8*(1.0_r8 - EXP(-tlai(i)))
 7653.  1 2                               END IF
 7654.  1 2                               grlf(i)   = xgreen(i,kk)-(xgreen(i,kk)-xgreen(i,kk+1))/mnl*(rday-kmon(kk))
 7655.  1 2                               rootgc(i) = 2910.0_r8 * (0.5_r8 + 0.5_r8 * tlai(i)/ wlai(ihead) * grlf(i))
 7656.  1 2                               IF (ns /= 1 .AND. ns /= 2) chilw(i)=-0.2_r8
 7657.  1 2                               test(i)=.FALSE.
 7658.  1 2                               index(i)=ns
 7659.  1 2                            END IF
 7660.  1 2                         END IF
 7661.  1 2                      END IF
 7662.  1 2---------->        END DO
 7663.  1------------>     END DO
 7664.                 
 7665.  1------------<     DO i = 1, nmax
 7666.  1                     IF (itype(i) /= iwheat) CYCLE
 7667.  1                     nsx(i) = index(i)
 7668.  1                     IF (nsx(i) == 9) nsx(i) = 1
 7669.  1                     IF (nsx(i) >  6) nsx(i) = 6
 7670.  1                     vcover_gbl (i,latitu,1) =   xcover2(i) !xcover(itype(i),month(i),1)
 7671.  1                     zlt_gbl    (i,latitu,1) =   tlai(i)    !zlt   (itype(i),month(i),1)
 7672.  1                     green_gbl  (i,latitu,1) =   grlf(i)    !green (itype(i),month(i),1)
 7673.  1                     chil_gbl   (i,latitu,1) =   chilw(i)   !chil  (itype(i),1)
 7674.  1                     topt_gbl   (i,latitu,1) =   yopt (2)   !topt  (itype(i),1)
 7675.  1                     tll_gbl    (i,latitu,1) =   yll  (2)   !tll   (itype(i),1)
 7676.  1                     tu_gbl     (i,latitu,1) =   yu(2)   !tu    (itype(i),1)
 7677.  1                     defac_gbl  (i,latitu,1) =   yefac(2)   !defac (itype(i),1)
 7678.  1                     ph1_gbl    (i,latitu,1) =   yh1  (2)   !ph1   (itype(i),1)
 7679.  1                     ph2_gbl    (i,latitu,1) =   yh2  (2)   !ph2   (itype(i),1)
 7680.  1                     rstpar_gbl (i,latitu,1,1)=  ystpar(2,1)!rstpar(itype(i),1,1)
 7681.  1                     rstpar_gbl (i,latitu,1,2)=  ystpar(2,2)!rstpar(itype(i),1,2)
 7682.  1                     rstpar_gbl (i,latitu,1,3)=  ystpar(2,3)!rstpar(itype(i),1,3)
 7683.  1              
 7684.  1------------>     END DO
 7685.                     RETURN
 7686.                   END SUBROUTINE wheat
ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 7686 
  Local variable "ROOTGC" is assigned a value but never used.

ftn-5008 ftn: NOTE File = Sfc_SSiB.f90, Line = 7686 
  Named Constant "ICG" is not used.

ftn-5008 ftn: NOTE File = Sfc_SSiB.f90, Line = 7686 
  Named Constant "IBD" is not used.

ftn-5008 ftn: NOTE File = Sfc_SSiB.f90, Line = 7686 
  Named Constant "IWV" is not used.

ftn-5008 ftn: NOTE File = Sfc_SSiB.f90, Line = 7686 
  Named Constant "IDP" is not used.

ftn-5008 ftn: NOTE File = Sfc_SSiB.f90, Line = 7686 
  Named Constant "ITVEG" is not used.

ftn-5008 ftn: NOTE File = Sfc_SSiB.f90, Line = 7686 
  Named Constant "ISOIL" is not used.

 7687.                 
 7688.                 
 7689.                 
 7690.                   ! sibwet :transform mintz-serafini and national meteoroLOGICAL center fields
 7691.                   !         of soil moisture into sib compatible fields of soil moisture.
 7692.                 
 7693.                 
 7694.                 
 7695.                 
 7696.                   SUBROUTINE sibwet &
 7697.                        (ibmax,jbmax,sinp,sinmax,imask,wsib,ssib,mxiter,ibMaxPerJB)
 7698.                     !
 7699.                     !
 7700.                     !     piers sellers : 29 april 1987
 7701.                     !
 7702.                     !
 7703.                     !   input  :   sinp     = mintz-serafini or national meteoroLOGICAL
 7704.                     !                         center soil moisture (mm)
 7705.                     !              sinmax   = maximum value of sinp (mm)
 7706.                     !              wsinp    = m-s or nmc fractional wetness
 7707.                     !              ms       = 1, mintz-serafini
 7708.                     !              nmc      = 1, national meteoroLOGICAL center
 7709.                     !              bee      = sib : soil moisture potential factor
 7710.                     !              phsat    = sib : soil potential at saturation (m)
 7711.                     !              zdepth(3)= sib : depth of 3 soil layers (m)
 7712.                     !              poros    = Porosidade do solo (m"3/m"3)
 7713.                     !
 7714.                     !   output :   wsibt    = sib : fractional wetness
 7715.                     !              ssibt    = sib : soil moisture content (m)
 7716.                     !              psit     = sib : soil moisture potential (m)
 7717.                     !              factor   = sib : extraction factor
 7718.                     !
 7719.                     INTEGER, INTENT(in   ) :: ibmax
 7720.                     INTEGER, INTENT(in   ) :: jbmax
 7721.                     INTEGER, INTENT(in   ) :: mxiter
 7722.                     REAL(KIND=r8)   , INTENT(in   ) :: sinp(ibmax,jbmax)
 7723.                     REAL(KIND=r8)   , INTENT(in   ) :: sinmax
 7724.                     !
 7725.                 
 7726.                     INTEGER(KIND=i8), INTENT(in   ) :: imask (ibmax,jbmax)
 7727.                     REAL(KIND=r8)   , INTENT(inout  ) :: wsib  (ibmax,jbmax)
 7728.                     REAL(KIND=r8)   , INTENT(inout  ) :: ssib  (ibmax,jbmax)
 7729.                     INTEGER, INTENT(in   ) :: ibMaxPerJB(:)
 7730.                 
 7731.                     REAL(KIND=r8) :: sm(ityp,mxiter)
 7732.                     REAL(KIND=r8) :: time(ityp,mxiter)
 7733.                     REAL(KIND=r8) :: fact(ityp,mxiter)
 7734.                 
 7735.                     REAL(KIND=r8), PARAMETER :: xph1(13,2) = RESHAPE( &
 7736.                          (/-100.0_r8,-190.0_r8,-200.0_r8,-200.0_r8,-200.0_r8,-120.0_r8,-120.0_r8,-120.0_r8,-200.0_r8, &
 7737.                          -200.0_r8, -10.0_r8,-190.0_r8, -10.0_r8,-100.0_r8,-190.0_r8,-200.0_r8,-200.0_r8,-200.0_r8, &
 7738.                          -120.0_r8,-120.0_r8,-120.0_r8,-200.0_r8,-200.0_r8, -10.0_r8,-190.0_r8, -10.0_r8/), &
 7739.                          (/13,2/))
 7740.                     REAL(KIND=r8), PARAMETER :: xph2(13,2) = RESHAPE( &
 7741.                          (/-500.0_r8,-250.0_r8,-250.0_r8,-250.0_r8,-250.0_r8,-230.0_r8,-230.0_r8,-280.0_r8,-400.0_r8, &
 7742.                          -400.0_r8,-100.0_r8,-250.0_r8,-100.0_r8,-500.0_r8,-250.0_r8,-250.0_r8,-250.0_r8,-250.0_r8, &
 7743.                          -230.0_r8,-230.0_r8,-280.0_r8,-400.0_r8,-400.0_r8,-100.0_r8,-250.0_r8,-100.0_r8/) , &
 7744.                          (/13,2/))
 7745.                 
 7746.                     REAL(KIND=r8)    :: tzdep(3)
 7747.                     REAL(KIND=r8)    :: tzltm(2)
 7748.                     REAL(KIND=r8)    :: sibmax(ityp)
 7749.                     REAL(KIND=r8)    :: tphsat
 7750.                     REAL(KIND=r8)    :: tbee
 7751.                     REAL(KIND=r8)    :: tporos
 7752.                     INTEGER :: imm1
 7753.                     INTEGER :: imm2
 7754.                     INTEGER :: is
 7755.                     INTEGER :: im
 7756.                     INTEGER :: imm
 7757.                     INTEGER :: ivegm
 7758.                     REAL(KIND=r8)    :: cover
 7759.                     REAL(KIND=r8)    :: tph1
 7760.                     REAL(KIND=r8)    :: tph2
 7761.                     REAL(KIND=r8)    :: sref
 7762.                     REAL(KIND=r8)    :: smin
 7763.                     REAL(KIND=r8)    :: dssib
 7764.                     REAL(KIND=r8)    :: dw
 7765.                     REAL(KIND=r8)    :: times
 7766.                     REAL(KIND=r8)    :: soilmo
 7767.                     REAL(KIND=r8)    :: w
 7768.                     REAL(KIND=r8)    :: rsoilm
 7769.                     INTEGER :: iter
 7770.                     INTEGER :: latmax
 7771.                     INTEGER :: lonmax
 7772.                     INTEGER :: lat
 7773.                     INTEGER :: lon
 7774.                     REAL(KIND=r8)    :: tsinp
 7775.                     REAL(KIND=r8)    :: etp
 7776.                     REAL(KIND=r8)    :: facmod
 7777.                     REAL(KIND=r8)    :: ssibt
 7778.                     REAL(KIND=r8)    :: psit
 7779.                     REAL(KIND=r8)    :: factor
 7780.                     REAL(KIND=r8)    :: dt
 7781.                     INTEGER :: itsoil
 7782.                     INTEGER :: itfac
 7783.                 
 7784.  Af----------<>     sm  =0.0_r8
 7785.  f-----------<>     time=0.0_r8
 7786.  f-----------<>     fact=0.0_r8
 7787.  Af----------<>     ssib=0.0_r8
 7788.  f-----------<>     wsib=0.0_r8
 7789.                 
 7790.                     lonmax=ibmax
 7791.                     latmax=jbmax
 7792.                 
 7793.  1------------<     DO is = 1,ityp
 7794.  1                     !zdepth(3)= sib : depth of 3 soil layers (m)
 7795.  1                     tzdep (1)= zdepth(is,1)
 7796.  1                     tzdep (2)= zdepth(is,2)
 7797.  1                     tzdep (3)= zdepth(is,3)
 7798.  1                     tphsat   = phsat (is)
 7799.  1                     tbee     = bee   (is)
 7800.  1                     tporos   = poros (is)
 7801.  1                     imm1=1
 7802.  1                     imm2=1
 7803.  1                     tzltm(1)=zlt_fixed(is,1,1)
 7804.  1                     tzltm(2)=zlt_fixed(is,1,2)
 7805.  1 2----------<        DO im=2,12
 7806.  1 2                      IF(tzltm(1).LE.zlt_fixed(is,im,1) ) THEN
 7807.  1 2                         imm1=im
 7808.  1 2                         tzltm(1)=zlt_fixed(is,im,1)
 7809.  1 2                      END IF
 7810.  1 2                      IF(tzltm(2).LE.zlt_fixed(is,im,2) )THEN
 7811.  1 2                         imm2=im
 7812.  1 2                         tzltm(2)=zlt_fixed(is,im,2)
 7813.  1 2                      END IF
 7814.  1 2---------->        END DO
 7815.  1                     imm=imm1
 7816.  1                     ivegm=1
 7817.  1                     IF(tzltm(1).LE.tzltm(2)) THEN
 7818.  1                        imm=imm2
 7819.  1                        ivegm=2
 7820.  1                     END IF
 7821.  1                     !
 7822.  1                     !     xcover......Fracao de cobertura vegetal icg=1 topo
 7823.  1                     !     xcover......Fracao de cobertura vegetal icg=2 base
 7824.  1                     !
 7825.  1                     cover=xcover_fixed(is,imm,ivegm)
 7826.  1                     tph1=xph1         (is,ivegm)
 7827.  1                     tph2=xph2         (is,ivegm)
 7828.  1                     !
 7829.  1                     !                                                     m^3
 7830.  1                     ! sibmax(is) =(Z1 + Z2 + Z3) * poros = [m + m + m] * ----- = m = Os
 7831.  1                     !                                                     m^3
 7832.  1                     !
 7833.  1                     sibmax(is) = ( tzdep(1) + tzdep(2) + tzdep(3) ) * tporos
 7834.  1                     !
 7835.  1                     IF(nfctrl(83).GE.1)WRITE(UNIT=nfprt,FMT=999)is,sibmax(is),tzdep(1), &
 7836.  1                          tzdep(2),tzdep(3),tporos
 7837.  1                     !
 7838.  1                     !            bee      = soil moisture potential factor
 7839.  1                     !            phsat    = soil potential at saturation   (m)
 7840.  1                     !
 7841.  1                     !                   --              --
 7842.  1                     !                  | log ( - tphsat/1)|
 7843.  1                     !  O  = Os * EXP * | -----------------|
 7844.  1                     !                  |        b         |
 7845.  1                     !                   --              --
 7846.  1                     !
 7847.  1                     sref = sibmax(is) * EXP( LOG(tphsat /(-1.0e0_r8)) /tbee)
 7848.  1                     !                   --                          --
 7849.  1                     !                  | log ( - tphsat/(-1.0e10) )   |
 7850.  1                     !Omin = Os * EXP * | -----------------------------|
 7851.  1                     !                  |              b               |
 7852.  1                     !                   --                          --
 7853.  1                     !
 7854.  1                     smin    = sibmax(is) * EXP( LOG(tphsat /(-1.0e10_r8)) / tbee)
 7855.  1                     !
 7856.  1                     !             O - Omin
 7857.  1                     !dssib  = ------------------
 7858.  1                     !              mxiter
 7859.  1                     !
 7860.  1                     dssib   = (sref - smin) / REAL(mxiter,r8)
 7861.  1                     !
 7862.  1                     !              O - Omin
 7863.  1                     ! dw    =  ------------------
 7864.  1                     !             mxiter*Os
 7865.  1                     !
 7866.  1                     dw      = dssib / sibmax(is)
 7867.  1                     !
 7868.  1                     times   = 0.0e0_r8
 7869.  1                     soilmo  = sref
 7870.  1                     !
 7871.  1                     !       O
 7872.  1                     ! w = -----
 7873.  1                     !       Os
 7874.  1                     !
 7875.  1                     w = soilmo / sibmax(is)
 7876.  1                     !
 7877.  1                     !                      --             --
 7878.  1                     !                     |       0.0027    |
 7879.  1                     !rsoilm  = 101840.0 * |1.0 - w          |
 7880.  1                     !                     |                 |
 7881.  1                     !                      --             --
 7882.  1                     !
 7883.  1                     rsoilm  = 101840.0_r8 * (1.0_r8 - w**0.0027_r8)
 7884.  1 2----------<        DO iter = 1, mxiter
 7885.  1 2  I                   CALL extrak( w   ,dw  ,tbee,tphsat, rsoilm, cover, &
 7886.  1 2                           tph1,tph2,psit,factor )
 7887.  1 2                      !
 7888.  1 2                      !       dssib
 7889.  1 2                      !dt = ----------
 7890.  1 2                      !       factor
 7891.  1 2                      !
 7892.  1 2                      dt            = dssib  / factor
 7893.  1 2                      !
 7894.  1 2                      soilmo        = soilmo - dssib
 7895.  1 2                      !
 7896.  1 2                      !       O
 7897.  1 2                      ! w = -----
 7898.  1 2                      !       Os
 7899.  1 2                      !
 7900.  1 2                      w             = soilmo / sibmax(is)
 7901.  1 2                      times         = times  + dt
 7902.  1 2                      sm  (is,iter) = soilmo
 7903.  1 2                      time(is,iter) = times
 7904.  1 2                      fact(is,iter) = factor
 7905.  1 2---------->        END DO
 7906.  1              
 7907.  1------------>     END DO
 7908.                     !
 7909.                     !     input soil moisture map is now transformed to sib fields.
 7910.                     !
 7911.  1------------<     DO lat = 1, latmax
 7912.  1 2----------<        DO lon = 1, ibMaxPerJB(lat)
 7913.  1 2                      is=imask(lon,lat)
 7914.  1 2                      IF(is.NE.0)THEN
 7915.  1 2                         tsinp = sinp(lon,lat)
 7916.  1 2                         tsinp = MAX (sinmax/100.0e3_r8 , tsinp )
 7917.  1 2                         tsinp = MIN (sinmax,tsinp)
 7918.  1 2                         IF (tsinp .GT. 0.75e0_r8*sinmax ) etp = sinmax - tsinp
 7919.  1 2                         facmod=MIN(1.0e0_r8,tsinp/(0.75e0_r8*sinmax) )
 7920.  1 2                         IF (tsinp .LE. 0.75e0_r8*sinmax ) THEN
 7921.  1 2                            etp = 0.75e0_r8*sinmax*LOG(0.75e0_r8*sinmax/tsinp ) + 0.25e0_r8*sinmax
 7922.  1 2                         END IF
 7923.  1 2                         etp = etp / 1000.0e0_r8
 7924.  1 2 3--------<              DO iter = 1, mxiter
 7925.  1 2 3                          itsoil=iter
 7926.  1 2 3                          IF ( time(is,iter) - etp .GT. 0.0e0_r8  ) EXIT
 7927.  1 2 3-------->              END DO
 7928.  1 2 3--------<              DO iter=1,mxiter
 7929.  1 2 3                          itfac=iter
 7930.  1 2 3                          IF( fact(is,iter)-facmod-0.01e0_r8.LT.0.0e0_r8)EXIT
 7931.  1 2 3-------->              END DO
 7932.  1 2                         ssibt=MIN(sm(is,itsoil),sm(is,itfac))
 7933.  1 2 3--------<              DO iter=1,mxiter
 7934.  1 2 3                          IF(ssibt.GT.sm(is,iter))EXIT
 7935.  1 2 3-------->              END DO
 7936.  1 2                         ssib(lon,lat) = sm(is,iter)
 7937.  1 2                         !
 7938.  1 2                         !          O
 7939.  1 2                         ! wsib = -----
 7940.  1 2                         !         Os
 7941.  1 2                         !
 7942.  1 2                         wsib(lon,lat) = sm(is,iter) / sibmax(is)
 7943.  1 2                      END IF
 7944.  1 2---------->        END DO
 7945.  1------------>     END DO
 7946.                 999 FORMAT(' IS,MAX,D1,D2,D3,POROS=',I2,1X,5E12.5)
 7947.                   END SUBROUTINE sibwet
ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 7947 
  Local variable "LONMAX" is assigned a value but never used.

 7948.                 
 7949.                 
 7950.                 
 7951.                   SUBROUTINE sibwet_GLSM (ibMax          , & ! IN
 7952.                        jbMax          , & ! IN
 7953.                        imask          , & ! IN
 7954.                        wsib           , & ! IN
 7955.                        ssib           , & ! IN
 7956.                        mxiter         , & ! OUT
 7957.                        ibMaxPerJB     , & ! OUT
 7958.                        soilm          , & ! in
 7959.                        nzg         , & ! in
 7960.                        wsib3d         , & ! OUT
 7961.                        glsm_w)            ! IN
 7962.                 
 7963.                     !
 7964.                     ! $Author: pkubota $
 7965.                     ! $Date: 2009/03/03 16:36:38 $
 7966.                     ! $Revision: 1.14 $
 7967.                     !
 7968.                     ! sibwet :transform mintz-serafini and national meteoroLOGICAL center fields
 7969.                     !         of soil moisture into sib compatible fields of soil moisture.
 7970.                     !
 7971.                     !     piers sellers : 29 april 1987
 7972.                     !
 7973.                     INTEGER, INTENT(IN   )            :: ibMax
 7974.                     INTEGER, INTENT(IN   )            :: jbMax
 7975.                     INTEGER, INTENT(IN   )            :: mxiter
 7976.                     REAL(KIND=r8)   , INTENT(OUT  )            :: soilm          (ibMax,jbMax)
 7977.                     INTEGER(KIND=i8), INTENT(IN   )            :: imask          (ibMax,jbMax)
 7978.                     REAL(KIND=r8)   , INTENT(OUT  )            :: wsib           (ibMax,jbMax)
 7979.                     REAL(KIND=r8)   , INTENT(OUT  )            :: ssib           (ibMax,jbMax)
 7980.                     INTEGER, INTENT(in   )            :: ibMaxPerJB     (:)
 7981.                     INTEGER, INTENT(in   )            :: nzg
 7982.                     REAL(KIND=r8)   , INTENT(OUT  )            :: wsib3d    (ibMax,jbMax,3       )
 7983.                     REAL(KIND=r8)   , INTENT(IN   )            :: glsm_w    (ibMax,jbMax,nzg     )
 7984.                 
 7985.                     REAL(KIND=r8)               :: sm  (ityp,mxiter)
 7986.                     REAL(KIND=r8)               :: time(ityp,mxiter)
 7987.                     REAL(KIND=r8)               :: fact(ityp,mxiter)
 7988.                     !
 7989.                     !-srf
 7990.                     !
 7991.                     INTEGER, PARAMETER :: nzgmax=20
 7992.                     REAL(KIND=r8)               :: glsm_w1d  (0:nzgmax)     ! dummy 1d initial soil  wetness
 7993.                     REAL(KIND=r8)               :: glsm_tzdep(0:3)          ! sib soil levels
 7994.                     REAL(KIND=r8)               :: glsm_w_sib(0:3)          ! SIB dummy 1d initial and interpolated soil  wetness
 7995.                     !
 7996.                     !-srf
 7997.                     !
 7998.                     REAL(KIND=r8)               :: tzdep (3)
 7999.                     REAL(KIND=r8)               :: tzltm (2)
 8000.                     REAL(KIND=r8)               :: sibmax(ityp)
 8001.                     INTEGER            :: k
 8002.                     REAL(KIND=r8)               :: fx
 8003.                     INTEGER            :: lonmax
 8004.                     INTEGER            :: latmax
 8005.                     INTEGER            :: is
 8006.                     REAL(KIND=r8)               :: tphsat
 8007.                     REAL(KIND=r8)               :: tbee
 8008.                     REAL(KIND=r8)               :: tporos
 8009.                     INTEGER            :: imm1
 8010.                     INTEGER            :: imm2
 8011.                     INTEGER            :: im
 8012.                     INTEGER            :: imm
 8013.                     INTEGER            :: ivegm
 8014.                     REAL(KIND=r8)               :: cover
 8015.                     REAL(KIND=r8)               :: tph1
 8016.                     REAL(KIND=r8)               :: tph2
 8017.                     REAL(KIND=r8)               :: sref
 8018.                     REAL(KIND=r8)               :: smin
 8019.                     REAL(KIND=r8)               :: dssib
 8020.                     REAL(KIND=r8)               :: dw
 8021.                     REAL(KIND=r8)               :: times
 8022.                     REAL(KIND=r8)               :: soilmo
 8023.                     REAL(KIND=r8)               :: w
 8024.                     REAL(KIND=r8)               :: rsoilm
 8025.                     INTEGER            :: iter
 8026.                     REAL(KIND=r8)               :: psit
 8027.                     REAL(KIND=r8)               :: factor
 8028.                     REAL(KIND=r8)               :: dt
 8029.                     INTEGER            :: lat
 8030.                     INTEGER            :: lon
 8031.                 
 8032.                     !
 8033.                     !              wsinp    = m-s or nmc fractional wetness
 8034.                     !              ms       = 1, mintz-serafini
 8035.                     !              nmc      = 1, national meteoroLOGICAL center
 8036.                     !              bee      = sib : soil moisture potential factor
 8037.                     !              phsat     = sib : soil potential at saturation (m)
 8038.                     !              zdepth(3)= sib : depth of 3 soil layers (m)
 8039.                     !              poros    = sib : soil porosity
 8040.                     !              ph1      = sib : leaf potential, stress onset (m)
 8041.                     !              ph2      = sib : leaf potential, no e-t (m)
 8042.                     !
 8043.                     !   output :   wsibt    = sib : fractional wetness
 8044.                     !              ssibt    = sib : soil moisture content (m)
 8045.                     !              psit     = sib : soil moisture potential (m)
 8046.                     !              factor   = sib : extraction factor
 8047.                     !
 8048.                     REAL(KIND=r8), PARAMETER :: xph1(13,2) = RESHAPE( &
 8049.                          (/-100.0_r8,-190.0_r8,-200.0_r8,-200.0_r8,-200.0_r8,-120.0_r8,-120.0_r8,-120.0_r8,-200.0_r8, &
 8050.                          -200.0_r8, -10.0_r8,-190.0_r8, -10.0_r8,-100.0_r8,-190.0_r8,-200.0_r8,-200.0_r8,-200.0_r8, &
 8051.                          -120.0_r8,-120.0_r8,-120.0_r8,-200.0_r8,-200.0_r8, -10.0_r8,-190.0_r8, -10.0_r8/), &
 8052.                          (/13,2/))
 8053.                     REAL(KIND=r8), PARAMETER :: xph2(13,2) = RESHAPE( &
 8054.                          (/-500.0_r8,-250.0_r8,-250.0_r8,-250.0_r8,-250.0_r8,-230.0_r8,-230.0_r8,-280.0_r8,-400.0_r8, &
 8055.                          -400.0_r8,-100.0_r8,-250.0_r8,-100.0_r8,-500.0_r8,-250.0_r8,-250.0_r8,-250.0_r8,-250.0_r8, &
 8056.                          -230.0_r8,-230.0_r8,-280.0_r8,-400.0_r8,-400.0_r8,-100.0_r8,-250.0_r8,-100.0_r8/) , &
 8057.                          (/13,2/))
 8058.                 
 8059.                     !-srf
 8060.                     !hmjb
 8061.                     !    REAL, PARAMETER :: glsm_slz(0:nzgmax) = (/  0., 0.1, 0.25, 0.5, 1., 2., 3.,& !7  values
 8062.                     !         0., 0.,  0.,   0.,  0., 0., 0., 0., 0., 0.,& !10 values
 8063.                     !         0., 0.,  0.,   0.                         /) !4  values
 8064.                     !versao para NZG=8 => 9 niveis no MCGA
 8065.                     REAL(KIND=r8), PARAMETER :: glsm_slz(0:nzgmax) = (/  0.0_r8, 0.05_r8, 0.13_r8, 0.25_r8, 0.5_r8, 1.0_r8, 1.75_r8,& !9  values
 8066.                          2.5_r8, 4.5_r8,  0.0_r8,   0.0_r8,  0.0_r8, 0.0_r8, 0.0_r8, 0.0_r8, 0.0_r8, 0.0_r8,& !10 values
 8067.                          0.0_r8, 0.0_r8,  0.0_r8,   0.0_r8                         /) !4  values
 8068.                     !-srf
 8069.                     sm =0.0_r8
 8070.                     time  =0.0_r8
 8071.                     fact  =0.0_r8
 8072.  Af----------<>     ssib  =0.0_r8
 8073.  f-----------<>     wsib  =0.0_r8
 8074.                 
 8075.                     lonmax=ibMax
 8076.                     latmax=jbMax
 8077.                 
 8078.  1------------<     DO is = 1,ityp
 8079.  1                     tzdep (1)= zdepth(is,1)
 8080.  1                     tzdep (2)= zdepth(is,2)
 8081.  1                     tzdep (3)= zdepth(is,3)
 8082.  1                     tphsat   = phsat (is)
 8083.  1                     tbee     = bee   (is)
 8084.  1                     tporos   = poros (is)
 8085.  1                     imm1=1
 8086.  1                     imm2=1
 8087.  1                     tzltm(1)=zlt_fixed(is,1,1)
 8088.  1                     tzltm(2)=zlt_fixed(is,1,2)
 8089.  1 D----------<        DO im=2,12
 8090.  1 D                      IF (tzltm(1).le.zlt_fixed(is,im,1) ) THEN
 8091.  1 D                         imm1=im
 8092.  1 D                         tzltm(1)=zlt_fixed(is,im,1)
 8093.  1 D                      END IF
 8094.  1 D            
 8095.  1 D                      IF (tzltm(2).le.zlt_fixed(is,im,2) ) THEN
 8096.  1 D                         imm2=im
 8097.  1 D                         tzltm(2)=zlt_fixed(is,im,2)
 8098.  1 D                      END IF
 8099.  1 D---------->        END DO
 8100.  1              
 8101.  1                     imm=imm1
 8102.  1                     ivegm=1
 8103.  1              
 8104.  1                     IF (tzltm(1).le.tzltm(2)) THEN
 8105.  1                        imm=imm2
 8106.  1                        ivegm=2
 8107.  1                     END IF
 8108.  1                     cover=xcover_fixed(is,imm,ivegm)
 8109.  1                     tph1=xph1(is,ivegm)
 8110.  1                     tph2=xph2(is,ivegm)
 8111.  1                     !
 8112.  1                     !srf- max water content
 8113.  1                     !
 8114.  1                     sibmax(is) = ( tzdep(1) + tzdep(2) + tzdep(3) ) * tporos
 8115.  1                     IF (nfctrl(83).ge.1) WRITE(UNIT=nfprt,FMT=999)is,sibmax(is),tzdep(1), &
 8116.  1                          tzdep(2),tzdep(3),tporos
 8117.  1                     sref = sibmax(is) * exp( log(tphsat /(-1.0e0_r8)) /tbee )
 8118.  1                     smin = sibmax(is) * exp( log(tphsat /(-1.0e10_r8)) /tbee )
 8119.  1                     dssib= (sref - smin) / REAL(mxiter,r8)
 8120.  1                     dw   = dssib / sibmax(is)
 8121.  1                     times  = 0.0e0_r8
 8122.  1                     soilmo = sref
 8123.  1                     w      = soilmo / sibmax(is)
 8124.  1                     rsoilm = 101840.0_r8 * (1.0_r8 - w**0.0027_r8)
 8125.  1              
 8126.  1 D----------<        DO iter = 1, mxiter
 8127.  1 D  I                   CALL extrak      ( w     , &  ! IN
 8128.  1 D                           dw    , &  ! IN
 8129.  1 D                           tbee  , &  ! IN
 8130.  1 D                           tphsat, &  ! IN
 8131.  1 D                           rsoilm, &  ! IN
 8132.  1 D                           cover , &  ! IN
 8133.  1 D                           tph1  , &  ! IN
 8134.  1 D                           tph2  , &  ! IN
 8135.  1 D                           psit  , &  ! OUT
 8136.  1 D                           factor  )  ! OUT
 8137.  1 D                      dt            = dssib / factor
 8138.  1 D                      soilmo        = soilmo - dssib
 8139.  1 D                      w             = soilmo / sibmax(is)
 8140.  1 D                      times         = times + dt
 8141.  1 D                      sm  (is,iter) = soilmo
 8142.  1 D                      time(is,iter) = times
 8143.  1 D                      fact(is,iter) = factor
 8144.  1 D---------->        END DO
 8145.  1------------>     END DO
 8146.                     !
 8147.                     !     input soil moisture map is now transformed to sib fields.
 8148.                     !
 8149.  1------------<     DO lat = 1, latmax
 8150.  1 2----------<        DO lon = 1, ibMaxPerJB(lat)
 8151.  1 2            
 8152.  1 2                      wsib3d(lon,lat,:) = 0.e0_r8
 8153.  1 2            
 8154.  1 2                      is=imask(lon,lat)
 8155.  1 2                      IF (is.ne.0) THEN
 8156.  1 2            
 8157.  1 2                         tzdep (1)= zdepth(is,1)
 8158.  1 2                         tzdep (2)= zdepth(is,2)
 8159.  1 2                         tzdep (3)= zdepth(is,3)
 8160.  1 2                         tphsat   = phsat (is)
 8161.  1 2                         tbee     = bee   (is)
 8162.  1 2                         tporos   = poros (is)
 8163.  1 2                         !
 8164.  1 2                         !-sib soil levels
 8165.  1 2                         !
 8166.  1 2                         glsm_tzdep(0) = 0.e0_r8
 8167.  1 2                         glsm_w_sib(0) = 0.e0_r8
 8168.  1 2            
 8169.  1 2 w--------<              DO k=1,3
 8170.  1 2 w                          glsm_tzdep (k) = zdepth(is,k) + glsm_tzdep (k-1)
 8171.  1 2 w                          glsm_w_sib (k) = 0.e0_r8
 8172.  1 2 w-------->              END DO
 8173.  1 2                         !
 8174.  1 2                         !- copy 3d soil moisture array to 1d column array
 8175.  1 2                         !
 8176.  1 2 Vpr4-----<              DO k=1,nzg
 8177.  1 2 Vpr4                       glsm_w1d(k)=glsm_w(lon,lat,k)
 8178.  1 2 Vpr4----->              END DO
 8179.  1 2                         !
 8180.  1 2                         !- performs vertical interpolation from soil moisture
 8181.  1 2                         !  levels to sib levels
 8182.  1 2                         !
 8183.  1 2 VAwr4 I-->              CALL vert_interp(4               , &  ! IN
 8184.  1 2                              nzg+1           , &  ! IN
 8185.  1 2                              glsm_tzdep(0:3) , &  ! IN
 8186.  1 2                              glsm_slz(0:nzg) , &  ! IN
 8187.  1 2                              glsm_w1d(0:nzg) , &  ! IN
 8188.  1 2                              glsm_w_sib(0:3)  )   ! OUT
 8189.  1 2            
 8190.  1 2            
 8191.  1 2                         !endif
 8192.  1 2                         !
 8193.  1 2                         !- stores 1d sib soil moisture at 3d array
 8194.  1 2                         !
 8195.  1 2 Vpf------<              DO k=1,3
 8196.  1 2 Vpf                        wsib3d(lon,lat,k) = glsm_w_sib(k)
 8197.  1 2 Vpf------>              END DO
 8198.  1 2                         !
 8199.  1 2                         !------------------------- remove this later--------------------------------X
 8200.  1 2                         !- for now fix zero soil moisture inside the land
 8201.  1 2                         !- latter fix this at soil moisture original data
 8202.  1 2                         !
 8203.  1 2                         !IF (imask(lon,lat) > 0 ) THEN
 8204.  1 2                         !   ssm=0.
 8205.  1 2                         !   DO k=1,3
 8206.  1 2                         !      ssm=ssm+wsib3d(lon,lat,k)
 8207.  1 2                         !   END DO
 8208.  1 2                         !
 8209.  1 2                         !   IF (ssm < 0.15) THEN
 8210.  1 2                         !      !
 8211.  1 2                         !      !print*,'SM null inside land portion', imask(lon,lat)
 8212.  1 2                         !      !print*,'1',lon,lat,wsib3d(lon,lat,:)
 8213.  1 2                         !      !
 8214.  1 2                         !      ssm1d(:) = 0.
 8215.  1 2                         !      ncount = 0
 8216.  1 2                         !      DO i=max(1,lon-4),min(lonmax,lon+4)
 8217.  1 2                         !         DO j=max(1,lat-4),min(latmax,lat+4)
 8218.  1 2                         !    IF (imask(i,j) > 0) THEN !only points inside the land
 8219.  1 2                         !       ssm=0.
 8220.  1 2                         !       DO k=1,3
 8221.  1 2                         !  ssm=ssm+wsib3d(i,j,k)
 8222.  1 2                         !       END DO
 8223.  1 2                         !
 8224.  1 2                         !       IF (ssm > 0.15) THEN
 8225.  1 2                         !  ncount=ncount  + 1
 8226.  1 2                         !  ssm1d(:) = ssm1d(:) + wsib3d(i,j,:)
 8227.  1 2                         !       END IF
 8228.  1 2                         !    END IF
 8229.  1 2                         !         END DO
 8230.  1 2                         !      END DO
 8231.  1 2                         !
 8232.  1 2                         !     IF (ncount > 1) THEN
 8233.  1 2                         !         wsib3d(lon,lat,:)=ssm1d(:)/float(ncount)
 8234.  1 2                         !      ELSE
 8235.  1 2                         !         wsib3d(lon,lat,:)=0.5
 8236.  1 2                         !      END IF
 8237.  1 2                         !      !
 8238.  1 2                         !      !print*,'2',lon,lat,wsib3d(lon,lat,:)
 8239.  1 2                         !      !
 8240.  1 2                         !   END IF
 8241.  1 2                         !END IF
 8242.  1 2                         !
 8243.  1 2                         !-----------------------------------------------------------------------------X
 8244.  1 2                         !
 8245.  1 2                         ssib(lon,lat) = 0.0_r8
 8246.  1 2                         wsib(lon,lat) = 0.0_r8
 8247.  1 2            
 8248.  1 2 f--------<              DO k=1,3
 8249.  1 2 f          
 8250.  1 2 f                          fx            = ( glsm_tzdep(k)-glsm_tzdep(k-1) ) / glsm_tzdep(3)
 8251.  1 2 f                          wsib(lon,lat) = wsib(lon,lat) + glsm_w_sib(k) * fx
 8252.  1 2 f                          ssib(lon,lat) = ssib(lon,lat) + glsm_w_sib(k) * fx * tporos
 8253.  1 2 f          
 8254.  1 2 f-------->              END DO
 8255.  1 2                         !
 8256.  1 2                         ! total water in mm
 8257.  1 2                         !
 8258.  1 2                         soilm(lon,lat) = ( tzdep(1)*wsib3d(lon,lat,1) + &
 8259.  1 2                              tzdep(2)*wsib3d(lon,lat,2) + &
 8260.  1 2                              tzdep(3)*wsib3d(lon,lat,3) ) * tporos
 8261.  1 2                         !
 8262.  1 2                      END IF
 8263.  1 2---------->        END DO
 8264.  1------------>     END DO
 8265.                 999 FORMAT(' IS,MAX,D1,D2,D3,POROS=',I2,1X,5E12.5)
 8266.                   END SUBROUTINE sibwet_GLSM
ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 8266 
  Local variable "SM" is assigned a value but never used.

ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 8266 
  Local variable "TIME" is assigned a value but never used.

ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 8266 
  Local variable "LONMAX" is assigned a value but never used.

ftn-5001 ftn: NOTE File = Sfc_SSiB.f90, Line = 8266 
  Local variable "FACT" is assigned a value but never used.

 8267.                 
 8268.                   SUBROUTINE extrak( w, dw, tbee, tphsat, rsoilm, cover, tph1, tph2, &
 8269.                        psit, factor )
 8270.                     REAL(KIND=r8), INTENT(in   ) :: w
 8271.                     REAL(KIND=r8), INTENT(in   ) :: dw
 8272.                     REAL(KIND=r8), INTENT(in   ) :: tbee
 8273.                     REAL(KIND=r8), INTENT(in   ) :: tphsat
 8274.                     REAL(KIND=r8), INTENT(in   ) :: rsoilm
 8275.                     REAL(KIND=r8), INTENT(in   ) :: cover
 8276.                     REAL(KIND=r8), INTENT(in   ) :: tph1
 8277.                     REAL(KIND=r8), INTENT(in   ) :: tph2
 8278.                     REAL(KIND=r8), INTENT(inout  ) :: psit
 8279.                     REAL(KIND=r8), INTENT(inout  ) :: factor
 8280.                     REAL(KIND=r8) :: rsoil
 8281.                     REAL(KIND=r8) :: argg
 8282.                     REAL(KIND=r8) :: hr
 8283.                     REAL(KIND=r8) :: rplant
 8284.                     !                --     -- (-b)
 8285.                     !               |      dw |                  0
 8286.                     ! psit = PHYs * | w - --- |      where w = -----
 8287.                     !               |      2  |                  0s
 8288.                     !                --     --
 8289.                     psit   = tphsat * ( w-dw/2.0e0_r8 ) ** (-tbee)
 8290.                     !
 8291.                     !                      --                        --
 8292.                     !                     |       --     -- (0.0027)   |
 8293.                     !                     |      |      dw |           |
 8294.                     !rsoil   = 101840.0 * |1.0 - | w - --- |           |
 8295.                     !                     |      |      2  |           |
 8296.                     !                     |       --     --            |
 8297.                     !                      --                        --
 8298.                     !
 8299.                     rsoil  = 101840.0_r8 * (1.0_r8-( w-dw/2.0_r8) ** 0.0027_r8)
 8300.                     !
 8301.                     !                9.81       1
 8302.                     !argg = psit * -------- * -------
 8303.                     !               461.50     310.0
 8304.                     !
 8305.                     argg   = MAX ( -10.0e0_r8 , ((psit * 9.81e0_r8 / 461.5e0_r8) / 310.e0_r8))
 8306.                     !
 8307.                     !            --                       --
 8308.                     !           |         9.81       1      |
 8309.                     !hr   = EXP |psit * -------- * -------  |
 8310.                     !           |        461.50     310.0   |
 8311.                     !            --                       --
 8312.                     !
 8313.                     hr     = EXP ( argg )
 8314.                     !
 8315.                     !         rsoilm
 8316.                     ! rsoil =--------- * hr
 8317.                     !         rsoil
 8318.                     !
 8319.                     rsoil  = rsoilm /rsoil * hr
 8320.                     !
 8321.                     !          ( psit - tph2 - 50.0)
 8322.                     !rplant = -------------------------
 8323.                     !             ( tph1 - tph2 )
 8324.                     !
 8325.                     rplant = ( psit - tph2 -50.0_r8) / ( tph1 - tph2 )
 8326.                     rplant = MAX ( 0.0e0_r8, MIN ( 1.0e0_r8, rplant ) )
 8327.                     !                                                                     --                   --
 8328.                     !                  --                 --                             |     --     -- (0.0027)|
 8329.                     !                 |( psit - tph2 - 50)  |                            |    |      dw |        |
 8330.                     !factor = cover * |---------------------| + (1 - cover) * 101840.0 * |1 - | w - --- |        |
 8331.                     !                 |   ( tph1 - tph2 )   |                            |    |      2  |        |
 8332.                     !                  --                 --                             |     --     --         |
 8333.                     !                                                                     --                   --
 8334.                     factor = cover * rplant + ( 1.0e0_r8 - cover ) * rsoil
 8335.                     factor = MAX ( 1.e-6_r8, factor )
 8336.                   END SUBROUTINE extrak
 8337.                   !
 8338.                   !------------------------------------------------------------
 8339.                   !
 8340.                   SUBROUTINE vert_interp(nsib      , & ! IN
 8341.                        nzg       , & ! IN
 8342.                        tzdep     , & ! IN
 8343.                        glsm_slz  , & ! IN
 8344.                        gl_sm     , & ! IN
 8345.                        glsm_w_sib  ) ! OUT
 8346.                 
 8347.                     INTEGER, INTENT(IN   ) :: nsib
 8348.                     INTEGER, INTENT(IN   ) :: nzg
 8349.                     REAL(KIND=r8)   , INTENT(IN   ) :: tzdep     (nsib)
 8350.                     REAL(KIND=r8)   , INTENT(IN   ) :: glsm_slz  (: )
 8351.                     REAL(KIND=r8)   , INTENT(IN   ) :: gl_sm     (: )
 8352.                     REAL(KIND=r8)   , INTENT(OUT  ) :: glsm_w_sib(nsib)
 8353.                 
 8354.                     REAL(KIND=r8)    :: zm        (nsib)
 8355.                     REAL(KIND=r8)    :: wf        (nsib)
 8356.                     REAL(KIND=r8)    :: zc        (nzg )
 8357.                     REAL(KIND=r8)    :: wi        (nzg )
 8358.                     REAL(KIND=r8)    :: dzlft
 8359.                     INTEGER :: ZDM
 8360.                     INTEGER :: k
 8361.                     INTEGER :: kstart
 8362.                     INTEGER :: L
 8363.                 
 8364.  Vpfr4--------<     DO k=1,nzg
 8365.  Vpfr4                 zc(k)=glsm_slz(k)
 8366.  Vpfr4-------->     END DO
 8367.                 
 8368.  Af-----------<     DO k=1,nsib
 8369.  Af                    zm(k)=tzdep(k)
 8370.  Af----------->     END DO
 8371.                 
 8372.                     zdm=nsib
 8373.                     KSTART=3
 8374.                     !
 8375.                     ! Transfere valores da grade de MAIOR resolucao (WI)
 8376.                     !                     para a grade de MENOR resolucao (WF)
 8377.                     !
 8378.                     ! OS valores de WI devem estar definidos nos pontos de grade ZCS=zc/2
 8379.                     ! OS valores de WF saem nos niveis ZMS = ZM/2
 8380.                     !
 8381.                     !
 8382.                     !
 8383.                     !    Dados da grade de maior resolucao
 8384.                     !
 8385.  f------------<     DO K=1,NZG
 8386.  f                     WI(K) = gl_sm(k)
 8387.  f                     !print*,'wi=',k,wi(k)
 8388.  f------------>     END DO
 8389.                     !
 8390.                     !     Dado interpolado
 8391.                     !
 8392.  f-----------<>     wf(:)=0.0_r8
 8393.                     !
 8394.                     !     Valor de superficie:
 8395.                     !
 8396.                     WF(1)=WI(2)
 8397.                     WF(2)=WI(2)
 8398.                     !
 8399.                     !
 8400.                     DZLFT=0.0_r8
 8401.                     L=2
 8402.  1------------<     DO K=KSTART,ZDM
 8403.  1                     !
 8404.  1                     !    if(k==4) print*,'0',l,WF(K),WI(L),DZLFT
 8405.  1                     !
 8406.  1                     IF(DZLFT.NE.0.0_r8) THEN
 8407.  1              
 8408.  1                        WF(K)=WF(K)+WI(L)*DZLFT
 8409.  1                        !    if(k==4) print*,'1',l,WF(K),WI(L),DZLFT
 8410.  1                        L=L+1
 8411.  1              
 8412.  1                     END IF
 8413.  1              
 8414.  1              70     CONTINUE
 8415.  1              
 8416.  1                     IF(ZC(L).LE.ZM(K)) THEN
 8417.  1              
 8418.  1                        WF(K)=WF(K)+WI(L)*(ZC(L)-ZC(L-1))
 8419.  1              
 8420.  1                        !   if(k==4) print*,'2',l,WF(K),WI(L),ZC(L),zm(k)
 8421.  1              
 8422.  1                        L=L+1
 8423.  1                        DZLFT=0.0_r8
 8424.  1                        IF (L>nzg) GO TO 1000
 8425.  1                        GO TO 70
 8426.  1                     ELSE
 8427.  1              
 8428.  1                        WF(K)=WF(K)+WI(L)*(ZM(K)-ZC(L-1))
 8429.  1                        DZLFT=ZC(L)-ZM(K)
 8430.  1                     ENDIF
 8431.  1------------>     ENDDO
 8432.                 
 8433.                 1000 CONTINUE
 8434.                 
 8435.  1------------<     DO K=KSTART,ZDM
 8436.  1                     !
 8437.  1                     !   WF(K) =WF(K)/(ZM(K)-ZM(K-1))
 8438.  1                     !         if(k==4)print*,zm(k),zc(nzg),ZM(K-1),WF(K)
 8439.  1                     !
 8440.  1                     IF (ZM(K) > ZC(nzg)) THEN
 8441.  1                        WF(K) = WF(K)/(ZC(NZG)-ZM(K-1))
 8442.  1                     ELSE
 8443.  1                        WF(K)  = WF(K)/(ZM(K)-ZM(K-1))
 8444.  1                     END IF
 8445.  1------------>     END DO
 8446.                     !
 8447.                     !valores na grade do SIB
 8448.                     !
 8449.  A------------<     DO k=1,nsib
 8450.  A                     glsm_w_sib(k)=WF(k)
 8451.  A                     !print*,'SIB',k,glsm_w_sib(k)
 8452.  A------------>     END DO
 8453.                     !
 8454.                     !check conservacao
 8455.                     !srf - verifique se a integral de ambos calculos percorrem
 8456.                     !srf - o mesmo intervalo
 8457.                     !      print*,'        '
 8458.                     !      sumf=0.0_r8
 8459.                     !      DO K=2,ZDM
 8460.                     !       sumf=sumf+wf(k)*(ZM(K)-ZM(K-1))
 8461.                     !       print*,sumf,wf(k),zm(k),ZM(K)-ZM(K-1)
 8462.                     !      ENDDO
 8463.                     !      print*,'--------sumf-----',sumf
 8464.                     !      sumi=0.0_r8
 8465.                     !      DO K=2,nzg
 8466.                     !       sumi=sumi+wi(k)*(glsm_slz(K)-glsm_slz(K-1))
 8467.                     !       print*,k,sumi,wi(k),glsm_slz(K),(glsm_slz(K)-glsm_slz(K-1))
 8468.                     !      ENDDO
 8469.                     !      print*,'--------sumi-----',sumi, 100*(sumf-sumi)/sumi
 8470.                     !
 8471.                     RETURN
 8472.                   END SUBROUTINE vert_interp
 8473.                 END MODULE SFC_SSiB

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 454 
  A loop starting at line 454 was not vectorized because a better candidate was found at line 455.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 455 
  A loop starting at line 455 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 455 
  A loop starting at line 455 was vectorized.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 456 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 457 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 458 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 459 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 460 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 461 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 462 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 463 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 464 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 465 
  A statement was replaced by a library call.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 473 
  A loop starting at line 473 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 496 
  A loop starting at line 496 was not vectorized because it contains a reference to a non-vector intrinsic on line 532.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 498 
  A loop starting at line 498 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 529 
  A loop starting at line 529 was not vectorized because it contains a reference to a non-vector intrinsic on line 532.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 530 
  Routine RADALB was not inlined because it is a leaf routine which is too large to expand. 

ftn-3163 ftn: IPA File = Sfc_SSiB.f90, Line = 538 
  Routine ROOT was not inlined because all call sites in the call nest could not be textually inlined.

ftn-3022 ftn: IPA File = Sfc_SSiB.f90, Line = 538 
  Routine FYSIKS was not inlined because the call nest is too large to expand. 

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 569 
  A loop starting at line 569 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 587 
  A loop starting at line 587 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 587 
  A loop starting at line 587 was vectorized.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 593 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 593 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 594 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 594 
  A statement was replaced by a library call.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 603 
  A loop starting at line 603 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 603 
  A loop starting at line 603 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 612 
  A loop starting at line 612 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 618 
  A loop starting at line 618 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 624 
  Routine RADALB was not inlined because it is a leaf routine which is too large to expand. 

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 635 
  A loop starting at line 635 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-3163 ftn: IPA File = Sfc_SSiB.f90, Line = 661 
  Routine ROOT was not inlined because all call sites in the call nest could not be textually inlined.

ftn-3022 ftn: IPA File = Sfc_SSiB.f90, Line = 661 
  Routine FYSIKS was not inlined because the call nest is too large to expand. 

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 695 
  A loop starting at line 695 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 695 
  A loop starting at line 695 was vectorized.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 700 
  Routine SEXTRP was not inlined because it is a leaf routine which is too large to expand. 

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 707 
  A loop starting at line 707 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 719 
  A loop starting at line 719 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 735 
  A loop starting at line 735 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-3022 ftn: IPA File = Sfc_SSiB.f90, Line = 743 
  Routine SEASFC was not inlined because the call nest is too large to expand. 

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 757 
  A loop starting at line 757 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 800 
  A loop starting at line 800 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 801 
  A loop starting at line 801 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 802 
  A loop starting at line 802 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 803 
  A loop starting at line 803 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 804 
  A loop starting at line 804 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 805 
  A loop starting at line 805 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 806 
  A loop starting at line 806 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 807 
  A loop starting at line 807 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 808 
  A loop starting at line 808 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 809 
  A loop starting at line 809 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 810 
  A loop starting at line 810 was replaced by a library call.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 811 
  A loop starting at line 811 was not vectorized because a better candidate was found at line 812.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 812 
  A loop starting at line 812 was unrolled 2 times.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 812 
  A loop starting at line 812 was partially vectorized.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 828 
  Routine WHEAT was not inlined because it is a leaf routine which is too large to expand. 

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 898 
  A loop starting at line 898 was not vectorized because it contains conditional code which is more efficient if executed in scalar
  mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 904 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1167 
  A divide was turned into a multiply by a reciprocal

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1170 
  A loop starting at line 1170 was replaced by a library call.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1172 
  A loop starting at line 1172 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1261 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1262 
  A divide was turned into a multiply by a reciprocal

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1273 
  A loop starting at line 1273 was vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1283 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1294 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1395 
  A loop starting at line 1395 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1395 
  A loop starting at line 1395 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1402 
  A loop starting at line 1402 was vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1462 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1470 
  A divide was turned into a multiply by a reciprocal

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1528 
  A loop starting at line 1528 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1752 
  A loop starting at line 1752 was vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1756 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1758 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1762 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1765 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1771 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1783 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1788 
  A loop starting at line 1788 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1788 
  A loop starting at line 1788 was vectorized.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1809 
  A loop starting at line 1809 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1840 
  A loop starting at line 1840 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 1950 
  A loop starting at line 1950 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 1965 
  A divide was turned into a multiply by a reciprocal

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2050 
  A loop starting at line 2050 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2057 
  A divide was turned into a multiply by a reciprocal

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2212 
  A loop starting at line 2212 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2224 
  A loop starting at line 2224 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2227 
  A divide was turned into a multiply by a reciprocal

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2251 
  A loop starting at line 2251 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2268 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2290 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2415 
  A divide was turned into a multiply by a reciprocal

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2416 
  A loop starting at line 2416 was replaced by a library call.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2420 
  A loop starting at line 2420 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2426 
  A loop starting at line 2426 was not vectorized because a better candidate was found at line 2427.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2427 
  A loop starting at line 2427 was partially vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2435 
  A loop starting at line 2435 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2459 
  A divide was turned into a multiply by a reciprocal

ftn-6383 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2480 
  A loop starting at line 2480 requires an estimated 14 vector registers at line 2623; 2 of these have been preemptively forced to
  memory.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2480 
  A loop starting at line 2480 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2511 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2519 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2545 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2553 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2609 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2614 
  A divide was turned into a multiply by a reciprocal

ftn-6002 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2785 
  A loop starting at line 2785 was eliminated by optimization.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2791 
  A loop starting at line 2791 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2804 
  A divide was turned into a multiply by a reciprocal

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2848 
  A loop starting at line 2848 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 2852 
  A divide was turned into a multiply by a reciprocal

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 2857 
  A loop starting at line 2857 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3023 
  A loop starting at line 3023 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3023 
  A loop starting at line 3023 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3041 
  A loop starting at line 3041 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3051 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3054 
  A loop starting at line 3054 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3054 
  A loop starting at line 3054 was vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3063 
  A loop starting at line 3063 was fused with the loop starting at line 3041.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3069 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3072 
  A loop starting at line 3072 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3072 
  A loop starting at line 3072 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3079 
  A loop starting at line 3079 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3085 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3088 
  A loop starting at line 3088 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3088 
  A loop starting at line 3088 was vectorized.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3444 
  A loop starting at line 3444 was replaced by a library call.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3445 
  A loop starting at line 3445 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3445 
  A loop starting at line 3445 was vectorized.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3446 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3447 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3448 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3449 
  A statement was replaced by a library call.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3458 
  A loop starting at line 3458 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3458 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3458 
  The call to AIRMOD was textually inlined.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3464 
  A loop starting at line 3464 was replaced by a library call.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3471 
  A loop starting at line 3471 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3519 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3520 
  A statement was replaced by a library call.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3527 
  A loop starting at line 3527 was not vectorized because it contains a reference to a non-vector intrinsic on line 3556.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3529 
  A loop starting at line 3529 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3529 
  A loop starting at line 3529 was vectorized.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3530 
  A statement was replaced by a library call.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3542 
  A loop starting at line 3542 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3542 
  A loop starting at line 3542 was vectorized.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3543 
  A statement was replaced by a library call.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3556 
  A loop starting at line 3556 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3556 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3556 
  The call to VNTLAX was inlined.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3563 
  A loop starting at line 3563 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3563 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3563 
  The call to VNTLAX was inlined.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3568 
  A loop starting at line 3568 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3568 
  A loop starting at line 3568 was vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3569 
  A divide was turned into a multiply by a reciprocal

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3572 
  A loop starting at line 3572 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3572 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3572 
  The call to RBRD was inlined.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3581 
  A loop starting at line 3581 was not vectorized because it contains a reference to a non-vector intrinsic on line 3588.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3582 
  A loop starting at line 3582 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3588 
  A loop starting at line 3588 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3588 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3588 
  The call to VNTLAX was inlined.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3593 
  A loop starting at line 3593 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3593 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3593 
  The call to CUT was textually inlined.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3598 
  A loop starting at line 3598 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3598 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3598 
  The call to STRES2 was inlined.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3604 
  A loop starting at line 3604 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3604 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3604 
  The call to CUT was textually inlined.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3609 
  A loop starting at line 3609 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3611 
  A divide was turned into a multiply by a reciprocal

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3616 
  A loop starting at line 3616 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3627 
  A loop starting at line 3627 was not vectorized for an unspecified reason.

ftn-6230 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3631 
  A loop starting at line 3631 was replaced with multiple library calls.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3638 
  A loop starting at line 3638 was vectorized.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3641 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3642 
  A statement was replaced by a library call.

ftn-6289 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3651 
  A loop starting at line 3651 was not vectorized because a recurrence was found on "FC" between lines 3653 and 3676.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3653 
  A loop starting at line 3653 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3653 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3653 
  The call to CUT was textually inlined.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3658 
  A loop starting at line 3658 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3669 
  A loop starting at line 3669 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3688 
  A loop starting at line 3688 was not vectorized for an unspecified reason.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 3692 
  Routine TEMRES was not inlined because it is a leaf routine which is too large to expand. 

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3704 
  A loop starting at line 3704 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3704 
  A loop starting at line 3704 was vectorized.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3713 
  A loop starting at line 3713 was unrolled 4 times.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3713 
  A divide was turned into a multiply by a reciprocal

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3713 
  A loop starting at line 3713 was partially vectorized.

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 3713 
  The call to UPDATE was textually inlined.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3720 
  A loop starting at line 3720 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3720 
  A loop starting at line 3720 was vectorized.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3731 
  A loop starting at line 3731 was unrolled 2 times.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3731 
  A loop starting at line 3731 was partially vectorized.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3905 
  A loop starting at line 3905 was replaced by a library call.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3906 
  A loop starting at line 3906 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3916 
  A divide was turned into a multiply by a reciprocal

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3925 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3926 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3927 
  A statement was replaced by a library call.

ftn-6315 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3959 
  A loop starting at line 3959 was not vectorized because the target array (XSC) would require rank expansion.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3962 
  A loop starting at line 3962 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3962 
  A loop starting at line 3962 was vectorized.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3964 
  A statement was replaced by a library call.

ftn-6230 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3970 
  A loop starting at line 3970 was replaced with multiple library calls.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 3976 
  A loop starting at line 3976 was unrolled 4 times.

ftn-6213 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3976 
  A loop starting at line 3976 was conditionally vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 3990 
  A loop starting at line 3990 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4031 
  A loop starting at line 4031 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4054 
  A loop starting at line 4054 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4060 
  A divide was turned into a multiply by a reciprocal

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4084 
  A loop starting at line 4084 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4103 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4116 
  A loop starting at line 4116 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4116 
  A loop starting at line 4116 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4124 
  A loop starting at line 4124 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4131 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4134 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4143 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4146 
  A divide was turned into a multiply by a reciprocal

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4153 
  A loop starting at line 4153 was replaced by a library call.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4153 
  A loop starting at line 4153 was replaced by a library call.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4160 
  A loop starting at line 4160 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4176 
  A loop starting at line 4176 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4176 
  A loop starting at line 4176 was vectorized.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4188 
  A statement was replaced by a library call.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4194 
  A loop starting at line 4194 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4194 
  A loop starting at line 4194 was vectorized.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4290 
  A loop starting at line 4290 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4290 
  A loop starting at line 4290 was vectorized.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4294 
  A loop starting at line 4294 was not vectorized because a better candidate was found at line 4296.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4295 
  A loop starting at line 4295 was not vectorized because a better candidate was found at line 4296.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4296 
  A loop starting at line 4296 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4296 
  A loop starting at line 4296 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4312 
  A loop starting at line 4312 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4345 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4425 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4444 
  A divide was turned into a multiply by a reciprocal

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4449 
  A loop starting at line 4449 was replaced by a library call.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4514 
  A loop starting at line 4514 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4514 
  A loop starting at line 4514 was vectorized.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4528 
  A loop starting at line 4528 was not vectorized because a better candidate was found at line 4531.

ftn-6254 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4529 
  A loop starting at line 4529 was not vectorized because a recurrence was found on "RADT" at line 4532.

ftn-6254 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4530 
  A loop starting at line 4530 was not vectorized because a recurrence was found on "RADT" at line 4532.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4530 
  A loop starting at line 4530 was blocked with block size 0.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4531 
  A loop starting at line 4531 was blocked with block size 256.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4531 
  A loop starting at line 4531 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4531 
  A loop starting at line 4531 was vectorized.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4541 
  A loop starting at line 4541 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4541 
  A loop starting at line 4541 was vectorized.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4620 
  A loop starting at line 4620 was not vectorized because a better candidate was found at line 4621.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4621 
  A loop starting at line 4621 was unrolled 2 times.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4621 
  A loop starting at line 4621 was partially vectorized.

ftn-6007 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4640 
  A loop starting at line 4640 was interchanged with the loop starting at line 4642.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4640 
  A loop starting at line 4640 was blocked with block size 512.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4640 
  A loop starting at line 4640 was replaced by a library call.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4640 
  A loop starting at line 4640 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4640 
  A loop starting at line 4640 was vectorized.

ftn-6254 ftn: VECTOR File = Sfc_SSiB.f90, Line = 4642 
  A loop starting at line 4642 was not vectorized because a recurrence was found on "PHROOT" at line 4643.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 4642 
  A loop starting at line 4642 was blocked with block size 0.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5007 
  A loop starting at line 5007 was blocked with block size 0.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5007 
  A loop starting at line 5007 was replaced by a library call.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5007 
  A loop starting at line 5007 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5007 
  A loop starting at line 5007 was vectorized.

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 5007 
  The call to ROOT was textually inlined.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5009 
  A loop starting at line 5009 was blocked with block size 0.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5009 
  A loop starting at line 5009 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5009 
  A loop starting at line 5009 was vectorized.

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 5009 
  The call to RADUSE was textually inlined.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5012 
  A loop starting at line 5012 was replaced by a library call.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5012 
  A loop starting at line 5012 was unrolled 4 times.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5012 
  A divide was turned into a multiply by a reciprocal

ftn-6213 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5012 
  A loop starting at line 5012 was conditionally vectorized.

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 5012 
  The call to STOMAT was textually inlined.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 5015 
  Routine INTERC was not inlined because it is a leaf routine which is too large to expand. 

ftn-3022 ftn: IPA File = Sfc_SSiB.f90, Line = 5022 
  Routine SFLXES was not inlined because the call nest is too large to expand. 

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5135 
  A loop starting at line 5135 was replaced by a library call.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5136 
  A divide was turned into a multiply by a reciprocal

ftn-6315 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5138 
  A loop starting at line 5138 was not vectorized because the target array (TTA) would require rank expansion.

ftn-6230 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5141 
  A loop starting at line 5141 was replaced with multiple library calls.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5150 
  A loop starting at line 5150 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5150 
  A loop starting at line 5150 was vectorized.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5152 
  A statement was replaced by a library call.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5159 
  A loop starting at line 5159 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5159 
  A loop starting at line 5159 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5164 
  A loop starting at line 5164 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5173 
  A loop starting at line 5173 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5173 
  A loop starting at line 5173 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5177 
  A loop starting at line 5177 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5202 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5222 
  A loop starting at line 5222 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5222 
  A loop starting at line 5222 was vectorized.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5229 
  A loop starting at line 5229 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5229 
  A loop starting at line 5229 was vectorized.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5671 
  A loop starting at line 5671 was unrolled 2 times.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5671 
  A loop starting at line 5671 was partially vectorized.

ftn-3163 ftn: IPA File = Sfc_SSiB.f90, Line = 5684 
  Routine AIRMOD was not inlined because all call sites in the call nest could not be textually inlined.

ftn-3022 ftn: IPA File = Sfc_SSiB.f90, Line = 5684 
  Routine PBL was not inlined because the call nest is too large to expand. 

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5706 
  A loop starting at line 5706 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5706 
  A loop starting at line 5706 was vectorized.

ftn-6254 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5713 
  A loop starting at line 5713 was not vectorized because a recurrence was found on "W" at line 5717.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5714 
  A loop starting at line 5714 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 5725 
  Routine SNOWM was not inlined because it is a leaf routine which is too large to expand. 

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5731 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5733 
  A loop starting at line 5733 was unrolled 2 times.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5733 
  A loop starting at line 5733 was partially vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5740 
  A loop starting at line 5740 was fused with the loop starting at line 5733.

ftn-6315 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5747 
  A loop starting at line 5747 was not vectorized because the target array (EF) would require rank expansion.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5749 
  A loop starting at line 5749 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5749 
  A loop starting at line 5749 was vectorized.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5753 
  A loop starting at line 5753 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5753 
  A loop starting at line 5753 was vectorized.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5757 
  A loop starting at line 5757 was unrolled 2 times.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5757 
  A loop starting at line 5757 was partially vectorized.

ftn-6315 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5763 
  A loop starting at line 5763 was not vectorized because the target array (DIV) would require rank expansion.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5764 
  A loop starting at line 5764 was unrolled 2 times.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5764 
  A loop starting at line 5764 was partially vectorized.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5774 
  A loop starting at line 5774 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5774 
  A loop starting at line 5774 was vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5777 
  A divide was turned into a multiply by a reciprocal

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5780 
  A loop starting at line 5780 was not vectorized because a better candidate was found at line 5781.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5781 
  A loop starting at line 5781 was unrolled 2 times.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5781 
  A loop starting at line 5781 was partially vectorized.

ftn-6254 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5792 
  A loop starting at line 5792 was not vectorized because a recurrence was found on "W" at line 5796.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5792 
  A loop starting at line 5792 was blocked with block size 0.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5793 
  A loop starting at line 5793 was blocked with block size 256.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5793 
  A loop starting at line 5793 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 5803 
  Routine RUNOFF was not inlined because it is a leaf routine which is too large to expand. 

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5806 
  A loop starting at line 5806 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5828 
  A loop starting at line 5828 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5828 
  A loop starting at line 5828 was vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5852 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5855 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5864 
  A loop starting at line 5864 was unrolled 2 times.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5864 
  A loop starting at line 5864 was partially vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5866 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 5881 
  A divide was turned into a multiply by a reciprocal

ftn-6286 ftn: VECTOR File = Sfc_SSiB.f90, Line = 5889 
  A loop starting at line 5889 was not vectorized because it contains input/output operations at line 5893.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6012 
  A loop starting at line 6012 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6020 
  A divide was turned into a multiply by a reciprocal

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6024 
  A loop starting at line 6024 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6030 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6051 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6052 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6242 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6246 
  A divide was turned into a multiply by a reciprocal

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6251 
  A loop starting at line 6251 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6255 
  A divide was turned into a multiply by a reciprocal

ftn-6230 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6267 
  A loop starting at line 6267 was replaced with multiple library calls.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6268 
  A loop starting at line 6268 was fused with the loop starting at line 6267.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6269 
  A loop starting at line 6269 was fused with the loop starting at line 6267.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6272 
  A loop starting at line 6272 was not vectorized because it contains a reference to a non-vector intrinsic on line 6274.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6274 
  A divide was turned into a multiply by a reciprocal

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6274 
  A loop starting at line 6274 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 6274 
  The call to VNTLT1 was textually inlined.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6278 
  A loop starting at line 6278 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6287 
  A loop starting at line 6287 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6308 
  A divide was turned into a multiply by a reciprocal

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6327 
  A loop starting at line 6327 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6336 
  A loop starting at line 6336 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6359 
  A loop starting at line 6359 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6373 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6376 
  A divide was turned into a multiply by a reciprocal

ftn-6286 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6420 
  A loop starting at line 6420 was not vectorized because it contains input/output operations at line 6438.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6421 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6422 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6423 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6425 
  A statement was replaced by a library call.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6442 
  A loop starting at line 6442 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6468 
  A loop starting at line 6468 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6469 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6471 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6472 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6473 
  A statement was replaced by a library call.

ftn-6286 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6481 
  A loop starting at line 6481 was not vectorized because it contains input/output operations at line 6499.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6482 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6484 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6485 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6486 
  A statement was replaced by a library call.

ftn-6286 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6504 
  A loop starting at line 6504 was not vectorized because it contains input/output operations at line 6522.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6505 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6507 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6508 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6509 
  A statement was replaced by a library call.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6525 
  A loop starting at line 6525 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6525 
  A loop starting at line 6525 was vectorized.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6526 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6527 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6528 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6529 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6530 
  A statement was replaced by a library call.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6601 
  A loop starting at line 6601 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6601 
  A loop starting at line 6601 was vectorized.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6602 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6603 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6604 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6605 
  A statement was replaced by a library call.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6606 
  A statement was replaced by a library call.

ftn-3149 ftn: IPA File = Sfc_SSiB.f90, Line = 6614 
  Routine RADALB was not inlined because it is a leaf routine which is too large to expand. 

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6623 
  A loop starting at line 6623 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6797 
  A loop starting at line 6797 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6797 
  A loop starting at line 6797 was vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6808 
  A loop starting at line 6808 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6230 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6815 
  A loop starting at line 6815 was replaced with multiple library calls.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6816 
  A loop starting at line 6816 was unrolled 2 times.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6816 
  A loop starting at line 6816 was partially vectorized.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6826 
  A loop starting at line 6826 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6833 
  A loop starting at line 6833 was fused with the loop starting at line 6808.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6844 
  A loop starting at line 6844 was fused with the loop starting at line 6815.

ftn-6327 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6845 
  A loop starting at line 6845 was not vectorized because it required a vector test not supported on this architecture.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6845 
  A loop starting at line 6845 was unrolled 6 times.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6852 
  A loop starting at line 6852 was replaced by a library call.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6854 
  A loop starting at line 6854 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6865 
  A loop starting at line 6865 was not vectorized because a better candidate was found at line 6866.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6865 
  A loop starting at line 6865 was blocked with block size 0.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6866 
  A loop starting at line 6866 was blocked with block size 256.

ftn-6332 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6866 
  A loop starting at line 6866 was not vectorized because it does not map well onto the target architecture.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6866 
  A loop starting at line 6866 was unrolled 8 times.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6870 
  A loop starting at line 6870 was not vectorized because a better candidate was found at line 6871.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6870 
  A loop starting at line 6870 was blocked with block size 0.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6871 
  A loop starting at line 6871 was blocked with block size 256.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6871 
  A loop starting at line 6871 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6327 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6878 
  A loop starting at line 6878 was not vectorized because it required a vector test not supported on this architecture.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6878 
  A loop starting at line 6878 was unrolled 8 times.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6882 
  A loop starting at line 6882 was not vectorized because a better candidate was found at line 6883.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6883 
  A loop starting at line 6883 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6327 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6891 
  A loop starting at line 6891 was not vectorized because it required a vector test not supported on this architecture.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6891 
  A loop starting at line 6891 was unrolled 8 times.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6892 
  A loop starting at line 6892 was not vectorized because a better candidate was found at line 6893.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6893 
  A loop starting at line 6893 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6904 
  A loop starting at line 6904 was blocked with block size 4.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6904 
  A loop starting at line 6904 was vectorized.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6905 
  A loop starting at line 6905 was blocked with block size 256.

ftn-6208 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6905 
  A loop starting at line 6905 was vectorized as part of the loop starting at line 6904.

ftn-6289 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6918 
  A loop starting at line 6918 was not vectorized because a recurrence was found on "XM1" between lines 6932 and 6953.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6922 
  A loop starting at line 6922 was not vectorized for an unspecified reason.

ftn-6373 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6940 
  A loop starting at line 6940 with a trip count of 6 was unwound into 3 vector iterations.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6940 
  A loop starting at line 6940 was partially vectorized.

ftn-6373 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6946 
  A loop starting at line 6946 with a trip count of 6 was unwound into 3 vector iterations.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6946 
  A loop starting at line 6946 was partially vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6953 
  A divide was turned into a multiply by a reciprocal

ftn-6373 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6957 
  A loop starting at line 6957 with a trip count of 6 was unwound into 3 vector iterations.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6957 
  A loop starting at line 6957 was partially vectorized.

ftn-6373 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6970 
  A loop starting at line 6970 with a trip count of 6 was unwound into 3 vector iterations.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6970 
  A loop starting at line 6970 was partially vectorized.

ftn-6373 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6976 
  A loop starting at line 6976 with a trip count of 6 was unwound into 3 vector iterations.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6976 
  A loop starting at line 6976 was partially vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6983 
  A divide was turned into a multiply by a reciprocal

ftn-6373 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6987 
  A loop starting at line 6987 with a trip count of 6 was unwound into 3 vector iterations.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6987 
  A loop starting at line 6987 was partially vectorized.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 6996 
  A loop starting at line 6996 was unrolled 2 times.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 6996 
  A loop starting at line 6996 was partially vectorized.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7013 
  A divide was turned into a multiply by a reciprocal

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7020 
  A loop starting at line 7020 was replaced by a library call.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7025 
  A loop starting at line 7025 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7025 
  A loop starting at line 7025 was vectorized.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7193 
  A loop starting at line 7193 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7193 
  A loop starting at line 7193 was vectorized.

ftn-6373 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7194 
  A loop starting at line 7194 with a trip count of 12 was unwound into 3 vector iterations.

ftn-6382 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7194 
  A loop starting at line 7194 was partially vector pipelined.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7194 
  A loop starting at line 7194 was vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7195 
  A loop starting at line 7195 was fused with the loop starting at line 7194.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7196 
  A loop starting at line 7196 was fused with the loop starting at line 7194.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7197 
  A loop starting at line 7197 was fused with the loop starting at line 7194.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7198 
  A loop starting at line 7198 was fused with the loop starting at line 7194.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7199 
  A loop starting at line 7199 was fused with the loop starting at line 7194.

ftn-6373 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7200 
  A loop starting at line 7200 with a trip count of 12 was unwound into 3 vector iterations.

ftn-6382 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7200 
  A loop starting at line 7200 was partially vector pipelined.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7200 
  A loop starting at line 7200 was vectorized.

ftn-6373 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7201 
  A loop starting at line 7201 with a trip count of 24 was unwound into 6 vector iterations.

ftn-6382 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7201 
  A loop starting at line 7201 was partially vector pipelined.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7201 
  A loop starting at line 7201 was vectorized.

ftn-6373 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7202 
  A loop starting at line 7202 with a trip count of 12 was unwound into 3 vector iterations.

ftn-6382 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7202 
  A loop starting at line 7202 was partially vector pipelined.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7202 
  A loop starting at line 7202 was vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7203 
  A loop starting at line 7203 was fused with the loop starting at line 7202.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7204 
  A loop starting at line 7204 was fused with the loop starting at line 7202.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7205 
  A loop starting at line 7205 was fused with the loop starting at line 7202.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7206 
  A loop starting at line 7206 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7206 
  A loop starting at line 7206 was vectorized.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7207 
  A loop starting at line 7207 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7207 
  A loop starting at line 7207 was vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7208 
  A loop starting at line 7208 was fused with the loop starting at line 7207.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7209 
  A loop starting at line 7209 was fused with the loop starting at line 7207.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7210 
  A loop starting at line 7210 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7210 
  A loop starting at line 7210 was vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7211 
  A loop starting at line 7211 was fused with the loop starting at line 7210.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7212 
  A loop starting at line 7212 was fused with the loop starting at line 7210.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7213 
  A loop starting at line 7213 was fused with the loop starting at line 7210.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7214 
  A loop starting at line 7214 was fused with the loop starting at line 7210.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7215 
  A loop starting at line 7215 was fused with the loop starting at line 7210.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7219 
  A loop starting at line 7219 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7219 
  A loop starting at line 7219 was vectorized.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7220 
  A loop starting at line 7220 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7220 
  A loop starting at line 7220 was vectorized.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7221 
  A loop starting at line 7221 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7221 
  A loop starting at line 7221 was vectorized.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7222 
  A loop starting at line 7222 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7222 
  A loop starting at line 7222 was vectorized.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7223 
  A loop starting at line 7223 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7223 
  A loop starting at line 7223 was vectorized.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7224 
  A loop starting at line 7224 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7224 
  A loop starting at line 7224 was vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7225 
  A loop starting at line 7225 was fused with the loop starting at line 7219.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7226 
  A loop starting at line 7226 was fused with the loop starting at line 7220.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7227 
  A loop starting at line 7227 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7227 
  A loop starting at line 7227 was vectorized.

ftn-6373 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7228 
  A loop starting at line 7228 with a trip count of 12 was unwound into 3 vector iterations.

ftn-6382 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7228 
  A loop starting at line 7228 was partially vector pipelined.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7228 
  A loop starting at line 7228 was vectorized.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7229 
  A loop starting at line 7229 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7229 
  A loop starting at line 7229 was vectorized.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7236 
  A loop starting at line 7236 was not vectorized because a better candidate was found at line 7238.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7237 
  A loop starting at line 7237 was not vectorized because a better candidate was found at line 7238.

ftn-6373 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7238 
  A loop starting at line 7238 with a trip count of 12 was unwound into 6 vector iterations.

ftn-6382 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7238 
  A loop starting at line 7238 was partially vector pipelined.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7238 
  A loop starting at line 7238 was vectorized.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7244 
  A loop starting at line 7244 was not vectorized because a better candidate was found at line 7248.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7244 
  A loop starting at line 7244 was fused with the loop starting at line 7236.

ftn-6332 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7248 
  A loop starting at line 7248 was not vectorized because it does not map well onto the target architecture.

ftn-6007 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7263 
  A loop starting at line 7263 was interchanged with the loop starting at line 7264.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7263 
  A loop starting at line 7263 was partially vectorized.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7264 
  A loop starting at line 7264 was not vectorized because a better candidate was found at line 7263.

ftn-6007 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7273 
  A loop starting at line 7273 was interchanged with the loop starting at line 7274.

ftn-6332 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7273 
  A loop starting at line 7273 was not vectorized because it does not map well onto the target architecture.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7274 
  A loop starting at line 7274 was not vectorized because a better candidate was found at line 7273.

ftn-6332 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7292 
  A loop starting at line 7292 was not vectorized because it does not map well onto the target architecture.

ftn-6008 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7292 
  A loop starting at line 7292 was unwound.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7312 
  A divide was turned into a multiply by a reciprocal

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7316 
  A loop starting at line 7316 was fused with the loop starting at line 7292.

ftn-6373 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7322 
  A loop starting at line 7322 with a trip count of 12 was unwound into 6 vector iterations.

ftn-6382 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7322 
  A loop starting at line 7322 was partially vector pipelined.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7322 
  A loop starting at line 7322 was vectorized.

ftn-6002 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7356 
  A loop starting at line 7356 was eliminated by optimization.

ftn-6230 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7500 
  A loop starting at line 7500 was replaced with multiple library calls.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7501 
  A loop starting at line 7501 was fused with the loop starting at line 7500.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7502 
  A loop starting at line 7502 was replaced by a library call.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7512 
  A loop starting at line 7512 was fused with the loop starting at line 7500.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7513 
  A loop starting at line 7513 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7529 
  A loop starting at line 7529 was not vectorized because a better candidate was found at line 7530.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7530 
  A loop starting at line 7530 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7530 
  A loop starting at line 7530 was vectorized.

ftn-6008 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7539 
  A loop starting at line 7539 was unwound.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7539 
  A loop starting at line 7539 was unrolled 4 times.

ftn-6289 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7539 
  A loop starting at line 7539 was not vectorized because a recurrence was found on "KMON" between lines 7540 and 7544.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7547 
  A loop starting at line 7547 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7550 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7555 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7556 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7557 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7558 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7559 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7562 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7563 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7565 
  A divide was turned into a multiply by a reciprocal

ftn-6294 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7567 
  A loop starting at line 7567 was not vectorized because a better candidate was found at line 7568.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7567 
  A loop starting at line 7567 was blocked with block size 4.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7568 
  A loop starting at line 7568 was blocked with block size 256.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7568 
  A loop starting at line 7568 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6289 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7578 
  A loop starting at line 7578 was not vectorized because a recurrence was found on "XGREEN" between lines 7587 and 7588.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7578 
  A loop starting at line 7578 was blocked with block size 2.

ftn-6049 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7579 
  A loop starting at line 7579 was blocked with block size 256.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7579 
  A loop starting at line 7579 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6315 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7594 
  A loop starting at line 7594 was not vectorized because the target array (DIFF1) would require rank expansion.

ftn-6289 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7595 
  A loop starting at line 7595 was not vectorized because a recurrence was found on "ICOND" between lines 7613 and 7624.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7655 
  A divide was turned into a multiply by a reciprocal

ftn-6221 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7665 
  A loop starting at line 7665 uses a checked speculative load of "YOPT".

ftn-6221 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7665 
  A loop starting at line 7665 uses a checked speculative load of "YLL".

ftn-6221 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7665 
  A loop starting at line 7665 uses a checked speculative load of "YU".

ftn-6221 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7665 
  A loop starting at line 7665 uses a checked speculative load of "YEFAC".

ftn-6221 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7665 
  A loop starting at line 7665 uses a checked speculative load of "YH1".

ftn-6221 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7665 
  A loop starting at line 7665 uses a checked speculative load of "YH2".

ftn-6221 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7665 
  A loop starting at line 7665 uses a checked speculative load of "YSTPAR".

ftn-6221 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7665 
  A loop starting at line 7665 uses a checked speculative load of "YSTPAR".

ftn-6221 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7665 
  A loop starting at line 7665 uses a checked speculative load of "YSTPAR".

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7665 
  A loop starting at line 7665 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6230 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7784 
  A loop starting at line 7784 was replaced with multiple library calls.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7785 
  A loop starting at line 7785 was fused with the loop starting at line 7784.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7786 
  A loop starting at line 7786 was fused with the loop starting at line 7784.

ftn-6230 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7787 
  A loop starting at line 7787 was replaced with multiple library calls.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7788 
  A loop starting at line 7788 was fused with the loop starting at line 7787.

ftn-6286 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7793 
  A loop starting at line 7793 was not vectorized because it contains input/output operations at line 7835.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7805 
  A loop starting at line 7805 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7847 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7854 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7860 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7866 
  A divide was turned into a multiply by a reciprocal

ftn-6254 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7884 
  A loop starting at line 7884 was not vectorized because a recurrence was found on "TIMES" at line 7901.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7885 
  A divide was turned into a multiply by a reciprocal

ftn-6009 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7885 
  A floating point expression involving an induction variable was strength reduced by optimization.  This may cause numerical
  differences.

ftn-6074 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7885 
  An exponentiation was replaced with a faster code sequence.

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 7885 
  The call to EXTRAK was textually inlined.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7901 
  A divide was turned into a multiply by a reciprocal

ftn-6009 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7902 
  A floating point expression involving an induction variable was strength reduced by optimization.  This may cause numerical
  differences.

ftn-6289 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7911 
  A loop starting at line 7911 was not vectorized because a recurrence was found on "ITSOIL" between lines 7925 and 7932.

ftn-6289 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7912 
  A loop starting at line 7912 was not vectorized because a recurrence was found on "ITSOIL" between lines 7925 and 7932.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7916 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 7923 
  A divide was turned into a multiply by a reciprocal

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7924 
  A loop starting at line 7924 was not vectorized for an unspecified reason.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7928 
  A loop starting at line 7928 was not vectorized for an unspecified reason.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 7933 
  A loop starting at line 7933 was not vectorized for an unspecified reason.

ftn-6230 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8072 
  A loop starting at line 8072 was replaced with multiple library calls.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8073 
  A loop starting at line 8073 was fused with the loop starting at line 8072.

ftn-6286 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8078 
  A loop starting at line 8078 was not vectorized because it contains input/output operations at line 8115.

ftn-6002 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8089 
  A loop starting at line 8089 was eliminated by optimization.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8118 
  A divide was turned into a multiply by a reciprocal

ftn-6002 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8126 
  A loop starting at line 8126 was eliminated by optimization.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8127 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 8127 
  The call to EXTRAK was textually inlined.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8149 
  A loop starting at line 8149 was not vectorized because it contains a reference to a non-vector intrinsic on line 8186.

ftn-6263 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8150 
  A loop starting at line 8150 was not vectorized because it contains a reference to a non-vector intrinsic on line 8186.

ftn-6332 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8152 
  A loop starting at line 8152 was not vectorized because it does not map well onto the target architecture.

ftn-6284 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8169 
  A loop starting at line 8169 was not vectorized because it is faster in scalar mode.

ftn-6008 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8169 
  A loop starting at line 8169 was unwound.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8176 
  A loop starting at line 8176 was unrolled 4 times.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8176 
  A loop starting at line 8176 was partially vectorized.

ftn-6231 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8183 
  A statement was replaced by a library call.

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8183 
  A loop starting at line 8183 was unrolled 4 times.

ftn-6373 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8183 
  A loop starting at line 8183 with a trip count of 4 was unwound into 2 vector iterations.

ftn-6382 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8183 
  A loop starting at line 8183 was partially vector pipelined.

ftn-6381 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8183 
  A loop starting at line 8183 was vector pipelined.

ftn-6204 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8183 
  A loop starting at line 8183 was vectorized.

ftn-3001 ftn: IPA File = Sfc_SSiB.f90, Line = 8183 
  The call to VERT_INTERP was textually inlined.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8195 
  A loop starting at line 8195 was partially vectorized.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8248 
  A loop starting at line 8248 was fused with the loop starting at line 8195.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8250 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8289 
  A divide was turned into a multiply by a reciprocal

ftn-6074 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8289 
  An exponentiation was replaced with a faster code sequence.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8299 
  A divide was turned into a multiply by a reciprocal

ftn-6074 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8299 
  An exponentiation was replaced with a faster code sequence.

ftn-6010 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8305 
  A divide was turned into a multiply by a reciprocal

ftn-6005 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8364 
  A loop starting at line 8364 was unrolled 4 times.

ftn-6209 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8364 
  A loop starting at line 8364 was partially vectorized.

ftn-6230 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8368 
  A loop starting at line 8368 was replaced with multiple library calls.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8385 
  A loop starting at line 8385 was fused with the loop starting at line 8364.

ftn-6004 ftn: SCALAR File = Sfc_SSiB.f90, Line = 8392 
  A loop starting at line 8392 was fused with the loop starting at line 8368.

ftn-6254 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8402 
  A loop starting at line 8402 was not vectorized because a recurrence was found on "DZLFT" at line 8429.

ftn-6250 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8414 
  A loop starting at line 8414 was not vectorized for an unspecified reason.

ftn-6270 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8435 
  A loop starting at line 8435 was not vectorized because it contains conditional code which is more efficient if executed in
  scalar mode.

ftn-6202 ftn: VECTOR File = Sfc_SSiB.f90, Line = 8449 
  A loop starting at line 8449 was replaced by a library call.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                 C r o s s   R e f e r e n c e   for   SFC_SSIB
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name                            Storage                           Attributes
----                            -------                           ----------

1000                                                              Statement label
  Decl    8433
  Set 
  Used    8424

200                                                               FORMAT label
  Decl    6538
  Set 
  Used

2000                                                              Statement label
  Decl    3581
  Set 
  Used    3628

3000                                                              Statement label
  Decl    3651
  Set 
  Used    3689

650                                                               FORMAT label
  Decl    6540
  Set 
  Used

70                                                                Statement label
  Decl    8414
  Set 
  Used    8425

7000                                                              Statement label
  Decl    3527
  Set 
  Used    3710

8000                                                              Statement label
  Decl    6272
  Set 
  Used    6334

998                                                               FORMAT label
  Decl    5906
  Set 
  Used

999                                                               FORMAT label
  Decl    5907
  Set 
  Used

999                                                               FORMAT label
  Decl    8265
  Set 
  Used

999                                                               FORMAT label
  Decl    7946
  Set 
  Used

AA                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4271
  Set     4378
  Used    4380    4408    4409

AA                                                                REAL(KIND=8), PARAMETER
  Decl    5996
  Set 
  Used    6043

AAA                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5652
  Set     5849
  Used    5851    5852    5853

AAA_1                           Stack                             REAL(KIND=8)
  Decl    2382
  Set     2519
  Used    2594    2599

AAA_2                           Stack                             REAL(KIND=8)
  Decl    2382
  Set     2553
  Used    2594    2598

ABS                                                               Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0    2497    2596    3619    5197    5899    6017    6315    6350    6630
          6811    7524    7526    7555    7556    7557    7558    7559    7563

ABSOIL                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5648
  Set     5750    5754
  Used    5783

AH                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1135
  Set     1256
  Used    1647    1648    1651    1747

AH                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6181
  Set     6255
  Used    6301    6319    6320    6341

AIRMOD                                                            Subroutine, Module procedure, PRIVATE
  Decl     838
  Set 
  Used    3458

AK                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1134
  Set     1247
  Used    1575    1577    1637    1739

AL                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6182
  Set     6256
  Used    6304    6305    6307    6321    6322    6342

ALBEDO                                                            Subroutine, Module procedure
  Decl      87    6544
  Set 
  Used

AM                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6183
  Set     6363
  Used    6364    6365    6366    6367

ANIRB                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6553    6591
  Set     6628    6636    6641
  Used

ANIRD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6554    6592
  Set     6629    6637    6642
  Used

AP                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3854
  Set     3905    3907    3916
  Used    4040    4060    4096    4104

AREAS                           Stack                             REAL(KIND=8)
  Decl    2398
  Set     2508    2542
  Used    2509    2543

ARG                             Stack                             REAL(KIND=8)
  Decl    2778
  Set     2836    2837
  Used    2838

ARG                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3872
  Set     4039    4096
  Used    4041    4047    4097    4098

ARGG                            Stack                             REAL(KIND=8)
  Decl    8281
  Set     8305
  Used    8313

AT                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4268
  Set     4322    4364
  Used    4339    4370    4371    4392    4393    4399

ATHIRD                          Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    4309

AVFLUX                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4277
  Set     4408
  Used    4415

AVISB                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6553    6589
  Set     6626    6634    6639
  Used

AVISD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6553    6590
  Set     6627    6635    6640
  Used

AVK                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2381
  Set     2495    2498    2500    2501    2513    2529    2532    2534    2535    2547
  Used    2519    2522    2523    2553    2556    2557

B00                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6204
  Set     6291    6308
  Used    6310

B03                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6205
  Set     6294
  Used    6308    6309

B04                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6206
  Set     6295
  Used    6308    6309

B30                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6208
  Set     6301
  Used    6302    6303    6308    6312

B33                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6209
  Set     6302
  Used    6308    6309    6312

B40                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6211
  Set     6304
  Used    6308    6313

B44                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6212
  Set     6305
  Used    6308    6309    6313

BB                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4272
  Set     4380
  Used    4408    4409

BB                                                                REAL(KIND=8), PARAMETER
  Decl    5997
  Set 
  Used    6043

BBB_1                           Stack                             REAL(KIND=8)
  Decl    2383
  Set     2522
  Used    2594    2598

BBB_2                           Stack                             REAL(KIND=8)
  Decl    2383
  Set     2556
  Used    2594    2599

BEAM_NIRB                       Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     223     382
  Set 
  Used     516

BEAM_NIRD                       Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     223     383
  Set 
  Used     517

BEAM_VISB                       Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     223     380
  Set 
  Used     514

BEAM_VISD                       Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     223     381
  Set 
  Used     515

BEE                             Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     136
  Set     7202    7287
  Used    2430    2431    2449    2484    2485    2489    2499    2533    3490    4632    7147    7799    8083    8161

BEE_R4                          Stack                             REAL(KIND=4), DIMENSION(13)
  Decl    7072
  Set 
  Used    7190    7202

BP                                                                REAL(KIND=8), PARAMETER
  Decl    3889
  Set 
  Used    4047    4060    4098    4104

BPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     209     329
  Set 
  Used     541     664

BPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     917    1109
  Set 
  Used    1247    1302    1360    1386

BPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2075    2159
  Set 
  Used    2256

BPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2880    2995
  Set 
  Used    3032

BPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3105    3360
  Set 
  Used    3557    3564    3569    3570    3589    3611    3693    3714    3722

BPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4661    4946
  Set 
  Used    5024

BPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5254    5583
  Set 
  Used    5689    5857

BTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     215     276
  Set 
  Used     554     677

BTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     922    1060
  Set 
  Used    1501    1511    1798

BTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2882    2961
  Set 
  Used    3038

BTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3110    3320
  Set     3647
  Used    3698    3716

BTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4667    4887
  Set 
  Used    5029

BTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5260    5530
  Set 
  Used    5695

BTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     215     277
  Set 
  Used     554     677

BTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     922    1061
  Set 
  Used    1503    1517    1800    1830

BTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2882    2962
  Set 
  Used    3039

BTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3111    3321
  Set     3648
  Used    3698    3716

BTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4667    4888
  Set 
  Used    5030

BTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5260    5531
  Set 
  Used    5695

C0                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6207
  Set     6267    6298    6309    6310
  Used    6311    6312    6313    6352

C3                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6210
  Set     6303
  Used    6309    6312

C4                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6213
  Set     6306
  Used    6309    6313

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     219     260
  Set      588     589
  Used     701

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl     838     890
  Set 
  Used     899     902

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl     924    1047
  Set 
  Used    1180    1187    1193    1811    1813    1815    1817

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2315    2369
  Set 
  Used    2508    2542

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    2883    2951
  Set     3073    3089
  Used

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    3113    3304
  Set 
  Used    3459    3473    3474    3514    3700    3717

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    3760    3837
  Set     3984    4007    4077    4137    4149    4168    4186
  Used    3982    3995    4002    4004    4011    4117    4164    4166    4196    4197

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4671    4871
  Set 
  Used    5017    5032

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5044    5094
  Set     5167    5204    5218    5223
  Used    5166    5185    5213    5216

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5264    5514
  Set     5718
  Used    5679    5699    5716    5717    5727    5804    5869    5895

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    6386    6401
  Set 
  Used    6429    6430    6461    6465    6490    6491    6513    6514    6534    6535

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(OUT)
  Decl    6547    6565
  Set     6607    6608
  Used

CAPAC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    6654    6740
  Set 
  Used    6820    6829    6837

CAPAC0                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     224     398
  Set 
  Used     702

CAPAC0                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    6387    6406
  Set     6429    6430    6460    6464    6490    6491    6534    6535
  Used    6438    6459    6463    6477    6478    6499

CAPACI                          Stack                             REAL(KIND=8)
  Decl    3433
  Set     3469
  Used    3514

CAPACI                          Stack                             REAL(KIND=8)
  Decl    6784
  Set     6832
  Used    6837

CAPACM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     223     386
  Set 
  Used     588     589     702

CAPACM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    6387    6411
  Set     6477    6478    6513    6514
  Used    6461    6465    6479    6522

CAPACM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    6549    6572
  Set 
  Used    6607    6608

CAPACP                          Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl    3884
  Set     3997    4002
  Used    4007    4118    4130

CAPI                                                              REAL(KIND=8), PARAMETER
  Decl    1152
  Set 
  Used    1193

CBAL                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5665
  Set     5881
  Used    5899

CC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     217     287
  Set 
  Used     556     679

CC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     922    1066
  Set 
  Used    1262

CC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2882    2963
  Set 
  Used    3055

CC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3111    3328
  Set 
  Used    3698    3716

CC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3759    3842
  Set     4196
  Used

CC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4668    4898
  Set 
  Used    5016    5030

CC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5043    5099
  Set 
  Used    5142

CC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5262    5541
  Set 
  Used    5696    5726

CCC                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3881
  Set     4130    4131    4142    4143
  Used    4132    4134    4144    4146

CCC_1                           Stack                             REAL(KIND=8)
  Decl    2384
  Set     2523
  Used    2598    2599

CCC_2                           Stack                             REAL(KIND=8)
  Decl    2384
  Set     2557
  Used    2598    2599

CCI                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1136
  Set     1262
  Used    1554    1556    1563    1565    1704

CCP                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3866
  Set     4119
  Used    4121    4132    4133    4144    4145

CCT                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3867
  Set     4120
  Used    4121    4132    4133    4144    4145

CCT                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5112
  Set     5135    5142    5151
  Used    5154    5181    5190

CEDFU                           Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     102
  Set     7219
  Used    6900    7112

CEDFU1                          Heap                              REAL(KIND=8), DIMENSION(:, :, :, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     104
  Set     7221
  Used    6958    6959    6960    7114

CEDFU1_R4                       Stack                             REAL(KIND=4), DIMENSION(2, 13, 12, 6, 3)
  Decl    7089
  Set 
  Used    7217    7221

CEDFU2                          Heap                              REAL(KIND=8), DIMENSION(:, :, :, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     106
  Set     7223
  Used    6912    6913    6914    6988    6989    6990    7116

CEDFU2_R4                       Stack                             REAL(KIND=4), DIMENSION(2, 13, 12, 6, 3)
  Decl    7091
  Set 
  Used    7217    7223

CEDFU_R4                        Stack                             REAL(KIND=4), DIMENSION(13, 12, 9)
  Decl    7087
  Set 
  Used    7217    7219

CEDIR                           Heap                              REAL(KIND=8), DIMENSION(:, :, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     103
  Set     7220
  Used    6898    6899    7113

CEDIR1                          Heap                              REAL(KIND=8), DIMENSION(:, :, :, :, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     105
  Set     7222
  Used    6941    6942    6943    6947    6948    6949    6950    6951    6952    7115

CEDIR1_R4                       Stack                             REAL(KIND=4), DIMENSION(2, 13, 12, 6, 3, 3)
  Decl    7090
  Set 
  Used    7217    7222

CEDIR2                          Heap                              REAL(KIND=8), DIMENSION(:, :, :, :, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     107
  Set     7224
  Used    6909    6910    6911    6971    6972    6973    6977    6978    6979    6980    6981    6982    7117

CEDIR2_R4                       Stack                             REAL(KIND=4), DIMENSION(2, 13, 12, 6, 3, 3)
  Decl    7092
  Set 
  Used    7217    7224

CEDIR_R4                        Stack                             REAL(KIND=4), DIMENSION(13, 12, 9, 3)
  Decl    7088
  Set 
  Used    7217    7220

CETHER                          Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     111
  Set     7227
  Used    7015    7016    7017    7018    7121

CETHER_R4                       Stack                             REAL(KIND=4), DIMENSION(13, 12, 2)
  Decl    7095
  Set 
  Used    7218    7227

CG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     217     288
  Set 
  Used     557     680

CG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     923    1067
  Set 
  Used    1261

CG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2883    2964
  Set 
  Used    3056

CG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3111    3329
  Set 
  Used    3699    3717

CG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3759    3843
  Set     4198
  Used

CG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4669    4899
  Set 
  Used    5016    5030

CG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5043    5100
  Set 
  Used    5151    5230

CG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5262    5542
  Set 
  Used    5697    5726    5734

CGI                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1137
  Set     1261
  Used    1547    1548    1549    1550    1683

CHANGE                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5125
  Set     5198    5200    5202
  Used    5203    5204

CHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     213     321
  Set 
  Used     550     673

CHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2881    2984
  Set     3055
  Used

CHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3355
  Set 
  Used    3715

CHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4660    4981
  Set 
  Used    5028

CHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5043    5107
  Set 
  Used    5145

CHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5258    5575
  Set 
  Used    5688    5726    5881    5901

CHIL                            Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     160
  Set      810
  Used    7171

CHIL2                           Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     437
  Set      459
  Used

CHIL2                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4210    4252
  Set 
  Used    4378

CHIL2                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4672    4929
  Set 
  Used    5013

CHIL2                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5266    5611
  Set 
  Used    5700

CHILW                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    7455
  Set     7598    7656
  Used    7673

CHIL_FIXED                      Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     128
  Set     7194    7277
  Used     810     816    7139    7252

CHIL_GBL                        Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     165
  Set      816    7673
  Used     198     459

CHIL_R4                         Stack                             REAL(KIND=4), DIMENSION(13, 2)
  Decl    7064
  Set 
  Used    7189    7194

CHISL                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3859
  Set     3939    3941
  Used    3950

CICE                                                              REAL(KIND=8), PARAMETER
  Decl    6237
  Set 
  Used    6246

CLAI                            Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    3967    4196

CLEDFU                          Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     108
  Set     7225
  Used    6887    7118

CLEDFU_R4                       Stack                             REAL(KIND=4), DIMENSION(13, 12, 9)
  Decl    7093
  Set 
  Used    7218    7225

CLEDIR                          Heap                              REAL(KIND=8), DIMENSION(:, :, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     109
  Set     7226
  Used    6885    6886    7119

CLEDIR_R4                       Stack                             REAL(KIND=4), DIMENSION(13, 12, 9, 3)
  Decl    7094
  Set 
  Used    7218    7226

CLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     218     298
  Set 
  Used     533     559     627     682

CLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4461    4499
  Set 
  Used    4542

CLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4670    4909
  Set 
  Used    5009

CLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5263    5552
  Set 
  Used    5698

CLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6550    6577
  Set 
  Used    6617

CLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6655    6744
  Set     7035    7036
  Used

COC                             Stack                             REAL(KIND=8)
  Decl    1126
  Set     1417
  Used    1462    1468    1489    1501    1511    1513    1515

COC                             Stack                             REAL(KIND=8)
  Decl    1940
  Set     1954
  Used    1965    1966

COCT                            Stack                             REAL(KIND=8)
  Decl    1142
  Set     1822
  Used    1827

COG1                            Stack                             REAL(KIND=8)
  Decl    1128
  Set     1433    1450
  Used    1468    1499    1503    1517

COG1                            Stack                             REAL(KIND=8)
  Decl    1942
  Set     1961    1963
  Used    1966

COG2                            Stack                             REAL(KIND=8)
  Decl    1129
  Set     1441    1456
  Used    1462    1499    1517    1519    1521

COG2                            Stack                             REAL(KIND=8)
  Decl    1943
  Set     1958    1964
  Used    1961    1965

COGS1                           Stack                             REAL(KIND=8)
  Decl    1144
  Set     1824
  Used    1826    1830

COGS2                           Stack                             REAL(KIND=8)
  Decl    1145
  Set     1826
  Used    1832

COGT                            Stack                             REAL(KIND=8)
  Decl    1143
  Set     1823
  Used    1829

COLRAD                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     225     406
  Set 
  Used

COLRAD                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    7388    7443
  Set 
  Used    7519

COLRAD2                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     789     795
  Set 
  Used     828

COND                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     417
  Set 
  Used     752

COND                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6073    6170
  Set     6268    6351
  Used

CONSTANTS                                                         Module
  Decl
  Set 
  Used      54

COPYSURFACEDATA                                                   Subroutine, Module procedure
  Decl      97     789
  Set 
  Used

COS2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     223     384
  Set 
  Used     518

COSZ                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     210     340
  Set      509     518     615
  Used     535     543     619     629     641     666

COSZ                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4209    4264
  Set 
  Used    4291

COSZ                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4662    4956
  Set 
  Used    5012

COSZ                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5255    5594
  Set 
  Used    5690

COSZ                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6552    6585
  Set 
  Used    6619

COSZ                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6657    6752
  Set 
  Used    6803

COVER                           Stack                             REAL(KIND=8)
  Decl    7758
  Set     7825
  Used    7885

COVER                           Stack                             REAL(KIND=8)
  Decl    8014
  Set     8108
  Used    8132

COVER                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    8268    8275
  Set 
  Used    8334

CP                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3855
  Set     3908    3922
  Used    4040    4060    4096    4104

CP                              Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    1168    1952    3722    6241    6291    6294    6298    6301    6317    6320    6338    6341

CSOIL                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3860
  Set     3950
  Used    3972    4198

CT                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5918    5983
  Set     6052
  Used    6058

CT                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6189
  Set 
  Used    6276

CTI                             Stack                             REAL(KIND=8)
  Decl    2181
  Set     2277    2288
  Used    2298

CTI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5918    5982
  Set     6045    6049
  Used    6052

CTI                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6188
  Set 
  Used    6276

CTNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     210     338
  Set 
  Used     543     666

CTNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2075    2163
  Set     2234    2239
  Used    2277    2288

CTNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3106    3368
  Set 
  Used    3557    3564    3589

CTNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4662    4954
  Set 
  Used    5025

CTNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5255    5592
  Set 
  Used    5690

CTNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5918    5981
  Set     6031
  Used    6045

CTNI                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6187
  Set 
  Used    6276

CU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     210     336
  Set 
  Used     542     665

CU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2075    2161
  Set     2290
  Used    2297

CU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3106    3366
  Set 
  Used    3557    3564    3589

CU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4661    4952
  Set 
  Used    5025

CU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5255    5590
  Set 
  Used    5689    5834

CU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5918    5980
  Set     6051
  Used    6056    6057

CU                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6186
  Set 
  Used    6276

CUI                             Stack                             REAL(KIND=8)
  Decl    2178
  Set     2276    2287
  Used    2290

CUI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5918    5979
  Set     6043    6048
  Used    6049    6051

CUI                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6185
  Set 
  Used    6276

CUNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     210     337
  Set 
  Used     543     666

CUNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2075    2162
  Set     2227
  Used    2228    2276    2287

CUNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3106    3367
  Set 
  Used    3557    3564    3589

CUNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4662    4953
  Set 
  Used    5025

CUNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5255    5591
  Set 
  Used    5690

CUNI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5918    5978
  Set     6030
  Used    6031    6043    6048

CUNI                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6184
  Set 
  Used    6276

CUT                                                               Subroutine, Module procedure, PRIVATE
  Decl    1867
  Set 
  Used       0    3604    3653

CW                              Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    3995    4118    4131    4143    4196    4197

D                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     425
  Set      479
  Used     539     662

D                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     838     883
  Set      904
  Used     905

D                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2076    2141
  Set 
  Used    2227    2230    2231    2233    2236    2238    2260    2268    2269    2279    2280

D                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3114    3285
  Set     3734
  Used    3459    3558    3565    3590

D                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4664    4933
  Set 
  Used    5033

D                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5253    5614
  Set 
  Used    5692

D1                              Stack                             REAL(KIND=8)
  Decl    1130
  Set     1283
  Used    1294    1302

D1                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3005
  Set     3027
  Used    3032

D1                              Stack                             REAL(KIND=8)
  Decl    5667
  Set     5855
  Used    5857

D1I                             Stack                             REAL(KIND=8)
  Decl    1132
  Set     1294
  Used    1339    1345    1360    1368    1375    1386

D1X                             Stack                             REAL(KIND=8)
  Decl    3891
  Set     3903
  Used    3950

D2                              Stack                             REAL(KIND=8)
  Decl    1131
  Set     1462
  Used    1470    1501    1503    1509

D2                              Stack                             REAL(KIND=8)
  Decl    1944
  Set     1965
  Used    1970

D2                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2768
  Set     2804
  Used    2808

DD                                                                REAL(KIND=8), PARAMETER
  Decl    6232
  Set 
  Used    6246

DEADQM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     919    1105
  Set     1509
  Used    1515    1521    1799    1801    1831

DEADQM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2880    2991
  Set 
  Used    3034

DEADQM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3105    3396
  Set 
  Used    3695    3714

DEADQM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4658    5003
  Set 
  Used    5024

DEADQM                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5645
  Set 
  Used    5686

DEADTC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     919    1104
  Set     1501
  Used    1511    1519    1798    1801    1831

DEADTC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2880    2990
  Set 
  Used    3033

DEADTC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3105    3395
  Set 
  Used    3695    3714

DEADTC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4658    5002
  Set 
  Used    5024

DEADTC                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5644
  Set 
  Used    5686

DEADTG                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     919    1103
  Set     1503
  Used    1513    1517    1799    1800    1831

DEADTG                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2880    2989
  Set 
  Used    3033

DEADTG                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3105    3394
  Set 
  Used    3695    3714

DEADTG                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4657    5001
  Set 
  Used    5024

DEADTG                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5643
  Set 
  Used    5685

DEFAC                           Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     155
  Set      805
  Used    7166

DEFAC2                          Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     445
  Set      463
  Used

DEFAC2                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2696    2763
  Set 
  Used    2852

DEFAC2                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3115    3402
  Set 
  Used    3602

DEFAC2                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4673    4940
  Set 
  Used    5034

DEFAC2                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5267    5621
  Set 
  Used    5701

DEFAC_FIXED                     Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     132
  Set     7198    7281
  Used     805     820    7143    7256

DEFAC_GBL                       Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     169
  Set      820    7677
  Used     202     463

DEFAC_R4                        Stack                             REAL(KIND=4), DIMENSION(13, 2)
  Decl    7068
  Set 
  Used    7189    7198

DEFICIT                         Stack                             REAL(KIND=8)
  Decl    2408
  Set     2662    2668
  Used    2663    2664    2669    2670

DELSIG                          Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl     183     186
  Set 
  Used     191

DELSIG                          Dummy Arg                         REAL(KIND=8), DIMENSION(1), INTENT(IN)
  Decl     225     408
  Set 
  Used     749

DELSIG                          Dummy Arg                         REAL(KIND=8), DIMENSION(1), INTENT(IN)
  Decl    6072    6163
  Set 
  Used    6241    6242    6243

DELTG                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6761
  Set     6809
  Used    6811

DENOM                           Stack                             REAL(KIND=8)
  Decl    2403
  Set     2594
  Used    2596    2597

DEP                             Stack                             REAL(KIND=8), DIMENSION(3)
  Decl    2774
  Set     2818    2819    2820    2821    2824    2828
  Used    2831    2832

DEP                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5653
  Set     5768    5770
  Used    5771

DEPCOV                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6763
  Set     6820    6821
  Used    6823

DEWC                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3415
  Set     3662
  Used    3664

DEWG                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3416
  Set     3663
  Used    3665

DICE                                                              REAL(KIND=8), PARAMETER
  Decl    6234
  Set 
  Used    6245

DIFF                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3879
  Set     4117
  Used    4120    4121    4131    4132    4133    4143    4144    4145

DIFF1                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    7459
  Set     7606    7617    7620
  Used    7628

DIFF2                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    7460
  Set     7607    7618    7621
  Used    7628

DIFSL                                                             REAL(KIND=8), PARAMETER
  Decl    3890
  Set 
  Used    3903

DIV                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2377
  Set     2496    2530
  Used    2497    2499    2531    2533

DIV                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5650
  Set     5767
  Used    5771

DLWBOT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     223     385
  Set 
  Used     521     653

DPDW                            Stack                             REAL(KIND=8)
  Decl    2395
  Set     2490
  Used    2518    2552

DPDWDZ                          Stack                             REAL(KIND=8)
  Decl    2402
  Set     2518    2552
  Used    2519    2522    2523    2524    2553    2556    2557    2558

DQG0                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6203
  Set     6257
  Used    6292    6304

DQM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     218     294
  Set 
  Used     558     681

DQM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     923    1072
  Set     1792
  Used    1799    1801    1831

DQM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2883    2968
  Set 
  Used    3034

DQM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3112    3334
  Set     3725
  Used    3699    3708    3717    3729

DQM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4669    4905
  Set 
  Used    5031

DQM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5263    5548
  Set 
  Used    5697

DQM                             Stack                             REAL(KIND=8)
  Decl    6229
  Set     6344
  Used    6346

DQMDT                           Stack                             REAL(KIND=8)
  Decl    3436
  Set     3723
  Used    3725    3727

DQMDT                           Stack                             REAL(KIND=8)
  Decl    6230
  Set     6342
  Used    6344

DRAG                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     214     325
  Set 
  Used     551     674

DRAG                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5259    5579
  Set     5834
  Used    5849

DROP                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2770
  Set     2851
  Used    2852

DSSIB                           Stack                             REAL(KIND=8)
  Decl    7763
  Set     7860
  Used    7866    7892    7894

DSSIB                           Stack                             REAL(KIND=8)
  Decl    8019
  Set     8119
  Used    8120    8137    8138

DT                              Stack                             REAL(KIND=8)
  Decl    7780
  Set     7892
  Used    7901

DT                              Stack                             REAL(KIND=8)
  Decl    8028
  Set     8137
  Used    8140

DTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     217     291
  Set 
  Used     557     680

DTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     923    1069
  Set     1790
  Used    1793    1794    1798    1801    1831    1841    1842

DTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2883    2965
  Set 
  Used    3025    3033    3038    3055

DTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3112    3331
  Set 
  Used    3699    3705    3717

DTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4669    4902
  Set 
  Used    5031

DTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5043    5102
  Set 
  Used    5144

DTC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5262    5545
  Set 
  Used    5697    5707    5726

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl     220     234
  Set 
  Used     564     687     748

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl     924    1028
  Set 
  Used    1166    1167    1313    1321    1489    1499    1547    1548    1549    1550    1554    1556    1563    1565    1575
          1577    1637    1647    1648    1651    1789    1790    1791    1792    1793    1794    1810    1814    1827    1829
          1833

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    2315    2360
  Set 
  Used    2414    2415

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    2884    2938
  Set 
  Used    3051

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    3114    3277
  Set 
  Used    3700    3718    3721    3724    3725

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    3760    3818
  Set 
  Used    4093

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    4672    4860
  Set 
  Used    5017    5033

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    5044    5084
  Set 
  Used    5136    5182    5190

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    5265    5491
  Set 
  Used    5700    5727    5731    5804    5851    5881    5882

DTC3X                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    6071    6160
  Set 
  Used    6246    6249    6312    6313    6320    6322    6329    6330    6341    6342    6343    6344    6365    6367

DTC3XI                          Stack                             REAL(KIND=8)
  Decl    1156
  Set     1167
  Used    1683    1704    1739    1747

DTC3XI                          Stack                             REAL(KIND=8)
  Decl    3011
  Set     3051
  Used    3055    3056

DTC3XI                          Stack                             REAL(KIND=8)
  Decl    5132
  Set     5136
  Used    5154    5230

DTF                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5118
  Set     5180
  Used    5181

DTF2                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5123
  Set     5190
  Used    5191

DTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     217     292
  Set 
  Used     558     681

DTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     923    1070
  Set     1789
  Used    1793    1794    1799    1800    1830    1831    1841    1842

DTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2883    2966
  Set 
  Used    3024    3034    3039    3056

DTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3112    3332
  Set 
  Used    3699    3706    3717

DTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4669    4903
  Set 
  Used    5031

DTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5043    5103
  Set 
  Used    5153    5154    5230

DTG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5262    5546
  Set 
  Used    5697    5708    5726

DTI                             Stack                             REAL(KIND=8)
  Decl    6226
  Set     6249
  Used    6302    6305

DTIME1                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5126
  Set     5181
  Used    5182    5190

DTIME2                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5127
  Set     5189
  Used    5190

DTM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     217     293
  Set 
  Used     558     681

DTM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     923    1071
  Set     1791
  Used    1793    1794

DTM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2883    2967
  Set 
  Used    3026

DTM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3112    3333
  Set     3724
  Used    3699    3707    3717    3728

DTM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4669    4904
  Set 
  Used    5031

DTM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5262    5547
  Set 
  Used    5697

DTM                             Stack                             REAL(KIND=8)
  Decl    6227
  Set     6343
  Used    6345

DTMDT                           Stack                             REAL(KIND=8)
  Decl    3435
  Set     3722
  Used    3724    3726

DTMDT                           Stack                             REAL(KIND=8)
  Decl    6228
  Set     6341
  Used    6343

DTS                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5114
  Set     5144    5153
  Used    5160    5184

DW                              Stack                             REAL(KIND=8)
  Decl    7764
  Set     7866
  Used    7885

DW                              Stack                             REAL(KIND=8)
  Decl    8020
  Set     8120
  Used    8128

DW                              Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    8268    8271
  Set 
  Used    8289    8299

DZ                              Stack                             REAL(KIND=8)
  Decl    7107
  Set     7312
  Used    7315    7321

DZCUT                           Stack                             REAL(KIND=8)
  Decl    7108
  Set     7315    7321
  Used    7316    7322

DZLFT                           Stack                             REAL(KIND=8)
  Decl    8358
  Set     8400    8423    8429
  Used    8406    8408

DZM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     209     331
  Set 
  Used     541     664

DZM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2075    2160
  Set 
  Used    2227    2229    2230    2236    2238    2260    2268    2269    2271    2279    2280    2282

DZM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3106    3362
  Set 
  Used    3557    3564    3589

DZM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4661    4948
  Set 
  Used    5025

DZM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5254    5585
  Set 
  Used    5689

DZM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5919    5987
  Set     6029
  Used    6030    6038

DZM                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6194
  Set 
  Used    6277

EA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     215     273
  Set 
  Used     553     676

EA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     921    1057
  Set     1470
  Used    1489    1499    1798    1800    1831

EA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    1869    1922
  Set     1970
  Used

EA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2693    2755
  Set 
  Used    2851

EA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2882    2958
  Set 
  Used    3033

EA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3110    3317
  Set     3547
  Used    3585    3595    3599    3606    3619    3655    3660    3661    3697    3716

EA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4666    4884
  Set 
  Used    5029

EA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5260    5527
  Set 
  Used    5694

EAEN                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3004
  Set     3033
  Used

EC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     212     311
  Set 
  Used     547     670

EC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     920    1082
  Set     1489    1828    1849
  Used    1704    1747

EC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3108    3345
  Set 
  Used    3696

EC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4659    4971
  Set 
  Used    5027

EC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5257    5565
  Set 
  Used    5687

ECDQM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     919    1102
  Set     1515
  Used    1565    1651

ECDQM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3105    3393
  Set 
  Used    3695

ECDQM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4657    5000
  Set 
  Used    5024

ECDQM                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5642
  Set 
  Used    5685

ECDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     919    1101
  Set     1511
  Used    1556    1648

ECDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3105    3392
  Set 
  Used    3695

ECDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4657    4999
  Set 
  Used    5024

ECDTC                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5641
  Set 
  Used    5685

ECDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     919    1100
  Set     1513
  Used    1554    1647

ECDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3105    3391
  Set 
  Used    3695

ECDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4657    4998
  Set 
  Used    5024

ECDTG                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5640
  Set 
  Used    5685

ECF                             Stack                             REAL(KIND=8)
  Decl    1140
  Set     1843
  Used    1845

ECF                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3413
  Set     3660    3664
  Used

ECI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     212     307
  Set 
  Used     546     669

ECI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     920    1078
  Set     1810    1813    1847
  Used    1811    1828    1846

ECI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2880    2973
  Set     3067
  Used    3066    3073    3077

ECI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3107    3341
  Set 
  Used    3696    3714

ECI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4658    4967
  Set 
  Used    5026

ECI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5257    5561
  Set 
  Used    5686    5881    5902

ECIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     213     315
  Set 
  Used     548     671

ECIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     921    1086
  Set     1811
  Used    1812

ECIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3108    3349
  Set 
  Used    3697

ECIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4659    4975
  Set 
  Used    5027

ECIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5258    5569
  Set 
  Used    5687

ECMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     213     317
  Set 
  Used     549     672

ECMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2881    2980
  Set     3077
  Used    3094

ECMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3351
  Set 
  Used    3715

ECMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4660    4977
  Set 
  Used    5028

ECMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5258    5571
  Set 
  Used    5688

ECPOT                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1138
  Set     1798
  Used    1810    1827    1843

ECT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     211     306
  Set 
  Used     546     669

ECT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     920    1077
  Set     1827    1848
  Used    1828    1846

ECT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2880    2972
  Set     3068
  Used    3066    3067    3077

ECT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3107    3340
  Set 
  Used    3696    3714

ECT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4658    4966
  Set 
  Used    5026

ECT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5256    5560
  Set 
  Used    5686    5750    5881    5902

EE                                                                REAL(KIND=8), PARAMETER
  Decl    6000
  Set 
  Used    6042

EEE                             Stack                             REAL(KIND=8)
  Decl    3434
  Set     3498
  Used    3508

EF                              Stack                             REAL(KIND=8), DIMENSION(<exp>, 3)
  Decl    5647
  Set     5759    5760    5771    5777    5778
  Used    5775    5783

EFT                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5651
  Set     5775    5776
  Used    5777    5778

EG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     212     312
  Set 
  Used     547     670

EG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     920    1083
  Set     1499    1834    1856
  Used    1683    1747

EG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2881    2977
  Set 
  Used    3043

EG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3108    3346
  Set 
  Used    3696    3715

EG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4659    4972
  Set 
  Used    5027

EG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5257    5566
  Set 
  Used    5687

EGDQM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     919    1099
  Set     1521
  Used    1550    1651

EGDQM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3104    3390
  Set 
  Used    3695

EGDQM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4657    4997
  Set 
  Used    5023

EGDQM                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5639
  Set 
  Used    5685

EGDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     919    1098
  Set     1519
  Used    1548    1648

EGDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3104    3389
  Set 
  Used    3695

EGDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4657    4996
  Set 
  Used    5023

EGDTC                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5638
  Set 
  Used    5685

EGDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     919    1097
  Set     1517
  Used    1547    1647

EGDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3104    3388
  Set 
  Used    3695

EGDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4657    4995
  Set 
  Used    5023

EGDTG                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5637
  Set 
  Used    5685

EGF                             Stack                             REAL(KIND=8)
  Decl    1141
  Set     1844
  Used    1851

EGF                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3414
  Set     3661    3665
  Used

EGI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     212     309
  Set 
  Used     547     670

EGI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     920    1080
  Set     1814    1817    1853
  Used    1815    1834    1852

EGI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2880    2975
  Set     3083
  Used    3043    3082    3089    3090

EGI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3108    3343
  Set 
  Used    3696    3714

EGI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4658    4969
  Set 
  Used    5027

EGI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5257    5563
  Set 
  Used    5686    5882    5902

EGIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     213     316
  Set 
  Used     548     671

EGIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     921    1087
  Set     1815
  Used    1816

EGIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3108    3350
  Set 
  Used    3697

EGIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4659    4976
  Set 
  Used    5027

EGIDIF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5258    5570
  Set 
  Used    5687

EGMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     213     318
  Set 
  Used     549     672

EGMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2881    2981
  Set     3090
  Used    3094

EGMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3352
  Set 
  Used    3715

EGMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4660    4978
  Set 
  Used    5028

EGMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5258    5572
  Set 
  Used    5688

EGPOT                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1139
  Set     1800
  Used    1814    1829    1844

EGS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     212     310
  Set 
  Used     547     670

EGS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     920    1081
  Set     1830    1833    1855
  Used    1834    1852

EGS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2880    2976
  Set     3043
  Used    3090

EGS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3108    3344
  Set 
  Used    3696    3714

EGS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4659    4970
  Set 
  Used    5027

EGS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5257    5564
  Set 
  Used    5687    5742    5882    5902

EGT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     212     308
  Set 
  Used     546     669

EGT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     920    1079
  Set     1829    1854
  Used    1834    1852

EGT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2880    2974
  Set     3044    3084
  Used    3082    3083    3090

EGT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3108    3342
  Set 
  Used    3696    3714

EGT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4658    4968
  Set 
  Used    5027

EGT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5257    5562
  Set 
  Used    5686    5754    5882    5902

EKAT                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4275
  Set     4400
  Used    4425    4431

EM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     209     332
  Set 
  Used     541     664

EM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     917    1111
  Set 
  Used    1468

EM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1868    1930
  Set 
  Used    1966

EM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3106    3363
  Set 
  Used    3594    3605    3654    3693

EM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4661    4949
  Set 
  Used    5025

EM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5254    5586
  Set 
  Used    5689

ENDWB                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5664
  Set     5866
  Used    5892    5894

EPSFAC                          Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    1509    3547

EPSFLT                          Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    6388    6392
  Set 
  Used    6443    6444    6445    6447    6448    6451    6454    6457    6461    6465

EPSFLT                          Use assoc                         REAL(KIND=8), From module OPTIONS, PRIVATE, SAVE
  Decl
  Set 
  Used     703     761     763     764

EQUDEP                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3876
  Set     4093
  Used    4096    4105

ESAV                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3423
  Set     3585
  Used    3619

ESTARC                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3006
  Set     3038
  Used

ESTARG                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3007
  Set     3039
  Used

ETC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     215     274
  Set 
  Used     553     676

ETC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     922    1058
  Set 
  Used    1468    1489    1798

ETC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1869    1923
  Set 
  Used    1966

ETC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2882    2959
  Set 
  Used    3038

ETC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3110    3318
  Set     3535    3645
  Used    3595    3606    3655    3660    3698    3716

ETC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4667    4885
  Set 
  Used    5029

ETC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5260    5528
  Set 
  Used    5695

ETG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     215     275
  Set 
  Used     553     676

ETG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     922    1059
  Set 
  Used    1468    1499    1800    1830

ETG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1869    1924
  Set 
  Used    1966

ETG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2882    2960
  Set 
  Used    3039

ETG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3110    3319
  Set     3536    3646
  Used    3595    3606    3655    3661    3698    3716

ETG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4667    4886
  Set 
  Used    5029

ETG                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5260    5529
  Set 
  Used    5695

ETMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     213     319
  Set 
  Used     549     672

ETMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2881    2982
  Set     3094
  Used

ETMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3353
  Set 
  Used    3715    3723

ETMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4660    4979
  Set 
  Used    5028

ETMASS                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5258    5573
  Set 
  Used    5688    5870    5895

ETP                             Stack                             REAL(KIND=8)
  Decl    7775
  Set     7918    7921    7923
  Used    7926

EVAP                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     225     410
  Set 
  Used     750

EVAP                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6072    6165
  Set     6318    6339
  Used    6321    6342

EXCESS                          Stack                             REAL(KIND=8)
  Decl    2407
  Set     2638    2644    2650
  Used    2639    2640    2645    2646    2651    2652

EXP                                                               Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0       0    2431    2453    2485    2808    2851
          3490    3535    3645    3647    4021    4060    4104    4388    4390    4392    4393    4400    4632    6043    6045
          6048    6257    7032    7652    7847    7854    8117    8118    8313

EXPCUT                          Static offset=0                   REAL(KIND=8), PRIVATE, SAVE
  Decl      99
  Set      190
  Used    7030

EXTK                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl     218     296
  Set 
  Used

EXTK                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(IN)
  Decl    3759    3846
  Set 
  Used    4021

EXTK                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl    4209    4260
  Set     4303
  Used    4370    4371    4388    4390

EXTK                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl    4670    4907
  Set 
  Used    5012    5016

EXTK                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl    5263    5550
  Set 
  Used    5698

EXTK                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl    6549    6575
  Set 
  Used

EXTK                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl    6655    6742
  Set     7004    7005    7013    7014    7015    7016    7017    7018
  Used    7029

EXTRAK                                                            Subroutine, Module procedure, PRIVATE
  Decl    8268
  Set 
  Used       0    8127

F                               Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4266
  Set     4291
  Used    4408

F                               Stack                             REAL(KIND=8)
  Decl    6008
  Set     6042    6047
  Used    6043    6048

F                               Stack                             REAL(KIND=8)
  Decl    6597
  Set     6631
  Used    6632    6633

F                               Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6760
  Set     6803
  Used    6886    6898    6899    6923    6953    6983    7013    7014

F0001                           Stack                             REAL(KIND=8)
  Decl    7105
  Set     7234
  Used    7239

FAC                             Stack                             REAL(KIND=8)
  Decl    3410
  Set     3484    3485    3721
  Used    3486    3490    3722    3723

FAC1                            Stack                             REAL(KIND=8)
  Decl    1147
  Set     1396
  Used    1397    1398    1399

FAC1                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6768
  Set     7033
  Used    7035    7036    7038    7042

FAC2                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6769
  Set     7034
  Used    7036    7037    7038    7043

FACKS                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3008
  Set     3064    3065    3069    3080    3081    3085
  Used    3073    3077    3089    3090

FACMOD                          Stack                             REAL(KIND=8)
  Decl    7776
  Set     7919
  Used    7930

FACT                            Stack                             REAL(KIND=8), DIMENSION(13, <exp>)
  Decl    7733
  Set     7786    7904
  Used    7930

FACT                            Stack                             REAL(KIND=8), DIMENSION(13, <exp>)
  Decl    7987
  Set     8071    8143
  Used

FACTG                                                             REAL(KIND=8), PARAMETER
  Decl    2046
  Set 
  Used    2064

FACTOR                          Stack                             REAL(KIND=8)
  Decl    7779
  Set 
  Used    7886    7892    7904

FACTOR                          Stack                             REAL(KIND=8)
  Decl    8027
  Set 
  Used    8136    8137    8143

FACTOR                          Dummy Arg                         REAL(KIND=8), INTENT(INOUT)
  Decl    8269    8279
  Set     8334    8335
  Used

FAH                             Stack                             REAL(KIND=8)
  Decl    1158
  Set     1169
  Used    1256

FAK                             Stack                             REAL(KIND=8)
  Decl    1157
  Set     1168
  Used    1247

FC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     211     347
  Set 
  Used     545     668

FC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     918    1118
  Set 
  Used    1411    1843

FC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1868    1935
  Set 
  Used    1953

FC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3107    3375
  Set     3519    3632    3676    3679    3682
  Used    3594    3605    3654    3662    3694

FC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4663    4962
  Set 
  Used    5026

FC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5256    5601
  Set 
  Used    5691

FCAP                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5121
  Set     5185    5187
  Used    5189    5192    5197    5200

FCON                            Stack                             REAL(KIND=8)
  Decl    4282
  Set     4309
  Used    4409

FD                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2771
  Set     2852    2853
  Used    2865

FF                                                                REAL(KIND=8), PARAMETER
  Decl    6001
  Set 
  Used    6044

FG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     211     348
  Set 
  Used     545     668

FG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     918    1119
  Set 
  Used    1407    1421    1423    1821    1844

FG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1868    1936
  Set 
  Used    1955    1956

FG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3107    3376
  Set     3520    3633    3677    3680    3683
  Used    3594    3605    3654    3663    3694

FG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4663    4963
  Set 
  Used    5026

FG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5256    5602
  Set 
  Used    5691

FIH                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2044
  Set     2063
  Used    2065

FILTA                           Use assoc                         REAL(KIND=8), From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     761     763     764

FLAGSCOV                        Stack                             LOGICAL, DIMENSION(<exp>)
  Decl    6795
  Set     6879    6891
  Used    6884    6894

FLAGTYP                         Stack                             LOGICAL, DIMENSION(<exp>)
  Decl    6794
  Set     6856    6862
  Used    6872

FLIP                            Stack                             REAL(KIND=8)
  Decl    7453
  Set     7549    7550
  Used    7555    7556    7557    7558    7559

FLUX                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5115
  Set     5145    5154
  Used    5181    5182    5189    5190

FLUXEF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     214     323
  Set 
  Used     550     673

FLUXEF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5043    5109
  Set     5230
  Used

FLUXEF                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5259    5577
  Set 
  Used    5726    5734

FMELT                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6762
  Set     6810    6812
  Used    6846

FNAMESIBALB                     Static offset=64                  CHARACTER(200), PRIVATE, SAVE
  Decl     177
  Set      194
  Used    7185

FNAMESIBALB_IN                  Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     183     189
  Set 
  Used     194

FNAMESIBVEG                     Static offset=1664                CHARACTER(200), PRIVATE, SAVE
  Decl     176
  Set      193
  Used    7177

FNAMESIBVEG_IN                  Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     183     188
  Set 
  Used     193

FP                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2772
  Set     2838    2839    2840    2841
  Used    2839    2842

FP1                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2693    2735
  Set     2842
  Used    2865

FP1                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3427
  Set 
  Used    3599

FPI                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3858
  Set     3927    4021
  Used    4024    4040    4060

FREEZE                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3880
  Set     4133    4134    4145    4146
  Used    4136    4137    4148    4149

FSC                                                               REAL(KIND=8), PARAMETER
  Decl    2185
  Set 
  Used    2281    2283    2285

FT                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2769
  Set     2806    2811    2812
  Used    2813

FT1                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2693    2734
  Set     2813
  Used    2865

FT1                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3426
  Set 
  Used    3599

FTC                                                               REAL(KIND=8), PARAMETER
  Decl    2186
  Set 
  Used    2272    2274

FTEMP                           Stack                             REAL(KIND=8)
  Decl    4285
  Set     4399
  Used    4400

FTPD                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2773
  Set     2865
  Used    2866

FTT                             Stack                             REAL(KIND=8)
  Decl    2200
  Set     2272    2274    2283    2285
  Used    2277    2288

FVC                                                               REAL(KIND=8), PARAMETER
  Decl    2187
  Set 
  Used    2270

FVV                             Stack                             REAL(KIND=8)
  Decl    2199
  Set     2270    2281
  Used    2276    2287

FX                              Stack                             REAL(KIND=8)
  Decl    8002
  Set     8250
  Used    8251    8252

FYSIKS                                                            Subroutine, Module procedure
  Decl      83    5253
  Set 
  Used       0     661

G                               Stack                             REAL(KIND=8)
  Decl    6009
  Set     6044
  Used    6045

G2                              Stack                             REAL(KIND=8)
  Decl    2190
  Set     2210
  Used    2234    2239    2244    2272    2274    2283    2285

GAMMA                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4267
  Set     4352
  Used    4415    4425

GASR                            Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     191    2207    6240    7312

GB100                           Stack                             REAL(KIND=8)
  Decl    6220
  Set     6243
  Used    6363

GBAL                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5666
  Set     5882
  Used    5899

GBY100                          Stack                             REAL(KIND=8)
  Decl    5661
  Set     5826
  Used    5849

GBYCP                           Stack                             REAL(KIND=8)
  Decl    6218
  Set     6241
  Used    6255

GBYHL                           Stack                             REAL(KIND=8)
  Decl    6217
  Set     6242
  Used    6256

GG                                                                REAL(KIND=8), PARAMETER
  Decl    6002
  Set 
  Used    6030

GICE                            Stack                             REAL(KIND=8)
  Decl    6222
  Set     6245
  Used    6293    6300    6351

GLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     218     299
  Set 
  Used     534     559     628     682

GLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4461    4500
  Set 
  Used    4543

GLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4670    4910
  Set 
  Used    5009

GLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5263    5553
  Set 
  Used    5698

GLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6550    6578
  Set 
  Used    6617

GLOSS                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6655    6745
  Set     7037    7038
  Used

GLSM_SLZ                                                          REAL(KIND=8), PARAMETER, DIMENSION(0:20)
  Decl    8065
  Set 
  Used

GLSM_SLZ                        Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl    8343    8350
  Set 
  Used    8365

GLSM_TZDEP                      Stack                             REAL(KIND=8), DIMENSION(0:3)
  Decl    7993
  Set     8166    8170
  Used    8185    8250

GLSM_W                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(IN)
  Decl    7961    7983
  Set 
  Used    8177

GLSM_W1D                        Stack                             REAL(KIND=8), DIMENSION(0:20)
  Decl    7992
  Set     8177
  Used

GLSM_W_SIB                      Stack                             REAL(KIND=8), DIMENSION(0:3)
  Decl    7994
  Set     8167    8171
  Used    8188    8196    8251    8252

GLSM_W_SIB                      Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    8345    8352
  Set     8450
  Used

GL_SM                           Dummy Arg                         REAL(KIND=8), DIMENSION(:), INTENT(IN)
  Decl    8344    8351
  Set 
  Used    8386

GMQ                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl     209     334
  Set      577     578     579
  Used     723

GMQ                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(IN)
  Decl     917    1113
  Set 
  Used    1651    1747

GMQ                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    3106    3365
  Set     3727
  Used    3693    3723

GMQ                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    4661    4951
  Set 
  Used    5025

GMQ                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    5254    5588
  Set 
  Used    5689

GMT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl     209     333
  Set      574     575     576
  Used     722

GMT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(IN)
  Decl     917    1112
  Set 
  Used    1637    1739

GMT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    3106    3364
  Set     3726
  Used    3693    3722

GMT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    4661    4950
  Set 
  Used    5025

GMT                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    5254    5587
  Set 
  Used    5689

GMU                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 4), INTENT(INOUT)
  Decl     210     335
  Set      580     581     582     583
  Used     724     725

GMU                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 4), INTENT(INOUT)
  Decl    5255    5589
  Set     5851    5852    5853
  Used

GPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     222     365
  Set 
  Used     748

GPS                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6071    6158
  Set 
  Used    6254    6255    6256    6258    6363

GQ                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl     222     362
  Set 
  Used     573     747

GQ                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6071    6157
  Set     6281    6330    6349
  Used    6260    6299    6307    6318    6339    6346

GQSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6199
  Set     6260
  Used    6281    6349

GR100                           Stack                             REAL(KIND=8)
  Decl    6219
  Set     6240
  Used    6254

GRAV                            Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     191    1168    1169    2260    3468    3721    5826    6038    6241    6242    6243    6244    7312

GREEN                           Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     154
  Set      802
  Used    7165

GREEN2                          Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     436
  Set      458
  Used

GREEN2                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4210    4251
  Set 
  Used    4444

GREEN2                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4672    4928
  Set 
  Used    5013

GREEN2                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5266    5610
  Set 
  Used    5700

GREEN_FIXED                     Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     141
  Set     7207    7239
  Used     802     815    7152    7268

GREEN_GBL                       Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     164
  Set      815    7672
  Used     197     458

GREEN_R4                        Stack                             REAL(KIND=4), DIMENSION(13, 12, 2)
  Decl    7077
  Set 
  Used    7191    7207

GRIB                            Stack                             REAL(KIND=8)
  Decl    2196
  Set     2267
  Used    2270    2272    2274

GRLF                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    7458
  Set     7600    7654
  Used    7655    7672

GRZ2                            Stack                             REAL(KIND=8)
  Decl    2198
  Set     2269
  Used    2272    2274

GRZL                            Stack                             REAL(KIND=8)
  Decl    2197
  Set     2268
  Used    2272

GSWP_SOIL_INPUT_DATA            Static offset=0                   REAL(KIND=8), DIMENSION(10, 12), SAVE, Initialized
  Decl    7331
  Set 
  Used

GT                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl     222     361
  Set 
  Used     572     747

GT                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5917    5973
  Set 
  Used    6029    6035

GT                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6071    6156
  Set     6280    6329    6348
  Used    6254    6259    6275    6298    6303    6317    6338    6345

GTSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6198
  Set     6259
  Used    6280    6348

GU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl     222     363
  Set 
  Used     746

GU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5917    5971
  Set 
  Used    6027

GU                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6071    6154
  Set 
  Used    6275    6361    6376

GV                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl     222     364
  Set 
  Used     747

GV                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5917    5972
  Set 
  Used    6027

GV                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6071    6155
  Set 
  Used    6275    6362    6377

GXX                             Stack                             REAL(KIND=8)
  Decl    3432
  Set     3468
  Used    3498

HC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     212     313
  Set 
  Used     548     671

HC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     920    1084
  Set     1313    1793    1812    1846
  Used    1704    1739

HC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2881    2978
  Set 
  Used    3095

HC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3108    3347
  Set 
  Used    3696    3715

HC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4659    4973
  Set 
  Used    5027

HC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5257    5567
  Set 
  Used    5687    5881

HCDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     918    1095
  Set     1339
  Used    1556    1577    1793

HCDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3104    3386
  Set 
  Used    3694

HCDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4656    4993
  Set 
  Used    5023

HCDTC                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5635
  Set 
  Used    5684

HCDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     918    1094
  Set     1345
  Used    1554    1575    1793

HCDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3104    3385
  Set 
  Used    3694

HCDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4656    4992
  Set 
  Used    5023

HCDTG                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5634
  Set 
  Used    5684

HCDTM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     918    1096
  Set     1360
  Used    1563    1637    1793

HCDTM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3104    3387
  Set 
  Used    3694

HCDTM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4656    4994
  Set 
  Used    5023

HCDTM                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5636
  Set 
  Used    5684

HF                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5120
  Set     5182
  Used    5192    5197    5198

HFLUX                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     213     320
  Set 
  Used     549     672

HFLUX                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2881    2983
  Set     3095
  Used

HFLUX                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3354
  Set 
  Used    3715    3722

HFLUX                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4660    4980
  Set 
  Used    5028

HFLUX                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5258    5574
  Set 
  Used    5688    5901

HG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     212     314
  Set 
  Used     548     671

HG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     920    1085
  Set     1321    1794    1816    1852
  Used    1683    1739

HG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2881    2979
  Set 
  Used    3095

HG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3108    3348
  Set 
  Used    3696    3715

HG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4659    4974
  Set 
  Used    5027

HG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5257    5568
  Set 
  Used    5687    5882

HGDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     918    1092
  Set     1375
  Used    1548    1577    1794

HGDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3104    3383
  Set 
  Used    3694

HGDTC                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4656    4990
  Set 
  Used    5023

HGDTC                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5632
  Set 
  Used    5684

HGDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     918    1091
  Set     1368
  Used    1547    1575    1794

HGDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3104    3382
  Set 
  Used    3694

HGDTG                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4656    4989
  Set 
  Used    5023

HGDTG                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5631
  Set 
  Used    5684

HGDTM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     918    1093
  Set     1386
  Used    1549    1637    1794

HGDTM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3104    3384
  Set 
  Used    3694

HGDTM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4656    4991
  Set 
  Used    5023

HGDTM                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5633
  Set 
  Used    5684

HH                                                                REAL(KIND=8), PARAMETER
  Decl    6003
  Set 
  Used    6030

HICE                                                              REAL(KIND=8), PARAMETER
  Decl    6235
  Set 
  Used    6245

HL                              Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    1169    1808    2786    3052    3053    5739    6242    6292    6295    6299    6304    6305    6307    6318    6322
          6339    6342

HL3I                            Stack                             REAL(KIND=8)
  Decl    2775
  Set     2786
  Used

HLAT3                           Stack                             REAL(KIND=8)
  Decl    1162
  Set     1808
  Used    1811    1813    1815    1817

HLAT3I                          Stack                             REAL(KIND=8)
  Decl    3013
  Set     3053
  Used    3062    3073    3089

HLAT3I                          Stack                             REAL(KIND=8)
  Decl    5660
  Set     5739
  Used    5742    5750    5754

HLATI                           Stack                             REAL(KIND=8)
  Decl    3012
  Set     3052
  Used    3077    3090

HR                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     211     349
  Set 
  Used     546     669

HR                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     918    1120
  Set     1407
  Used    1434    1435    1824    1825    1826

HR                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1868    1937
  Set 
  Used    1961

HR                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3107    3377
  Set     3510
  Used    3594    3605    3654    3694

HR                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4663    4964
  Set 
  Used    5026

HR                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5256    5603
  Set 
  Used    5691

HR                              Stack                             REAL(KIND=8)
  Decl    8282
  Set     8313
  Used    8319

HRR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     216     285
  Set 
  Used     556     679

HRR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     922    1065
  Set 
  Used    1407

HRR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3111    3326
  Set     3508
  Used    3510    3698

HRR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4668    4896
  Set 
  Used    5030

HRR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5261    5539
  Set 
  Used    5696

HSCAP                           Stack                             REAL(KIND=8)
  Decl    6223
  Set     6246
  Used    6291    6352

I                               Stack                             INTEGER
  Decl     453
  Set      455     473     498     569     587     603     612     618     635     695     707     719     735     757
  Used     456     457     458     459     460     461     462     463     464     465     466     467     468     474     499
           514     515     516     517     518     521     570     572     573     574     575     576     577     578     579
           580     581     582     583     588     589     590     591     592     593     594     596     598     600     604
           605     606     613     615     619     620     621     636     642     643     644     645     653     657     658
           698     708     709     710     711     712     713     714     715     720     722     723     724     725     726
           736     737     738     739     758     761     762     763     764     766     767     768     769     771     772
           773     774     775     776     777     780     781     782     783

I                               Stack                             INTEGER
  Decl     799
  Set      812
  Used     813     814     815     816     817     818     819     820     821     822     823     824     825

I                               Stack                             INTEGER
  Decl     895
  Set      898
  Used     899     900     901     902     903     904     905     906     907

I                               Stack                             INTEGER
  Decl    1159
  Set     1172    1273    1395    1402    1528    1752    1788    1809    1840
  Used    1180    1187    1191    1192    1193    1197    1247    1256    1261    1262    1268    1283    1294    1302    1313
          1321    1339    1345    1360    1368    1375    1386    1396    1397    1398    1399    1400    1407    1411    1417
          1421    1423    1433    1434    1435    1441    1442    1443    1450    1456    1462    1468    1470    1489    1499
          1501    1503    1509    1511    1513    1515    1517    1519    1521    1547    1548    1549    1550    1554    1556
          1563    1565    1575    1577    1637    1638    1647    1648    1649    1651    1683    1704    1739    1747    1753
          1754    1755    1756    1757    1758    1759    1760    1761    1762    1763    1764    1765    1766    1767    1768
          1769    1770    1771    1772    1774    1776    1777    1779    1780    1781    1783    1784    1785    1786    1789
          1790    1791    1792    1793    1794    1798    1799    1800    1801    1810    1811    1812    1813    1814    1815
          1816    1817    1821    1822    1823    1824    1825    1826    1827    1828    1829    1830    1831    1833    1834
          1841    1842    1843    1844    1846    1847    1848    1849    1852    1853    1854    1855    1856

I                               Stack                             INTEGER
  Decl    1948
  Set     1950
  Used    1951    1952    1953    1954    1955    1956    1957    1959    1960    1961    1962    1965    1966    1970

I                               Stack                             INTEGER
  Decl    2047
  Set     2050
  Used    2051    2052    2053    2055    2057    2058    2059    2061    2063    2064    2065

I                               Stack                             INTEGER
  Decl    2203
  Set     2212    2224    2251
  Used    2213    2214    2215    2225    2226    2227    2228    2229    2230    2231    2233    2234    2236    2238    2239
          2244    2252    2256    2257    2258    2259    2260    2261    2268    2269    2271    2276    2277    2279    2280
          2282    2287    2288    2290    2297    2298    2302

I                               Stack                             INTEGER
  Decl    2410
  Set     2426
  Used    2429    2430    2431

I                               Stack                             INTEGER
  Decl    2780
  Set     2791    2848    2857
  Used    2792    2793    2798    2800    2802    2803    2804    2805    2806    2807    2808    2809    2810    2811    2812
          2813    2831    2832    2836    2838    2839    2840    2841    2842    2849    2850    2851    2852    2853    2858
          2859    2860    2862    2865    2866    2867

I                               Stack                             INTEGER
  Decl    3009
  Set     3023    3041    3054    3063    3072    3079    3088
  Used    3024    3025    3026    3027    3031    3032    3033    3034    3038    3039    3042    3043    3044    3055    3056
          3064    3065    3066    3067    3068    3069    3073    3077    3080    3081    3082    3083    3084    3085    3089
          3090    3094    3095

I                               Stack                             INTEGER
  Decl    3439
  Set     3445    3464    3471    3529    3542    3568    3582    3609    3616    3627    3631    3638    3658    3669    3688
          3704    3720    3731
  Used    3446    3447    3448    3449    3450    3451    3452    3453    3465    3472    3473    3474    3481    3483    3486
          3498    3508    3510    3512    3513    3514    3515    3516    3519    3520    3530    3535    3536    3543    3547
          3569    3570    3583    3584    3585    3610    3611    3612    3617    3618    3619    3622    3628    3632    3633
          3634    3635    3639    3640    3641    3642    3643    3644    3645    3646    3647    3648    3659    3660    3661
          3662    3663    3664    3665    3671    3672    3674    3675    3676    3677    3678    3679    3680    3681    3682
          3683    3689    3705    3706    3707    3708    3721    3722    3723    3724    3725    3726    3727    3728    3729
          3732    3734    3735    3736    3737

I                               Stack                             INTEGER
  Decl    3893
  Set     3906    3962    3970    3976    3990    4031    4054    4084    4116    4124    4153    4160    4176    4194
  Used    3907    3908    3909    3910    3916    3922    3925    3926    3927    3931    3933    3939    3941    3950    3954
          3963    3964    3967    3971    3972    3977    3982    3984    3986    3991    3995    3997    3999    4001    4002
          4004    4007    4009    4011    4021    4022    4024    4026    4032    4033    4039    4040    4041    4047    4048
          4049    4060    4061    4063    4065    4069    4070    4071    4074    4076    4077    4079    4085    4086    4087
          4088    4093    4094    4095    4096    4097    4098    4099    4100    4103    4104    4105    4106    4107    4108
          4117    4118    4119    4120    4121    4122    4125    4126    4130    4131    4132    4133    4134    4135    4136
          4137    4142    4143    4144    4145    4146    4147    4148    4149    4155    4157    4162    4163    4164    4166
          4168    4172    4173    4181    4183    4186    4187    4188    4195    4196    4197    4198

I                               Stack                             INTEGER
  Decl    4279
  Set     4290    4296    4312    4449
  Used    4291    4303    4304    4313    4314    4322    4324    4333    4339    4345    4352    4353    4364    4370    4371
          4378    4380    4388    4390    4392    4393    4399    4400    4408    4409    4415    4425    4431    4438    4444
          4450

I                               Stack                             INTEGER
  Decl    4510
  Set     4514    4531    4541
  Used    4515    4516    4532    4542    4543    4544    4545    4546    4547    4548    4549    4550    4551

I                               Stack                             INTEGER
  Decl    4617
  Set     4620    4642
  Used    4626    4632    4643

I                               Stack                             INTEGER
  Decl    5129
  Set     5141    5150    5159    5164    5173    5177    5222    5229
  Used    5142    5143    5144    5145    5151    5152    5153    5154    5160    5161    5165    5166    5167    5169    5174
          5178    5179    5180    5181    5182    5183    5184    5185    5187    5189    5190    5191    5192    5193    5195
          5197    5198    5200    5202    5203    5204    5205    5207    5209    5212    5213    5216    5218    5223    5230

I                               Stack                             INTEGER
  Decl    5656
  Set     5671    5706    5714    5733    5740    5749    5753    5757    5764    5774    5781    5793    5806    5828    5864
          5889
  Used    5676    5677    5678    5679    5707    5708    5715    5716    5717    5718    5734    5741    5742    5750    5754
          5758    5759    5760    5761    5765    5766    5767    5768    5770    5771    5775    5776    5777    5778    5782
          5783    5794    5795    5796    5798    5807    5808    5809    5810    5812    5813    5814    5816    5817    5818
          5834    5849    5851    5852    5853    5855    5857    5865    5866    5867    5868    5869    5870    5881    5882
          5890    5892    5893    5894    5895    5896    5897    5899    5900    5901    5902

I                               Stack                             INTEGER
  Decl    6010
  Set     6012    6024
  Used    6013    6014    6015    6016    6017    6018    6020    6025    6026    6027    6028    6029    6030    6031    6035
          6036    6037    6038    6039    6040    6041    6042    6043    6044    6045    6047    6048    6049    6051    6052
          6056    6057    6058

I                               Stack                             INTEGER
  Decl    6215
  Set     6251    6278    6287    6327    6336    6359
  Used    6252    6253    6254    6255    6256    6257    6258    6259    6260    6261    6262    6263    6279    6280    6281
          6282    6283    6284    6288    6290    6291    6292    6293    6294    6295    6298    6299    6300    6301    6302
          6303    6304    6305    6306    6307    6308    6309    6310    6311    6312    6313    6315    6316    6317    6318
          6319    6320    6321    6322    6328    6329    6330    6337    6338    6339    6341    6342    6345    6346    6348
          6349    6350    6351    6352    6353    6354    6360    6361    6362    6363    6364    6365    6366    6367    6372
          6373    6374    6375    6376    6377    6378    6379

I                               Stack                             INTEGER
  Decl    6416
  Set     6420    6442    6468    6481    6504    6525
  Used    6421    6422    6423    6424    6425    6426    6427    6428    6429    6430    6431    6438    6443    6444    6445
          6447    6448    6450    6451    6453    6454    6456    6457    6459    6460    6461    6463    6464    6465    6469
          6470    6471    6472    6473    6474    6475    6476    6477    6478    6479    6482    6483    6484    6485    6486
          6487    6488    6489    6490    6491    6492    6499    6505    6506    6507    6508    6509    6510    6511    6512
          6513    6514    6515    6522    6526    6527    6528    6529    6530    6531    6532    6533    6534    6535

I                               Stack                             INTEGER
  Decl    6595
  Set     6601    6623
  Used    6602    6603    6604    6605    6606    6607    6608    6609    6610    6611    6624    6626    6627    6628    6629
          6630    6631    6634    6635    6636    6637    6639    6640    6641    6642

I                               Stack                             INTEGER
  Decl    6775
  Set     6797    6808    6816    6826    6833    6845    6854    6866    6871    6878    6883    6893    6905    6918    6996
          7025
  Used    6799    6800    6801    6802    6803    6809    6810    6811    6812    6818    6819    6820    6821    6822    6823
          6827    6828    6829    6834    6835    6837    6846    6847    6849    6855    6856    6857    6858    6859    6860
          6861    6862    6867    6872    6879    6884    6885    6886    6887    6894    6898    6899    6900    6906    6909
          6910    6911    6912    6913    6914    6919    6923    6932    6936    6941    6942    6943    6947    6948    6949
          6950    6951    6952    6953    6954    6958    6959    6960    6966    6971    6972    6973    6977    6978    6979
          6980    6981    6982    6983    6984    6988    6989    6990    6997    6998    6999    7000    7001    7002    7003
          7004    7005    7006    7007    7008    7009    7010    7011    7012    7013    7014    7015    7016    7017    7018
          7026    7027    7029    7030    7031    7032    7033    7034    7035    7036    7037    7038    7042    7043    7044

I                               Stack                             INTEGER
  Decl    7104
  Set     7292
  Used    7293    7294    7295    7296    7297    7298    7299    7300    7301    7302

I                               Stack                             INTEGER
  Decl    7465
  Set     7513    7530    7547    7568    7579    7595    7665
  Used    7519    7524    7526    7531    7548    7550    7555    7556    7557    7558    7559    7562    7563    7564    7565
          7569    7573    7574    7580    7584    7585    7587    7588    7596    7597    7598    7599    7600    7601    7605
          7606    7607    7608    7609    7615    7617    7618    7620    7621    7628    7635    7636    7642    7643    7645
          7647    7649    7650    7652    7654    7655    7656    7657    7658    7666    7667    7668    7669    7670    7671
          7672    7673    7674    7675    7676    7677    7678    7679    7680    7681    7682

I1                              Stack                             INTEGER
  Decl    6779
  Set     6882    6892    6904    6940    6946    6957    6970    6976    6987
  Used    6885    6886    6887    6898    6899    6900    6909    6910    6911    6912    6913    6914    6941    6942    6943
          6947    6948    6949    6950    6951    6952    6953    6954    6958    6959    6960    6971    6972    6973    6977
          6978    6979    6980    6981    6982    6983    6984    6988    6989    6990

I1                              Stack                             INTEGER
  Decl    7467
  Set     7529    7539    7578
  Used    7531    7540    7544    7545    7584    7585    7586    7587    7588

I8                              Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     366     432    5992    6180    6588    7726    7977

IBD                                                               INTEGER, PARAMETER
  Decl    7438
  Set 
  Used

IBD                             Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     296     297    3846    4260    4498    4907    4908    5550    5551    6575    6576    6742    6743

IBMAX                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     183     184
  Set 
  Used

IBMAX                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7697    7719
  Set 
  Used    7722    7726    7727    7728    7790

IBMAX                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7951    7973
  Set 
  Used    7976    7977    7978    7979    7982    7983    8075

IBMAXPERJB                      Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl    7697    7729
  Set 
  Used    7912

IBMAXPERJB                      Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl    7957    7980
  Set 
  Used    8150

ICEALN                          Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    6641    6642

ICEALV                          Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    6639    6640

ICG                                                               INTEGER, PARAMETER
  Decl    7435
  Set 
  Used

ICG                             Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     195     196     197     198     199     200     201     202     203     204     205     279     280     281     282
           284     289     290     295     296     297     434     435     436     437     438     442     443     444     445
           449     450     454     811    1033    1062    1063    1068    1123    1913    1925    2041    2741    2744    2756
          2758    2760    2761    2762    2763    2764    2765    3283    3323    3324    3330    3335    3398    3399    3400
          3401    3402    3403    3404    3437    3822    3844    3845    3846    3851    4247    4249    4250    4251    4252
          4257    4258    4259    4260    4486    4495    4496    4497    4498    4612    4890    4891    4892    4893    4895
          4900    4901    4906    4907    4908    4927    4928    4929    4930    4931    4937    4938    4939    4940    4941
          4942    5101    5533    5534    5535    5536    5538    5543    5544    5549    5550    5551    5608    5609    5610
          5611    5612    5618    5619    5620    5621    5622    5623    6574    6575    6576    6741    6742    6743    6756
          6757    7063    7064    7065    7066    7067    7068    7069    7070    7071    7077    7078    7079    7138    7139
          7140    7141    7142    7143    7144    7145    7146    7152    7153    7154    7161    7162    7163    7164    7165
          7166    7167    7168    7169    7170    7171

ICHECK                          Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1868    1938
  Set 
  Used    1951

ICHECK                          Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2075    2165
  Set 
  Used    2213    2252

ICHECK                          Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2693    2759
  Set 
  Used    2792    2849    2858

ICHECK                          Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl    3105    3378
  Set     3530    3622    3635    3672
  Used    3557    3564    3583    3589    3594    3599    3605    3610    3617    3628    3654    3659    3689

ICHECK                          Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl    4658    4985
  Set 
  Used    5024

ICHECK                          Stack                             INTEGER, DIMENSION(<exp>)
  Decl    5626
  Set 
  Used    5686

ICMAX                                                             INTEGER, PARAMETER
  Decl    3430
  Set 
  Used    3621

ICOND                           Stack                             INTEGER
  Decl    7471
  Set     7613    7614    7615
  Used    7616    7624

ICOUNT                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2693    2733
  Set 
  Used    2789

ICOUNT                          Stack                             INTEGER
  Decl    3442
  Set     3580    3581
  Used    3599    3621

IDATEC                          Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl     789     797
  Set 
  Used     829

IDATEC                          Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl    7389    7447
  Set 
  Used    7511    7632

IDEWCO                          Stack                             INTEGER, DIMENSION(<exp>)
  Decl    3428
  Set     3634    3674
  Used    3671    3675    3678    3681

IDP                                                               INTEGER, PARAMETER
  Decl    7437
  Set 
  Used

IDP                             Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     286    2742    2757    3327    4613    4897    5540    7076    7151

IERR                            Stack                             INTEGER
  Decl    7110
  Set 
  Used    7175    7177    7183    7185

IHEAD                                                             INTEGER, PARAMETER
  Decl    7492
  Set 
  Used    7584    7635    7641    7642    7643    7649    7650    7655

II                              Stack                             INTEGER
  Decl    6416
  Set     6433    6494    6517
  Used    6438    6499    6522

IIMON                                                             INTEGER, PARAMETER
  Decl    7477
  Set 
  Used    7481    7484    7489    7529    7539

IK                              Stack                             INTEGER
  Decl    6783
  Set     6922
  Used    6923    6926    6927

IL                              Stack                             INTEGER
  Decl    5657
  Set     5763    5780    5792
  Used    5766    5769    5770    5771    5783    5784    5794    5796    5797    5798

ILD                                                               INTEGER, PARAMETER
  Decl    7059
  Set 
  Used

ILWRAD                          Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     223     378
  Set 
  Used     493

IM                              Stack                             INTEGER
  Decl    7103
  Set     7248    7274
  Used    7249    7275

IM                              Stack                             INTEGER
  Decl    7755
  Set     7805
  Used    7806    7807    7808    7810    7811    7812

IM                              Stack                             INTEGER
  Decl    8011
  Set     8089
  Used    8090    8091    8092    8095    8096    8097

IMASK                           Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     222     366
  Set 
  Used     474     499     570     613     636     720

IMASK                           Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6553    6588
  Set 
  Used    6624

IMASK                           Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    7697    7726
  Set 
  Used    7913

IMASK                           Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    7953    7977
  Set 
  Used    8154

IMM                             Stack                             INTEGER
  Decl    7756
  Set     7815    7818
  Used    7825

IMM                             Stack                             INTEGER
  Decl    8012
  Set     8101    8105
  Used    8108

IMM1                            Stack                             INTEGER
  Decl    7752
  Set     7801    7807
  Used    7815

IMM1                            Stack                             INTEGER
  Decl    8009
  Set     8085    8091
  Used    8101

IMM2                            Stack                             INTEGER
  Decl    7753
  Set     7802    7811
  Used    7818

IMM2                            Stack                             INTEGER
  Decl    8010
  Set     8086    8096
  Used    8105

IMON                                                              INTEGER, PARAMETER
  Decl    7434
  Set 
  Used    7490

IMON                            Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    2025    2139    7077    7078    7079    7080    7081    7082    7083    7084    7085    7087    7088    7089    7090
          7091    7092    7093    7094    7095    7096    7097    7152    7153    7154    7155    7156    7157    7158    7159
          7160    7161    7162    7165    7292    7316    7322

IND                             Stack                             INTEGER
  Decl     453
  Set      496
  Used     501     595

INDEX                           Stack                             INTEGER, DIMENSION(<exp>)
  Decl    7470
  Set     7501    7658
  Used    7667

INITLZ                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl     222     368
  Set 
  Used     483

INITMOD                         Stack                             LOGICAL
  Decl     452
  Set      483
  Used     485     494

INITSSIB                                                          Subroutine, Module procedure
  Decl      82     183
  Set 
  Used

INTERC                                                            Subroutine, Module procedure, PRIVATE
  Decl    3758
  Set 
  Used    5015

INTG                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     224     399
  Set 
  Used     703     759

INTG                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6388    6393
  Set 
  Used    6418

INTSIB                          Stack                             INTEGER
  Decl     453
  Set      487     490
  Used     529

IRAD                            Stack                             INTEGER
  Decl    4281
  Set     4295
  Used    4303

IRAD                            Stack                             INTEGER
  Decl    4513
  Set     4530
  Used    4532

IS                              Stack                             INTEGER
  Decl    7754
  Set     7793    7913
  Used    7795    7796    7797    7798    7799    7800    7803    7804    7806    7808    7810    7812    7825    7826    7827
          7833    7835    7847    7854    7866    7875    7900    7902    7903    7904    7914    7926    7930    7932    7934
          7936    7942

IS                              Stack                             INTEGER
  Decl    8005
  Set     8078    8154
  Used    8079    8080    8081    8082    8083    8084    8087    8088    8090    8092    8095    8097    8108    8109    8110
          8114    8115    8117    8118    8120    8123    8139    8141    8142    8143    8155    8157    8158    8159    8160
          8161    8162    8170

ISOIL                                                             INTEGER, PARAMETER
  Decl    7433
  Set 
  Used

ISTRT                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6387    6389
  Set 
  Used    6419

ISTRT                           Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE
  Decl
  Set 
  Used     702     760

ISWRAD                          Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     223     377
  Set 
  Used

ITER                            Stack                             INTEGER
  Decl    7769
  Set     7884    7924    7928    7933
  Used    7902    7903    7904    7925    7926    7929    7930    7934    7936    7942

ITER                            Stack                             INTEGER
  Decl    8025
  Set     8126
  Used    8141    8142    8143

ITFAC                           Stack                             INTEGER
  Decl    7782
  Set     7929
  Used    7932

ITR                             Stack                             INTEGER
  Decl     453
  Set      529
  Used

ITSOIL                          Stack                             INTEGER
  Decl    7781
  Set     7925
  Used    7932

ITVEG                                                             INTEGER, PARAMETER
  Decl    7432
  Set 
  Used

ITYP                            Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    2025    2139    2741    2742    7063    7064    7065    7066    7067    7068    7069    7070    7071    7072    7073
          7074    7075    7076    7077    7078    7079    7080    7081    7082    7083    7084    7085    7087    7088    7089
          7090    7091    7092    7093    7094    7095    7138    7139    7140    7141    7142    7143    7144    7145    7146
          7147    7148    7149    7150    7151    7152    7153    7154    7155    7156    7157    7158    7159    7160    7161
          7162    7163    7164    7165    7166    7167    7168    7169    7170    7171    7238    7322    7731    7732    7733
          7748    7793    7985    7986    7987    8000    8078

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl     220     237
  Set 
  Used     476     477     478     479     531     564     625     687

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl     789     793
  Set 
  Used     813     814     815     816     817     818     819     820     821     822     823     824     825     828

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl     838     881
  Set 
  Used     900

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1983    2026
  Set 
  Used    2051

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2076    2140
  Set 
  Used    2225    2257

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2315    2363
  Set 
  Used    2428    2436    2481

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2694    2743
  Set 
  Used    2793    2850    2859

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3114    3281
  Set 
  Used    3459    3472    3558    3565    3573    3590    3600    3732

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3760    3821
  Set 
  Used    3931    3963    3991    4085    4172    4195

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    4209    4248
  Set 
  Used    4313

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    4562    4604
  Set 
  Used    4632

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    4671    4864
  Set 
  Used    5007    5012    5017    5033

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    5044    5087
  Set 
  Used    5179

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    5265    5495
  Set 
  Used    5676    5677    5678    5699    5715    5727    5741    5758    5765    5782    5795    5804    5807    5865    5890

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    6545    6559
  Set 
  Used    6615

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    6653    6737
  Set 
  Used    6815    6852

ITYPE                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    7388    7442
  Set 
  Used    7548    7569    7580    7596    7666

IV                              Stack                             INTEGER
  Decl    7102
  Set     7244    7264    7273
  Used    7246    7249    7252    7253    7254    7255    7256    7257    7258    7259    7266    7267    7268    7269    7275
          7277    7278    7279    7280    7281    7282    7283    7284

IVEG                            Stack                             INTEGER
  Decl    2779
  Set     2787
  Used    2797    2802    2803    2804    2805    2806    2807    2809    2810    2817    2832    2852    2866    2867

IVEG                            Stack                             INTEGER
  Decl    3894
  Set     3959
  Used    3961    3982    3984    3995    3997    3999    4002    4004    4007    4009    4011    4021    4022    4026    4039
          4061    4065    4077    4079    4083    4087    4117    4118    4130    4136    4137    4142    4148    4149    4154
          4161    4164    4166    4168    4180    4186    4187

IVEG                            Stack                             INTEGER
  Decl    4280
  Set     4294    4310
  Used    4303    4304    4314    4322    4324    4333    4345    4352    4353    4364    4370    4371    4378    4388    4390
          4392    4393    4408    4409    4425    4431    4438    4444

IVEG                            Stack                             INTEGER
  Decl    4511
  Set     4528
  Used    4532

IVEG                            Stack                             INTEGER
  Decl    5130
  Set     5138
  Used    5139    5166    5167    5169    5183    5185    5203    5204    5205    5206    5211    5213    5216    5218    5223

IVEG                            Stack                             INTEGER
  Decl    5659
  Set     5713    5747
  Used    5716    5717    5718    5748    5767    5768

IVEGM                           Stack                             INTEGER
  Decl    7757
  Set     7816    7819
  Used    7825    7826    7827

IVEGM                           Stack                             INTEGER
  Decl    8013
  Set     8102    8106
  Used    8108    8109    8110

IWAVE                           Stack                             INTEGER
  Decl    4512
  Set     4529
  Used    4532

IWHEAT                                                            INTEGER, PARAMETER
  Decl    7493
  Set 
  Used    7548    7569    7580    7596    7601    7666

IWV                                                               INTEGER, PARAMETER
  Decl    7436
  Set 
  Used

IWV                             Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     205     296     297     434    3846    4247    4260    4498    4907    4908    4930    5550    5551    5608    6575
          6576    6742    6743    7063    7138    7170

J                               Stack                             INTEGER
  Decl     453
  Set      454
  Used     456     457     458     459     460     461     462     463     464     465     466     467     468

J                               Stack                             INTEGER
  Decl     799
  Set      811
  Used     813     814     815     816     817     818     819     820     821     822     823     824     825

JBMAX                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     183     185
  Set 
  Used

JBMAX                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7697    7720
  Set 
  Used    7722    7726    7727    7728    7791

JBMAX                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7952    7974
  Set 
  Used    7976    7977    7978    7979    7982    7983    8076

JCG                             Stack                             INTEGER
  Decl    7099
  Set     7236
  Used    7239

JDT                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl     209     351
  Set 
  Used     540     663

JJ                              Stack                             INTEGER
  Decl    6778
  Set     6865    6870
  Used    6867    6872

JMON                            Stack                             INTEGER
  Decl    7100
  Set     7237    7263
  Used    7239    7267    7268    7269

JSTNEU                          Dummy Arg                         LOGICAL, INTENT(IN)
  Decl    2077    2133
  Set 
  Used    2223

JSTNEU                          Dummy Arg                         LOGICAL, INTENT(INOUT)
  Decl    3115    3275
  Set     3554    3561
  Used    3559    3566    3591

JSTNEU                          Dummy Arg                         LOGICAL, INTENT(INOUT)
  Decl    4656    5004
  Set 
  Used    5034

JSTNEU                          Stack                             LOGICAL
  Decl    5625
  Set 
  Used    5684

JTYP                            Stack                             INTEGER
  Decl    7101
  Set     7238    7245    7246    7265    7266
  Used    7239    7249    7252    7253    7254    7255    7256    7257    7258    7259    7267    7268    7269

K                               Stack                             INTEGER
  Decl    8001
  Set     8169    8176    8195    8248
  Used    8170    8171    8177    8196    8250    8251    8252

K                               Stack                             INTEGER
  Decl    8360
  Set     8364    8368    8385    8402    8435    8449
  Used    8365    8369    8386    8408    8416    8418    8428    8429    8440    8441    8443    8450

K1                              Stack                             INTEGER
  Decl    6781
  Set     6921    6926
  Used    6932    6947    6948    6949    6977    6978    6979

K2                              Stack                             INTEGER
  Decl    6782
  Set     6920    6927
  Used    6939    6941    6942    6943    6950    6951    6952    6953    6969    6971    6972    6973    6980    6981    6982
          6983

KK                              Stack                             INTEGER
  Decl    7472
  Set     7632
  Used    7633    7634    7636    7637    7639    7642    7645    7654

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     222     232
  Set 
  Used     358     359     360     361     362     363     364     745

KMON                            Stack                             INTEGER, DIMENSION(13)
  Decl    7490
  Set     7540    7544
  Used    7584    7639    7642    7654

KOLD                            Stack                             INTEGER
  Decl    7466
  Set     7538    7545
  Used    7540

KPBL                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6070    6146
  Set 
  Used    6148    6149

KQPBL                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6070    6147
  Set 
  Used    6150

KSTART                          Stack                             INTEGER
  Decl    8361
  Set     8373
  Used

KT                              Dummy Arg                         INTEGER, INTENT(IN)
  Decl     223     376
  Set 
  Used     483

KTM                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl     222     367
  Set 
  Used     483

L                               Stack                             INTEGER
  Decl    8362
  Set     8401    8410    8422
  Used    8408    8416    8418    8424    8428    8429

LAT                             Stack                             INTEGER
  Decl    7772
  Set     7911
  Used    7912    7913    7915    7936    7942

LAT                             Stack                             INTEGER
  Decl    8029
  Set     8149
  Used    8150    8152    8154    8177    8196    8245    8246    8251    8252    8258    8259    8260

LATCO                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6552    6587
  Set 
  Used    6620

LATITU                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl     209     352
  Set 
  Used     456     457     458     459     460     461     462     463     464     465     466     467     468     536     540
           630     663     703

LATITU                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl     789     792
  Set 
  Used     813     814     815     816     817     818     819     820     821     822     823     824     825     828

LATITU                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5254    5606
  Set 
  Used    5893    5900

LATITU                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6388    6394
  Set 
  Used    6438    6499    6522

LATITU                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6658    6754
  Set 
  Used    6799    6800    6801    6802

LATITU                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7388    7441
  Set 
  Used    7670    7671    7672    7673    7674    7675    7676    7677    7678    7679    7680    7681    7682

LATMAX                          Stack                             INTEGER
  Decl    7770
  Set     7791
  Used    7911

LATMAX                          Stack                             INTEGER
  Decl    8004
  Set     8076
  Used    8149

LOG                                                               Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0     190    2230    2233    2238    2431    2453
          2485    2808    3486    4047    4098    4388    4390    4392    4425    4431    4632    6030    6042    6044    6047
          7312    7847    7854    7921    8117    8118

LON                             Stack                             INTEGER
  Decl    7773
  Set     7912
  Used    7913    7915    7936    7942

LON                             Stack                             INTEGER
  Decl    8030
  Set     8150
  Used    8152    8154    8177    8196    8245    8246    8251    8252    8258    8259    8260

LONMAX                          Stack                             INTEGER
  Decl    7771
  Set     7790
  Used

LONMAX                          Stack                             INTEGER
  Decl    8003
  Set     8075
  Used

MAX                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
           709     767    1811    2215    2302    2456    2488    2502    2534    2546    2622    2644    2662    2682    2812
          2841    2852    3481    3485    3508    3982    4049    4063    4100    4106    4146    4291    4626    4643    5768
          5776    6028    6039    6379    6631    6803    6820    7030    7239    7916    8305    8326    8335

MIN                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
          1180    1193    1817    2429    2457    2487    2501    2508    2534    2541    2546    2621    2811    2824    2837
          2840    2853    2867    3473    3474    3484    3514    3995    4048    4099    4134    4197    4303    4399    5183
          5770    6040    6353    6479    6821    6829    6837    7031    7316    7322    7917    7919    7932    8326

MIND                            Stack                             INTEGER, DIMENSION(<exp>)
  Decl    7469
  Set     7585
  Used    7636

ML                              Stack                             INTEGER, DIMENSION(<exp>)
  Decl    6780
  Set     6847    6849
  Used    6909    6910    6911    6912    6913    6914    6941    6942    6943    6947    6948    6949    6950    6951    6952
          6958    6959    6960    6971    6972    6973    6977    6978    6979    6980    6981    6982    6988    6989    6990

MNL                             Stack                             INTEGER
  Decl    7473
  Set     7633    7634
  Used    7638    7654

MOD                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    7544    7634

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl     221     235
  Set 
  Used     476     477     478     479     531     564     625     687

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl     789     794
  Set 
  Used     813     814     815     828

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl     839     876
  Set 
  Used     901     905

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    1984    2020
  Set 
  Used    2064

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    2077    2134
  Set 
  Used    2226    2233    2238    2258

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    3114    3278
  Set 
  Used    3460    3559    3566    3574    3591    3734    3735    3736    3737

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    4672    4861
  Set 
  Used    5033

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    5266    5492
  Set 
  Used    5700

MON                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl    6653    6735
  Set     6855    6860    6861    7020
  Used    6820    6821    6823    6844    6867    6872    6885    6886    6887    6898    6899    6900    6909    6910    6911
          6912    6913    6914    6923    6932    6941    6942    6943    6947    6948    6949    6950    6951    6952    6953
          6958    6959    6960    6971    6972    6973    6977    6978    6979    6980    6981    6982    6983    6988    6989
          6990    7015    7016    7017    7018

MONL                            Dummy Arg                         INTEGER, DIMENSION(12), INTENT(IN)
  Decl    7389    7448
  Set 
  Used    7545    7633

MONL                            Use assoc                         INTEGER, From module OPTIONS, DIMENSION(12), PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     829

MONTH                           Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    7388    7444
  Set 
  Used    7601

MONTH2                          Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl    6545    6557
  Set 
  Used    6615

MONX                            Stack                             INTEGER, DIMENSION(<exp>)
  Decl    6777
  Set     6844
  Used    6855    6861    7020

MSKANT                          Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     227     432
  Set 
  Used     736     755

MSKANT                          Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5919    5992
  Set 
  Used    6013    6025

MSKANT                          Dummy Arg                         INTEGER(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6074    6180
  Set 
  Used    6252    6277    6279    6288    6328    6337    6360

MXITER                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7697    7721
  Set 
  Used    7731    7732    7733    7860    7884    7924    7928    7933

MXITER                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7956    7975
  Set 
  Used    7985    7986    7987    8119    8126

N                               Stack                             INTEGER
  Decl    2409
  Set     2420    2427    2435    2480
  Used    2421    2422    2423    2428    2429    2430    2431    2436    2450    2453    2454    2456    2457    2459    2460
          2481    2482    2487    2495    2496    2497    2498    2499    2500    2501    2502    2507    2508    2509    2510
          2513    2514    2519    2522    2523    2524    2529    2530    2531    2532    2533    2534    2535    2536    2541
          2542    2543    2544    2547    2548    2553    2556    2557    2558    2604    2605    2609    2610    2613    2614
          2619    2620    2623    2624    2638    2639    2640    2644    2645    2646    2650    2651    2652    2662    2663
          2664    2668    2669    2670    2682

N                               Stack                             INTEGER
  Decl    4618
  Set     4621    4640
  Used    4626    4632    4641    4643    4645

NC                              Stack                             INTEGER
  Decl    6416
  Set     6432    6493    6516
  Used

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     221     230
  Set 
  Used     235     237     242     243     244     245     246     247     248     249     250     251     252     253     257
           258     259     260     261     265     266     267     268     269     270     271     272     273     274     275
           276     277     278     279     280     281     282     283     284     285     286     287     288     289     290
           291     292     293     294     295     296     297     298     299     300     301     302     306     307     308
           309     310     311     312     313     314     315     316     317     318     319     320     321     322     323
           324     325     329     330     331     332     333     334     335     336     337     338     339     340     341
           342     343     344     345     346     347     348     349     354     355     356     357     358     359     360
           361     362     363     364     365     366     369     370     371     372     373     374     375     380     381
           382     383     384     385     386     388     389     390     391     392     393     394     395     396     397
           398     401     402     403     404     406     409     410     411     412     413     415     416     417     418
           420     421     422     423     424     425     426     427     428     429     430     431     432     434     435
           436     437     438     439     440     441     442     443     444     445     446     447     448     449     450
           473     498     569     612     635     702     719     735     753     757

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     789     790
  Set 
  Used     793     794     795     798

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     839     875
  Set 
  Used     876     881     882     883     884     885     889     890     892     893

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     925    1026
  Set 
  Used    1033    1038    1039    1040    1044    1045    1046    1047    1051    1052    1053    1054    1055    1056    1057
          1058    1059    1060    1061    1062    1063    1064    1065    1066    1067    1068    1069    1070    1071    1072
          1073    1077    1078    1079    1080    1081    1082    1083    1084    1085    1086    1087    1091    1092    1093
          1094    1095    1096    1097    1098    1099    1100    1101    1102    1103    1104    1105    1109    1110    1111
          1112    1113    1114    1115    1116    1117    1118    1119    1120    1123    1125    1134    1135    1136    1137
          1138    1139    1146    1148    1149    1150    1151

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1870    1911
  Set 
  Used    1913    1917    1918    1919    1920    1921    1922    1923    1924    1925    1926    1930    1931    1932    1933
          1934    1935    1936    1937    1938

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1984    2019
  Set 
  Used    2020    2026    2027    2028    2032    2036    2037    2038    2039    2040    2041    2043    2044

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2077    2131
  Set 
  Used    2134    2140    2141    2142    2147    2148    2149    2153    2154    2155    2159    2160    2161    2162    2163
          2164    2165    2166    2172

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2315    2358
  Set 
  Used    2363    2367    2368    2369    2370    2374    2376    2377    2378    2379    2380    2381

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2695    2732
  Set 
  Used    2734    2735    2743    2744    2748    2749    2750    2754    2755    2756    2757    2758    2759    2760    2761
          2762    2763    2764    2765    2767    2768    2769    2770    2771    2772    2773

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2884    2936
  Set 
  Used    2944    2948    2949    2950    2951    2955    2956    2957    2958    2959    2960    2961    2962    2963    2964
          2965    2966    2967    2968    2972    2973    2974    2975    2976    2977    2978    2979    2980    2981    2982
          2983    2984    2985    2989    2990    2991    2995    3000    3001    3002    3003    3004    3005    3006    3007
          3008

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3115    3273
  Set 
  Used    3278    3281    3283    3284    3285    3286    3287    3288    3293    3294    3295    3296    3297    3301    3302
          3303    3304    3305    3309    3310    3311    3312    3313    3314    3315    3316    3317    3318    3319    3320
          3321    3322    3323    3324    3325    3326    3327    3328    3329    3330    3331    3332    3333    3334    3335
          3336    3340    3341    3342    3343    3344    3345    3346    3347    3348    3349    3350    3351    3352    3353
          3354    3355    3356    3360    3361    3362    3363    3364    3365    3366    3367    3368    3369    3370    3371
          3372    3373    3374    3375    3376    3377    3378    3382    3383    3384    3385    3386    3387    3388    3389
          3390    3391    3392    3393    3394    3395    3396    3398    3399    3400    3401    3402    3403    3404    3407
          3413    3414    3415    3416    3418    3419    3420    3421    3422    3423    3424    3426    3427    3428    3437
          3460    3559    3566    3574    3591    3596    3601    3607    3656    3701    3718

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3761    3816
  Set 
  Used    3821    3822    3828    3829    3830    3834    3835    3836    3837    3838    3842    3843    3844    3845    3846
          3850    3851    3854    3855    3856    3857    3858    3859    3860    3861    3862    3863    3864    3865    3866
          3867    3868    3869    3870    3871    3872    3873    3874    3875    3876    3877    3878    3879    3880    3881
          3882    3883    3884

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4209    4245
  Set 
  Used    4247    4248    4249    4250    4251    4252    4257    4258    4259    4260    4264    4266    4267    4268    4269
          4270    4271    4272    4273    4274    4275    4276    4277

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4462    4484
  Set 
  Used    4486    4491    4495    4496    4497    4498    4499    4500    4501    4502    4503    4506    4507

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4562    4601
  Set 
  Used    4604    4608    4612    4613    4616

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4672    4858
  Set 
  Used    4861    4864    4868    4869    4870    4871    4872    4876    4877    4878    4879    4880    4881    4882    4883
          4884    4885    4886    4887    4888    4889    4890    4891    4892    4893    4894    4895    4896    4897    4898
          4899    4900    4901    4902    4903    4904    4905    4906    4907    4908    4909    4910    4911    4912    4913
          4918    4919    4920    4921    4922    4923    4924    4925    4927    4928    4929    4930    4931    4932    4933
          4934    4935    4936    4937    4938    4939    4940    4941    4942    4946    4947    4948    4949    4950    4951
          4952    4953    4954    4955    4956    4957    4958    4959    4960    4961    4962    4963    4964    4966    4967
          4968    4969    4970    4971    4972    4973    4974    4975    4976    4977    4978    4979    4980    4981    4982
          4983    4985    4989    4990    4991    4992    4993    4994    4995    4996    4997    4998    4999    5000    5001
          5002    5003    5007    5010    5013    5018    5034

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5044    5083
  Set 
  Used    5087    5091    5092    5093    5094    5095    5099    5100    5101    5102    5103    5107    5108    5109    5110
          5112    5113    5114    5115    5116    5117    5118    5119    5120    5121    5122    5123    5124    5125    5126
          5127

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5266    5489
  Set 
  Used    5492    5495    5500    5501    5502    5503    5504    5505    5506    5507    5511    5512    5513    5514    5515
          5519    5520    5521    5522    5523    5524    5525    5526    5527    5528    5529    5530    5531    5532    5533
          5534    5535    5536    5537    5538    5539    5540    5541    5542    5543    5544    5545    5546    5547    5548
          5549    5550    5551    5552    5553    5554    5555    5556    5560    5561    5562    5563    5564    5565    5566
          5567    5568    5569    5570    5571    5572    5573    5574    5575    5576    5577    5578    5579    5583    5584
          5585    5586    5587    5588    5589    5590    5591    5592    5593    5594    5595    5596    5597    5598    5599
          5600    5601    5602    5603    5608    5609    5610    5611    5612    5613    5614    5615    5616    5617    5618
          5619    5620    5621    5622    5623    5626    5631    5632    5633    5634    5635    5636    5637    5638    5639
          5640    5641    5642    5643    5644    5645    5647    5648    5649    5650    5651    5652    5653    5663    5664
          5665    5666    5700    5727    5804

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5917    5967
  Set 
  Used    5968    5969    5970    5971    5972    5973    5974    5975    5976    5978    5979    5980    5981    5982    5983
          5984    5985    5986    5987    5988    5989    5990    5991    5992    6007    6012    6024

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6073    6145
  Set 
  Used    6148    6149    6150    6151    6152    6153    6154    6155    6156    6157    6158    6159    6161    6164    6165
          6166    6167    6168    6169    6170    6171    6172    6173    6174    6175    6176    6177    6178    6179    6180
          6181    6182    6183    6184    6185    6186    6187    6188    6189    6190    6191    6192    6193    6194    6195
          6196    6197    6198    6199    6200    6201    6202    6203    6204    6205    6206    6207    6208    6209    6210
          6211    6212    6213    6251    6275    6278    6287    6327    6336    6359

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6387    6390
  Set 
  Used    6395    6396    6397    6398    6399    6400    6401    6402    6403    6404    6405    6406    6407    6408    6409
          6410    6411    6412    6413    6414    6415

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6545    6556
  Set 
  Used    6557    6559    6560    6561    6562    6563    6564    6565    6566    6567    6568    6569    6570    6571    6572
          6573    6574    6575    6576    6577    6578    6579    6580    6581    6582    6583    6584    6585    6586    6588
          6589    6590    6591    6592    6593    6594    6623

NCOLS                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6653    6734
  Set 
  Used    6735    6737    6738    6739    6740    6741    6742    6743    6744    6745    6746    6747    6748    6749    6750
          6751    6752    6753    6756    6757    6760    6761    6762    6763    6764    6765    6766    6767    6768    6769
          6770    6776    6777

NCOUNT                          Stack                             INTEGER
  Decl     453
  Set      472     475     497     500     568     571     611     614     634     637     718     721
  Used     476     477     478     479     505     506     507     508     509     514     515     516     517     518     520
           521     525     526     572     573     574     575     576     577     578     579     580     581     582     583
           615     641     642     643     644     645     647     648     649     650     652     653     657     658     722
           723     724     725     726     727

NCOUNT                          Stack                             INTEGER
  Decl    3441
  Set     3526    3528
  Used    3541    3703

NCOUNT                          Stack                             INTEGER
  Decl    6216
  Set     6271    6273
  Used    6334

NCOUNT                          Stack                             INTEGER
  Decl    6598
  Set     6622    6625
  Used    6626    6627    6628    6629

NDT                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5253    5605
  Set 
  Used    5893    5900

NFALB                           Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used    7217

NFCTRL                          Use assoc                         INTEGER, From module OPTIONS, DIMENSION(100), PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used    7835    8115

NFPRT                           Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used    5893    5900    6438    6499    6522    7176    7184    7835    8115

NFSIBD                          Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used    7189    7191

NINT                            Stack                             INTEGER
  Decl     453
  Set      486     489
  Used     496

NJ                                                                INTEGER, PARAMETER
  Decl    7059
  Set 
  Used    7087    7088    7093    7094

NJJ                                                               INTEGER, PARAMETER
  Decl    7059
  Set 
  Used    7089    7090    7091    7092

NK                                                                INTEGER, PARAMETER
  Decl    6772
  Set 
  Used    6774    6865    6870    6909    6910    6911    6922    6932    6939    6969

NK                                                                INTEGER, PARAMETER
  Decl    7059
  Set 
  Used    7090    7092    7096    7097

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     221     231
  Set 
  Used     455     483     531     564     565     587     603     618     625     633     687     688     695     702     707

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     789     791
  Set 
  Used     812     828

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     839     877
  Set 
  Used     898

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     925    1029
  Set 
  Used    1172    1273    1395    1402    1528    1752    1788    1809    1840

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1870    1912
  Set 
  Used    1950

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1984    2021
  Set 
  Used    2050

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2077    2135
  Set 
  Used    2212    2224    2251

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2315    2361
  Set 
  Used    2420    2427    2435    2480

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2695    2737
  Set 
  Used    2791    2848    2857

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    2884    2939
  Set 
  Used    3023    3041    3054    3063    3072    3079    3088

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3114    3279
  Set 
  Used    3445    3460    3464    3471    3529    3542    3559    3566    3568    3574    3582    3591    3596    3601    3607
          3609    3616    3627    3631    3638    3656    3658    3669    3688    3701    3704    3718    3720    3731

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    3761    3819
  Set 
  Used    3906    3962    3970    3976    3990    4031    4054    4084    4116    4124    4153    4160    4176    4194

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4209    4246
  Set 
  Used    4290    4296    4312    4449

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4462    4485
  Set 
  Used    4514    4531    4541

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4562    4602
  Set 
  Used    4621    4640

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    4672    4862
  Set 
  Used    5007    5010    5013    5018    5033

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5044    5085
  Set 
  Used    5141    5150    5159    5164    5173    5177    5222    5229

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    5266    5493
  Set 
  Used    5671    5700    5706    5714    5727    5733    5740    5749    5753    5757    5764    5774    5781    5793    5804
          5806    5828    5864    5889

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6387    6391
  Set 
  Used    6420    6442    6468    6481    6504    6525

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6545    6558
  Set 
  Used    6599    6601    6615

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    6653    6736
  Set 
  Used    6773    6780    6794    6795    6797    6808    6816    6826    6833    6845    6854    6866    6871    6878    6883
          6893    6905    6918    6996    7025

NMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7388    7440
  Set 
  Used    7442    7443    7444    7449    7452    7454    7455    7456    7457    7458    7459    7460    7469    7470    7475
          7476    7489    7513    7530    7547    7568    7579    7595    7665

NNN                             Stack                             INTEGER
  Decl    7332
  Set     7356
  Used

NS                              Stack                             INTEGER
  Decl    7468
  Set     7567    7594
  Used    7573    7574    7606    7607    7608    7609    7615    7617    7618    7620    7621    7647    7656    7658

NSIB                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl    8340    8347
  Set 
  Used    8349    8352    8354    8355    8368    8372    8449

NSX                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl     221     357
  Set 
  Used     536     630

NSX                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl     789     798
  Set 
  Used     829

NSX                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    6552    6586
  Set 
  Used    6619

NSX                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(IN)
  Decl    6657    6753
  Set 
  Used    6858    6860

NSX                             Dummy Arg                         INTEGER, DIMENSION(<exp>), INTENT(INOUT)
  Decl    7389    7449
  Set     7500    7667    7668    7669
  Used    7668    7669

NTYP                            Stack                             INTEGER
  Decl     896
  Set      900
  Used     901     905

NTYP                            Stack                             INTEGER
  Decl    2048
  Set     2051
  Used    2064

NTYP                            Stack                             INTEGER
  Decl    2204
  Set     2225    2257
  Used    2226    2233    2238    2258

NTYP                            Stack                             INTEGER
  Decl    2411
  Set     2428    2436    2481
  Used    2430    2431    2438    2439    2449    2451    2455    2457    2459    2484    2485    2486    2489    2490    2498
          2499    2500    2501    2518    2520    2521    2522    2524    2532    2533    2534    2535    2552    2554    2555
          2556    2558    2604    2609    2610    2613    2615    2619    2620    2623    2625    2640    2646    2652    2664
          2670

NTYP                            Stack                             INTEGER
  Decl    2781
  Set     2793    2850    2859
  Used    2794    2817    2821    2822    2824    2825    2828    2829    2832    2861

NTYP                            Stack                             INTEGER
  Decl    3440
  Set     3472    3732
  Used    3482    3483    3490    3734    3735    3736    3737

NTYP                            Stack                             INTEGER
  Decl    3895
  Set     3931    3963    3991    4085    4172    4195
  Used    3933    4093    4109    4173

NTYP                            Stack                             INTEGER
  Decl    5131
  Set     5179
  Used    5214

NTYP                            Stack                             INTEGER
  Decl    5658
  Set     5715    5741    5758    5765    5782    5795    5807    5865    5890
  Used    5717    5742    5761    5766    5767    5768    5769    5770    5784    5797    5809    5813    5817    5866    5867
          5868    5893    5896    5900

NTYP                            Stack                             INTEGER, DIMENSION(<exp>)
  Decl    6776
  Set     6815    6852    6857    6859
  Used    6820    6821    6823    6857    6885    6886    6887    6898    6899    6900    6906    6909    6910    6911    6912
          6913    6914    6919    6941    6942    6943    6947    6948    6949    6950    6951    6952    6958    6959    6960
          6971    6972    6973    6977    6978    6979    6980    6981    6982    6988    6989    6990    7015    7016    7017
          7018

NZG                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    7959    7981
  Set 
  Used    7983    8176

NZG                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl    8341    8348
  Set 
  Used    8356    8357    8364    8385    8424    8440    8441

NZGMAX                                                            INTEGER, PARAMETER
  Decl    7991
  Set 
  Used    7992    8065

OCEALB                          Stack                             REAL(KIND=8)
  Decl    6596
  Set     6632
  Used    6634    6636

OCEALD                          Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    6635    6637

OPTIONS                                                           Module
  Decl
  Set 
  Used      74

P0                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3861
  Set     3954    4188
  Used    4024    4026    4033    4040    4060    4074    4087

P1                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4506
  Set     4546
  Used    4548    4551

P1F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     218     301
  Set 
  Used     534     560     628     683

P1F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4461    4502
  Set 
  Used    4546

P1F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4670    4912
  Set 
  Used    5009

P1F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5263    5555
  Set 
  Used    5698

P1F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6551    6580
  Set 
  Used    6618

P1F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6656    6747
  Set     7012
  Used

P2                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4507
  Set     4547
  Used    4548

P2F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     219     302
  Set 
  Used     534     560     628     683

P2F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4462    4503
  Set 
  Used    4547

P2F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4671    4913
  Set 
  Used    5010

P2F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5264    5556
  Set 
  Used    5699

P2F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6551    6581
  Set 
  Used    6618

P2F                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6656    6748
  Set     7003
  Used

PAR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     216     280
  Set 
  Used

PAR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4209    4257
  Set 
  Used    4324    4408

PAR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4461    4496
  Set     4544    4548    4549    4550
  Used    4545    4549    4550    4551

PAR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4667    4891
  Set 
  Used    5009    5012

PAR                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5261    5534
  Set 
  Used    5695

PATH                            Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     183     187
  Set 
  Used     192

PATH_IN                         Static offset=3264                CHARACTER(200), PRIVATE, SAVE
  Decl     175
  Set      192
  Used

PBL                                                               Subroutine, Module procedure, PRIVATE
  Decl    4656
  Set 
  Used    5684

PBLSIB                          Stack                             REAL(KIND=8), DIMENSION(<exp>, 4, 5)
  Decl    1125
  Set     1547    1548    1549    1550    1554    1556    1563    1565    1575    1577    1637    1638    1647    1648    1649
          1651    1683    1704    1739    1747    1753    1754    1755    1756    1757    1758    1759    1760    1761    1762
          1763    1764    1765    1766    1767    1768    1769    1770    1771    1772    1774    1776    1779    1783
  Used    1789    1790    1791    1792

PCOEFS                                                            REAL(KIND=8), PARAMETER, DIMENSION(2, 2)
  Decl    3886
  Set 
  Used

PD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     216     281
  Set 
  Used

PD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4209    4258
  Set 
  Used    4388    4390    4392    4393    4408    4409

PD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4461    4497
  Set     4545    4551
  Used

PD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4668    4892
  Set 
  Used    5009    5012

PD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5261    5535
  Set 
  Used    5696

PERC                            Stack                             REAL(KIND=8)
  Decl    7461
  Set     7628
  Used    7647

PH1                             Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     153
  Set      804
  Used    7164

PH12                            Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     450
  Set      464
  Used

PH12                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2696    2764
  Set 
  Used    2836

PH12                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3115    3403
  Set 
  Used    3602

PH12                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4673    4941
  Set 
  Used    5034

PH12                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5267    5622
  Set 
  Used    5701

PH1_FIXED                       Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     133
  Set     7199    7282
  Used     804     821    7144    7258

PH1_GBL                         Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     171
  Set      821    7678
  Used     204     464

PH1_R4                          Stack                             REAL(KIND=4), DIMENSION(13, 2)
  Decl    7069
  Set 
  Used    7189    7199

PH2                             Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     152
  Set      803
  Used    7163

PH22                            Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     449
  Set      465
  Used

PH22                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2696    2765
  Set 
  Used    2836

PH22                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3115    3404
  Set 
  Used    3602

PH22                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4673    4942
  Set 
  Used    5034

PH22                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5267    5623
  Set 
  Used    5701

PH2_FIXED                       Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     134
  Set     7200    7283
  Used     803     822    7145    7259

PH2_GBL                         Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     170
  Set      822    7679
  Used     203     465

PH2_R4                          Stack                             REAL(KIND=4), DIMENSION(13, 2)
  Decl    7070
  Set 
  Used    7189    7200

PHENST                          Stack                             REAL(KIND=8), DIMENSION(<exp>, 9)
  Decl    7475
  Set     7502    7555    7556    7557    7558    7559    7562    7563    7564    7565    7573    7574
  Used    7573    7574    7584    7606    7607    7608    7609    7615    7617    7618    7620    7621    7635    7642    7643
          7649    7650

PHI                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    7452
  Set     7519    7524    7526
  Used    7524    7526    7550    7555    7556    7557    7558    7559    7563

PHROOT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     216     284
  Set 
  Used

PHROOT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4562    4612
  Set     4641    4643    4645
  Used

PHROOT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4668    4895
  Set 
  Used    5007

PHROOT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5261    5538
  Set 
  Used    5696

PHSAT                           Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     137
  Set     7203    7288
  Used    2485    2490    3490    4632    7148    7798    8082    8160

PHSAT_R4                        Stack                             REAL(KIND=4), DIMENSION(13)
  Decl    7073
  Set 
  Used    7190    7203

PHSOIL                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl     217     286
  Set 
  Used

PHSOIL                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(IN)
  Decl    2693    2757
  Set 
  Used    2831    2832

PHSOIL                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    3111    3327
  Set 
  Used    3599

PHSOIL                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    4562    4613
  Set     4632
  Used    4641    4643

PHSOIL                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    4668    4897
  Set 
  Used    5007    5030

PHSOIL                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    5262    5540
  Set 
  Used    5696

PIE                             Static offset=0                   REAL(KIND=8), SAVE, Initialized
  Decl    7474
  Set 
  Used    7519

PIE                             Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    1164    3050    3903    4309    5731

PINF                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3875
  Set     4074
  Used    4077    4079

PMAX                            Stack                             REAL(KIND=8)
  Decl    2393
  Set     2484
  Used    2485    2490

PMIN                            Stack                             REAL(KIND=8)
  Decl    2394
  Set     2489
  Used    2490

POROS                           Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     139
  Set     7205    7290
  Used    2438    2439    2451    2455    2457    2459    2521    2522    2524    2555    2556    2558    2604    2609    2610
          2613    2615    2619    2620    2623    2625    2640    2646    2652    3933    4109    4173    5214    5676    5677
          5678    5717    5742    5784    5817    5866    5867    5868    7150    7800    8084    8162

POROS_R4                        Stack                             REAL(KIND=4), DIMENSION(13)
  Decl    7075
  Set 
  Used    7190    7205

POWER1                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4269
  Set     4370
  Used    4388    4392

POWER2                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4270
  Set     4371
  Used    4390    4393

POWS                            Stack                             REAL(KIND=8)
  Decl    2390
  Set     2449
  Used    2450    2452    2453

PP                                                                REAL(KIND=8), PARAMETER
  Decl    6004
  Set 
  Used    6047

PPC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     220     251
  Set      526     658
  Used     563     686

PPC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3760    3829
  Set 
  Used    3909    3916    3922

PPC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4665    4923
  Set 
  Used    5017

PPC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5265    5505
  Set 
  Used    5693    5870    5895

PPCI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     224     393
  Set 
  Used     658

PPL                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     220     252
  Set      525     657
  Used     563     686

PPL                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3760    3830
  Set 
  Used    3909    3916    3922

PPL                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4665    4924
  Set 
  Used    5017

PPL                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5265    5506
  Set 
  Used    5693    5870    5895

PPLI                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     224     392
  Set 
  Used     657

PROPS                           Stack                             REAL(KIND=8)
  Decl    2401
  Set     2511    2512    2545    2546
  Used    2513    2514    2547    2548

PSB                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     209     330
  Set 
  Used     541     664

PSB                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     917    1110
  Set 
  Used    1247    1256

PSB                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3105    3361
  Set 
  Used    3693    3721

PSB                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4661    4947
  Set 
  Used    5024

PSB                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5254    5584
  Set 
  Used    5689    5849

PSIT                            Stack                             REAL(KIND=8)
  Decl    3409
  Set     3490
  Used    3498

PSIT                            Stack                             REAL(KIND=8)
  Decl    7778
  Set 
  Used    7886

PSIT                            Stack                             REAL(KIND=8)
  Decl    8026
  Set 
  Used    8135

PSIT                            Dummy Arg                         REAL(KIND=8), INTENT(INOUT)
  Decl    8269    8278
  Set     8289
  Used    8305    8325

PSUR                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     220     250
  Set 
  Used     563     686

PSUR                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     924    1040
  Set 
  Used    1509

PSUR                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3113    3297
  Set 
  Used    3547    3700

PSUR                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4665    4922
  Set 
  Used    5032

PSUR                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5265    5504
  Set 
  Used    5693

PSY                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     211     343
  Set 
  Used     544     667

PSY                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     917    1114
  Set 
  Used    1268

PSY                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3107    3371
  Set 
  Used    3693

PSY                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4662    4958
  Set 
  Used    5026

PSY                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5256    5597
  Set 
  Used    5690

PSYI                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1146
  Set     1268
  Used    1489    1499    1511    1513    1515    1517    1519    1521    1810    1814    1827    1829    1833

Q3G                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2376
  Set     2416    2450    2453    2454    2456    2457    2459    2514    2548
  Used    2524    2558    2604    2605

QM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     219     242
  Set      573     698     709
  Used     562     685     703

QM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     924    1038
  Set 
  Used    1509

QM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3113    3293
  Set     3642    3708    3729
  Used    3449    3547    3700

QM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4664    4918
  Set 
  Used    5032

QM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5264    5500
  Set 
  Used    5692

QM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6388    6396
  Set 
  Used    6422    6448    6486    6509    6530

QM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6546    6563
  Set     6603
  Used

QM0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     227     244
  Set 
  Used     703

QM0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6388    6413
  Set     6422    6448    6486    6530
  Used    6473

QMAX                            Stack                             REAL(KIND=8)
  Decl    2405
  Set     2609    2619
  Used    2611    2621

QMIN                            Stack                             REAL(KIND=8)
  Decl    2406
  Set     2610    2620
  Used    2612    2622

QMM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     227     245
  Set 
  Used     703

QMM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6388    6415
  Set     6473    6509
  Used    6448

QMM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6548    6570
  Set 
  Used    6603

QMSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3421
  Set     3449
  Used    3642

QMSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6201
  Set     6263
  Used    6284

QMTX                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, 3), INTENT(INOUT)
  Decl     221     359
  Set      723
  Used     577     578     579

QMTX                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, 3), INTENT(INOUT)
  Decl    6070    6150
  Set     6284    6313    6321
  Used    6263    6305    6306    6330    6342

QQ                                                                REAL(KIND=8), PARAMETER
  Decl    6005
  Set 
  Used    6045

QQQ_1                           Stack                             REAL(KIND=8)
  Decl    2385
  Set     2598    2611    2612
  Used    2613    2615

QQQ_2                           Stack                             REAL(KIND=8)
  Decl    2385
  Set     2599    2621    2622
  Used    2623    2625

QSFC                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     430
  Set      739     762     767     773
  Used     755     764     769     775     777

QSFC                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6074    6178
  Set     6346
  Used

QSFC0                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     426
  Set      769     775
  Used     764     783

QSFCM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     428
  Set      764     777     783
  Used     739

QSURF                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     225     404
  Set 
  Used     746

QSURF                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6070    6153
  Set 
  Used    6299    6307    6318    6339

R4                              Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    7063    7087

R8                              Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used      99     100     102     103     104     105     106     107     108     109     110     111     112     114     115
           116     117     118     119     120     121     122     123     124     127     128     129     130     131     132
           133     134     135     136     137     138     139     140     141     142     143     144     145     146     147
           148     149     150     151     152     153     154     155     156     157     158     159     160     162     163
           164     165     166     167     168     169     170     171     172     186     234     242     243     244     245
           246     247     248     249     250     251     252     253     257     258     259     260     261     265     266
           267     268     269     270     271     272     273     274     275     276     277     278     279     280     281
           282     283     284     285     286     287     288     289     290     291     292     293     294     295     296
           297     298     299     300     301     302     306     307     308     309     310     311     312     313     314
           315     316     317     318     319     320     321     322     323     324     325     329     330     331     332
           333     334     335     336     337     338     339     340     341     342     343     344     345     346     347
           348     349     354     355     356     358     359     360     361     362     363     364     365     369     370
           371     372     373     374     375     380     381     382     383     384     385     386     388     389     390
           391     392     393     394     395     396     397     398     401     402     403     404     406     407     408
           409     410     411     412     413     415     416     417     418     420     421     422     423     424     425
           426     427     428     429     430     431     434     435     436     437     438     439     440     441     442
           443     444     445     446     447     448     449     450     795     796     882     883     884     885     889
           890     892     893    1028    1033    1038    1039    1040    1044    1045    1046    1047    1051    1052    1053
          1054    1055    1056    1057    1058    1059    1060    1061    1062    1063    1064    1065    1066    1067    1068
          1069    1070    1071    1072    1073    1077    1078    1079    1080    1081    1082    1083    1084    1085    1086
          1087    1091    1092    1093    1094    1095    1096    1097    1098    1099    1100    1101    1102    1103    1104
          1105    1109    1110    1111    1112    1113    1114    1115    1116    1117    1118    1119    1120    1123    1125
          1126    1127    1128    1129    1130    1131    1132    1133    1134    1135    1136    1137    1138    1139    1140
          1141    1142    1143    1144    1145    1146    1147    1148    1149    1150    1151    1152    1153    1154    1155
          1156    1157    1158    1160    1161    1162    1913    1917    1918    1919    1920    1921    1922    1923    1924
          1925    1926    1930    1931    1932    1933    1934    1935    1936    1937    1940    1941    1942    1943    1944
          1945    1946    1947    2025    2027    2028    2032    2036    2037    2038    2039    2040    2041    2043    2044
          2046    2139    2141    2142    2147    2148    2149    2153    2154    2155    2159    2160    2161    2162    2163
          2164    2166    2170    2172    2174    2176    2178    2181    2184    2185    2186    2187    2188    2189    2190
          2191    2192    2193    2194    2195    2196    2197    2198    2199    2200    2201    2202    2360    2367    2368
          2369    2370    2374    2376    2377    2378    2379    2380    2381    2382    2383    2384    2385    2387    2388
          2389    2390    2391    2392    2393    2394    2395    2396    2397    2398    2399    2400    2401    2402    2403
          2404    2405    2406    2407    2408    2412    2734    2735    2741    2742    2744    2748    2749    2750    2754
          2755    2756    2757    2758    2760    2761    2762    2763    2764    2765    2767    2768    2769    2770    2771
          2772    2773    2774    2775    2776    2777    2778    2938    2944    2948    2949    2950    2951    2955    2956
          2957    2958    2959    2960    2961    2962    2963    2964    2965    2966    2967    2968    2972    2973    2974
          2975    2976    2977    2978    2979    2980    2981    2982    2983    2984    2985    2989    2990    2991    2995
          3000    3001    3002    3003    3004    3005    3006    3007    3008    3010    3011    3012    3013    3014    3277
          3283    3284    3285    3286    3287    3288    3293    3294    3295    3296    3297    3301    3302    3303    3304
          3305    3309    3310    3311    3312    3313    3314    3315    3316    3317    3318    3319    3320    3321    3322
          3323    3324    3325    3326    3327    3328    3329    3330    3331    3332    3333    3334    3335    3336    3340
          3341    3342    3343    3344    3345    3346    3347    3348    3349    3350    3351    3352    3353    3354    3355
          3356    3360    3361    3362    3363    3364    3365    3366    3367    3368    3369    3370    3371    3372    3373
          3374    3375    3376    3377    3382    3383    3384    3385    3386    3387    3388    3389    3390    3391    3392
          3393    3394    3395    3396    3398    3399    3400    3401    3402    3403    3404    3407    3409    3410    3411
          3412    3413    3414    3415    3416    3418    3419    3420    3421    3422    3423    3424    3425    3426    3427
          3431    3432    3433    3434    3435    3436    3437    3818    3822    3828    3829    3830    3834    3835    3836
          3837    3838    3842    3843    3844    3845    3846    3850    3851    3854    3855    3856    3857    3858    3859
          3860    3861    3862    3863    3864    3865    3866    3867    3868    3869    3870    3871    3872    3873    3874
          3875    3876    3877    3878    3879    3880    3881    3882    3883    3884    3886    3889    3890    3891    3892
          4247    4249    4250    4251    4252    4257    4258    4259    4260    4264    4266    4267    4268    4269    4270
          4271    4272    4273    4274    4275    4276    4277    4282    4283    4284    4285    4486    4491    4495    4496
          4497    4498    4499    4500    4501    4502    4503    4506    4507    4608    4612    4613    4616    4860    4868
          4869    4870    4871    4872    4876    4877    4878    4879    4880    4881    4882    4883    4884    4885    4886
          4887    4888    4889    4890    4891    4892    4893    4894    4895    4896    4897    4898    4899    4900    4901
          4902    4903    4904    4905    4906    4907    4908    4909    4910    4911    4912    4913    4918    4919    4920
          4921    4922    4923    4924    4925    4927    4928    4929    4930    4931    4932    4933    4934    4935    4936
          4937    4938    4939    4940    4941    4942    4946    4947    4948    4949    4950    4951    4952    4953    4954
          4955    4956    4957    4958    4959    4960    4961    4962    4963    4964    4966    4967    4968    4969    4970
          4971    4972    4973    4974    4975    4976    4977    4978    4979    4980    4981    4982    4983    4989    4990
          4991    4992    4993    4994    4995    4996    4997    4998    4999    5000    5001    5002    5003    5084    5091
          5092    5093    5094    5095    5099    5100    5101    5102    5103    5107    5108    5109    5110    5112    5113
          5114    5115    5116    5117    5118    5119    5120    5121    5122    5123    5124    5125    5126    5127    5132
          5491    5500    5501    5502    5503    5504    5505    5506    5507    5511    5512    5513    5514    5515    5519
          5520    5521    5522    5523    5524    5525    5526    5527    5528    5529    5530    5531    5532    5533    5534
          5535    5536    5537    5538    5539    5540    5541    5542    5543    5544    5545    5546    5547    5548    5549
          5550    5551    5552    5553    5554    5555    5556    5560    5561    5562    5563    5564    5565    5566    5567
          5568    5569    5570    5571    5572    5573    5574    5575    5576    5577    5578    5579    5583    5584    5585
          5586    5587    5588    5589    5590    5591    5592    5593    5594    5595    5596    5597    5598    5599    5600
          5601    5602    5603    5608    5609    5610    5611    5612    5613    5614    5615    5616    5617    5618    5619
          5620    5621    5622    5623    5631    5632    5633    5634    5635    5636    5637    5638    5639    5640    5641
          5642    5643    5644    5645    5647    5648    5649    5650    5651    5652    5653    5660    5661    5662    5663
          5664    5665    5666    5667    5968    5969    5970    5971    5972    5973    5974    5975    5976    5977    5978
          5979    5980    5981    5982    5983    5984    5985    5986    5987    5988    5989    5990    5991    5994    5995
          5996    5997    5998    5999    6000    6001    6002    6003    6004    6005    6006    6007    6008    6009    6148
          6149    6150    6151    6152    6153    6154    6155    6156    6157    6158    6159    6160    6161    6162    6163
          6164    6165    6166    6167    6168    6169    6170    6171    6172    6173    6174    6175    6176    6177    6178
          6179    6181    6182    6183    6184    6185    6186    6187    6188    6189    6190    6191    6192    6193    6194
          6195    6196    6197    6198    6199    6200    6201    6202    6203    6204    6205    6206    6207    6208    6209
          6210    6211    6212    6213    6217    6218    6219    6220    6221    6222    6223    6224    6225    6226    6227
          6228    6229    6230    6232    6233    6234    6235    6236    6237    6392    6395    6396    6397    6398    6399
          6400    6401    6402    6403    6404    6405    6406    6407    6408    6409    6410    6411    6412    6413    6414
          6415    6560    6561    6562    6563    6564    6565    6566    6567    6568    6569    6570    6571    6572    6573
          6574    6575    6576    6577    6578    6579    6580    6581    6582    6583    6584    6585    6589    6590    6591
          6592    6593    6594    6596    6597    6738    6739    6740    6741    6742    6743    6744    6745    6746    6747
          6748    6749    6750    6751    6752    6756    6757    6760    6761    6762    6763    6764    6765    6766    6767
          6768    6769    6770    6773    6774    6784    6789    6791    6792    6793    7057    7058    7105    7106    7107
          7108    7109    7219    7220    7221    7222    7223    7224    7225    7226    7227    7228    7229    7331    7443
          7445    7446    7450    7451    7452    7453    7454    7455    7456    7457    7458    7459    7460    7461    7462
          7463    7464    7474    7475    7479    7481    7484    7489    7494    7495    7722    7723    7727    7728    7731
          7732    7733    7735    7740    7746    7747    7748    7749    7750    7751    7758    7759    7760    7761    7762
          7763    7764    7765    7766    7767    7768    7774    7775    7776    7777    7778    7779    7780    7860    7976
          7978    7979    7982    7983    7985    7986    7987    7992    7993    7994    7998    7999    8000    8002    8006
          8007    8008    8014    8015    8016    8017    8018    8019    8020    8021    8022    8023    8024    8026    8027
          8028    8048    8053    8065    8119    8270    8271    8272    8273    8274    8275    8276    8277    8278    8279
          8280    8281    8282    8283    8349    8350    8351    8352    8354    8355    8356    8357    8358

RA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     214     265
  Set 
  Used     551     674

RA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     921    1051
  Set 
  Used    1283    1302    1339    1360    1368    1386    1462    1468    1509

RA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1869    1917
  Set 
  Used    1965    1966

RA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2075    2153
  Set     2298    2302
  Used

RA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2882    2955
  Set 
  Used    3027    3032

RA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3309
  Set 
  Used    3557    3564    3589    3595    3606    3611    3612    3655    3697    3716

RA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4665    4876
  Set 
  Used    5028

RA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5259    5519
  Set 
  Used    5693    5855    5857

RADALB                                                            Subroutine, Module procedure
  Decl      86    6652
  Set 
  Used       0     624    6614

RADFAC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl     218     297
  Set 
  Used

RADFAC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(IN)
  Decl    4461    4498
  Set 
  Used    4532

RADFAC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(IN)
  Decl    4670    4908
  Set 
  Used    5009

RADFAC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(IN)
  Decl    5263    5551
  Set 
  Used    5698

RADFAC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl    6550    6576
  Set 
  Used

RADFAC                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3, 2), INTENT(INOUT)
  Decl    6655    6743
  Set     6997    6998    6999    7000    7006    7007    7008    7009
  Used

RADN                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3, 2), INTENT(INOUT)
  Decl     220     253
  Set      505     506     507     508     514     515     516     517     520     521     642     643     644     645     647
           648     649     650     652     653
  Used

RADN                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3, 2), INTENT(IN)
  Decl    4462    4491
  Set 
  Used    4532    4542    4543    4544    4545    4546    4547

RADN                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3, 2), INTENT(IN)
  Decl    4665    4925
  Set 
  Used    5010

RADN                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3, 2), INTENT(IN)
  Decl    5265    5507
  Set 
  Used    5693

RADT                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     216     279
  Set 
  Used

RADT                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     922    1062
  Set     1841    1842
  Used    1683    1704

RADT                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    3111    3323
  Set     3643    3644
  Used    3450    3451    3698

RADT                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4461    4495
  Set     4515    4516    4532    4542    4543
  Used

RADT                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4667    4890
  Set 
  Used    5009    5030

RADT                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5261    5533
  Set 
  Used    5695    5881    5882    5901

RADUSE                                                            Subroutine, Module procedure, PRIVATE
  Decl    4461
  Set 
  Used    5009

RB                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     214     266
  Set 
  Used     551     674

RB                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     921    1052
  Set 
  Used    1283    1302    1313    1339    1345    1360    1368    1375    1411    1417    1810

RB                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1869    1918
  Set 
  Used    1953    1954

RB                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    1983    2036
  Set     2057
  Used

RB                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2882    2956
  Set 
  Used    3027    3032

RB                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3310
  Set 
  Used    3573    3595    3606    3611    3612    3655    3697    3716

RB                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4665    4877
  Set 
  Used    5028

RB                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5259    5520
  Set 
  Used    5693    5855    5857

RBC                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     440
  Set      476
  Used     540     663

RBC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     838     885
  Set      907
  Used

RBC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1983    2028
  Set 
  Used    2057

RBC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3114    3287
  Set     3737
  Used    3459    3573

RBC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4664    4935
  Set 
  Used    5033

RBC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5253    5616
  Set 
  Used    5692

RBRD                                                              Subroutine, Module procedure, PRIVATE
  Decl    1983
  Set 
  Used    3572

RBYG                            Static offset=4864                REAL(KIND=8), PRIVATE, SAVE
  Decl     100
  Set      191
  Used    6029

RC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     214     268
  Set 
  Used     552     675

RC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     921    1054
  Set     1411
  Used    1417    1822

RC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    1869    1920
  Set     1953
  Used    1954

RC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3110    3312
  Set 
  Used    3595    3606    3655    3697

RC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4666    4879
  Set 
  Used    5029

RC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5259    5522
  Set 
  Used    5694

RCDTC                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1148
  Set     1397
  Used    1556    1841

RCDTG                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1149
  Set     1398
  Used    1554    1841

RCP                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     211     344
  Set 
  Used     544     667

RCP                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     917    1115
  Set 
  Used    1268    1294    1313    1321

RCP                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    1868    1932
  Set     1952
  Used

RCP                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3107    3372
  Set 
  Used    3594    3605    3654    3693

RCP                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4662    4959
  Set 
  Used    5026

RCP                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5256    5598
  Set 
  Used    5690

RD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     214     267
  Set 
  Used     551     674

RD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     921    1053
  Set 
  Used    1283    1302    1321    1339    1345    1368    1375    1386    1433    1434    1435    1441    1442    1443    1450
          1456    1814    1823    1824    1825

RD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1869    1919
  Set 
  Used    1957    1959    1960    1962

RD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    1983    2037
  Set     2065
  Used

RD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2882    2957
  Set 
  Used    3027    3031

RD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3311
  Set 
  Used    3573    3595    3606    3611    3612    3655    3697    3716

RD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4666    4878
  Set 
  Used    5028

RD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5259    5521
  Set 
  Used    5694    5855    5857

RDAY                            Stack                             REAL(KIND=8)
  Decl    7450
  Set     7506
  Used    7607    7609    7614    7615    7618    7621    7635    7639    7643    7649    7650    7654

RDC                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     439
  Set      477
  Used     539     662

RDC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     838     884
  Set      906
  Used

RDC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1983    2027
  Set 
  Used    2065

RDC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3114    3286
  Set     3736
  Used    3459    3573

RDC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4664    4934
  Set 
  Used    5033

RDC                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5253    5615
  Set 
  Used    5692

RDENOM                          Stack                             REAL(KIND=8)
  Decl    2404
  Set     2595    2596    2597
  Used    2598    2599

RDSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl    3424
  Set     3450    3451
  Used    3643    3644

REAL                                                              Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0    7219    7221    7223    7225    7226    7227    7228    7229    7860    8119

RESHAPE                                                           Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    3886    7740    8048    8053

RESHAPE                                                           Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    3886    7740    8048    8053

RESHAPE                                                           Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0    3886    7740    8048    8053

RE_ASSIGN_SIB_SOIL_PROP                                           Subroutine, Module procedure
  Decl      89    7328
  Set 
  Used

RFAC                            Stack                             REAL(KIND=8)
  Decl    2188
  Set     2207
  Used

RG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     214     269
  Set 
  Used     552     675

RG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     921    1055
  Set     1421
  Used    1433    1441    1823

RG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    1869    1921
  Set     1955
  Used    1957

RG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3110    3313
  Set 
  Used    3595    3606    3655    3697

RG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4666    4880
  Set 
  Used    5029

RG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5259    5523
  Set 
  Used    5694

RGDTC                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1150
  Set     1399
  Used    1548    1842

RGDTG                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1151
  Set     1400
  Used    1547    1842

RHI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     416
  Set 
  Used     751

RHI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5917    5970
  Set     6058
  Used

RHI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6072    6169
  Set 
  Used    6275    6291    6292    6294    6295    6298    6299    6301    6304    6305    6307    6316    6317    6318    6320
          6322    6338    6339    6341    6342

RHO                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     424
  Set 
  Used     754

RHO                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6074    6177
  Set     6254
  Used    6291    6292    6294    6295    6298    6299    6301    6304    6305    6307    6317    6318    6320    6322    6338
          6339    6341    6342    6361    6362    6365    6367

RHO4                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4276
  Set     4415
  Used    4425    4431

RHOAIR                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     210     342
  Set 
  Used     544     667

RHOAIR                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1868    1931
  Set 
  Used    1952

RHOAIR                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3106    3370
  Set 
  Used    3594    3605    3654

RHOAIR                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4662    4957
  Set 
  Used    5025

RHOAIR                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5255    5596
  Set 
  Used    5690    5834

RHOICE                                                            REAL(KIND=8), PARAMETER
  Decl    6236
  Set 
  Used    6246

RIB                             Stack                             REAL(KIND=8)
  Decl    2176
  Set     2260    2264    2265
  Used    2266    2267    2268    2269    2279    2280    2281    2283    2285

RIB                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5919    5989
  Set     6038    6039    6040
  Used    6041    6042    6044    6047

RIB                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6196
  Set 
  Used    6277

RIBC                                                              REAL(KIND=8), PARAMETER
  Decl    5995
  Set 
  Used

RMI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     415
  Set 
  Used     751

RMI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5917    5969
  Set     6057
  Used

RMI                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6072    6168
  Set 
  Used    6275    6361    6362    6365    6367

RNET                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6173
  Set     6253
  Used    6298

ROFF                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     214     324
  Set 
  Used     550     673

ROFF                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2315    2374
  Set     2605    2640    2646    2652
  Used

ROFF                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3759    3850
  Set     3925    3986    4107    4166
  Used

ROFF                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4660    4983
  Set 
  Used    5016

ROFF                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5043    5110
  Set     5216
  Used

ROFF                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5259    5578
  Set     5817
  Used    5688    5726    5804    5870    5896

ROFFO                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3877
  Set     4103    4106
  Used    4107    4108

ROOT                                                              Subroutine, Module procedure, PRIVATE
  Decl    4562
  Set 
  Used    5007

ROOTD                           Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     135
  Set     7201    7284
  Used    3601    5767    5768    7146    7257

ROOTD                           Dummy Arg                         REAL(KIND=8), DIMENSION(13, 2), INTENT(IN)
  Decl    2695    2741
  Set 
  Used    2817    2832

ROOTD_R4                        Stack                             REAL(KIND=4), DIMENSION(13, 2)
  Decl    7071
  Set 
  Used    7190    7201

ROOTGC                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    7454
  Set     7597    7655
  Used

RPLANT                          Stack                             REAL(KIND=8)
  Decl    8283
  Set     8325    8326
  Used    8334

RR                                                                REAL(KIND=8), PARAMETER
  Decl    6006
  Set 
  Used    6045

RSAME                           Stack                             REAL(KIND=8)
  Decl    2396
  Set     2494    2497    2528    2531
  Used    2499    2533

RSOIL                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     216     283
  Set 
  Used     555     678

RSOIL                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     922    1064
  Set 
  Used    1197    1423    1821

RSOIL                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1870    1926
  Set 
  Used    1956

RSOIL                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3111    3325
  Set     3486
  Used    3515    3516    3596    3607    3656    3698

RSOIL                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4668    4894
  Set 
  Used    5030

RSOIL                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5261    5537
  Set 
  Used    5696

RSOIL                           Stack                             REAL(KIND=8)
  Decl    8280
  Set     8299    8319
  Used    8334

RSOILM                          Stack                             REAL(KIND=8)
  Decl    7768
  Set     7883
  Used    7885

RSOILM                          Stack                             REAL(KIND=8)
  Decl    8024
  Set     8124
  Used    8131

RSOILM                          Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    8268    8274
  Set 
  Used    8319

RST                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     216     282
  Set 
  Used

RST                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     922    1063
  Set     1197
  Used    1411    1421

RST                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    1869    1925
  Set 
  Used    1953    1955

RST                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    2693    2756
  Set     2860    2862    2866    2867
  Used

RST                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    3111    3324
  Set     3515
  Used    3452    3453    3595    3599    3606    3655    3698

RST                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4209    4259
  Set     4314    4345    4425    4431    4438    4444    4450
  Used

RST                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4668    4893
  Set 
  Used    5012    5030

RST                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5261    5536
  Set 
  Used    5696

RSTPAR                          Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     159
  Set      809
  Used    7170

RSTPAR2                         Stack                             REAL(KIND=8), DIMENSION(<exp>, 2, 3)
  Decl     434
  Set      466     467     468
  Used

RSTPAR2                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3), INTENT(IN)
  Decl    4210    4247
  Set 
  Used    4333    4352    4353    4425    4438

RSTPAR2                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3), INTENT(IN)
  Decl    4672    4930
  Set 
  Used    5013

RSTPAR2                         Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 3), INTENT(IN)
  Decl    5266    5608
  Set 
  Used    5700

RSTPAR_FIXED                    Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     127
  Set     7193    7275
  Used     809     823     824     825    7138    7249

RSTPAR_GBL                      Heap                              REAL(KIND=8), DIMENSION(:, :, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     172
  Set      823     824     825    7680    7681    7682
  Used     205     466     467     468

RSTPAR_R4                       Stack                             REAL(KIND=4), DIMENSION(13, 2, 3)
  Decl    7063
  Set 
  Used    7189    7193

RSURF                           Stack                             REAL(KIND=8)
  Decl    1127
  Set     1423    1821
  Used    1434    1435    1442    1443    1824    1825

RSURF                           Stack                             REAL(KIND=8)
  Decl    1941
  Set     1956
  Used    1959    1960

RUNOFF                                                            Subroutine, Module procedure, PRIVATE
  Decl    2314
  Set 
  Used    5803

RZ2                             Stack                             REAL(KIND=8)
  Decl    2202
  Set     2280
  Used    2283    2285

RZL                             Stack                             REAL(KIND=8)
  Decl    2201
  Set     2279
  Used    2283

SALB                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 2), INTENT(INOUT)
  Decl     221     355
  Set 
  Used

SALB                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 2), INTENT(INOUT)
  Decl    6551    6583
  Set 
  Used    6626    6627    6628    6629

SALB                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2, 2), INTENT(INOUT)
  Decl    6657    6750
  Set     7001    7002    7010    7011
  Used

SATCAP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     217     289
  Set 
  Used

SATCAP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl     923    1068
  Set 
  Used    1180    1187

SATCAP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    3112    3330
  Set 
  Used    3473    3474    3699

SATCAP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3759    3844
  Set 
  Used    3982    4039    4061

SATCAP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4669    4900
  Set 
  Used    5016    5031

SATCAP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5262    5543
  Set 
  Used    5697

SATCAP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    6549    6574
  Set 
  Used

SATCAP                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    6654    6741
  Set     6818    6819    6822
  Used    6829

SATCO                           Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     138
  Set     7204    7289
  Used    2451    2498    2500    2501    2532    2534    2535    4093    7149

SATCO_R4                        Stack                             REAL(KIND=4), DIMENSION(13)
  Decl    7074
  Set 
  Used    7190    7204

SCOV                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6764
  Set     6827    6829
  Used    6879    6936    6942    6943    6948    6949    6951    6952    6959    6960

SCOV2                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6765
  Set     6835    6837
  Used    6879    6911    6914    6966    6972    6973    6978    6979    6981    6982    6989    6990

SDEP                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     892
  Set      902     903
  Used     904     906     907

SEASFC                                                            Subroutine, Module procedure
  Decl      84    6069
  Set 
  Used     743

SENS                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     225     409
  Set 
  Used     750

SENS                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6072    6164
  Set     6317    6338
  Used    6319    6341

SEXTRP                                                            Subroutine, Module procedure
  Decl      85    6385
  Set 
  Used     700

SFC_SSIB                                                          Module
  Decl       6
  Set 
  Used

SFLXES                                                            Subroutine, Module procedure, PRIVATE
  Decl    3103
  Set 
  Used    5022

SHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     213     322
  Set 
  Used     550     673

SHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2881    2985
  Set     3056
  Used

SHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3109    3356
  Set 
  Used    3715

SHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4660    4982
  Set 
  Used    5028

SHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5043    5108
  Set 
  Used    5230

SHF                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5258    5576
  Set 
  Used    5688    5726    5882    5901

SI1                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    7055    7057
  Set 
  Used    7312

SIBMAX                          Stack                             REAL(KIND=8), DIMENSION(13)
  Decl    7748
  Set     7833
  Used    7835    7847    7854    7866    7875    7900    7942

SIBMAX                          Stack                             REAL(KIND=8), DIMENSION(13)
  Decl    8000
  Set     8114
  Used    8115    8117    8118    8120    8123    8139

SIBWET                                                            Subroutine, Module procedure
  Decl      91    7696
  Set 
  Used

SIBWET_GLSM                                                       Subroutine, Module procedure
  Decl      92    7951
  Set 
  Used

SIGKI                           Dummy Arg                         REAL(KIND=8), DIMENSION(1), INTENT(IN)
  Decl     225     407
  Set 
  Used     749

SIGKI                           Dummy Arg                         REAL(KIND=8), DIMENSION(1), INTENT(IN)
  Decl    5918    5977
  Set 
  Used    6035

SIGKI                           Dummy Arg                         REAL(KIND=8), DIMENSION(1), INTENT(IN)
  Decl    6072    6162
  Set 
  Used    6241    6247    6276    6317    6338

SIGN                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0    1844    3661    7524    7526

SIN                                                               Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used     749

SINCLI                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6007
  Set     6020
  Used    6027

SINCLT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     210     341
  Set 
  Used     544     667

SINCLT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5255    5595
  Set 
  Used    5852    5853

SINCLT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5919    5968
  Set 
  Used    6020

SINCLT                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6071    6161
  Set 
  Used    6277    6372    6373    6376    6377

SINMAX                          Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    7697    7723
  Set 
  Used    7916    7917    7918    7919    7920    7921

SINP                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    7697    7722
  Set 
  Used    7915

SL1                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    7055    7058
  Set 
  Used    7312

SL1KAP                          Stack                             REAL(KIND=8)
  Decl    6224
  Set     6247
  Used    6294    6298    6302    6303

SLOP                            Stack                             REAL(KIND=8)
  Decl    2389
  Set     2437    2438    2439
  Used    2452

SLRAD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     225     401
  Set 
  Used     745

SLRAD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6070    6151
  Set 
  Used    6253

SM                              Stack                             REAL(KIND=8), DIMENSION(13, <exp>)
  Decl    7731
  Set     7784    7902
  Used    7932    7934    7936    7942

SM                              Stack                             REAL(KIND=8), DIMENSION(13, <exp>)
  Decl    7985
  Set     8069    8141
  Used

SMAL2                                                             REAL(KIND=8), PARAMETER
  Decl    2412
  Set 
  Used    2421    2422    2423

SMALL                                                             REAL(KIND=8), PARAMETER
  Decl    3431
  Set 
  Used    3481    3485    3508

SMIN                            Stack                             REAL(KIND=8)
  Decl    7762
  Set     7854
  Used    7860

SMIN                            Stack                             REAL(KIND=8)
  Decl    8018
  Set     8118
  Used    8119

SNOFAC                          Stack                             REAL(KIND=8)
  Decl    3014
  Set     3062
  Used    3065    3081

SNOMEL                          Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    3062    4130    4131    4134    4142    4143    4146    5185    5187    5202

SNOW                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     217     290
  Set 
  Used

SNOW                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    3759    3845
  Set     4009    4079    4087    4136    4148    4187
  Used    4011    4117    4142    4186

SNOW                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4669    4901
  Set 
  Used    5016

SNOW                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5043    5101
  Set     5166    5169    5203    5205
  Used    5183    5205    5223

SNOW                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5262    5544
  Set 
  Used    5697    5726

SNOWM                                                             Subroutine, Module procedure, PRIVATE
  Decl    5042
  Set 
  Used    5725

SNOWP                           Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl    3883
  Set     3999    4004
  Used    4009    4087    4118

SOILM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    7958    7976
  Set     8258
  Used

SOILMO                          Stack                             REAL(KIND=8)
  Decl    7766
  Set     7869    7894
  Used    7875    7900    7902

SOILMO                          Stack                             REAL(KIND=8)
  Decl    8022
  Set     8122    8138
  Used    8123    8139    8141

SPECHT                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3863
  Set     3967    3972
  Used    4119    4120

SPEEDM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     421
  Set 
  Used     753

SPEEDM                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2172
  Set     2214    2215
  Used    2228    2244    2261    2297

SPEEDM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5918    5984
  Set     6027    6028
  Used    6038    6056

SPEEDM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6073    6174
  Set     6378    6379
  Used    6276    6316

SPWET                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3882
  Set     4197
  Used    4198

SPWET                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5122
  Set     5183
  Used    5187

SPWET1                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3864
  Set     3995
  Used    4119    4120

SQRT                                                              Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0    2057    2214    5731    6043    6045    6048    6374    6378    7044

SREF                            Stack                             REAL(KIND=8)
  Decl    7761
  Set     7847
  Used    7860    7869

SREF                            Stack                             REAL(KIND=8)
  Decl    8017
  Set     8117
  Used    8119    8122

SS                                                                REAL(KIND=8), PARAMETER
  Decl    5999
  Set 
  Used    6048

SSIB                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     224     395
  Set 
  Used     708     710     711     712     713     714     715

SSIB                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    7697    7728
  Set     7787    7936
  Used

SSIB                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    7955    7979
  Set     8072    8245    8252
  Used

SSIBT                           Stack                             REAL(KIND=8)
  Decl    7777
  Set     7932
  Used    7934

SSIB_DRIVER                                                       Subroutine, Module procedure
  Decl      98     208
  Set 
  Used

ST4                             Stack                             REAL(KIND=8)
  Decl    6225
  Set     6248
  Used    6293

STB4                            Stack                             REAL(KIND=8)
  Decl    1160
  Set     1392
  Used    1398    1399    1400

STB8                            Stack                             REAL(KIND=8)
  Decl    1161
  Set     1393
  Used    1397

STBI                            Stack                             REAL(KIND=8)
  Decl    6793
  Set     7024
  Used    7044

STEFAN                          Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    1392    1393    6248    6300    7024    7035    7036    7037    7038    7042

STM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl     218     295
  Set 
  Used

STM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2693    2758
  Set 
  Used    2866

STM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    3112    3335
  Set     3452    3453    3516
  Used    3599

STM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4670    4906
  Set 
  Used    5031

STM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5263    5549
  Set 
  Used    5698

STOMAT                                                            Subroutine, Module procedure, PRIVATE
  Decl    4208
  Set 
  Used    5012

STOR                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     418
  Set 
  Used     752

STOR                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6073    6171
  Set     6269    6352
  Used

STRES2                                                            Subroutine, Module procedure, PRIVATE
  Decl    2692
  Set 
  Used    3598

SUBDT                           Stack                             REAL(KIND=8)
  Decl    2387
  Set     2414
  Used    2452    2521    2522    2524    2555    2556    2558    2604    2605    2609    2610    2613    2615    2619    2620
          2623    2625

SUBDTI                          Stack                             REAL(KIND=8)
  Decl    2388
  Set     2415
  Used    2455    2458

SYR                                                               REAL(KIND=8), PARAMETER
  Decl    7494
  Set 
  Used    7555    7556    7557    7558    7559    7562    7563    7565

TA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     215     272
  Set 
  Used     553     676

TA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     921    1056
  Set     1302
  Used    1313    1321

TA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2075    2154
  Set 
  Used    2259

TA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2693    2754
  Set 
  Used    2851

TA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3110    3316
  Set     3543    3611
  Used    3557    3564    3584    3589    3599    3618    3697

TA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4666    4883
  Set 
  Used    5029

TA                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5260    5526
  Set     5857
  Used    5694

TAEN                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3003
  Set     3031
  Used

TBEE                            Stack                             REAL(KIND=8)
  Decl    7750
  Set     7799
  Used    7847    7854    7885

TBEE                            Stack                             REAL(KIND=8)
  Decl    8007
  Set     8083    8161
  Used    8117    8118    8129

TBEE                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    8268    8272
  Set 
  Used    8289

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     219     257
  Set      594
  Used     532     560     626     683     701

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     923    1044
  Set 
  Used    1302    1313    1397    1399

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2694    2748
  Set 
  Used    2798

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2883    2948
  Set 
  Used    3025

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3112    3301
  Set     3639    3705
  Used    3446    3535    3543    3569    3600    3611    3645    3647    3699    3717

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3759    3834
  Set     4155
  Used    3964

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4671    4868
  Set 
  Used    5016    5031

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5044    5091
  Set     5207
  Used    5143

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5264    5511
  Set     5707
  Used    5699    5727    5857    5897

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6386    6399
  Set 
  Used    6425    6445    6484    6507    6528

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6546    6560
  Set     6606
  Used    6616

TC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6654    6738
  Set 
  Used    6828    7026

TC0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     224     397
  Set 
  Used     701

TC0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6386    6404
  Set     6425    6445    6484    6528
  Used    6471

TC4                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6766
  Set     7026
  Used    7035    7038    7042

TCEN                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3001
  Set     3025
  Used    3031    3065

TCM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     222     369
  Set 
  Used     594     702

TCM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6387    6409
  Set     6471    6507
  Used    6445

TCM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6547    6567
  Set 
  Used    6606

TCSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3418
  Set     3446
  Used    3639

TCTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     215     270
  Set 
  Used     552     675

TCTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1983    2038
  Set 
  Used    2052    2053

TCTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3110    3314
  Set     3569
  Used    3573

TCTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4666    4881
  Set 
  Used    5029

TCTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5260    5524
  Set 
  Used    5694

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     219     259
  Set      593     604
  Used     561     605     606     684     701

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     924    1046
  Set 
  Used    1683

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2315    2368
  Set 
  Used    2510    2544

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2883    2950
  Set 
  Used    3056

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3113    3303
  Set 
  Used    3700    3717

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3759    3836
  Set 
  Used    4163

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4671    4870
  Set 
  Used    5016    5032

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5044    5093
  Set 
  Used    5212

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5264    5513
  Set     5734
  Used    5699    5727    5804    5897

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6386    6397
  Set 
  Used    6423    6443    6482    6505    6526

TD                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6547    6564
  Set     6604
  Used

TD0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     223     373
  Set      606
  Used     701

TD0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6386    6402
  Set     6423    6443    6482    6526
  Used    6469

TDM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     222     371
  Set      605
  Used     593     604     702

TDM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6387    6407
  Set     6469    6505
  Used    6443

TDM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6548    6571
  Set 
  Used    6604

TEM                             Stack                             REAL(KIND=8)
  Decl    1947
  Set     1957
  Used    1958    1961

TEMDIF                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2043
  Set     2053    2055    2059    2061
  Used    2064

TEMP                            Stack                             REAL(KIND=8), DIMENSION(<exp>, 18)
  Decl    6773
  Set     6885    6887    6898    6900    6909    6912    6941    6953    6958    6971    6983    6988
  Used    6997    6998    6999    7000    7001    7002    7003    7004    7005    7006    7007    7008    7009    7010    7011
          7012    7013    7014

TEMRES                                                            Subroutine, Module procedure, PRIVATE
  Decl     916
  Set 
  Used    3692

TEST                            Stack                             LOGICAL, DIMENSION(<exp>)
  Decl    7476
  Set     7512    7657
  Used    7605

TEX                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3873
  Set     4060    4063    4065
  Used    4069

TF                              Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     899    1191    2507    2511    2541    2545    3042    3065    3081    3512    3977    4001    4070    4076    4086
          4122    4126    4133    4135    4145    4147    4163    5165    5174    5180    5191    5193    5212    6809    6828
          6834

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     219     258
  Set      600
  Used     532     561     596     598     626     684     701

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     838     889
  Set 
  Used

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     923    1045
  Set 
  Used    1191    1302    1321    1398    1400    1683

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1983    2032
  Set 
  Used    2064

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2315    2367
  Set 
  Used    2507    2509    2541    2543

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2694    2749
  Set 
  Used    2800

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2883    2949
  Set 
  Used    3024    3056

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3112    3302
  Set     3640    3706
  Used    3447    3459    3498    3512    3536    3570    3573    3600    3611    3646    3648    3699    3717

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3759    3835
  Set     4157
  Used    3971    4070    4181    4183

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4671    4869
  Set 
  Used    5016    5031

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5044    5092
  Set     5209
  Used    5152

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5264    5512
  Set     5708
  Used    5699    5727    5804    5857    5897

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6386    6398
  Set 
  Used    6424    6444    6483    6506    6527

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6546    6561
  Set     6605
  Used    6616

TG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6654    6739
  Set 
  Used    6809    6834    7027

TG0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     223     374
  Set      621
  Used     701

TG0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6386    6403
  Set     6424    6444    6483    6527
  Used    6431    6438    6470    6492    6499

TG4                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6767
  Set     7027
  Used    7036    7037    7043

TGEFF                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     221     356
  Set 
  Used     535     629     726

TGEFF                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6552    6584
  Set 
  Used    6619

TGEFF                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6657    6751
  Set     7044
  Used

TGEN                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3000
  Set     3024
  Used    3031    3042    3081

TGM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     222     370
  Set      620
  Used     600     702

TGM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6387    6408
  Set     6470    6479    6506
  Used    6444    6515    6522

TGM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6548    6568
  Set 
  Used    6605

TGS                             Stack                             REAL(KIND=8)
  Decl    2399
  Set     2509    2543
  Used    2510    2544

TGSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3419
  Set     3447
  Used    3640

TGTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     215     271
  Set 
  Used     552     675

TGTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1983    2039
  Set 
  Used    2058    2059

TGTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3110    3315
  Set     3570
  Used    3573

TGTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4666    4882
  Set 
  Used    5029

TGTA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5260    5525
  Set 
  Used    5694

THA                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5918    5985
  Set     6036
  Used    6037

THA                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6192
  Set 
  Used    6276

THERMK                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     218     300
  Set 
  Used     534     560     628     683

THERMK                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     923    1073
  Set 
  Used    1396

THERMK                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3112    3336
  Set 
  Used    3699

THERMK                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4461    4501
  Set 
  Used    4542    4543

THERMK                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4670    4911
  Set 
  Used    5009    5031

THERMK                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5263    5554
  Set 
  Used    5698

THERMK                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6550    6579
  Set 
  Used    6618

THERMK                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6656    6746
  Set     7032
  Used    7033    7043

THETA                           Stack                             REAL(KIND=8)
  Decl    3892
  Set     3933
  Used    3939

THM                             Stack                             REAL(KIND=8)
  Decl    2170
  Set     2256
  Used    2259    2261

THM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5919    5986
  Set     6035
  Used    6037    6038

THM                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6193
  Set 
  Used    6277

THRSH                           Stack                             REAL(KIND=8)
  Decl    7451
  Set     7511
  Used

THRU                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3857
  Set     3926    4069    4071    4088
  Used    4074    4095    4096    4103    4108    4188

THVGM                           Stack                             REAL(KIND=8)
  Decl    2174
  Set     2259
  Used    2260

THVGM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5919    5988
  Set     6037
  Used    6038

THVGM                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6195
  Set 
  Used    6277

TICE                                                              REAL(KIND=8), PARAMETER
  Decl    6233
  Set 
  Used    6290    6300    6315    6350    6351    6353

TICE                            Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     758     780

TIM                             Stack                             REAL(KIND=8)
  Decl    1155
  Set     1166
  Used    1547

TIMCN2                          Stack                             REAL(KIND=8)
  Decl    1154
  Set     1165
  Used    1166    1683

TIMCON                          Stack                             REAL(KIND=8)
  Decl    1153
  Set     1164
  Used    1165

TIMCON                          Stack                             REAL(KIND=8)
  Decl    3010
  Set     3050
  Used    3056

TIMCON                          Stack                             REAL(KIND=8)
  Decl    5662
  Set     5731
  Used    5734

TIME                            Stack                             REAL(KIND=8), DIMENSION(13, <exp>)
  Decl    7732
  Set     7785    7903
  Used    7926

TIME                            Stack                             REAL(KIND=8), DIMENSION(13, <exp>)
  Decl    7986
  Set     8070    8142
  Used

TIMES                           Stack                             REAL(KIND=8)
  Decl    7765
  Set     7868    7901
  Used    7903

TIMES                           Stack                             REAL(KIND=8)
  Decl    8021
  Set     8121    8140
  Used    8142

TLAI                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    7456
  Set     7599    7645    7647
  Used    7652    7655    7671

TLL                             Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     157
  Set      807
  Used    7168

TLL2                            Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     443
  Set      461
  Used

TLL2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2695    2761
  Set 
  Used    2803    2805    2806    2807

TLL2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3115    3400
  Set 
  Used    3601

TLL2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4673    4938
  Set 
  Used    5034

TLL2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5267    5619
  Set 
  Used    5701

TLL_FIXED                       Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     130
  Set     7196    7279
  Used     807     818    7141    7254

TLL_GBL                         Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     167
  Set      818    7675
  Used     200     461

TLL_R4                          Stack                             REAL(KIND=4), DIMENSION(13, 2)
  Decl    7066
  Set 
  Used    7189    7196

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     219     243
  Set      572
  Used     562     685     703

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     924    1039
  Set 
  Used    1302

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2076    2147
  Set 
  Used    2256

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2884    2944
  Set 
  Used    3026

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3113    3294
  Set     3641    3707    3728
  Used    3448    3558    3565    3569    3570    3590    3611    3700    3718

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3760    3828
  Set 
  Used    4076    4086    4121    4122    4131    4132    4133    4143    4144    4145

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4664    4919
  Set 
  Used    5017    5032

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5264    5501
  Set 
  Used    5692    5857    5897

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6388    6395
  Set 
  Used    6421    6447    6485    6508    6529

TM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6546    6562
  Set     6602
  Used

TM0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     227     246
  Set 
  Used     703

TM0                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6388    6412
  Set     6421    6447    6485    6529
  Used    6472

TMAX                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     448
  Set      598
  Used     604

TMEN                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3002
  Set     3026
  Used    3032

TMIN                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     447
  Set      596
  Used     604     620     621

TMM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     227     247
  Set 
  Used     703

TMM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6388    6414
  Set     6472    6508
  Used    6447

TMM                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6548    6569
  Set 
  Used    6602

TMSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3420
  Set     3448
  Used    3641

TMSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6200
  Set     6262
  Used    6283

TMTX                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, 3), INTENT(INOUT)
  Decl     221     358
  Set      722
  Used     574     575     576

TMTX                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, 3), INTENT(INOUT)
  Decl    6070    6148
  Set     6283    6312    6319
  Used    6262    6302    6303    6329    6341

TN                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5124
  Set     5191
  Used    5195

TOP                             Stack                             REAL(KIND=8)
  Decl    1133
  Set     1468
  Used    1470

TOP                             Stack                             REAL(KIND=8)
  Decl    1945
  Set     1966
  Used    1970

TOPT                            Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     158
  Set      808
  Used    7169

TOPT2                           Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     442
  Set      460
  Used

TOPT2                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2695    2760
  Set 
  Used    2804    2805    2807    2810

TOPT2                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3115    3399
  Set 
  Used    3601

TOPT2                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4673    4937
  Set 
  Used    5034

TOPT2                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5266    5618
  Set 
  Used    5701

TOPT_FIXED                      Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     129
  Set     7195    7278
  Used     808     817    7140    7253

TOPT_GBL                        Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     166
  Set      817    7674
  Used     199     460

TOPT_R4                         Stack                             REAL(KIND=4), DIMENSION(13, 2)
  Decl    7065
  Set 
  Used    7189    7195

TOTALP                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3856
  Set     3909
  Used    3910    3916    3922    3954

TOTDEP                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5649
  Set     5761    5766
  Used    5768

TOTWB                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5663
  Set     5676
  Used    5892    5894

TPH1                            Stack                             REAL(KIND=8)
  Decl    7759
  Set     7826
  Used    7886

TPH1                            Stack                             REAL(KIND=8)
  Decl    8015
  Set     8109
  Used    8133

TPH1                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    8268    8276
  Set 
  Used    8325

TPH2                            Stack                             REAL(KIND=8)
  Decl    7760
  Set     7827
  Used    7886

TPH2                            Stack                             REAL(KIND=8)
  Decl    8016
  Set     8110
  Used    8134

TPH2                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    8268    8277
  Set 
  Used    8325

TPHSAT                          Stack                             REAL(KIND=8)
  Decl    7749
  Set     7798
  Used    7847    7854    7885

TPHSAT                          Stack                             REAL(KIND=8)
  Decl    8006
  Set     8082    8160
  Used    8117    8118    8130

TPHSAT                          Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    8268    8273
  Set 
  Used    8289

TPOROS                          Stack                             REAL(KIND=8)
  Decl    7751
  Set     7800
  Used    7833    7836

TPOROS                          Stack                             REAL(KIND=8)
  Decl    8008
  Set     8084    8162
  Used    8114    8116    8252    8260

TRIM                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0     493    7177    7181    7185

TS                              Stack                             REAL(KIND=8)
  Decl    2400
  Set     2510    2544
  Used    2511    2545

TS                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3862
  Set     3964    3971
  Used    3977    4001    4121    4122    4131    4132    4133    4143    4144    4145

TS                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5113
  Set     5143    5152    5193    5195
  Used    5160    5161    5207    5209

TSAV                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3422
  Set     3584
  Used    3618

TSD                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3874
  Set     4121    4132    4135    4144    4147
  Used    4126    4135    4147    4155    4157

TSEA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     224     394
  Set      726     766     771
  Used     761     781

TSEA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5917    5975
  Set 
  Used    6015    6017    6026

TSEA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6071    6159
  Set     6354
  Used    6275    6290    6315    6350

TSEA                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6554    6593
  Set 
  Used    6630

TSEAM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     225     402
  Set      761     772     781
  Used     737

TSF                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3878
  Set     4122
  Used    4125

TSFC                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     431
  Set      738
  Used     755     763     768     774     776

TSFC                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6074    6179
  Set     6345
  Used

TSFC0                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     427
  Set      768     774
  Used     763     782

TSFCM                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     429
  Set      763     776     782
  Used     738

TSINP                           Stack                             REAL(KIND=8)
  Decl    7774
  Set     7915    7916    7917
  Used    7918    7919    7920    7921

TSNOW                           Stack                             REAL(KIND=8)
  Decl    2397
  Set     2507    2541
  Used    2509    2543

TSSAV                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6202
  Set     6261
  Used    6282

TSURF                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     225     403
  Set 
  Used     746     758     780

TSURF                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5917    5974
  Set 
  Used    6036

TSURF                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6070    6152
  Set     6282    6311    6353
  Used    6257    6258    6261    6275    6293    6298    6300    6303    6317    6338    6351    6354

TT                                                                REAL(KIND=8), PARAMETER
  Decl    5998
  Set 
  Used    6048

TTA                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5116
  Set     5160
  Used    5165    5174    5180

TTB                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5117
  Set     5161
  Used    5174

TTI                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3870
  Set     4024    4026
  Used    4069

TU                              Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     156
  Set      806
  Used    7167

TU2                             Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     444
  Set      462
  Used

TU2                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2695    2762
  Set 
  Used    2802    2804    2809    2810

TU2                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3115    3401
  Set 
  Used    3601

TU2                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4673    4939
  Set 
  Used    5034

TU2                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5267    5620
  Set 
  Used    5701

TU_FIXED                        Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     131
  Set     7197    7280
  Used     806     819    7142    7255

TU_GBL                          Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     168
  Set      819    7676
  Used     201     462

TU_R4                           Stack                             REAL(KIND=4), DIMENSION(13, 2)
  Decl    7067
  Set 
  Used    7189    7197

TV                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    2767
  Set     2785    2798    2800    2802    2803
  Used    2806    2809

TVSGM                           Stack                             REAL(KIND=8)
  Decl    7109
  Set     7311
  Used    7312

TWI                             Stack                             REAL(KIND=8), DIMENSION(<exp>, 3)
  Decl    2378
  Set     2429
  Used    2430    2431    2450

TWIP                            Stack                             REAL(KIND=8), DIMENSION(<exp>, 3)
  Decl    2379
  Set     2430
  Used    2495    2496    2529    2530

TWIPP                           Stack                             REAL(KIND=8), DIMENSION(<exp>, 3)
  Decl    2380
  Set     2431
  Used    2495    2500    2502    2529    2534    2536

TZDEP                           Stack                             REAL(KIND=8), DIMENSION(3)
  Decl    7746
  Set     7795    7796    7797
  Used    7833    7835    7836

TZDEP                           Stack                             REAL(KIND=8), DIMENSION(3)
  Decl    7998
  Set     8079    8080    8081    8157    8158    8159
  Used    8114    8115    8116    8258    8259    8260

TZDEP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    8342    8349
  Set 
  Used    8369

TZLTM                           Stack                             REAL(KIND=8), DIMENSION(2)
  Decl    7747
  Set     7803    7804    7808    7812
  Used    7806    7810    7817

TZLTM                           Stack                             REAL(KIND=8), DIMENSION(2)
  Decl    7999
  Set     8087    8088    8092    8097
  Used    8090    8095    8104

U2                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     216     278
  Set 
  Used     554     677

U2                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1983    2040
  Set 
  Used    2057    2064    2065

U2                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2076    2155
  Set     2244
  Used    2261

U2                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3111    3322
  Set 
  Used    3558    3565    3573    3590

U2                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4667    4889
  Set 
  Used    5030

U2                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5261    5532
  Set 
  Used    5695

UM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     220     248
  Set 
  Used     562     685

UM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2076    2148
  Set 
  Used    2214

UM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3113    3295
  Set 
  Used    3558    3565    3590

UM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4664    4920
  Set 
  Used    5032

UM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5265    5502
  Set 
  Used    5692    5852

UM                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6190
  Set     6376
  Used    6378

UMOM                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     225     411
  Set 
  Used     750

UMOM                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6072    6166
  Set     6361    6372
  Used    6364    6374

UMTX                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, 4), INTENT(INOUT)
  Decl     222     360
  Set      724     725
  Used     580     581     582     583

UMTX                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, 4), INTENT(INOUT)
  Decl    6070    6149
  Set     6364    6366
  Used

UPDATE                                                            Subroutine, Module procedure, PRIVATE
  Decl    2879
  Set 
  Used    3713

USTAR                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     210     339
  Set 
  Used     543     666

USTAR                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2075    2164
  Set     2297
  Used    2298

USTAR                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3106    3369
  Set 
  Used    3557    3564    3589

USTAR                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4662    4955
  Set 
  Used    5025

USTAR                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5255    5593
  Set 
  Used    5690    5834

USTAR                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5919    5991
  Set     6056
  Used    6057    6058

USTAR                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6197
  Set 
  Used    6277

USTARM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     422
  Set 
  Used     754

USTARM                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    6073    6175
  Set     6374    6375
  Used    6375

USTARN                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    2074    2166
  Set     2228
  Used    2244

USTARN                          Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3407
  Set 
  Used    3556    3563    3588

VCOVER                          Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     438
  Set      456
  Used

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl     925    1033
  Set 
  Used    1170

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    1870    1913
  Set 
  Used    1957    1959    1960    1962

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    2694    2744
  Set 
  Used    2866

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3113    3283
  Set 
  Used    3444

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3760    3822
  Set 
  Used    4022

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4209    4249
  Set 
  Used    4304    4322    4364

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4462    4486
  Set 
  Used    4542    4543

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    4663    4931
  Set 
  Used    5010    5012    5017    5032

VCOVER                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(INOUT)
  Decl    5253    5612
  Set 
  Used    5691

VCOVER                          Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl    6757
  Set     6801    6802
  Used    7029    7033    7043

VCOVER2                         Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl    1123
  Set     1170    1192
  Used    1396    1433    1434    1435    1441    1442    1443    1450    1456    1814    1823    1824    1825

VCOVER2                         Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl    3437
  Set     3444    3513
  Used    3596    3600    3607    3656    3701

VCOVER_GBL                      Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     162
  Set      813    7670
  Used     195     456    6801    6802

VCV                                                               REAL(KIND=8), PARAMETER
  Decl    7495
  Set 
  Used    7650

VEGIN                                                             Subroutine, Module procedure
  Decl      88    7055
  Set 
  Used

VERT_INTERP                                                       Subroutine, Module procedure, PRIVATE
  Decl    8340
  Set 
  Used    8183

VKRMN                                                             REAL(KIND=8), PARAMETER
  Decl    2184
  Set 
  Used    2209

VKRMN                                                             REAL(KIND=8), PARAMETER
  Decl    5994
  Set 
  Used    6030

VKRMNI                          Stack                             REAL(KIND=8)
  Decl    2189
  Set     2209
  Used    2227    2234    2239    2244

VLT                                                               REAL(KIND=8), PARAMETER, DIMENSION(13)
  Decl    7484
  Set 
  Used

VM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     220     249
  Set 
  Used     562     685

VM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2076    2149
  Set 
  Used    2214

VM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    3113    3296
  Set 
  Used    3558    3565    3590

VM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    4665    4921
  Set 
  Used    5032

VM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5265    5503
  Set 
  Used    5693    5853

VM                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6191
  Set     6377
  Used    6378

VMOM                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     225     412
  Set 
  Used     751

VMOM                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6072    6167
  Set     6362    6373
  Used    6366    6374

VNTLAX                                                            Subroutine, Module procedure, PRIVATE
  Decl    2074
  Set 
  Used       0    3563    3588

VNTLT1                                                            Subroutine, Module procedure, PRIVATE
  Decl    5916
  Set 
  Used    6274

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl     219     261
  Set      590     591     592
  Used     701

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    2315    2370
  Set     2421    2422    2423    2604    2613    2614    2623    2624    2639    2645    2651    2663    2664    2669    2670
          2682
  Used    2421    2422    2423    2429    2454    2457    2460    2482    2487    2523    2557    2609    2610    2619    2620
          2638    2644    2650    2662    2668

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(IN)
  Decl    2694    2750
  Set 
  Used

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    3113    3305
  Set 
  Used    3481    3483    3600

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    3760    3838
  Set     4108    4173
  Used    3933

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(IN)
  Decl    4562    4608
  Set 
  Used    4626

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    4671    4872
  Set 
  Used    5007    5017    5032

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    5044    5095
  Set     5213
  Used

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    5264    5515
  Set     5717    5742    5783    5796    5798    5809    5810    5813    5814    5818
  Used    5676    5677    5678    5699    5727    5794    5804    5808    5812    5816    5817    5866    5867    5868    5894
          5895

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(IN)
  Decl    6386    6400
  Set 
  Used    6426    6427    6428    6451    6454    6457    6487    6488    6489    6510    6511    6512    6531    6532    6533

W                               Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(OUT)
  Decl    6547    6566
  Set     6609    6610    6611
  Used

W                               Stack                             REAL(KIND=8)
  Decl    7767
  Set     7875    7900
  Used    7883    7885

W                               Stack                             REAL(KIND=8)
  Decl    8023
  Set     8123    8139
  Used    8124    8127

W                               Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    8268    8270
  Set 
  Used    8289    8299

W0                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl     224     396
  Set      710     711     712
  Used     701

W0                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    6386    6405
  Set     6426    6427    6428    6451    6454    6457    6487    6488    6489    6531    6532    6533
  Used    6450    6453    6456    6474    6475    6476

WC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     211     345
  Set 
  Used     545     668

WC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     917    1116
  Set     1180
  Used    1417    1810    1822

WC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1868    1933
  Set 
  Used    1954

WC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3107    3373
  Set     3473
  Used    3594    3605    3654    3693

WC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4663    4960
  Set 
  Used    5026

WC                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5256    5599
  Set 
  Used    5691

WF                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    8355
  Set     8392    8396    8397    8408    8418    8428    8441    8443
  Used    8450

WG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     211     346
  Set 
  Used     545     668

WG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     917    1117
  Set     1187    1193
  Used    1433    1441    1450    1456    1814    1823

WG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1868    1934
  Set 
  Used    1957    1962

WG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3107    3374
  Set     3474    3514
  Used    3594    3605    3654    3693

WG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4663    4961
  Set 
  Used    5026

WG                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5256    5600
  Set 
  Used    5691

WHEAT                                                             Subroutine, Module procedure
  Decl      90    7388
  Set 
  Used     828

WI                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    8357
  Set     8386
  Used    8396    8397    8408    8418    8428

WLAI                                                              REAL(KIND=8), PARAMETER, DIMENSION(9)
  Decl    7479
  Set 
  Used

WM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl     222     372
  Set      713     714     715
  Used     590     591     592     702

WM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(INOUT)
  Decl    6387    6410
  Set     6474    6475    6476    6510    6511    6512
  Used    6451    6454    6457

WM                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 3), INTENT(IN)
  Decl    6549    6573
  Set 
  Used    6609    6610    6611

WMAX                            Stack                             REAL(KIND=8)
  Decl    2391
  Set     2482    2483
  Used    2484    2490

WMIN                            Stack                             REAL(KIND=8)
  Decl    2392
  Set     2485    2487    2488
  Used    2489    2490

WORK                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    5119
  Set     5174
  Used    5178

WSIB                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(INOUT)
  Decl    7697    7727
  Set     7788    7942
  Used

WSIB                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    7954    7978
  Set     8073    8246    8251
  Used

WSIB3D                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, 3), INTENT(OUT)
  Decl    7960    7982
  Set     8152    8196
  Used    8258    8259    8260

WT                              Stack                             REAL(KIND=8)
  Decl    3425
  Set     3481    3482
  Used    3484

WWW                             Stack                             REAL(KIND=8), DIMENSION(<exp>, 3)
  Decl    4616
  Set     4626
  Used    4632

X0X                             Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl      93     144
  Set     7210    7299
  Used     478    3735    7155

X0X_R4                          Stack                             REAL(KIND=4), DIMENSION(13, 12)
  Decl    7080
  Set 
  Used    7191    7210

X1                              Stack                             REAL(KIND=8)
  Decl    7462
  Set     7637    7641
  Used    7645

XABC                            Stack                             REAL(KIND=8)
  Decl    4283
  Set     4333
  Used    4339

XABD                            Stack                             REAL(KIND=8)
  Decl    4284
  Set     4339
  Used    4345

XBC                             Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl      96     149
  Set     7215    7301
  Used     476    3737    7160

XBC_R4                          Stack                             REAL(KIND=4), DIMENSION(13, 12)
  Decl    7085
  Set 
  Used    7191    7215

XCOVER                          Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     151
  Set      800
  Used    7162    7601

XCOVER2                         Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    7457
  Set     7601    7650    7652
  Used    7670

XCOVER_FIXED                    Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     142
  Set     7208    7297    7298
  Used     800     813    7153    7269    7825    8108

XCOVER_R4                       Stack                             REAL(KIND=4), DIMENSION(13, 12, 2)
  Decl    7078
  Set 
  Used    7191    7208

XCT1                            Stack                             REAL(KIND=8)
  Decl    2192
  Set     2230
  Used    2232    2234

XCT2                            Stack                             REAL(KIND=8)
  Decl    2193
  Set     2231    2236
  Used    2234    2239

XCTU1                           Stack                             REAL(KIND=8)
  Decl    2194
  Set     2232    2237
  Used    2244

XCTU2                           Stack                             REAL(KIND=8)
  Decl    2195
  Set     2233    2238
  Used    2244

XD                              Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl      94     145
  Set     7211    7300    7316    7322
  Used     479     905    3734    7156

XDAY                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl     789     796
  Set 
  Used     828

XDAY                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    7388    7445
  Set 
  Used    7506

XDC                             Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, SAVE
  Decl      95     148
  Set     7214    7302
  Used     477    3736    7159

XDC_R4                          Stack                             REAL(KIND=4), DIMENSION(13, 12)
  Decl    7084
  Set 
  Used    7191    7214

XDIF1                           Stack                             REAL(KIND=8)
  Decl    7463
  Set     7638    7642
  Used    7645

XDIF2                           Stack                             REAL(KIND=8)
  Decl    7464
  Set     7639    7643
  Used    7645

XDR                             Stack                             REAL(KIND=8)
  Decl    2777
  Set     2831    2833    2834    2835
  Used    2834    2836

XD_R4                           Stack                             REAL(KIND=4), DIMENSION(13, 12)
  Decl    7081
  Set 
  Used    7191    7211

XGREEN                          Stack                             REAL(KIND=8), DIMENSION(<exp>, 13)
  Decl    7489
  Set     7531    7587    7588
  Used    7654

XGREN                                                             REAL(KIND=8), PARAMETER, DIMENSION(13)
  Decl    7481
  Set 
  Used

XM1                             Stack                             REAL(KIND=8)
  Decl    6789
  Set     6932
  Used    6953    6983

XMI1                            Stack                             REAL(KIND=8), DIMENSION(12, 3)
  Decl    6774
  Set     6867    6872
  Used    6923    6932    6953    6983

XMIU                            Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     110
  Set     7228
  Used    6867    7120

XMIU_R4                         Stack                             REAL(KIND=4), DIMENSION(12, 3)
  Decl    7096
  Set 
  Used    7218    7228

XMIW                            Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     112
  Set     7229
  Used    6872    7122

XMIW_R4                         Stack                             REAL(KIND=4), DIMENSION(12, 3)
  Decl    7097
  Set 
  Used    7218    7229

XNIRB                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     224     390
  Set 
  Used     644

XNIRD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     224     391
  Set 
  Used     645

XNUM                            Stack                             REAL(KIND=8)
  Decl    1946
  Set     1962
  Used    1963    1964

XPH1                                                              REAL(KIND=8), PARAMETER, DIMENSION(13, 2)
  Decl    7735
  Set 
  Used

XPH1                                                              REAL(KIND=8), PARAMETER, DIMENSION(13, 2)
  Decl    8048
  Set 
  Used

XPH2                                                              REAL(KIND=8), PARAMETER, DIMENSION(13, 2)
  Decl    7740
  Set 
  Used

XPH2                                                              REAL(KIND=8), PARAMETER, DIMENSION(13, 2)
  Decl    8053
  Set 
  Used

XROT                            Stack                             REAL(KIND=8)
  Decl    2776
  Set     2817    2822    2825    2829
  Used    2821    2823    2824    2827    2828

XS                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3871
  Set     4032    4047    4048    4049    4094    4098    4099    4100
  Used    4060    4061    4104    4105

XSC                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3869
  Set     3982
  Used    3984    3986

XSEA                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     446
  Set      737
  Used     748     761     766     771     772

XTM1                            Stack                             REAL(KIND=8)
  Decl    6791
  Set     6947    6977
  Used    6953    6983

XTM2                            Stack                             REAL(KIND=8)
  Decl    6792
  Set     6950    6980
  Used    6953    6983

XVISB                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     224     388
  Set 
  Used     642

XVISD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     224     389
  Set 
  Used     643

XZ                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     893
  Set      901
  Used     903     904     905     906     907

Y1                              Stack                             REAL(KIND=8)
  Decl    3411
  Set     3618
  Used

Y2                              Stack                             REAL(KIND=8)
  Decl    3412
  Set     3619
  Used

YCOVER                          Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     123
  Set     7269
  Used    7133

YEFAC                           Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     118
  Set     7256
  Used    7128    7677

YH1                             Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     119
  Set     7258
  Used    7129    7678

YH2                             Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     120
  Set     7259
  Used    7130    7679

YHIL                            Stack                             REAL(KIND=8), DIMENSION(2)
  Decl    7106
  Set     7252
  Used

YLL                             Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     116
  Set     7254
  Used    7126    7675

YLT                             Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     124
  Set     7267
  Used    7134

YOOTD                           Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     121
  Set     7257
  Used    7131

YOPT                            Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     115
  Set     7253
  Used    7125    7674

YREEN                           Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     122
  Set     7268
  Used    7132

YRL                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    7388    7446
  Set 
  Used    7550    7555    7556    7557    7558    7559    7562    7563    7565    7573    7574    7614    7617    7620    7621
          7650

YRL                             Use assoc                         REAL(KIND=8), From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     828

YSTPAR                          Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     114
  Set     7249
  Used    7124    7680    7681    7682

YU                              Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     117
  Set     7255
  Used    7127    7676

Z0                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl     441
  Set 
  Used     540     663     727

Z0                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    2076    2142
  Set 
  Used    2226    2227    2231    2236    2258    2269    2280

Z0                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3114    3288
  Set     3465
  Used    3558    3565    3590

Z0                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4664    4936
  Set 
  Used    5033

Z0                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5253    5617
  Set 
  Used    5692

Z0                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5919    5990
  Set     6014    6016    6018
  Used    6030

Z0                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6073    6176
  Set 
  Used    6277

Z0ICE                           Use assoc                         REAL(KIND=8), PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    6018

Z0SEA                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     423
  Set 
  Used     754

Z0X                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     420
  Set      478     727
  Used     539     662

Z0X                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     838     882
  Set      905
  Used

Z0X                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    3114    3284
  Set     3735
  Used    3459    3465

Z0X                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    4663    4932
  Set 
  Used    5033

Z0X                             Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    5253    5613
  Set 
  Used    5691

Z1                              Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     147
  Set     7213    7296
  Used    6820    6821    6823    7158

Z1_R4                           Stack                             REAL(KIND=4), DIMENSION(13, 12)
  Decl    7083
  Set 
  Used    7191    7213

Z2                              Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     146
  Set     7212    7295
  Used     901    3558    3565    3574    3590    6821    6823    7157

Z2                              Dummy Arg                         REAL(KIND=8), DIMENSION(13, 12), INTENT(IN)
  Decl    1984    2025
  Set 
  Used    2064

Z2                              Dummy Arg                         REAL(KIND=8), DIMENSION(13, 12), INTENT(IN)
  Decl    2076    2139
  Set 
  Used    2226    2233    2238    2258

Z2_R4                           Stack                             REAL(KIND=4), DIMENSION(13, 12)
  Decl    7082
  Set 
  Used    7191    7212

ZAT                             Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4273
  Set     4388    4390
  Used    4392    4393

ZC                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    8356
  Set     8365
  Used    8416    8418    8428    8429    8440    8441

ZDEPTH                          Heap                              REAL(KIND=8), DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     140
  Set     7206    7305    7306    7307
  Used    2451    2455    2457    2459    2486    2518    2520    2522    2524    2552    2554    2556    2558    2604    2609
          2610    2613    2615    2619    2620    2623    2625    2640    2646    2652    2664    2670    3482    3483    3601
          4109    4173    5214    5676    5677    5678    5717    5742    5761    5766    5769    5770    5784    5797    5809
          5813    5817    5866    5867    5868    7151    7795    7796    7797    8079    8080    8081    8157    8158    8159
          8170

ZDEPTH                          Dummy Arg                         REAL(KIND=8), DIMENSION(13, 3), INTENT(IN)
  Decl    2695    2742
  Set 
  Used    2821    2822    2824    2825    2828    2829

ZDEPTH_R4                       Stack                             REAL(KIND=4), DIMENSION(13, 3)
  Decl    7076
  Set 
  Used    7190    7206

ZDM                             Stack                             INTEGER
  Decl    8359
  Set     8372
  Used    8402    8435

ZENITH                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl     223     375
  Set 
  Used     615

ZENITH                          Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    6554    6594
  Set 
  Used    6631

ZGRAV                           Stack                             REAL(KIND=8)
  Decl    6221
  Set     6244
  Used    6316

ZK                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    4274
  Set     4392
  Used    4399    4438

ZKAT                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    6770
  Set     7029    7030    7031
  Used    7032

ZL                              Stack                             REAL(KIND=8)
  Decl    2191
  Set     2226    2258
  Used    2229    2230    2231    2233    2268    2271    2279    2282

ZLOAD                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3865
  Set     4011
  Used    4039    4061

ZLT                             Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     150
  Set      801
  Used    5896    7161

ZLT2                            Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl     435
  Set      457
  Used

ZLT2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    1984    2041
  Set 
  Used    2057

ZLT2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3115    3398
  Set 
  Used    3574

ZLT2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    3761    3851
  Set 
  Used    3967    4021    4196

ZLT2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4210    4250
  Set 
  Used    4304    4322    4364

ZLT2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    4672    4927
  Set 
  Used    5013    5018    5034

ZLT2                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, 2), INTENT(IN)
  Decl    5266    5609
  Set 
  Used    5700

ZLT2                            Stack                             REAL(KIND=8), DIMENSION(<exp>, 2)
  Decl    6756
  Set     6799    6800
  Used    6818    6819    7029

ZLT_FIXED                       Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     143
  Set     7209    7293    7294
  Used     801     814    7154    7267    7803    7804    7806    7808    7810    7812    8087    8088    8090    8092    8095
          8097

ZLT_GBL                         Heap                              REAL(KIND=8), DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     163
  Set      814    7671
  Used     196     457    6799    6800

ZLT_R4                          Stack                             REAL(KIND=4), DIMENSION(13, 12, 2)
  Decl    7079
  Set 
  Used    7191    7209

ZLWUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     221     354
  Set 
  Used     535     629

ZLWUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6551    6582
  Set 
  Used    6618

ZLWUP                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6656    6749
  Set     7042
  Used    7044

ZM                              Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    8354
  Set     8369
  Used    8416    8428    8429    8440    8441    8443

ZMELT                           Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    3868
  Set     4162    4164
  Used    4173

ZORL                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     226     413
  Set 
  Used     752

ZORL                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    5919    5976
  Set 
  Used    6016

ZORL                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl    6073    6172
  Set     6316
  Used    6277


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
ABS(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 2497, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2531, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2596, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3618, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3619, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5192, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5192, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5197, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5197, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5892, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5899, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6015, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6017, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6290, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6315, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6350, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6630, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6811, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7524, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7526, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7555, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7556, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7557, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7558, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7559, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7563, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7563, file Sfc_SSiB.f90)

Name  Messages
----  --------
AIRMOD in SFC_SSIB
      Defined as:  Subroutine (line 838, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   AIRMOD in SFC_SSIB (Line 3458, file Sfc_SSiB.f90)

      Calls:       AIRMOD in SFC_SSIB (Line 3458, file Sfc_SSiB.f90)

Name  Messages
----  --------
ALBEDO in SFC_SSIB
      Defined as:  Subroutine (line 87, file Sfc_SSiB.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
CONSTANTS
      Defined as:  No definitions.

      Used By:     SFC_SSIB

Name  Messages
----  --------
COPYSURFACEDATA in SFC_SSIB
      Defined as:  Subroutine (line 97, file Sfc_SSiB.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
CUT in SFC_SSIB
      Defined as:  Subroutine (line 1867, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   CUT in SFC_SSIB (Line 3593, file Sfc_SSiB.f90)
                   CUT in SFC_SSIB (Line 3604, file Sfc_SSiB.f90)
                   CUT in SFC_SSIB (Line 3653, file Sfc_SSiB.f90)

      Calls:       CUT in SFC_SSIB (Line 3593, file Sfc_SSiB.f90)
                   CUT in SFC_SSIB (Line 3604, file Sfc_SSiB.f90)
                   CUT in SFC_SSIB (Line 3653, file Sfc_SSiB.f90)

Name  Messages
----  --------
EXP(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 2430, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2431, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2450, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2453, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2484, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2485, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2489, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2808, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2838, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2851, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3486, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3490, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3508, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3535, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3536, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3645, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3646, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3647, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3648, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4021, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4060, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4104, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4388, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4390, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4392, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4393, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4400, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4632, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6043, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6045, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6048, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6257, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7032, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7652, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7847, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7854, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8117, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8118, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8313, file Sfc_SSiB.f90)

Name  Messages
----  --------
EXTRAK in SFC_SSIB
      Defined as:  Subroutine (line 8268, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   EXTRAK in SFC_SSIB (Line 7885, file Sfc_SSiB.f90)
                   EXTRAK in SFC_SSIB (Line 8127, file Sfc_SSiB.f90)

      Calls:       EXTRAK in SFC_SSIB (Line 7885, file Sfc_SSiB.f90)
                   EXTRAK in SFC_SSIB (Line 8127, file Sfc_SSiB.f90)

Name  Messages
----  --------
FYSIKS in SFC_SSIB
      Defined as:  Subroutine (line 83, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   FYSIKS in SFC_SSIB (Line 538, file Sfc_SSiB.f90)
                   FYSIKS in SFC_SSIB (Line 661, file Sfc_SSiB.f90)

      Calls:       FYSIKS in SFC_SSIB (Line 538, file Sfc_SSiB.f90)
                   FYSIKS in SFC_SSIB (Line 661, file Sfc_SSiB.f90)

Name  Messages
----  --------
INITSSIB in SFC_SSIB
      Defined as:  Subroutine (line 82, file Sfc_SSiB.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
INTERC in SFC_SSIB
      Defined as:  Subroutine (line 3758, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   INTERC in SFC_SSIB (Line 5015, file Sfc_SSiB.f90)

      Calls:       INTERC in SFC_SSIB (Line 5015, file Sfc_SSiB.f90)

Name  Messages
----  --------
LOG(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 190, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2227, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2230, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2231, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2233, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2236, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2238, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2430, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2431, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2450, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2453, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2484, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2485, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2489, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2808, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2835, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3486, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3490, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4047, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4098, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4388, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4390, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4392, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4425, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4431, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4632, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6030, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6042, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6044, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6047, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7312, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7847, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7854, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7921, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8117, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8118, file Sfc_SSiB.f90)

Name  Messages
----  --------
MAX(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 698, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 709, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 762, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 767, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 773, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 1811, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 1815, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2215, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2264, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2302, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2429, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2456, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2482, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2482, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2482, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2488, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2500, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2502, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2512, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2534, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2536, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2546, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2612, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2622, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2638, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2644, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2650, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2662, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2668, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2682, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2803, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2812, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2841, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2852, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3481, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3485, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3508, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3982, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4049, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4063, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4100, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4106, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4146, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4291, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4626, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4643, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5768, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5776, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6028, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6039, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6379, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6631, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6803, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6820, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7030, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7239, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7916, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8305, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8326, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8335, file Sfc_SSiB.f90)

Name  Messages
----  --------
MIN(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 903, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 1180, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 1187, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 1193, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 1813, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 1817, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2265, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2429, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2431, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2457, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2483, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2487, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2487, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2487, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2500, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2501, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2507, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2508, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2512, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2534, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2535, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2541, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2542, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2546, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2611, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2621, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2802, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2811, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2821, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2824, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2828, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2837, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2840, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2853, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2867, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3473, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3474, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3484, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3514, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3995, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4048, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4099, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4134, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4197, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4303, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 4399, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5183, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5770, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6040, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6353, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6479, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6821, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6829, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6837, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7031, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7316, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7322, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7917, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7919, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7932, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8326, file Sfc_SSiB.f90)

Name  Messages
----  --------
MOD(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 7511, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7544, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7634, file Sfc_SSiB.f90)

Name  Messages
----  --------
OPTIONS
      Defined as:  No definitions.

      Used By:     SFC_SSIB

Name  Messages
----  --------
PBL in SFC_SSIB
      Defined as:  Subroutine (line 4656, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   PBL in SFC_SSIB (Line 5684, file Sfc_SSiB.f90)

      Calls:       PBL in SFC_SSIB (Line 5684, file Sfc_SSiB.f90)

Name  Messages
----  --------
RADALB in SFC_SSIB
      Defined as:  Subroutine (line 86, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   RADALB in SFC_SSIB (Line 530, file Sfc_SSiB.f90)
                   RADALB in SFC_SSIB (Line 624, file Sfc_SSiB.f90)
                   RADALB in SFC_SSIB (Line 6614, file Sfc_SSiB.f90)

      Calls:       RADALB in SFC_SSIB (Line 530, file Sfc_SSiB.f90)
                   RADALB in SFC_SSIB (Line 624, file Sfc_SSiB.f90)
                   RADALB in SFC_SSIB (Line 6614, file Sfc_SSiB.f90)

Name  Messages
----  --------
RADUSE in SFC_SSIB
      Defined as:  Subroutine (line 4461, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   RADUSE in SFC_SSIB (Line 5009, file Sfc_SSiB.f90)

      Calls:       RADUSE in SFC_SSIB (Line 5009, file Sfc_SSiB.f90)

Name  Messages
----  --------
RBRD in SFC_SSIB
      Defined as:  Subroutine (line 1983, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   RBRD in SFC_SSIB (Line 3572, file Sfc_SSiB.f90)

      Calls:       RBRD in SFC_SSIB (Line 3572, file Sfc_SSiB.f90)

Name  Messages
----  --------
REAL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 7219, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7220, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7221, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7222, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7223, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7224, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7225, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7226, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7227, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7228, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7229, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7860, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8119, file Sfc_SSiB.f90)

Name  Messages
----  --------
RESHAPE(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 3886, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7735, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7740, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8048, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8053, file Sfc_SSiB.f90)

Name  Messages
----  --------
RE_ASSIGN_SIB_SOIL_PROP in SFC_SSIB
      Defined as:  Subroutine (line 89, file Sfc_SSiB.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ROOT in SFC_SSIB
      Defined as:  Subroutine (line 4562, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   ROOT in SFC_SSIB (Line 5007, file Sfc_SSiB.f90)

      Calls:       ROOT in SFC_SSIB (Line 5007, file Sfc_SSiB.f90)

Name  Messages
----  --------
RUNOFF in SFC_SSIB
      Defined as:  Subroutine (line 2314, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   RUNOFF in SFC_SSIB (Line 5803, file Sfc_SSiB.f90)

      Calls:       RUNOFF in SFC_SSIB (Line 5803, file Sfc_SSiB.f90)

Name  Messages
----  --------
SEASFC in SFC_SSIB
      Defined as:  Subroutine (line 84, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   SEASFC in SFC_SSIB (Line 743, file Sfc_SSiB.f90)

      Calls:       SEASFC in SFC_SSIB (Line 743, file Sfc_SSiB.f90)

Name  Messages
----  --------
SEXTRP in SFC_SSIB
      Defined as:  Subroutine (line 85, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   SEXTRP in SFC_SSIB (Line 700, file Sfc_SSiB.f90)

      Calls:       SEXTRP in SFC_SSIB (Line 700, file Sfc_SSiB.f90)

Name  Messages
----  --------
SFC_SSIB
      Defined as:  Module (line 6, file Sfc_SSiB.f90)

        Uses:      CONSTANTS
                   OPTIONS

Name  Messages
----  --------
SFLXES in SFC_SSIB
      Defined as:  Subroutine (line 3103, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   SFLXES in SFC_SSIB (Line 5022, file Sfc_SSiB.f90)

      Calls:       SFLXES in SFC_SSIB (Line 5022, file Sfc_SSiB.f90)

Name  Messages
----  --------
SIBWET in SFC_SSIB
      Defined as:  Subroutine (line 91, file Sfc_SSiB.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SIBWET_GLSM in SFC_SSIB
      Defined as:  Subroutine (line 92, file Sfc_SSiB.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SIGN(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 1843, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 1844, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3660, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3661, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7524, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7526, file Sfc_SSiB.f90)

Name  Messages
----  --------
SIN(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 749, file Sfc_SSiB.f90)

Name  Messages
----  --------
SNOWM in SFC_SSIB
      Defined as:  Subroutine (line 5042, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   SNOWM in SFC_SSIB (Line 5725, file Sfc_SSiB.f90)

      Calls:       SNOWM in SFC_SSIB (Line 5725, file Sfc_SSiB.f90)

Name  Messages
----  --------
SQRT(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 2057, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2063, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 2214, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 3903, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 5731, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6027, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6043, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6045, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6048, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6374, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 6378, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7044, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7044, file Sfc_SSiB.f90)

Name  Messages
----  --------
SSIB_DRIVER in SFC_SSIB
      Defined as:  Subroutine (line 98, file Sfc_SSiB.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
STOMAT in SFC_SSIB
      Defined as:  Subroutine (line 4208, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   STOMAT in SFC_SSIB (Line 5012, file Sfc_SSiB.f90)

      Calls:       STOMAT in SFC_SSIB (Line 5012, file Sfc_SSiB.f90)

Name  Messages
----  --------
STRES2 in SFC_SSIB
      Defined as:  Subroutine (line 2692, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   STRES2 in SFC_SSIB (Line 3598, file Sfc_SSiB.f90)

      Calls:       STRES2 in SFC_SSIB (Line 3598, file Sfc_SSiB.f90)

Name  Messages
----  --------
TEMRES in SFC_SSIB
      Defined as:  Subroutine (line 916, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   TEMRES in SFC_SSIB (Line 3692, file Sfc_SSiB.f90)

      Calls:       TEMRES in SFC_SSIB (Line 3692, file Sfc_SSiB.f90)

Name  Messages
----  --------
TRIM(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 493, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 493, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7173, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7177, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7181, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 7185, file Sfc_SSiB.f90)

Name  Messages
----  --------
UPDATE in SFC_SSIB
      Defined as:  Subroutine (line 2879, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   UPDATE in SFC_SSIB (Line 3713, file Sfc_SSiB.f90)

      Calls:       UPDATE in SFC_SSIB (Line 3713, file Sfc_SSiB.f90)

Name  Messages
----  --------
VEGIN in SFC_SSIB
      Defined as:  Subroutine (line 88, file Sfc_SSiB.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
VERT_INTERP in SFC_SSIB
      Defined as:  Subroutine (line 8340, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   VERT_INTERP in SFC_SSIB (Line 8183, file Sfc_SSiB.f90)

      Calls:       RESHAPE(Intrinsic) (Line 3886, file Sfc_SSiB.f90)
                   RESHAPE(Intrinsic) (Line 7735, file Sfc_SSiB.f90)
                   RESHAPE(Intrinsic) (Line 7740, file Sfc_SSiB.f90)
                   RESHAPE(Intrinsic) (Line 8048, file Sfc_SSiB.f90)
                   RESHAPE(Intrinsic) (Line 8053, file Sfc_SSiB.f90)
                   VERT_INTERP in SFC_SSIB (Line 8183, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 190, file Sfc_SSiB.f90)
                   TRIM(Intrinsic) (Line 493, file Sfc_SSiB.f90)
                   TRIM(Intrinsic) (Line 493, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 698, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 709, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 762, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 767, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 773, file Sfc_SSiB.f90)
                   SIN(Intrinsic) (Line 749, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 903, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 1180, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 1187, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 1193, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 1813, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 1817, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 1811, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 1815, file Sfc_SSiB.f90)
                   SIGN(Intrinsic) (Line 1843, file Sfc_SSiB.f90)
                   SIGN(Intrinsic) (Line 1844, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 2057, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 2063, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 2214, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2215, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2264, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2302, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2227, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2230, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2231, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2233, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2236, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2238, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2265, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2429, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2456, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2482, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2482, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2482, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2488, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2500, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2502, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2512, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2534, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2536, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2546, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2612, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2622, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2638, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2644, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2650, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2662, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2668, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2682, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2429, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2431, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2457, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2483, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2487, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2487, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2487, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2500, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2501, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2507, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2508, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2512, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2534, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2535, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2541, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2542, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2546, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2611, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2621, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2430, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2431, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2450, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2453, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2484, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2485, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2489, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2430, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2431, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2450, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2453, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2484, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2485, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2489, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 2497, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 2531, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 2596, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2802, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2811, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2821, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2824, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2828, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2837, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2840, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2853, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 2867, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2803, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2812, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2841, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 2852, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2808, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 2835, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2808, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2838, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 2851, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 3473, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 3474, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 3484, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 3514, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 3481, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 3485, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 3508, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 3486, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 3490, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3486, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3490, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3508, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3535, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3536, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3645, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3646, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3647, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 3648, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 3618, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 3619, file Sfc_SSiB.f90)
                   SIGN(Intrinsic) (Line 3660, file Sfc_SSiB.f90)
                   SIGN(Intrinsic) (Line 3661, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 3903, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 3982, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 4049, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 4063, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 4100, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 4106, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 4146, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 3995, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 4048, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 4099, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 4134, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 4197, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4021, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4060, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4104, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 4047, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 4098, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 4291, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 4303, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 4399, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4388, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4390, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4392, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4393, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4400, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 4388, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 4390, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 4392, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 4425, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 4431, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 4626, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 4643, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 4632, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 4632, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 5183, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 5192, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 5192, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 5197, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 5197, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 5731, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 5768, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 5776, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 5770, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 5892, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 5899, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 6015, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 6017, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 6027, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 6043, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 6045, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 6048, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 6028, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 6039, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 6030, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 6042, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 6044, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 6047, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 6040, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 6043, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 6045, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 6048, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 6257, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 6290, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 6315, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 6350, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 6353, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 6374, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 6378, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 6379, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 6479, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 6630, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 6631, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 6803, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 6820, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 7030, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 6811, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 6821, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 6829, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 6837, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 7031, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 7032, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 7044, file Sfc_SSiB.f90)
                   SQRT(Intrinsic) (Line 7044, file Sfc_SSiB.f90)
                   TRIM(Intrinsic) (Line 7173, file Sfc_SSiB.f90)
                   TRIM(Intrinsic) (Line 7177, file Sfc_SSiB.f90)
                   TRIM(Intrinsic) (Line 7181, file Sfc_SSiB.f90)
                   TRIM(Intrinsic) (Line 7185, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7219, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7220, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7221, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7222, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7223, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7224, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7225, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7226, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7227, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7228, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7229, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 7239, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 7312, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 7316, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 7322, file Sfc_SSiB.f90)
                   MOD(Intrinsic) (Line 7511, file Sfc_SSiB.f90)
                   MOD(Intrinsic) (Line 7544, file Sfc_SSiB.f90)
                   MOD(Intrinsic) (Line 7634, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7524, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7526, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7555, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7556, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7557, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7558, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7559, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7563, file Sfc_SSiB.f90)
                   ABS(Intrinsic) (Line 7563, file Sfc_SSiB.f90)
                   SIGN(Intrinsic) (Line 7524, file Sfc_SSiB.f90)
                   SIGN(Intrinsic) (Line 7526, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 7652, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 7847, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 7854, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 7921, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 7847, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 7854, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 7860, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 7916, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 7917, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 7919, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 7932, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 8117, file Sfc_SSiB.f90)
                   LOG(Intrinsic) (Line 8118, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 8117, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 8118, file Sfc_SSiB.f90)
                   REAL(Intrinsic) (Line 8119, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 8305, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 8326, file Sfc_SSiB.f90)
                   MAX(Intrinsic) (Line 8335, file Sfc_SSiB.f90)
                   EXP(Intrinsic) (Line 8313, file Sfc_SSiB.f90)
                   MIN(Intrinsic) (Line 8326, file Sfc_SSiB.f90)

Name  Messages
----  --------
VNTLAX in SFC_SSIB
      Defined as:  Subroutine (line 2074, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   VNTLAX in SFC_SSIB (Line 3556, file Sfc_SSiB.f90)
                   VNTLAX in SFC_SSIB (Line 3563, file Sfc_SSiB.f90)
                   VNTLAX in SFC_SSIB (Line 3588, file Sfc_SSiB.f90)

      Calls:       VNTLAX in SFC_SSIB (Line 3556, file Sfc_SSiB.f90)
                   VNTLAX in SFC_SSIB (Line 3563, file Sfc_SSiB.f90)
                   VNTLAX in SFC_SSIB (Line 3588, file Sfc_SSiB.f90)

Name  Messages
----  --------
VNTLT1 in SFC_SSIB
      Defined as:  Subroutine (line 5916, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   VNTLT1 in SFC_SSIB (Line 6274, file Sfc_SSiB.f90)

      Calls:       VNTLT1 in SFC_SSIB (Line 6274, file Sfc_SSiB.f90)

Name  Messages
----  --------
WHEAT in SFC_SSIB
      Defined as:  Subroutine (line 90, file Sfc_SSiB.f90)

      Interface:   None

      Called By:   WHEAT in SFC_SSIB (Line 828, file Sfc_SSiB.f90)

      Calls:       WHEAT in SFC_SSIB (Line 828, file Sfc_SSiB.f90)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
