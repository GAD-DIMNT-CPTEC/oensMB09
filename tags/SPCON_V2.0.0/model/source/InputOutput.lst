%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S u m m a r y   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Compilation
-----------
File     : /scratch/p01211/oens-1.0.0/model/source/InputOutput.f90
Compiled : 10/22/10  04:42:03
Compiler : Version 7.2.6
Target   : x86-64
Command  : /opt/cray/cce/7.2.6/cftn/x86-64/bin/ftn_driver.exe -hcpu=x86-64
           -hnetwork=seastar -hstatic -hbyteswapio -Rb -Onomodinline -emacdE
           -rmda -c -I/opt/cray/portals/2.2.0-1.0301.22647.20.8.ss/include
           -I/opt/cray/pmi/1.0-1.0000.7901.22.1.ss/include
           -I/opt/cray/cce/7.2.6/craylibs/x86-64/include
           -L/opt/cray/portals/2.2.0-1.0301.22647.20.8.ss/lib64
           -L/opt/cray/pmi/1.0-1.0000.7901.22.1.ss/lib64
           -L/opt/cray/cce/7.2.6/craylibs/x86-64
           -L/opt/acml/4.4.0/gfortran64/lib -lcraymath -lacml_mv -lgfortran
           -I/opt/acml/4.4.0/gfortran64/include -L/opt/gcc/4.1.2/snos/lib64
           -D__CRAYXT -D__CRAYXT_COMPUTE_LINUX_TARGET -D__TARGET_LINUX__
           -I/opt/cray/mpt/5.1.0/xt/seastar/mpich2-cray/include
           -I/opt/cray/mpt/5.1.0/xt/seastar/sma/include
           -I/opt/xt-libsci/10.4.9.4/cray/include
           -L/opt/cray/mpt/5.1.0/xt/seastar/mpich2-cray/lib
           -L/opt/cray/mpt/5.1.0/xt/seastar/sma/lib64
           -L/opt/xt-libsci/10.4.9.4/cray/lib/72 -lsci -lsma -lmpichf90 -lmpich
           -lrt -lpmi -lalpslli -lalpsutil -lportals -lm
           -L/usr/lib/alps InputOutput.f90

ftnlx report
------------
Source   : /scratch/p01211/oens-1.0.0/model/source/InputOutput.f90
Date     : 10/22/2010  04:42:08


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          O p t i o n s   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Options :  -O cache2,fp2,scalar2,thread2,vector2,nomodinline,ipa3,noaggress
           -O noautothread,nodwarf,fusion2,nomsgs,negmsgs,omp,nooverindex,patter
           n
           -O shortcircuit2,unroll2,nozeroinc
           -h cache2,fp2,thread2,noautothread,nocaf,cpu,nofunc_trace,network
           -h noomp_trace,omp,nopat_trace,nosecond_underscore
           -s default32 
           -eh 
           -eM 
           -d gjlnovwBDILPQRTZ 
           -e acdhkmpqyS        
           -Rb
           -f free
           -m3
           -S /tmp/pe_16312/InputOutput.s


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                          S o u r c e   L i s t i n g
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


     %%%    L o o p m a r k   L e g e n d    %%%

     Primary Loop Type        Modifiers
     ------- ---- ----        ---------
     A - Pattern matched      a - vector atomic memory operation
                              b - blocked
     C - Collapsed            c - conditional and/or computed
     D - Deleted              f - fused
     E - Cloned                
     I - Inlined              i - interchanged
     M - Multithreaded        m - partitioned
     P - Parallel             p - partial
     R - Redundant            r - unrolled
                              s - shortloop
     V - Vectorized           t - array syntax temp used
                              w - unwound


    1.              !
    2.              !  $Author: pkubota $
    3.              !  $Date: 2009/03/03 16:36:38 $
    4.              !  $Revision: 1.15 $
    5.              !
    6.              MODULE InputOutput
    7.              
    8.                USE Parallelism, ONLY: &
    9.                     myId,             &
   10.                     myId_four,        &
   11.                     maxNodes
   12.              
   13.                USE Constants, ONLY: &
   14.                     r4,i4, r8, i8, ngrmx, numx, ncf, ncf2
   15.              
   16.                USE IOLowLevel, ONLY: &
   17.                     ReadHead     , &
   18.                     GReadHead    , &
   19.                     ReadField    , &
   20.                     GReadField   , &
   21.                     WriteHead    , &
   22.                     GWriteHead   , &
   23.                     WriteField   , &
   24.                     GWriteField  , &
   25.                     ReadGetALB   , &
   26.                     ReadGetSST   , &
   27.                     ReadGetSLM   , &
   28.                     ReadGetSNW   , &
   29.                     ReadGetSST2  , &
   30.                     ReadOzone
   31.              
   32.                USE Options, ONLY: &
   33.                     nfprt, &
   34.                     nfctrl, &
   35.                     nfsst, &
   36.                     nfsnw, &
   37.                     nfalb, &
   38.                     nfslm, &
   39.                     nfauntbl, &
   40.                     nfcnftbl, &
   41.                     nfcnf2tb, &
   42.                     nflooktb, &
   43.                     reducedGrid,&
   44.                     labelsi,&
   45.                     labelsj,&
   46.                     ifco2, ifozone, & !hmjb
   47.                     nfco2, nfozone, & !hmjb
   48.                     co2val, &             !hmjb for new co2 values
   49.                     fNameSnow  , &
   50.                     fNameSSTAOI, &
   51.                     fNameSoilms, &
   52.                     fNameAlbedo, &
   53.                     fNameCO2   , &
   54.                     fNameOzone
   55.              
   56.                USE Utils, ONLY: &
   57.                     IJtoIBJB      ,&
   58.                     AveBoxIJtoIBJB,&
   59.                     NearestIJtoIBJB
   60.              
   61.                USE Sizes, ONLY: &
   62.                     mymnmax,    &
   63.                     myjmax_d,   &
   64.                     imax,       &
   65.                     jmax,       &
   66.                     kmaxloc,    &
   67.                     myfirstlev, &
   68.                     mylastlev,  &
   69.                     mymmax,     &
   70.                     msinproc,   &
   71.                     mnmap,      &
   72.                     mymnmap
   73.              
   74.              
   75.                USE Communications, ONLY: &
   76.                     Collect_Spec,        &
   77.                     Collect_Grid_Sur,    &
   78.                     Collect_Grid_d
   79.              
   80.                IMPLICIT NONE
   81.              
   82.                PRIVATE
   83.                PUBLIC :: InitInputOutput
   84.                PUBLIC :: cnvray
   85.                PUBLIC :: scloutsp
   86.                PUBLIC :: scloutgr
   87.                PUBLIC :: WillGetSbc
   88.                PUBLIC :: getsbc
   89.                PUBLIC :: gread
   90.                PUBLIC :: gread4
   91.                PUBLIC :: gwrite
   92.                PUBLIC :: fsbc
   93.                PUBLIC :: aunits
   94.              
   95.                INTEGER              :: mMax
   96.                INTEGER              :: nMax
   97.                INTEGER              :: mnMax
   98.                INTEGER              :: kMax
   99.              
  100.                LOGICAL              :: fsbc
  101.                CHARACTER(LEN=100)   :: path
  102.              
  103.                CHARACTER(LEN=16), ALLOCATABLE :: aunits(:)
  104.                INTEGER,           ALLOCATABLE :: looku (:,:,:)
  105.                REAL(KIND=r8),              ALLOCATABLE :: cnfac (:)
  106.                REAL(KIND=r8),              ALLOCATABLE :: cnfac2(:)
  107.              
  108.                REAL(KIND=r8),    PARAMETER   :: undef =1.0e53_r8
  109.              
  110.              
  111.              CONTAINS
  112.              
  113.              
  114.              
  115.                ! InitInputOutput: Initializes module
  116.              
  117.                SUBROUTINE InitInputOutput ( &
  118.                     mMax_in, nMax_in, mnMax_in, kmax_in, &
  119.                     path_in, fNameCnfTbl, &
  120.                     fNameCnf2Tb, fNameLookTb, fNameUnitTb)
  121.              
  122.                  INTEGER,          INTENT(IN) :: mMax_in
  123.                  INTEGER,          INTENT(IN) :: nMax_in
  124.                  INTEGER,          INTENT(IN) :: mnMax_in
  125.                  INTEGER,          INTENT(IN) :: kmax_in
  126.                  CHARACTER(LEN=*), INTENT(IN) :: path_in
  127.                  CHARACTER(LEN=*), INTENT(IN) :: fNameCnfTbl
  128.                  CHARACTER(LEN=*), INTENT(IN) :: fNameCnf2Tb
  129.                  CHARACTER(LEN=*), INTENT(IN) :: fNameLookTb
  130.                  CHARACTER(LEN=*), INTENT(IN) :: fNameUnitTb
  131.                  INTEGER :: ierr
  132.              
  133.              
  134.                  OPEN(UNIT=nfauntbl, FILE=TRIM(fNameUnitTb), FORM='formatted',ACCESS='sequential',&
  135.                       ACTION='read', STATUS='old', IOSTAT=ierr)
  136.                  IF (ierr /= 0) THEN
  137.                     WRITE(UNIT=nfprt,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
  138.                          TRIM(fNameUnitTb), ierr
  139.                     STOP "**(ERROR)**"
  140.                  END IF
  141.              
  142.                  OPEN(UNIT=nfcnftbl, FILE=TRIM(fNameCnfTbl), FORM='formatted',ACCESS='sequential',&
  143.                       ACTION='read', STATUS='old', IOSTAT=ierr)
  144.                  IF (ierr /= 0) THEN
  145.                     WRITE(UNIT=nfprt,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
  146.                          TRIM(fNameCnfTbl), ierr
  147.                     STOP "**(ERROR)**"
  148.                  END IF
  149.              
  150.                  OPEN(UNIT=nfcnf2tb, FILE=TRIM(fNameCnf2Tb), FORM='formatted',ACCESS='sequential',&
  151.                       ACTION='read', STATUS='old', IOSTAT=ierr)
  152.                  IF (ierr /= 0) THEN
  153.                     WRITE(UNIT=nfprt,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
  154.                          TRIM(fNameCnf2Tb), ierr
  155.                     STOP "**(ERROR)**"
  156.                  END IF
  157.              
  158.                  OPEN(UNIT=nflooktb, FILE=TRIM(fNameLookTb), FORM='formatted',ACCESS='sequential',&
  159.                       ACTION='read', STATUS='old', IOSTAT=ierr)
  160.                  IF (ierr /= 0) THEN
  161.                     WRITE(UNIT=nfprt,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
  162.                          TRIM(fNameLookTb), ierr
  163.                     STOP "**(ERROR)**"
  164.                  END IF
  165.              
  166.                  path  = path_in
  167.                  mMax  = mMax_in
  168.                  nMax  = nMax_in
  169.                  mnMax = mnMax_in
  170.                  kmax  = kmax_in
  171.              
  172.                  ALLOCATE(aunits(-1:numx))
  173.                  REWIND nfauntbl
  174.                  READ(UNIT=nfauntbl,FMT="(A16)") aunits
  175.                  REWIND nfauntbl
  176.                  CLOSE(UNIT=nfauntbl,status='KEEP')
  177.              
  178.                  ALLOCATE(cnfac(ncf))
  179.                  REWIND nfcnftbl
  180.                  READ(UNIT=nfcnftbl,FMT="(5e16.8)") cnfac
  181.                  REWIND nfcnftbl
  182.                  CLOSE(UNIT=nfcnftbl,status='KEEP')
  183.              
  184.                  ALLOCATE(cnfac2(ncf2))
  185.                  REWIND nfcnf2tb
  186.                  READ(UNIT=nfcnf2tb,FMT="(5e16.8)") cnfac2
  187.                  REWIND nfcnf2tb
  188.                  CLOSE(UNIT=nfcnf2tb,status='KEEP')
  189.              
  190.                  ALLOCATE(looku(0:9,0:9,0:ngrmx))
  191.                  REWIND nflooktb
  192.                  READ(UNIT=nflooktb,FMT="(20i4)") looku
  193.                  REWIND nflooktb
  194.                  CLOSE(UNIT=nflooktb,status='KEEP')
  195.              
  196.                END SUBROUTINE InitInputOutput
  197.              
  198.              
  199.              
  200.                ! cnvray: convert array
  201.              
  202.              
  203.              
  204.                SUBROUTINE cnvray (array, idim, ifr, ito)
  205.                  INTEGER, INTENT(IN   ) :: idim
  206.                  REAL(KIND=r8),    INTENT(INOUT) :: array(idim)
  207.                  INTEGER, INTENT(IN   ) :: ifr
  208.                  INTEGER, INTENT(IN   ) :: ito
  209.              
  210.                  CHARACTER(LEN=20) :: c0
  211.                  CHARACTER(LEN=20) :: c1
  212.                  INTEGER           :: i
  213.                  INTEGER           :: icf
  214.                  INTEGER           :: igpf
  215.                  INTEGER           :: iuf
  216.                  INTEGER           :: igpt
  217.                  INTEGER           :: iut
  218.                  REAL(KIND=r8)              :: cf
  219.                  REAL(KIND=r8)              :: cf2
  220.              
  221.                  CHARACTER(LEN=*), PARAMETER :: h="**(cnvray)**"
  222.              
  223.                  ! consistency
  224.              
  225.                  IF (idim.eq.0) RETURN
  226.              
  227.                  IF (ifr <= -1) THEN
  228.                     WRITE(c0,"(i20)") ifr
  229.                     WRITE(UNIT=nfprt,FMT="(a)") h//" ERROR: ifr ("//TRIM(ADJUSTL(c0))//") <= -1 "
  230.                     STOP h
  231.                  ELSE IF (ito <= -1) THEN
  232.                     WRITE(c0,"(i20)") ito
  233.                     WRITE(UNIT=nfprt,FMT="(a)") h//" ERROR: ito ("//TRIM(ADJUSTL(c0))//") <= -1 "
  234.                     STOP h
  235.                  ELSE IF (idim < 0) THEN
  236.                     WRITE(c0,"(i20)") idim
  237.                     WRITE(UNIT=nfprt,FMT="(a)") h//" ERROR: idim ("//TRIM(ADJUSTL(c0))//") < 0 "
  238.                     STOP h
  239.                  ELSE IF (ito /= ifr) THEN
  240.                     igpf=ifr/10
  241.                     igpt=ito/10
  242.                     IF (igpf /= igpt) THEN
  243.                        WRITE(c0,"(i20)") igpf
  244.                        WRITE(c1,"(i20)") igpt
  245.                        WRITE(UNIT=nfprt,FMT="(a)") h//" ERROR: igpf ("//TRIM(ADJUSTL(c0))//&
  246.                             &") /= igpt ("//TRIM(ADJUSTL(c1))//")"
  247.                        STOP h
  248.                     ELSE IF (igpf > ngrmx) THEN
  249.                        WRITE(c0,"(i20)") igpf
  250.                        WRITE(c1,"(i20)") ngrmx
  251.                        WRITE(UNIT=nfprt,FMT="(a)") h//" ERROR: igpf ("//TRIM(ADJUSTL(c0))//&
  252.                             &") > ngrmx ("//TRIM(ADJUSTL(c1))//")"
  253.                        STOP h
  254.                     ELSE
  255.              
  256.                        ! table look-up
  257.              
  258.                        iuf=MOD(ifr,10)
  259.                        iut=MOD(ito,10)
  260.                        icf=looku(iuf,iut,igpf)
  261.              
  262.                        ! consistency, again
  263.              
  264.                        IF (icf < 1 .OR. icf > ncf) THEN
  265.                           WRITE(c0,"(i20)") icf
  266.                           WRITE(c1,"(i20)") ncf
  267.                           WRITE(UNIT=nfprt,FMT="(a)") h//" ERROR: icf ("//TRIM(ADJUSTL(c0))//&
  268.                                &") < 1 or > ncf ("//TRIM(ADJUSTL(c1))//")"
  269.                           STOP h
  270.                        END IF
  271.              
  272.                        ! get coeficients
  273.              
  274.                        cf=cnfac(icf)
  275.                        IF (icf <= ncf2) THEN
  276.                           cf2=cnfac2(icf)
  277.                        ELSE
  278.                           cf2=0.0_r8
  279.                        END IF
  280.              
  281.                        ! convert array
  282.              
  283.  1---------<           DO i = 1, idim
  284.  1                        IF (array(i) /= undef) THEN
  285.  1                           array(i)=cf*array(i)+cf2
  286.  1                        END IF
  287.  1--------->           END DO
  288.                     END IF
  289.                  END IF
  290.                END SUBROUTINE cnvray
  291.              
  292.              
  293.                !
  294.                ! scale, convert to 32 bits and output field
  295.                !
  296.                SUBROUTINE scloutsp(unit, field, levs, levsg, fact1, nufr, nuto)
  297.                  INTEGER, INTENT(IN) :: unit
  298.                  INTEGER, INTENT(IN) :: levs
  299.                  INTEGER, INTENT(IN) :: levsg
  300.                  REAL(KIND=r8),    INTENT(IN) :: field(2*mymnmax,levs)
  301.                  REAL(KIND=r8),    INTENT(IN) :: fact1
  302.                  INTEGER, INTENT(IN) :: nufr
  303.                  INTEGER, INTENT(IN) :: nuto
  304.                  REAL(KIND=r8) :: fldaux(2*mymnmax,levs), fout(2*mnmax,levsg)
  305.              
  306.  V--------<>     fldaux = fact1 * field
  307.              
  308.                  CALL cnvray(fldaux,2*levs*mymnmax,nufr,nuto)
  309.              
  310.                  IF (Maxnodes.eq.1) THEN
  311.              
  312.                     CALL WriteField(unit, fldaux)
  313.              
  314.                  ELSE
  315.                     CALL Collect_Spec(fldaux, fout, levs, levsg, 0)
  316.                     IF (myid.eq.0) CALL WriteField(unit, fout)
  317.                  ENDIF
  318.              
  319.              
  320.              
  321.                END SUBROUTINE scloutsp
  322.              
  323.              
  324.              
  325.              
  326.                SUBROUTINE scloutgr(unit, field, levs, fact1, nufr, nuto)
  327.                  INTEGER, INTENT(IN) :: unit
  328.                  INTEGER, INTENT(IN) :: levs
  329.                  REAL(KIND=r8),    INTENT(IN) :: field(imax*myjmax_d,levs)
  330.                  REAL(KIND=r8),    INTENT(IN) :: fact1
  331.                  INTEGER, INTENT(IN) :: nufr
  332.                  INTEGER, INTENT(IN) :: nuto
  333.                  REAL(KIND=r8) :: fldaux(imax*myjmax_d,levs), fout(imax*jmax,levs)
  334.              
  335.  V--------<>     fldaux = fact1 * field
  336.              
  337.                  CALL cnvray(fldaux,imax*myjmax_d*levs,nufr,nuto)
  338.              
  339.                  IF (Maxnodes.eq.1) THEN
  340.              
  341.                     CALL WriteField(unit, fldaux)
  342.              
  343.                  ELSE
  344.                     IF(levs.eq.1) THEN
  345.                        CALL Collect_Grid_Sur(fldaux, fout, 0)
  346.                     ELSE
  347.                        CALL Collect_Grid_d(fldaux, fout, levs, 0)
  348.                     ENDIF
  349.                     IF(myid.eq.0) CALL WriteField(unit, fout)
  350.              
  351.                  ENDIF
  352.              
  353.              
  354.              
  355.                END SUBROUTINE scloutgr
  356.              
  357.              
  358.              
  359.              
  360.                LOGICAL FUNCTION WillGetSbc(idate, tod, fint)
  361.                  INTEGER, INTENT(IN) :: idate(4)
  362.                  REAL(KIND=r8),    INTENT(IN) :: tod
  363.                  REAL(KIND=r8),    INTENT(IN) :: fint
  364.                  REAL(KIND=r8)                :: fhr
  365.              
  366.                  WillGetSbc = .TRUE.
  367.                  IF (fint > 0.0_r8) THEN
  368.                     fhr=REAL(idate(1),r8)+tod/3600.0_r8+1.0e-3_r8
  369.                     WillGetSbc = fsbc .OR. ABS( MOD(fhr,fint)) <= 1.0e-2_r8
  370.                  END IF
  371.                END FUNCTION WillGetSbc
  372.                !
  373.                ! getsbc :read surface/atmosphere boundary conditions.
  374.                !
  375.                SUBROUTINE getsbc (imax,jmax,kmax,galb ,gsst ,gslm,gsnw,gozo,&
  376.                     ifday,tod,idate,idatec,&
  377.                     ifalb,ifsst,ifslm,ifsnw,ifozone,&
  378.                     sstlag,intsst,fint,tice,&
  379.                     yrl ,monl,ibMax,jbMax,ibMaxPerJB)
  380.                  IMPLICIT NONE
  381.                  !
  382.                  ! INPUT/OUTPUT VARIABLES
  383.                  !
  384.                  ! Real size of the grid
  385.                  INTEGER, INTENT(in   ) :: imax
  386.                  INTEGER, INTENT(in   ) :: jmax
  387.                  INTEGER, INTENT(in   ) :: kmax
  388.                  ! Size of block divided grid
  389.                  INTEGER, INTENT(in   ) :: ibMax
  390.                  INTEGER, INTENT(in   ) :: jbMax
  391.                  INTEGER, INTENT(in   ) :: ibMaxPerJB(:)
  392.              
  393.                  ! Boundary fields output
  394.                  REAL(KIND=r8), INTENT(out  ) :: galb(ibMax,jbMax) ! albedo
  395.                  REAL(KIND=r8), INTENT(out  ) :: gsst(ibMax,jbMax) ! sst
  396.                  REAL(KIND=r8), INTENT(out  ) :: gslm(ibMax,jbMax) ! soil moisture
  397.                  REAL(KIND=r8), INTENT(out  ) :: gsnw(ibMax,jbMax) ! snow
  398.                  !hmjb o ozonio nao pode ser apenas 'out' pois, no caso de usar a antiga
  399.                  !  getoz(), ele sairia daqui com valores indefinidos... Com inout,
  400.                  !  ele entra e,  se nao for alterado, sai como entrou
  401.                  REAL(KIND=r8), INTENT(inout) :: gozo(ibMax,kMax,jbMax) ! ozone
  402.              
  403.                  ! Options for reading boundary fields
  404.                  INTEGER, INTENT(inout) :: ifalb
  405.                  INTEGER, INTENT(inout) :: ifsst
  406.                  INTEGER, INTENT(inout) :: ifslm
  407.                  INTEGER, INTENT(inout) :: ifsnw
  408.                  INTEGER, INTENT(inout) :: ifozone
  409.              
  410.                  ! Time
  411.                  INTEGER, INTENT(in   ) :: ifday
  412.                  REAL(KIND=r8), INTENT(in   ) :: tod
  413.                  INTEGER, INTENT(in   ) :: idate(4)
  414.                  INTEGER, INTENT(in   ) :: idatec(4)
  415.                  REAL(KIND=r8), INTENT(in   ) :: sstlag
  416.                  INTEGER, INTENT(in   ) :: intsst
  417.                  REAL(KIND=r8), INTENT(in   ) :: fint
  418.                  REAL(KIND=r8), INTENT(in   ) :: tice
  419.                  REAL(KIND=r8), INTENT(in   ) :: yrl
  420.                  INTEGER, INTENT(in   ) :: monl(12)
  421.                  !
  422.                  ! LOCAL VARIABLES
  423.                  !
  424.                  REAL(KIND=r8)                :: xsst    (ibMax,jbMax)
  425.                  REAL(KIND=r8)                :: bfr_in  (imax,jmax)
  426.                  REAL(KIND=r8)                :: bfr_in3 (imax,kmax,jmax)
  427.                  REAL(KIND=r8)                :: bfr_out (ibMax,jbMax)
  428.                  REAL(KIND=r8)                :: bfr_out3(ibMax,kmax,jbMax)
  429.                  REAL(KIND=r4)                :: rbrf    (iMax,jMax)
  430.                  REAL(KIND=r4)                :: rbrf3   (iMax,kmax,jMax)
  431.              
  432.                  !
  433.                  !
  434.                  INTEGER                :: lrecl,LRecIn
  435.                  REAL(KIND=r8)          :: fhr
  436.                  INTEGER                :: mf
  437.                  INTEGER                :: mn
  438.                  INTEGER                :: month
  439.                  INTEGER                :: mm
  440.                  INTEGER                :: i
  441.                  INTEGER                :: j
  442.                  INTEGER                :: k
  443.                  INTEGER                :: irec
  444.                  REAL(KIND=r8)                :: f1
  445.                  REAL(KIND=r8)                :: f2
  446.                  REAL(KIND=r8)                :: gmax
  447.                  REAL(KIND=r8)                :: gmin
  448.                  REAL(KIND=r8)                :: fsst
  449.                  REAL(KIND=r8)                :: fisst
  450.                  REAL(KIND=r8)                :: xx1
  451.                  REAL(KIND=r8)                :: xx2
  452.                  REAL(KIND=r8)                :: xday
  453.                  INTEGER :: ierr
  454.                  !
  455.                  !   ifxxx=0    xxx is not processed
  456.                  !   ifxxx=1    xxx is set to month=idate(2) in the first call,
  457.                  !              but not processed from the subsequent calls.
  458.                  !              ifxxx is set to zero after interpolation
  459.                  !   ifxxx=2    xxx is interpolated to current day and time every fint
  460.                  !              hours synchronized to 00z regardless of initial time.
  461.                  !              interpolation is continuous (every time step) if fint<0.
  462.                  !   ifxxx=3    xxx is interpolated to current day and time when ifday=0
  463.                  !              and tod=0.0 but not processed otherwise
  464.                  !              ( appropriate only when xxx is predicted )
  465.                  !
  466.                  !              the following are for sst only (fint applies as in
  467.                  !              ifxxx=2):
  468.                  !   ifsst=4    sst is linearly interpolated from continuous direct
  469.                  !              access data set to current day and time.  data set
  470.                  !              is assumed to be spaced every intsst days or every
  471.                  !              calendar month is intsst < 0.
  472.                  !   ifsst=5    sst is expanded from piecewise cubic coefficients in
  473.                  !              direct access data set to current day and time.  data set
  474.                  !              is assumed to be spaced every intsst days.
  475.                  !   note:      for ifsst=4 or 5 sstlag must be set.  sstlag is the
  476.                  !              number of days plus any fraction prior to the initial
  477.                  !              condition date and time the data set begins if intsst > 0
  478.                  !              sstlag is the number of whole months prior to the initial
  479.                  !              condition date the data set begins if intsst < 0.
  480.                  !
  481.                  !     ifsst=-1 for numerical weather forecasting using mean weekly sst:
  482.                  !              sst is read in the first call as the second record of
  483.                  !              the archieve but not processed from the subsequent calls.
  484.                  !
  485.  A--------<>     rbrf = 0.0_r4
  486.                  IF (fint > 0.0_r8) THEN
  487.                     fhr=REAL(idate(1),r8)+tod/3600.0_r8+1.0e-3_r8
  488.                     IF (.NOT. fsbc .AND. ABS( MOD(fhr,fint)) > 1.0e-2_r8) THEN
  489.                        RETURN
  490.                     END IF
  491.                  END IF
  492.                  IF (ifsst == 4 .AND. intsst <= 0) THEN
  493.                     CALL GetRecWgtMonthlySST &
  494.                          (idate, idatec, tod, labelsi, labelsj, &
  495.                          irec, f1, f2, mf, mn,monl)
  496.              
  497.              !!$       WRITE (UNIT=nfprt, FMT='(A)') ' GetRecWgtMonthlySST'
  498.              !!$       WRITE (UNIT=nfprt, FMT='(/,4(A,I5),/)') &
  499.              !!$            ' reci = ', irec, ' recf = ', irec+1, &
  500.              !!$            ' mra = ', mf, ' mrb = ', mf+1
  501.              !!$       WRITE (UNIT=nfprt, FMT=*) ' fa  (*mra) = ', f1, ' fb  (*mrb) = ', f2
  502.                  ELSE
  503.  I                  CALL GetWeightsOld(yrl,monl,idatec, tod, f1, f2,mf)
  504.              !!$       WRITE (UNIT=nfprt, FMT=*) ' fa  (*mra) = ', f1, ' fb  (*mrb) = ', f2
  505.                  END IF
  506.                  !
  507.                  ! process albedo file
  508.                  !
  509.                  IF (ifalb /= 0) THEN
  510.                     IF (ifalb == 1) THEN
  511.                        month=idate(2)
  512.                        INQUIRE (IOLENGTH=LRecIn) rbrf
  513.                        OPEN (UNIT=nfalb,FILE=TRIM(fNameAlbedo),FORM='UNFORMATTED', ACCESS='DIRECT', RECL=LRecIn, &
  514.                             ACTION='read', STATUS='old', IOSTAT=ierr)
  515.                        IF (ierr /= 0) THEN
  516.                           WRITE(UNIT=nfprt,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
  517.                                TRIM(fNameAlbedo), ierr
  518.                           STOP "**(ERROR)**"
  519.                        END IF
  520.                        irec=month
  521.                        CALL ReadGetALB(nfalb,irec,bfr_in)
  522.              
  523.                        IF (reducedGrid) THEN
  524.                           CALL AveBoxIJtoIBJB(bfr_in,galb)
  525.                        ELSE
  526.                           CALL IJtoIBJB(bfr_in ,galb)
  527.                        END IF
  528.                        CLOSE(UNIT=nfalb)
  529.                        ifalb=0
  530.                     ELSE IF (&
  531.                          (ifalb == 2) .OR. &
  532.                          (ifalb == 3 .AND. tod == 0.0_r8 .AND. ifday == 0)) THEN
  533.                        INQUIRE (IOLENGTH=LRecIn) rbrf
  534.                        OPEN (UNIT=nfalb,FILE=TRIM(fNameAlbedo),FORM='UNFORMATTED', ACCESS='DIRECT', RECL=LRecIn, &
  535.                             ACTION='read', STATUS='old', IOSTAT=ierr)
  536.                        IF (ierr /= 0) THEN
  537.                           WRITE(UNIT=nfprt,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
  538.                                TRIM(fNameAlbedo), ierr
  539.                           STOP "**(ERROR)**"
  540.                        END IF
  541.                        irec=mf
  542.                        CALL ReadGetALB(nfalb,irec,bfr_in)
  543.                        IF (reducedGrid) THEN
  544.                           CALL AveBoxIJtoIBJB(bfr_in,galb)
  545.                        ELSE
  546.                           CALL IJtoIBJB(bfr_in ,galb)
  547.                        END IF
  548.                        IF (irec == 12) THEN
  549.                           irec=1
  550.                        ELSE   
  551.                           irec=irec+1
  552.                        END IF
  553.                        CALL ReadGetALB(nfalb,irec,bfr_in)
  554.                        IF (reducedGrid) THEN
  555.                           CALL AveBoxIJtoIBJB(bfr_in,bfr_out)
  556.                        ELSE
  557.                           CALL IJtoIBJB(bfr_in ,bfr_out)
  558.                        END IF
  559.                        CLOSE(UNIT=nfalb)
  560.                        gmax=-1.0e10_r8
  561.                        gmin=+1.0e10_r8
  562.              
  563.  1---------<           DO j=1,jbMax
  564.  1 Vr4-----<              DO i=1,ibMaxPerJB(j)
  565.  1 Vr4                       galb(i,j)=f2*galb(i,j)+f1*bfr_out(i,j)
  566.  1 Vr4                       gmax=MAX(gmax,galb(i,j))
  567.  1 Vr4                       gmin=MIN(gmin,galb(i,j))
  568.  1 Vr4----->              END DO
  569.  1--------->           END DO
  570.              
  571.                        IF (ifalb == 3 .AND. tod == 0.0_r8 .AND. ifday == 0) THEN
  572.                           ifalb=0
  573.                        END IF
  574.              
  575.                        IF (nfctrl(23) >= 1) THEN
  576.                           WRITE(UNIT=nfprt,FMT=888) mf,f1,f2,gmax,gmin
  577.                        END IF
  578.              
  579.                     ELSE
  580.                        WRITE(UNIT=nfprt,FMT=999)
  581.                        STOP
  582.                     END IF
  583.                  END IF
  584.              
  585.                  !
  586.                  ! process sst file
  587.                  !
  588.              
  589.                  IF (ifsst /= 0) THEN
  590.                     IF (ifsst == -1) THEN
  591.                        INQUIRE (IOLENGTH=LRecIn) rbrf
  592.                        OPEN (UNIT=nfsst, FILE=TRIM(fNameSSTAOI),FORM='UNFORMATTED', ACCESS='DIRECT', RECL=LRecIn,&
  593.                             ACTION='READ',STATUS='OLD', IOSTAT=ierr)
  594.                        IF (ierr /= 0) THEN
  595.                           WRITE(UNIT=nfprt,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
  596.                                TRIM(fNameSSTAOI), ierr
  597.                           STOP "**(ERROR)**"
  598.                        END IF
  599.                        irec=1
  600.                        CALL ReadGetSST(nfsst,irec,bfr_in)
  601.                        irec=2
  602.                        CALL ReadGetSST(nfsst,irec,bfr_in)
  603.                        IF (reducedGrid) THEN
  604.                           CALL NearestIJtoIBJB(bfr_in ,gsst)
  605.                        ELSE
  606.                           CALL IJtoIBJB(bfr_in ,gsst)
  607.                        END IF
  608.                        CLOSE(UNIT=nfsst)
  609.                        gmax=-1.0e10_r8
  610.                        gmin=+1.0e10_r8
  611.              
  612.  1---------<           DO j=1,jbMax
  613.  1 2-------<              DO i=1,ibMaxPerJB(j)
  614.  1 2                         IF (gsst(i,j) > 10.0_r8) THEN
  615.  1 2                            gsst(i,j)=-gsst(i,j)
  616.  1 2                         ELSE IF (gsst(i,j) < 0.0_r8) THEN
  617.  1 2                            gsst(i,j)=290.0_r8
  618.  1 2                         ELSE
  619.  1 2                            PRINT *, " OPTION ifsst=-1 INCORRECT VALUE OF SST "
  620.  1 2                            STOP "**(ERROR)**"
  621.  1 2                         END IF
  622.  1 2                         gmax=MAX(gmax,gsst(i,j))
  623.  1 2                         gmin=MIN(gmin,gsst(i,j))
  624.  1 2------->              END DO
  625.  1--------->           END DO
  626.              
  627.                        WRITE(UNIT=nfprt,FMT=667) ifsst,gmax,gmin
  628.                        ifsst=0
  629.                     ELSE IF (ifsst == 1) THEN
  630.                        OPEN(UNIT=nfsst, FILE=TRIM(fNameSSTAOI), FORM='unformatted', ACCESS='sequential',&
  631.                             ACTION='read', STATUS='old', IOSTAT=ierr)
  632.                        IF (ierr /= 0) THEN
  633.                           WRITE(UNIT=nfprt,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
  634.                                TRIM(fNameSSTAOI), ierr
  635.                           STOP "**(ERROR)**"
  636.                        END IF
  637.                        READ(UNIT=nfsst)
  638.                        month=idate(2)
  639.  1---------<           DO mm=1,month
  640.  1                        CALL ReadGetSST(nfsst,irec,bfr_in)
  641.  1--------->           END DO
  642.                        IF (reducedGrid) THEN
  643.                           CALL NearestIJtoIBJB(bfr_in ,gsst)
  644.                        ELSE
  645.                           CALL IJtoIBJB(bfr_in ,gsst)
  646.                        END IF
  647.                        CLOSE(UNIT=nfsst)
  648.  1---------<           DO j=1,jbMax
  649.  1 2-------<              DO i=1,ibMaxPerJB(j)
  650.  1 2                         IF (gsst(i,j) > 10.0_r8) THEN
  651.  1 2                            gsst(i,j)=gsst(i,j)
  652.  1 2                         ELSE IF (gsst(i,j) < 0.0_r8) THEN
  653.  1 2                            gsst(i,j)=290.0_r8
  654.  1 2                         ELSE
  655.  1 2                            PRINT *, " OPTION ifsst=-1 INCORRECT VALUE OF SST "
  656.  1 2                            STOP "**(ERROR)**"
  657.  1 2                         END IF
  658.  1 2------->              END DO
  659.  1--------->           END DO
  660.                        ifsst=0
  661.                     ELSE IF (ifsst == 2.OR. &
  662.                          (ifsst == 3.AND.tod == 0.0_r8.AND.ifday == 0)) THEN
  663.                        INQUIRE (IOLENGTH=LRecIn) rbrf
  664.                        OPEN (UNIT=nfsst, FILE=TRIM(fNameSSTAOI),FORM='UNFORMATTED', ACCESS='DIRECT', RECL=LRecIn,&
  665.                           ACTION='READ',STATUS='OLD', IOSTAT=ierr)
  666.                        IF (ierr /= 0) THEN
  667.                           WRITE(UNIT=nfprt,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
  668.                                TRIM(fNameSSTAOI), ierr
  669.                           STOP "**(ERROR)**"
  670.                        END IF
  671.              
  672.                        irec = mf+1
  673.                        CALL ReadGetSST(nfsst,irec,bfr_in)
  674.              
  675.                        IF (reducedGrid) THEN
  676.                           CALL NearestIJtoIBJB(bfr_in ,xsst)
  677.                        ELSE
  678.                           CALL IJtoIBJB(bfr_in ,xsst)
  679.                        END IF
  680.                        
  681.                        IF (irec == 13) THEN
  682.                           irec=2
  683.                        ELSE
  684.                           irec=irec+1
  685.                        END IF
  686.                        CALL ReadGetSST(nfsst,irec,bfr_in)
  687.                        IF (reducedGrid) THEN
  688.                           CALL NearestIJtoIBJB(bfr_in ,bfr_out)
  689.                        ELSE
  690.                           CALL IJtoIBJB(bfr_in ,bfr_out)
  691.                        END IF
  692.              
  693.                        CLOSE(UNIT=nfsst)
  694.                        gmax=-1.0e10_r8
  695.                        gmin=+1.0e10_r8
  696.  1---------<           DO j=1,jbMax
  697.  1 2-------<              DO i=1,ibMaxPerJB(j)
  698.  1 2         
  699.  1 2                         fsst=f2*xsst(i,j)+f1*bfr_out(i,j)
  700.  1 2                         IF (fsst > gmax) THEN
  701.  1 2                            gmax=fsst
  702.  1 2                         END IF
  703.  1 2                         IF (fsst < gmin) THEN
  704.  1 2                            gmin=fsst
  705.  1 2                         END IF
  706.  1 2                         IF (fsst > 10.0_r8) THEN
  707.  1 2                            xsst(i,j)=-fsst
  708.  1 2                         ELSE IF (fsst < 0.0_r8) THEN
  709.  1 2                            xsst(i,j)=290.0_r8
  710.  1 2                         ELSE
  711.  1 2                            PRINT *, " OPTION ifsst=-1 INCORRECT VALUE OF SST "
  712.  1 2                            STOP "**(ERROR)**"
  713.  1 2                         END IF
  714.  1 2------->              END DO
  715.  1--------->           END DO
  716.  1---------<           DO j=1,jbMax
  717.  1 2-------<              DO i=1,ibMaxPerJB(j)
  718.  1 2                         IF (tod == 0.0_r8.AND.ifday == 0) THEN
  719.  1 2                            gsst(i,j)=xsst(i,j)
  720.  1 2                         ELSE IF (xsst(i,j) < 0.0_r8.AND.ABS(xsst(i,j)) >= tice) THEN
  721.  1 2                            gsst(i,j)=xsst(i,j)
  722.  1 2                         ELSE IF (xsst(i,j) < 0.0_r8.AND.ABS(gsst(i,j)) >= tice) THEN
  723.  1 2                            gsst(i,j)=-tice+1.0e-2_r8
  724.  1 2                         END IF
  725.  1 2------->              END DO
  726.  1--------->           END DO
  727.              
  728.                        IF (ifsst == 3.AND.tod == 0.0_r8.AND.ifday == 0) THEN
  729.                           ifsst=0
  730.                        END IF
  731.                        IF (nfctrl(23) >= 1) THEN
  732.                           WRITE(UNIT=nfprt,FMT=666) mf,f1,f2,gmax,gmin
  733.                        END IF
  734.                     ELSE IF (ifsst == 4) THEN
  735.                        IF (intsst > 0) THEN
  736.                           fisst=REAL(intsst,r8)
  737.                           xday=ifday+tod/86400.0_r8+sstlag
  738.                           irec=xday/fisst+1.0e-3_r8+1
  739.                           xx1= MOD(xday,fisst)/fisst
  740.                           xx2=1.0_r8-xx1
  741.                        ELSE
  742.                           xx1=f1
  743.                           xx2=f2
  744.                        END IF
  745.                        INQUIRE (IOLENGTH=lrecl) bfr_in
  746.                        lrecl=lrecl/2
  747.                        OPEN(UNIT=nfsst,FILE=TRIM(fNameSSTAOI),FORM='unformatted',ACCESS='direct',&
  748.                             RECL=lrecl,ACTION='read', STATUS='old', IOSTAT=ierr)
  749.                        IF (ierr /= 0) THEN
  750.                           WRITE(UNIT=nfprt,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
  751.                                TRIM(fNameSSTAOI), ierr
  752.                           STOP "**(ERROR)**"
  753.                        END IF
  754.                        CALL ReadGetSST2(nfsst,bfr_in,irec)
  755.                        IF (reducedGrid) THEN
  756.                           CALL NearestIJtoIBJB(bfr_in ,xsst)
  757.                        ELSE
  758.                           CALL IJtoIBJB(bfr_in ,xsst)
  759.                        END IF
  760.                        CALL ReadGetSST2(nfsst,bfr_in,irec+1)
  761.                        IF (reducedGrid) THEN
  762.                           CALL NearestIJtoIBJB(bfr_in ,bfr_out)
  763.                        ELSE
  764.                           CALL IJtoIBJB(bfr_in ,bfr_out)
  765.                        END IF
  766.                        CLOSE(UNIT=nfsst)
  767.                        gmax=-1.0e10_r8
  768.                        gmin=+1.0e10_r8
  769.  1---------<           DO j=1,jbMax
  770.  1 2-------<              DO i=1,ibMaxPerJB(j)
  771.  1 2                         fsst=xx2*xsst(i,j)+xx1*bfr_out(i,j)
  772.  1 2                         IF (fsst > gmax) THEN
  773.  1 2                            gmax=fsst
  774.  1 2                         END IF
  775.  1 2                         IF (fsst < gmin) THEN
  776.  1 2                            gmin=fsst
  777.  1 2                         END IF
  778.  1 2                         IF (fsst > 10.0_r8) THEN
  779.  1 2                            xsst(i,j)=-fsst
  780.  1 2                         ELSE IF (fsst < 0.0_r8) THEN
  781.  1 2                            xsst(i,j)=290.0_r8
  782.  1 2                         ELSE
  783.  1 2                            PRINT *, " OPTION ifsst=-1 INCORRECT VALUE OF SST "
  784.  1 2                            STOP "**(ERROR)**"
  785.  1 2                         END IF
  786.  1 2------->              END DO
  787.  1--------->           END DO
  788.              
  789.                        IF (nfctrl(23) >= 1) THEN
  790.                           WRITE(UNIT=nfprt,FMT=666) irec,xx1,xx2,gmax,gmin
  791.                        END IF
  792.              
  793.  1---------<           DO j=1,jbMax
  794.  1 2-------<              DO i=1,ibMaxPerJB(j)
  795.  1 2                         IF (tod == 0.0_r8.AND.ifday == 0) THEN
  796.  1 2                            gsst(i,j)=xsst(i,j)
  797.  1 2                         ELSE IF (xsst(i,j) < 0.0_r8.AND.ABS(xsst(i,j)) >= tice) THEN
  798.  1 2                            gsst(i,j)=xsst(i,j)
  799.  1 2                         ELSE IF (xsst(i,j) < 0.0_r8.AND.ABS(gsst(i,j)) >= tice) THEN
  800.  1 2                            gsst(i,j)=-tice+1.0e-2_r8
  801.  1 2                         END IF
  802.  1 2------->              END DO
  803.  1--------->           END DO
  804.              
  805.                     ELSE IF (ifsst == 5.AND.intsst > 0) THEN
  806.              
  807.                        !*(JP)* Eliminei este caso pelas obs do Bonatti e minhas
  808.              
  809.                        PRINT *, " OPTION ifsst=5 NOT CORRECTLY IMPLEMENTED "
  810.                        STOP "**(ERROR)**"
  811.              
  812.                     ELSE
  813.                        WRITE(UNIT=nfprt,FMT=1999)
  814.                        STOP
  815.                     END IF
  816.                  END IF
  817.              
  818.                  !
  819.                  ! process snow file
  820.                  !
  821.              
  822.                  IF (ifsnw /= 0) THEN
  823.                     IF (ifsnw == 1) THEN
  824.                        INQUIRE (IOLENGTH=LRecIn) rbrf
  825.                        OPEN (UNIT=nfsnw,FILE=TRIM(fNameSnow), FORM='UNFORMATTED', ACCESS='DIRECT', &
  826.                              RECL=LRecIn, ACTION='READ',STATUS='OLD', IOSTAT=ierr)
  827.                        IF (ierr /= 0) THEN
  828.                           WRITE(UNIT=nfprt,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
  829.                                TRIM(fNameSnow), ierr
  830.                           STOP "**(ERROR)**"
  831.                        END IF
  832.                        irec=1
  833.                        CALL ReadGetSNW(nfsnw,irec,bfr_in)
  834.                        IF (reducedGrid) THEN
  835.                           CALL AveBoxIJtoIBJB(bfr_in,gsnw)
  836.                        ELSE
  837.                           CALL IJtoIBJB(bfr_in,gsnw)
  838.                        END IF
  839.                        CLOSE(UNIT=nfsnw)
  840.                        ifsnw=0
  841.                     ELSE IF (ifsnw == 2.OR. &
  842.                          (ifsnw == 3.AND.tod == 0.0_r8.AND.ifday == 0)) THEN
  843.                        INQUIRE (IOLENGTH=LRecIn) rbrf
  844.                        OPEN (UNIT=nfsnw,FILE=TRIM(fNameSnow), FORM='UNFORMATTED', ACCESS='DIRECT', &
  845.                              RECL=LRecIn, ACTION='READ',STATUS='OLD', IOSTAT=ierr)
  846.                        IF (ierr /= 0) THEN
  847.                           WRITE(UNIT=nfprt,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
  848.                                TRIM(fNameSnow), ierr
  849.                           STOP "**(ERROR)**"
  850.                        END IF
  851.                        irec=1
  852.                        CALL ReadGetSNW(nfsnw,irec,bfr_in)
  853.                        IF (reducedGrid) THEN
  854.                           CALL AveBoxIJtoIBJB(bfr_in,gsnw)
  855.                        ELSE
  856.                           CALL IJtoIBJB(bfr_in,gsnw)
  857.                        END IF
  858.                        CLOSE(UNIT=nfsnw)
  859.                        gmax=-1.0e10_r8
  860.                        gmin=+1.0e10_r8
  861.  1---------<           DO j=1,jbMax
  862.  1 Vr4-----<              DO i=1,ibMaxPerJB(j)
  863.  1 Vr4                       gmax=MAX(gmax,gsnw(i,j))
  864.  1 Vr4                       gmin=MIN(gmin,gsnw(i,j))
  865.  1 Vr4----->              END DO
  866.  1--------->           END DO
  867.              
  868.                        IF (ifsnw == 3.AND.tod == 0.0_r8.AND.ifday == 0) THEN
  869.                           ifsnw=0
  870.                        END IF
  871.                        IF (nfctrl(23) >= 1) THEN
  872.                           WRITE(UNIT=nfprt,FMT=444) gmax,gmin
  873.                        END IF
  874.                     ELSE
  875.                        WRITE(UNIT=nfprt,FMT=555)
  876.                        STOP
  877.                     END IF
  878.                  END IF
  879.              
  880.                  !
  881.                  ! process soil moisture file
  882.                  !
  883.              
  884.                  IF (ifslm /= 0) THEN
  885.                     IF (ifslm == 1) THEN
  886.                        INQUIRE (IOLENGTH=LRecIn) rbrf
  887.                        OPEN (UNIT=nfslm,FILE=TRIM(fNameSoilms),FORM='UNFORMATTED', ACCESS='DIRECT', &
  888.                             ACTION='read', RECL=LRecIn, STATUS='OLD', IOSTAT=ierr) 
  889.                        IF (ierr /= 0) THEN
  890.                           WRITE(UNIT=nfprt,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
  891.                                TRIM(fNameSoilms), ierr
  892.                           STOP "**(ERROR)**"
  893.                        END IF
  894.                        
  895.                        irec=idate(2)
  896.                        CALL ReadGetSLM(nfslm,irec,bfr_in)
  897.                        IF (reducedGrid) THEN
  898.                           CALL AveBoxIJtoIBJB(bfr_in,gslm)
  899.                        ELSE
  900.                           CALL IJtoIBJB(bfr_in,gslm)
  901.                        END IF
  902.                        CLOSE(UNIT=nfslm)
  903.                        ifslm=0
  904.                     ELSE IF (ifslm == 2.OR. &
  905.                          (ifslm == 3.AND.tod == 0.0_r8.AND.ifday == 0)) THEN
  906.                        INQUIRE (IOLENGTH=LRecIn) rbrf
  907.                        OPEN (UNIT=nfslm,FILE=TRIM(fNameSoilms),FORM='UNFORMATTED', ACCESS='DIRECT', &
  908.                             ACTION='read', RECL=LRecIn, STATUS='OLD', IOSTAT=ierr) 
  909.                        IF (ierr /= 0) THEN
  910.                           WRITE(UNIT=nfprt,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
  911.                                TRIM(fNameSoilms), ierr
  912.                           STOP "**(ERROR)**"
  913.                        END IF
  914.                        irec=mf
  915.                        CALL ReadGetSLM(nfslm,irec,bfr_in)
  916.               
  917.                        IF (reducedGrid) THEN
  918.                           CALL AveBoxIJtoIBJB(bfr_in,gslm)
  919.                        ELSE
  920.                           CALL IJtoIBJB(bfr_in,gslm)
  921.                        END IF
  922.                        IF (irec == 12) THEN
  923.                           irec=1
  924.                        ELSE
  925.                           irec=irec+1    
  926.                        END IF
  927.                
  928.                        CALL ReadGetSLM(nfslm,irec,bfr_in)
  929.                        
  930.                        IF (reducedGrid) THEN
  931.                           CALL AveBoxIJtoIBJB(bfr_in,bfr_out)
  932.                        ELSE
  933.                           CALL IJtoIBJB(bfr_in,bfr_out)
  934.                        END IF
  935.                        CLOSE(UNIT=nfslm)
  936.                        gmax=-1.0e10_r8
  937.                        gmin=+1.0e10_r8
  938.  1---------<           DO j=1,jbMax
  939.  1 Vr4-----<              DO i=1,ibMaxPerJB(j)
  940.  1 Vr4                       gslm(i,j)=f2*gslm(i,j)+f1*bfr_out(i,j)
  941.  1 Vr4                       gmax=MAX(gmax,gslm(i,j))
  942.  1 Vr4                       gmin=MIN(gmin,gslm(i,j))
  943.  1 Vr4----->              END DO
  944.  1--------->           END DO
  945.                        IF (ifslm == 3.AND.tod == 0.0_r8.AND.ifday == 0) THEN
  946.                           ifslm=0
  947.                        END IF
  948.                        IF (nfctrl(23) >= 1) THEN
  949.                           WRITE(UNIT=nfprt,FMT=222) mf,f1,f2,gmax,gmin
  950.                        END IF
  951.                     ELSE
  952.                        WRITE(UNIT=nfprt,FMT=333)
  953.                        STOP
  954.                     END IF
  955.                  END IF
  956.              
  957.                  !
  958.                  ! Process CO2 file/field/value
  959.                  !
  960.              
  961.                  IF(ifco2.EQ.-1) THEN
  962.  I                  CALL getco2(idatec,co2val)
  963.                  ELSEIF(ifco2.EQ.1) THEN
  964.                     !CALL READ_MONTH_CO2
  965.                  ELSEIF(ifco2.EQ.2) THEN
  966.                  ELSEIF(ifco2.EQ.3) THEN
  967.                  ELSEIF(ifco2.EQ.4) THEN
  968.                  ENDIF
  969.              
  970.                  !
  971.                  ! Process ozone file
  972.                  !
  973.              
  974.                  IF (ifozone /= 0) THEN
  975.                     !   =1    read field from single month file (first call only)
  976.                     IF (ifozone == 1) THEN
  977.                        INQUIRE (IOLENGTH=LRecIn) rbrf
  978.                        OPEN (UNIT=nfozone, FILE=TRIM(fNameOzone), FORM='UNFORMATTED', &
  979.                        ACCESS='DIRECT', RECL=LRecIn*kMax, ACTION='READ', STATUS='OLD', IOSTAT=ierr)
  980.                        IF (ierr /= 0) THEN
  981.                           WRITE(UNIT=nfprt,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
  982.                                TRIM(fNameOzone), ierr
  983.                           STOP "**(ERROR)**"
  984.                        END IF
  985.                        CALL ReadOzone(nfozone,bfr_in3,1)
  986.                        IF (reducedGrid) THEN
  987.                           CALL NearestIJtoIBJB(bfr_in3 ,gozo)
  988.                        ELSE
  989.                           CALL IJtoIBJB(bfr_in3 ,gozo)
  990.                        END IF
  991.                        CLOSE(UNIT=nfozone)
  992.                        ifozone=-1
  993.                        !   =2    interpolated to current day and time from 12 month clim
  994.                        !   =3    interpolated to current day and time from 12 month predicted field
  995.                     ELSE IF (ifozone == 2.OR. &
  996.                          (ifozone == 3.AND.tod == 0.0_r8.AND.ifday == 0)) THEN
  997.                        INQUIRE (IOLENGTH=lrecl) bfr_in3
  998.                        lrecl=lrecl/2
  999.                        OPEN(UNIT=nfozone,file=TRIM(fNameOzone),ACCESS='direct',&
 1000.                             FORM='unformatted',RECL=lrecl,STATUS='old')
 1001.                        IF (ierr /= 0) THEN
 1002.                           WRITE(UNIT=nfprt,FMT="('**(ERROR)** Open file ',a,' returned iostat=',i4)") &
 1003.                                TRIM(fNameOzone), ierr
 1004.                           STOP "**(ERROR)**"
 1005.                        END IF
 1006.              
 1007.                        CALL ReadOzone(nfozone,bfr_in3,mf)
 1008.                        IF (reducedGrid) THEN
 1009.                           CALL NearestIJtoIBJB(bfr_in3 ,gozo)
 1010.                        ELSE
 1011.                           CALL IJtoIBJB(bfr_in3 ,gozo)
 1012.                        END IF
 1013.              
 1014.                        mf=mf+1
 1015.                        IF (mf == 13) mf=1
 1016.                        CALL ReadOzone(nfozone,bfr_in3,mf)
 1017.                        IF (reducedGrid) THEN
 1018.                           CALL NearestIJtoIBJB(bfr_in3 ,bfr_out3)
 1019.                        ELSE
 1020.                           CALL IJtoIBJB(bfr_in3 ,bfr_out3)
 1021.                        END IF
 1022.              
 1023.                        CLOSE (UNIT=nfozone)
 1024.                        gmax=-1.0e10_r8
 1025.                        gmin=+1.0e10_r8
 1026.  1---------<           DO j=1,jbMax
 1027.  1 iVr4----<              DO i=1,ibMaxPerJB(j)
 1028.  1 iVr4 i--<                 DO k=1,kMax
 1029.  1 iVr4 i                       gozo(i,k,j)=f2*gozo(i,k,j)+f1*bfr_out3(i,k,j)
 1030.  1 iVr4 i                       gmax=MAX(gmax,gozo(i,k,j))
 1031.  1 iVr4 i                       gmin=MIN(gmin,gozo(i,k,j))
 1032.  1 iVr4 i-->                 END DO
 1033.  1 iVr4---->              END DO
 1034.  1--------->           END DO
 1035.                        IF (ifozone == 3) THEN
 1036.                           ifozone=-3
 1037.                        END IF
 1038.                        IF (nfctrl(23) >= 1) THEN
 1039.                           WRITE(UNIT=nfprt,FMT=223) mf,f1,f2,gmax,gmin
 1040.                        END IF
 1041.                        !   =4    interpolated from continuous direct access data set to current day and time
 1042.                     ELSE IF (ifozone == 4) THEN
 1043.                        WRITE(UNIT=nfprt,FMT=*) 'ERROR: DIRECT ACCESS OZONE FILE NOT IMPLEMENTED! ABORTING...'
 1044.                        STOP
 1045.                     END IF
 1046.                  END IF
 1047.              
 1048.              
 1049.              
 1050.              222 FORMAT(' SOILM   START MONTH=',i2,'  F1,F2=',2f6.3,'  MAX,MIN=',2e12.5)
 1051.              223 FORMAT(' OZONE   START MONTH=',i2,'  F1,F2=',2f6.3,'  MAX,MIN=',2e12.5)
 1052.              333 FORMAT(' ABNORMAL END IN SUBR.GETSBC AT SOILM  INTERPOLATION')
 1053.              444 FORMAT(' SNOW HAS ONLY ONE FILE','  MAX,MIN=',2E12.5)
 1054.              555 FORMAT(' ABNORMAL END IN SUBR.GETSBC AT SNOW   INTERPOLATION')
 1055.              666 FORMAT(' SST START REC (MONTH+2) =',I5, &
 1056.                       '  F1,F2=',2G13.6,'  MAX,MIN=',2G12.5)
 1057.              667 FORMAT(' SST:  IFSST=',I2,'  MAX,MIN=',2G12.5)
 1058.              888 FORMAT(' ALBEDO  START MONTH=',I2, &
 1059.                       '  F1,F2=',2F6.3,'  MAX,MIN=',2E12.5)
 1060.              999 FORMAT(' ABNORMAL END IN SUBR.GETSBC AT ALBEDO INTERPOLATION')
 1061.              1999 FORMAT('ABNORMAL END IN SUBR.GETSBC AT SST   INTERPOLATION')
 1062.                END SUBROUTINE getsbc
ftn-5002 ftn: NOTE File = InputOutput.f90, Line = 1062 
  Local variable "RBRF3" is declared but neither defined nor used.

 1063.              
 1064.              
 1065.                SUBROUTINE GetRecWgtMonthlySST &
 1066.                     (idate, idatec, tod, labelsi, labelsj, &
 1067.                     irec, f1, f2, mra, mrb,monl)
 1068.              
 1069.                  IMPLICIT NONE
 1070.              
 1071.                  ! Computes the Corresponding Records to do Linear
 1072.                  ! Time Interpolation and the Respectives Weights.
 1073.              
 1074.                  INTEGER, INTENT (IN) :: idate(4), idatec(4),monl(12)
 1075.                  REAL (KIND=r8), INTENT (IN) :: tod
 1076.                  CHARACTER (LEN=10), INTENT (IN) :: labelsi, labelsj
 1077.              
 1078.                  INTEGER, INTENT (OUT) :: irec, mra, mrb
 1079.                  REAL (KIND=r8), INTENT (OUT) :: f1, f2
 1080.              
 1081.                  ! Local Constants
 1082.                  INTEGER :: ysi, msi, dsi, ysj, msj, dsj, ndij, nd, &
 1083.                       tmca, tmcb, tmcf
 1084.                  REAL (KIND=r8) :: xday, zdayf, zdaya, zdayb, tc
 1085.              
 1086.                  ! Get Year, Month and Day of the Initial and Second Medium Date
 1087.                  ! for SST Direct Access File Data
 1088.              
 1089.                  READ (labelsi(1:4), '(I4)') ysi
 1090.                  READ (labelsi(5:6), '(I2)') msi
 1091.                  READ (labelsi(7:8), '(I2)') dsi
 1092.                  READ (labelsj(1:4), '(I4)') ysj
 1093.                  READ (labelsj(5:6), '(I2)') msj
 1094.                  READ (labelsj(7:8), '(I2)') dsj
 1095.              
 1096.                  ! Lag of Days for SST Data:
 1097.                  ! Just for Checking if the Scale is a Month
 1098.                  ndij=0
 1099.                  IF (msi+1 <= msj-1) THEN
 1100.  V---------<        DO nd=msi+1,msj-1
 1101.  V                     ndij=ndij+monl(nd)
 1102.  V--------->        END DO
 1103.                  ELSE
 1104.  V---------<        DO nd=msi+1,12
 1105.  V                     ndij=ndij+monl(nd)
 1106.  V--------->        END DO
 1107.  V---------<        DO nd=1,msj-1
 1108.  V                     ndij=ndij+monl(nd)
 1109.  V--------->        END DO
 1110.                  END IF
 1111.                  ndij=ndij+monl(msi)-dsi+dsj+365*(ysj-ysi-1)
 1112.              
 1113.                  ! Check for Monthly Scale SST Data
 1114.                  IF (ABS(ndij) <= 27 .OR. ABS(ndij) >= 32) THEN
 1115.                     WRITE (UNIT=0, FMT='(/,A)') ' *** Error: The SST Data Is Not On Monthly Scale   ***'
 1116.                     WRITE (UNIT=0, FMT='(/,A,I8,12X,A,/)') ' *** Lag Of Days For SST Data: ', ndij, '***'
 1117.                     WRITE (UNIT=0, FMT='(A,/)') ' *** Program STOP: SUBROUTINE GetRecWgtMonthlySST  ***'
 1118.                     STOP
 1119.                  END IF
 1120.              
 1121.                  ! Length in Days of the Date of Forecasting
 1122.                  tmcf=monl(idatec(2))
 1123.                  IF (idatec(2) == 2 .AND. MOD(idatec(4),4) == 0) tmcf=29
 1124.                  ! Medium Day of the Month of Forecasting
 1125.                  zdayf=0.5_r8*REAL(tmcf,r8)+1.0_r8
 1126.                  ! Fractional Day of Forecasting
 1127.                  tc=REAL(idate(1),r8)/24.0_r8+tod/86400.0_r8
 1128.                  ! Correcting Factor if Necessary (tc is in Days)
 1129.                  IF (tc >= 1.0_r8) tc=tc-1.0_r8
 1130.                  xday=REAL(idatec(3),r8)+tc
 1131.                  ! Getting the Corresponding Record in SST Data
 1132.                  irec=12-msi+idatec(2)+12*(idatec(4)-ysi-1)+2
 1133.                  IF (xday >= zdayf) irec=irec+1
 1134.              
 1135.                  ! Months for the Linear Time Interpolation Related to the Records
 1136.                  mra=MOD(irec-3+msi,12)
 1137.                  IF (mra == 0) mra=12
 1138.                  mrb=mra+1
 1139.                  IF (mrb > 12) mrb=1
 1140.              
 1141.                  ! Length in Days for the First Month of Interpolation
 1142.                  tmca=monl(mra)
 1143.                  IF (mra == 2 .AND. MOD(ysi,4) == 0) tmca=29
 1144.                  ! Medium Fracitonal Day for the First Month of Interpolation
 1145.                  zdaya=0.5_r8*REAL(tmca,r8)+1.0_r8-REAL(tmca,r8)
 1146.                  ! Length in Days for the Second Month of Interpolation
 1147.                  tmcb=monl(mrb)
 1148.                  IF (mrb == 2 .AND. MOD(ysj,4) == 0) tmcb=29
 1149.                  ! Medium Fracitonal Day for the Second Month of Interpolation
 1150.                  zdayb=0.5_r8*REAL(tmcb,r8)+1.0_r8
 1151.                  ! Scaling Fractional Day of Forecasting, if Necessary
 1152.                  IF (xday >= zdayf) xday=xday-REAL(tmca,r8)
 1153.                  ! Interpolation Factors
 1154.                  f1=(xday-zdaya)/(zdayb-zdaya)
 1155.                  f2=1.0_r8-f1
 1156.              
 1157.                END SUBROUTINE GetRecWgtMonthlySST
 1158.              
 1159.                SUBROUTINE GetWeightsOld (yrl,monl,idatec, tod, f1, f2,mf)
 1160.              
 1161.                  IMPLICIT NONE
 1162.              
 1163.                  ! Computes Weights as in getsbc:
 1164.              
 1165.                  INTEGER, PARAMETER :: r8 = SELECTED_REAL_KIND(15)
 1166.                  INTEGER, INTENT (IN) :: idatec(4)
 1167.                  INTEGER, INTENT (IN) :: monl(12)
 1168.                  REAL (KIND=r8), INTENT (IN) :: tod
 1169.                  REAL (KIND=r8), INTENT (IN) :: yrl
 1170.                  REAL (KIND=r8), INTENT (OUT) :: f1, f2
 1171.                  INTEGER,  INTENT (OUT):: mf
 1172.                  INTEGER :: mon, mnl, mn, mnlf, mnln
 1173.                  REAL (KIND=r8) :: yday, add
 1174.                  LOGICAL :: ly
 1175.              
 1176.                  mon=idatec(2)
 1177.                  yday=REAL(idatec(3),r8)+REAL(idatec(1),r8)/24.0_r8+MOD(tod,3600.0_r8)/86400.0_r8
 1178.                  mf=mon-1
 1179.                  ly= yrl == 365.25_r8 .AND. MOD(idatec(4),4) == 0
 1180.                  mnl=monl(mon)
 1181.                  IF (ly .AND. mon == 2) mnl=29
 1182.                  ! Em getsbc seria apenas >
 1183.                  ! As consideracoes de interpolacao leva a >=
 1184.                  IF (yday >= 1.0_r8+0.5_r8*REAL(mnl,r8)) mf=mon
 1185.                  mn=mf+1
 1186.                  IF (mf < 1) mf=12
 1187.                  IF (mn > 12) mn=1
 1188.                  mnlf=monl(mf)
 1189.                  IF (ly .AND. mf == 2) mnlf=29
 1190.                  add=0.5_r8*REAL(mnlf,r8)-1.0_r8
 1191.                  IF (mf == mon) add=-add-2.0_r8
 1192.                  mnln=monl(mn)
 1193.                  IF (ly .AND. mn == 2) mnln=29
 1194.                  f1=2.0_r8*(yday+add)/REAL(mnlf+mnln,r8)
 1195.                  f2=1.0_r8-f1
 1196.              
 1197.                END SUBROUTINE GetWeightsOld
 1198.              
 1199.                ! gread : reads in history carrying variables for one time step,
 1200.                !         surface geopotential, and sigma coordinate levels.
 1201.                !         checks sigma coordinate levels for consistency.
 1202.              
 1203.              
 1204.              
 1205.                SUBROUTINE gread(n, ifday, tod, idate, idatec, &
 1206.                     qgzs, qlnp, qtmp, qdiv, qrot, qq, sl, si)
 1207.                  INTEGER, INTENT(IN ) :: n
 1208.                  INTEGER, INTENT(OUT) :: ifday
 1209.                  REAL(KIND=r8),    INTENT(OUT) :: tod
 1210.                  INTEGER, INTENT(OUT) :: idate(4)
 1211.                  INTEGER, INTENT(OUT) :: idatec(4)
 1212.                  REAL(KIND=r8),    INTENT(OUT) :: qgzs(2*mymnMax)
 1213.                  REAL(KIND=r8),    INTENT(OUT) :: qlnp(2*mymnMax)
 1214.                  REAL(KIND=r8),    INTENT(OUT) :: qtmp(2*mymnMax,kMaxloc)
 1215.                  REAL(KIND=r8),    INTENT(OUT) :: qdiv(2*mymnMax,kMaxloc)
 1216.                  REAL(KIND=r8),    INTENT(OUT) :: qrot(2*mymnMax,kMaxloc)
 1217.                  REAL(KIND=r8),    INTENT(OUT) :: qq  (2*mymnMax,kMaxloc)
 1218.                  REAL(KIND=r8),    INTENT(IN ) :: si(kMax+1)
 1219.                  REAL(KIND=r8),    INTENT(IN ) :: sl(kMax)
 1220.              
 1221.                  INTEGER              :: k, i1, i2, m, nn, mm
 1222.                  REAL(KIND=r8)                 :: aux(2*mnMax,kMax)
 1223.                  REAL(KIND=r8)                 :: dphi(kMax+1)
 1224.                  REAL(KIND=r8)                 :: dlam(kMax)
 1225.                  !
 1226.                  !     spectral data file format
 1227.                  !     hour,idate(4),si( kMax+1 ),sl( kMax )
 1228.                  !     zln qlnp qtmp qdiv qrot
 1229.                  !
 1230.                  IF(nfctrl(35).GE.1)WRITE(UNIT=nfprt,FMT=999) n,kMax,kMax+1
 1231.                  CALL GReadHead(n, ifday, tod, idate, idatec, dphi, dlam, kMax)
 1232.              
 1233.                  IF (maxnodes.eq.1) THEN
 1234.                     CALL GReadField(n, qgzs)
 1235.              
 1236.                     CALL GReadField(n, qlnp)
 1237.              
 1238.                     CALL GReadField(n, qtmp)
 1239.              
 1240.  1---------<        DO k = 1, kMax
 1241.  1                     CALL GReadField(n, qdiv(:,k))
 1242.  1                     CALL GReadField(n, qrot(:,k))
 1243.  1--------->        END DO
 1244.              
 1245.                     CALL GReadField(n, qq)
 1246.                  ELSE
 1247.                     CALL GReadField(n, aux(:,1))
 1248.  1---------<        DO mm=1,mymmax
 1249.  1                     m = msinproc(mm,myid_four)
 1250.  1                     i1 = 2*mnmap(m,m)-1
 1251.  1                     i2 = 2*mymnmap(mm,m)-1
 1252.  1 A-------<           DO nn=0,2*(mmax-m)+1
 1253.  1 A                      qgzs(i2+nn) = aux(i1+nn,1)
 1254.  1 A------->           ENDDO
 1255.  1--------->        ENDDO
 1256.              
 1257.                     CALL GReadField(n, aux(:,1))
 1258.  1---------<        DO mm=1,mymmax
 1259.  1                     m = msinproc(mm,myid_four)
 1260.  1                     i1 = 2*mnmap(m,m)-1
 1261.  1                     i2 = 2*mymnmap(mm,m)-1
 1262.  1 A-------<           DO nn=0,2*(mmax-m)+1
 1263.  1 A                      qlnp(i2+nn) = aux(i1+nn,1)
 1264.  1 A------->           ENDDO
 1265.  1--------->        ENDDO
 1266.              
 1267.                     CALL GReadField(n, aux)
 1268.  1---------<        DO k=myfirstlev,mylastlev
 1269.  1 2-------<           DO mm=1,mymmax
 1270.  1 2                      m = msinproc(mm,myid_four)
 1271.  1 2                      i1 = 2*mnmap(m,m)-1
 1272.  1 2                      i2 = 2*mymnmap(mm,m)-1
 1273.  1 2 A-----<              DO nn=0,2*(mmax-m)+1
 1274.  1 2 A                       qtmp(i2+nn,k+1-myfirstlev) = aux(i1+nn,k)
 1275.  1 2 A----->              ENDDO
 1276.  1 2------->           ENDDO
 1277.  1--------->        ENDDO
 1278.              
 1279.  1---------<        DO k = 1, kMax
 1280.  1                     CALL GReadField(n, aux(:,1))
 1281.  1                     CALL GReadField(n, aux(:,2))
 1282.  1                     IF (k.ge.myfirstlev.and.k.le.mylastlev) THEN
 1283.  1 2-------<              DO mm=1,mymmax
 1284.  1 2                         m = msinproc(mm,myid_four)
 1285.  1 2                         i1 = 2*mnmap(m,m)-1
 1286.  1 2                         i2 = 2*mymnmap(mm,m)-1
 1287.  1 2 Vr4---<                 DO nn=0,2*(mmax-m)+1
 1288.  1 2 Vr4                        qdiv(i2+nn,k+1-myfirstlev) = aux(i1+nn,1)
 1289.  1 2 Vr4                        qrot(i2+nn,k+1-myfirstlev) = aux(i1+nn,2)
 1290.  1 2 Vr4--->                 ENDDO
 1291.  1 2------->              ENDDO
 1292.  1                     END IF
 1293.  1--------->        ENDDO
 1294.              
 1295.                     CALL GReadField(n, aux)
 1296.  1---------<        DO k=myfirstlev,mylastlev
 1297.  1 2-------<           DO mm=1,mymmax
 1298.  1 2                      m = msinproc(mm,myid_four)
 1299.  1 2                      i1 = 2*mnmap(m,m)-1
 1300.  1 2                      i2 = 2*mymnmap(mm,m)-1
 1301.  1 2 A-----<              DO nn=0,2*(mmax-m)+1
 1302.  1 2 A                       qq(i2+nn,k+1-myfirstlev) = aux(i1+nn,k)
 1303.  1 2 A----->              ENDDO
 1304.  1 2------->           ENDDO
 1305.  1--------->        ENDDO
 1306.              
 1307.                  ENDIF
 1308.              
 1309.                  CLOSE(UNIT=n)
 1310.              
 1311.                  !cdir novector
 1312.  Vr4-------<     DO k=1, kMax
 1313.  Vr4                dlam(k)=dlam(k)-sl(k)
 1314.  Vr4------->     END DO
 1315.                  IF(nfctrl(35).GE.1)WRITE(UNIT=nfprt,FMT=100)  (dlam(k),k=1, kMax )
 1316.  Vr4-------<     DO k=1, kMax+1
 1317.  Vr4                dphi(k)=dphi(k)-si(k)
 1318.  Vr4------->     END DO
 1319.                  IF(nfctrl(35).GE.1)WRITE(UNIT=nfprt,FMT=100) (dphi(k),k=1, kMax+1 )
 1320.                  IF(nfctrl(35).GE.1)WRITE(UNIT=nfprt,FMT=101) n,ifday,tod,idate,idatec
 1321.              100 FORMAT(' ', 13(E9.3))
 1322.              101 FORMAT (' ', 'IF ABOVE TWO ROWS NOT ZERO, ', &
 1323.                       'INCONSISTENCY IN SIGMA DEFINITION ON N=',I2/' AT DAY=',I8, &
 1324.                       ' TIME=',F8.1,' STARTING',3I3,I5,' CURRENT',3I3,I5)
 1325.              999 FORMAT(' N,KMAX,KMAXP=',3I4)
 1326.                END SUBROUTINE gread
 1327.              
 1328.              
 1329.              
 1330.              
 1331.              
 1332.              
 1333.                SUBROUTINE gread4 (n, ifday, tod, idate, idatec, &
 1334.                     qgzs, qlnp, qtmp, qdiv, qrot, qq, sl, si, dodyn, nfdyn)
 1335.                  INTEGER, INTENT(IN ) :: n
 1336.                  INTEGER, INTENT(OUT) :: ifday
 1337.                  REAL(KIND=r8),    INTENT(OUT) :: tod
 1338.                  INTEGER, INTENT(OUT) :: idate(4)
 1339.                  INTEGER, INTENT(OUT) :: idatec(4)
 1340.                  REAL(KIND=r8),    INTENT(OUT) :: qgzs(2*mymnMax)
 1341.                  REAL(KIND=r8),    INTENT(OUT) :: qlnp(2*mymnMax)
 1342.                  REAL(KIND=r8),    INTENT(OUT) :: qtmp(2*mymnMax,kMaxloc)
 1343.                  REAL(KIND=r8),    INTENT(OUT) :: qdiv(2*mymnMax,kMaxloc)
 1344.                  REAL(KIND=r8),    INTENT(OUT) :: qrot(2*mymnMax,kMaxloc)
 1345.                  REAL(KIND=r8),    INTENT(OUT) :: qq  (2*mymnMax,kMaxloc)
 1346.                  REAL(KIND=r8),    INTENT(IN)  :: si(kMax+1)
 1347.                  REAL(KIND=r8),    INTENT(IN)  :: sl(kMax)
 1348.                  LOGICAL, INTENT(IN ) :: dodyn
 1349.                  INTEGER, INTENT(IN ) :: nfdyn
 1350.              
 1351.                  INTEGER              :: k, i1, i2, m, nn, mm
 1352.                  REAL(KIND=r8)                 :: aux(2*mnMax,kMax)
 1353.                  REAL(KIND=r8)                 :: aux1(2*mnMax)
 1354.                  REAL(KIND=r8)                 :: dphi(kMax+1)
 1355.                  REAL(KIND=r8)                 :: dlam(kMax)
 1356.              
 1357.              
 1358.                  INTEGER(KIND=i4)        :: ifday4
 1359.                  INTEGER(KIND=i4)        :: idat4(4)
 1360.                  INTEGER(KIND=i4)        :: idat4c(4)
 1361.                  REAL(KIND=r4)           :: tod4
 1362.                  REAL(KIND=r4)           :: dph4(kmax+1)
 1363.                  REAL(KIND=r4)           :: dla4(kmax)
 1364.                  INTEGER, SAVE        :: ifdyn = 0
 1365.                  !
 1366.                  !     spectral data file format
 1367.                  !     hour,idate(4),si( kmax+1 ),sl( kmax )
 1368.                  !     zln qlnp qtmp qdiv qrot
 1369.                  !
 1370.                  IF(nfctrl(35).GE.1)WRITE(UNIT=nfprt,FMT=999) n,kmax,kmax+1
 1371.                  CALL ReadHead(n, ifday4, tod4, idat4, idat4c, dph4, dla4, kMax)
 1372.                  ifday=ifday4
 1373.                  tod=tod4
 1374.                  !dph4=si
 1375.                  !dla4=sl
 1376.                  !si=dph4
 1377.                  !sl=dla4
 1378.  Vs--------<     DO k=1,4
 1379.  Vs                 idate(k)=idat4(k)
 1380.  Vs                 idatec(k)=idat4c(k)
 1381.  Vs-------->     ENDDO
 1382.  Vr2-------<     DO k=1,kmax
 1383.  Vr2                dphi(k)=dph4(k)
 1384.  Vr2                dlam(k)=dla4(k)
 1385.  Vr2------->     ENDDO
 1386.                  dphi(kmax+1)=dph4(kmax+1)
 1387.              
 1388.                  IF (maxnodes.eq.1) THEN
 1389.                     CALL ReadField(n, qgzs)
 1390.              
 1391.                     IF (ifdyn .EQ. 0) THEN
 1392.                        ifdyn=1
 1393.                        IF (dodyn) THEN
 1394.                           WRITE(UNIT=nfprt,FMT='(A,I5,A,F15.2,A)') ' ifday=',ifday4,' tod=',tod4,' dyn'
 1395.                           WRITE(UNIT=nfdyn) ifday4,tod4
 1396.                           WRITE(UNIT=nfdyn) qgzs
 1397.                        END IF
 1398.                     END IF
 1399.              
 1400.              
 1401.                     CALL ReadField(n, qlnp)
 1402.              
 1403.                     CALL ReadField(n, qtmp)
 1404.              
 1405.  1---------<        DO k = 1, kMax
 1406.  1                     CALL ReadField(n, qdiv(:,k))
 1407.  1                     CALL ReadField(n, qrot(:,k))
 1408.  1--------->        END DO
 1409.              
 1410.                     CALL ReadField(n, qq)
 1411.                  ELSE
 1412.                     CALL ReadField(n, aux1)
 1413.                     IF(myid.eq.0) THEN
 1414.                        IF (ifdyn .EQ. 0) THEN
 1415.                           ifdyn=1
 1416.                           IF (dodyn) THEN
 1417.                              WRITE (UNIT=nfprt,FMT='(A,I5,A,F15.2,A)') ' ifday=',ifday4,' tod=',tod4,' dyn'
 1418.                              WRITE (UNIT=nfdyn) ifday4,tod4
 1419.                              WRITE (UNIT=nfdyn) aux1
 1420.                           END IF
 1421.                        END IF
 1422.                     END IF
 1423.              
 1424.  1---------<        DO mm=1,mymmax
 1425.  1                     m = msinproc(mm,myid_four)
 1426.  1                     i1 = 2*mnmap(m,m)-1
 1427.  1                     i2 = 2*mymnmap(mm,m)-1
 1428.  1 A-------<           DO nn=0,2*(mmax-m)+1
 1429.  1 A                      qgzs(i2+nn) = aux1(i1+nn)
 1430.  1 A------->           ENDDO
 1431.  1--------->        ENDDO
 1432.              
 1433.                     CALL ReadField(n, aux1)
 1434.  1---------<        DO mm=1,mymmax
 1435.  1                     m = msinproc(mm,myid_four)
 1436.  1                     i1 = 2*mnmap(m,m)-1
 1437.  1                     i2 = 2*mymnmap(mm,m)-1
 1438.  1 A-------<           DO nn=0,2*(mmax-m)+1
 1439.  1 A                      qlnp(i2+nn) = aux1(i1+nn)
 1440.  1 A------->           ENDDO
 1441.  1--------->        ENDDO
 1442.              
 1443.                     CALL ReadField(n, aux)
 1444.  1---------<        DO k=myfirstlev,mylastlev
 1445.  1 2-------<           DO mm=1,mymmax
 1446.  1 2                      m = msinproc(mm,myid_four)
 1447.  1 2                      i1 = 2*mnmap(m,m)-1
 1448.  1 2                      i2 = 2*mymnmap(mm,m)-1
 1449.  1 2 A-----<              DO nn=0,2*(mmax-m)+1
 1450.  1 2 A                       qtmp(i2+nn,k+1-myfirstlev) = aux(i1+nn,k)
 1451.  1 2 A----->              ENDDO
 1452.  1 2------->           ENDDO
 1453.  1--------->        ENDDO
 1454.              
 1455.  1---------<        DO k = 1, kMax
 1456.  1                     CALL ReadField(n, aux(:,1))
 1457.  1                     CALL ReadField(n, aux(:,2))
 1458.  1                     IF (k.ge.myfirstlev.and.k.le.mylastlev) THEN
 1459.  1 2-------<              DO mm=1,mymmax
 1460.  1 2                         m = msinproc(mm,myid_four)
 1461.  1 2                         i1 = 2*mnmap(m,m)-1
 1462.  1 2                         i2 = 2*mymnmap(mm,m)-1
 1463.  1 2 Vr4---<                 DO nn=0,2*(mmax-m)+1
 1464.  1 2 Vr4                        qdiv(i2+nn,k+1-myfirstlev) = aux(i1+nn,1)
 1465.  1 2 Vr4                        qrot(i2+nn,k+1-myfirstlev) = aux(i1+nn,2)
 1466.  1 2 Vr4--->                 ENDDO
 1467.  1 2------->              ENDDO
 1468.  1                     END IF
 1469.  1--------->        ENDDO
 1470.              
 1471.                     CALL ReadField(n, aux)
 1472.  1---------<        DO k=myfirstlev,mylastlev
 1473.  1 2-------<           DO mm=1,mymmax
 1474.  1 2                      m = msinproc(mm,myid_four)
 1475.  1 2                      i1 = 2*mnmap(m,m)-1
 1476.  1 2                      i2 = 2*mymnmap(mm,m)-1
 1477.  1 2 A-----<              DO nn=0,2*(mmax-m)+1
 1478.  1 2 A                       qq(i2+nn,k+1-myfirstlev) = aux(i1+nn,k)
 1479.  1 2 A----->              ENDDO
 1480.  1 2------->           ENDDO
 1481.  1--------->        ENDDO
 1482.              
 1483.                  ENDIF
 1484.              
 1485.                  CLOSE(UNIT=n)
 1486.              
 1487.  Vr4-------<     DO k=1, kmax
 1488.  Vr4                dlam(k)=dlam(k)-sl(k)
 1489.  Vr4------->     END DO
 1490.              
 1491.                  IF(nfctrl(35).GE.1)WRITE(UNIT=nfprt,FMT=100) (dlam(k),k=1, kmax )
 1492.  Vr4-------<     DO k=1, kmax+1
 1493.  Vr4                dphi(k)=dphi(k)-si(k)
 1494.  Vr4------->     END DO
 1495.                  IF(nfctrl(35).GE.1)WRITE(UNIT=nfprt,FMT=100) (dphi(k),k=1, kmax+1 )
 1496.                  IF(nfctrl(35).GE.1)WRITE(UNIT=nfprt,FMT=101) n,ifday,tod,idate,idatec
 1497.              100 FORMAT(' ', 13(E9.3))
 1498.              101 FORMAT (' IF ABOVE TWO ROWS NOT ZERO, ', &
 1499.                       'INCONSISTENCY IN SIGMA DEFINITION ON N=',I2/' AT DAY=',I8, &
 1500.                       ' TIME=',F8.1,' STARTING',3I3,I5,' CURRENT',3I3,I5)
 1501.              999 FORMAT(' N,KMAX,KMAXP=',3I4)
 1502.                END SUBROUTINE gread4
 1503.              
 1504.                !     gwrite : writes out the surface geopotential and history carrying
 1505.                !              fields of the spectral model after first inverting the
 1506.                !              laplacian to recapture the surface geopotential field.
 1507.              
 1508.                SUBROUTINE gwrite(n, ifday, tod, idate, idatec, &
 1509.                     qlnp, qtmp, qdiv, qrot, qq, sl, si, qgzs)
 1510.                  INTEGER, INTENT(IN) :: n
 1511.                  INTEGER, INTENT(IN) :: ifday
 1512.                  REAL(KIND=r8),    INTENT(IN) :: tod
 1513.                  INTEGER, INTENT(IN) :: idate(4)
 1514.                  INTEGER, INTENT(IN) :: idatec(4)
 1515.                  REAL(KIND=r8),    INTENT(IN) :: qgzs (2*mymnMax)
 1516.                  REAL(KIND=r8),    INTENT(IN) :: qlnp (2*mymnMax)
 1517.                  REAL(KIND=r8),    INTENT(IN) :: qtmp (2*mymnMax,kMaxloc)
 1518.                  REAL(KIND=r8),    INTENT(IN) :: qdiv (2*mymnMax,kMaxloc)
 1519.                  REAL(KIND=r8),    INTENT(IN) :: qrot (2*mymnMax,kMaxloc)
 1520.                  REAL(KIND=r8),    INTENT(IN) :: qq   (2*mymnMax,kMaxloc)
 1521.                  REAL(KIND=r8),    INTENT(IN) :: si(kMax+1)
 1522.                  REAL(KIND=r8),    INTENT(IN) :: sl(kMax)
 1523.              
 1524.                  INTEGER             :: k
 1525.                  REAL(KIND=r8)                :: aux (2*mnMax,kMax)
 1526.                  REAL(KIND=r8)                :: aux1(2*mnMax,kMax)
 1527.              
 1528.                  IF(myid.eq.0)  CALL GWriteHead(n, ifday, tod, idate, idatec, si, sl)
 1529.              
 1530.                  IF(maxnodes.eq.1) THEN
 1531.                     CALL GWriteField(n, qgzs)
 1532.              
 1533.                     CALL GWriteField(n, qlnp)
 1534.              
 1535.                     CALL GWriteField(n, qtmp)
 1536.              
 1537.  1---------<        DO k = 1, kMax
 1538.  1                     CALL GWriteField(n, qdiv(:,k))
 1539.  1                     CALL GWriteField(n, qrot(:,k))
 1540.  1--------->        END DO
 1541.              
 1542.                     CALL GWriteField(n, qq)
 1543.                  ELSE
 1544.                     CALL Collect_Spec(qgzs, aux(:,1), 1, 1, 0)
 1545.                     IF(myid.eq.0) CALL GWriteField(n, aux(:,1))
 1546.              
 1547.                     CALL Collect_Spec(qlnp, aux(:,1), 1, 1, 0)
 1548.                     IF(myid.eq.0) CALL GWriteField(n, aux(:,1))
 1549.              
 1550.                     CALL Collect_Spec(qtmp, aux, kmaxloc, kmax, 0)
 1551.                     IF(myid.eq.0) CALL GWriteField(n, aux)
 1552.              
 1553.                     CALL Collect_Spec(qdiv, aux, kmaxloc, kmax, 0)
 1554.                     CALL Collect_Spec(qrot, aux1, kmaxloc, kmax, 0)
 1555.                     IF(myid.eq.0) THEN
 1556.  1---------<           DO k = 1, kMax
 1557.  1                        CALL GWriteField(n, aux(:,k))
 1558.  1                        CALL GWriteField(n, aux1(:,k))
 1559.  1--------->           END DO
 1560.                     ENDIF
 1561.              
 1562.                     CALL Collect_Spec(qq, aux, kmaxloc, kmax, 0)
 1563.                     IF(myid.eq.0) CALL GWriteField(n, aux)
 1564.                  ENDIF
 1565.              
 1566.                  IF(nfctrl(43).GE.1)WRITE(UNIT=nfprt,FMT=3001)ifday,tod,idate,idatec,n
 1567.              3001 FORMAT(' GWRITE IFDAY=',I8,' TOD=',F8.1,2(2X,3I3,I5), 2X,'N=',I2)
 1568.                END SUBROUTINE gwrite
 1569.                !hmjb
 1570.                SUBROUTINE getco2(time,co2val)
 1571.                  !==========================================================================
 1572.                  ! getco2: Interpolates Mauna Loa data for a given time
 1573.                  !
 1574.                  ! *** Atmospheric CO2 concentrations (ppmv) derived from in situ  ***
 1575.                  ! *** air samples collected at Mauna Loa Observatory, Hawaii      ***
 1576.                  !
 1577.                  ! Data:
 1578.                  !
 1579.                  !   http://cdiac.ornl.gov/trends/co2/contents.htm
 1580.                  !   http://cdiac.ornl.gov/ftp/trends/co2/maunaloa.co2
 1581.                  !
 1582.                  ! Parabolic fitting by hbarbosa@cptec.inpe.br, 17 Jan 2007:
 1583.                  !
 1584.                  !   co2val = a*(time-2000)^2 + b*(time-2000) + c
 1585.                  !
 1586.                  !       a  = 0.0116696   +/- 0.0005706    (4.89%)
 1587.                  !       b  = 1.79984     +/- 0.022        (1.222%)
 1588.                  !       c  = 369         +/- 0.1794       (0.04863%)
 1589.                  !
 1590.                  !==========================================================================
 1591.                  !     time.......date of current data
 1592.                  !     time(1)....hour(00/12)
 1593.                  !     time(2)....month
 1594.                  !     time(3)....day of month
 1595.                  !     time(4)....year
 1596.                  !
 1597.                  !    co2val....co2val is wgne standard value in ppm "co2val = /345.0/
 1598.                  !==========================================================================
 1599.              
 1600.                  IMPLICIT NONE
 1601.                  REAL(KIND=r8), PARAMETER :: A = 0.0116696
 1602.                  REAL(KIND=r8), PARAMETER :: B = 1.79984
 1603.                  REAL(KIND=r8), PARAMETER :: C = 369.0
 1604.              
 1605.                  INTEGER,       INTENT(IN ) :: time(4)
 1606.                  REAL(KIND=r8), INTENT(OUT) :: co2val
 1607.              
 1608.                  REAL(KIND=r8) :: TDIF
 1609.              
 1610.                  tdif=time(4) + (time(2)-1.)/12. + (time(3)-1.+ time(1)/24.)/365. - 2000.
 1611.              
 1612.                  co2val = A*tdif**2 + B*tdif + C
 1613.              
 1614.                  !    WRITE(*,123) time,tdif+2000.,co2val
 1615.                  !123 format('hmjb co2val date=',3(I2,1x),I4,' fyear=',F10.5,' val=',F7.3)
 1616.              
 1617.                  RETURN
 1618.                END SUBROUTINE getco2
 1619.                !hmjb
 1620.              END MODULE InputOutput

ftn-6263 ftn: VECTOR File = InputOutput.f90, Line = 283 
  A loop starting at line 283 was not vectorized because it contains a reference to a non-vector intrinsic on line 285.

ftn-6204 ftn: VECTOR File = InputOutput.f90, Line = 306 
  A loop starting at line 306 was vectorized.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 308 
  Routine _STOP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3149 ftn: IPA File = InputOutput.f90, Line = 308 
  Routine CNVRAY was not inlined because it is a leaf routine which is too large to expand. 

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 312 
  Routine WRITEFIELD82D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 315 
  Routine COLLECT_SPEC was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 316 
  Routine WRITEFIELD82D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6204 ftn: VECTOR File = InputOutput.f90, Line = 335 
  A loop starting at line 335 was vectorized.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 337 
  Routine _STOP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3149 ftn: IPA File = InputOutput.f90, Line = 337 
  Routine CNVRAY was not inlined because it is a leaf routine which is too large to expand. 

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 341 
  Routine WRITEFIELD82D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 345 
  Routine COLLECT_GRID_SUR was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 347 
  Routine COLLECT_GRID_D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 349 
  Routine WRITEFIELD82D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6010 ftn: SCALAR File = InputOutput.f90, Line = 368 
  A divide was turned into a multiply by a reciprocal

ftn-6202 ftn: VECTOR File = InputOutput.f90, Line = 485 
  A loop starting at line 485 was replaced by a library call.

ftn-6010 ftn: SCALAR File = InputOutput.f90, Line = 487 
  A divide was turned into a multiply by a reciprocal

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 493 
  Routine _STOP was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6010 ftn: SCALAR File = InputOutput.f90, Line = 503 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = InputOutput.f90, Line = 503 
  The call to GETWEIGHTSOLD was textually inlined.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 521 
  Routine READALB8 was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 524 
  Routine AVEBOXIJTOIBJB_R2D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 526 
  Routine IJTOIBJB_R was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 542 
  Routine READALB8 was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 544 
  Routine AVEBOXIJTOIBJB_R2D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 546 
  Routine IJTOIBJB_R was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 553 
  Routine READALB8 was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 555 
  Routine AVEBOXIJTOIBJB_R2D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 557 
  Routine IJTOIBJB_R was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6306 ftn: VECTOR File = InputOutput.f90, Line = 563 
  A loop starting at line 563 was not vectorized because the iteration space is too irregular.

ftn-6005 ftn: SCALAR File = InputOutput.f90, Line = 564 
  A loop starting at line 564 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = InputOutput.f90, Line = 564 
  A loop starting at line 564 was vectorized.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 600 
  Routine READSST8 was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 602 
  Routine READSST8 was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 604 
  Routine NEARESTIJTOIBJB_R2D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 606 
  Routine IJTOIBJB_R was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6306 ftn: VECTOR File = InputOutput.f90, Line = 612 
  A loop starting at line 612 was not vectorized because the iteration space is too irregular.

ftn-6250 ftn: VECTOR File = InputOutput.f90, Line = 613 
  A loop starting at line 613 was not vectorized for an unspecified reason.

ftn-6288 ftn: VECTOR File = InputOutput.f90, Line = 639 
  A loop starting at line 639 was not vectorized because it contains a call to subroutine "READSST8" on line 640.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 640 
  Routine READSST8 was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 643 
  Routine NEARESTIJTOIBJB_R2D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 645 
  Routine IJTOIBJB_R was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6306 ftn: VECTOR File = InputOutput.f90, Line = 648 
  A loop starting at line 648 was not vectorized because the iteration space is too irregular.

ftn-6250 ftn: VECTOR File = InputOutput.f90, Line = 649 
  A loop starting at line 649 was not vectorized for an unspecified reason.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 673 
  Routine READSST8 was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 676 
  Routine NEARESTIJTOIBJB_R2D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 678 
  Routine IJTOIBJB_R was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 686 
  Routine READSST8 was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 688 
  Routine NEARESTIJTOIBJB_R2D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 690 
  Routine IJTOIBJB_R was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6306 ftn: VECTOR File = InputOutput.f90, Line = 696 
  A loop starting at line 696 was not vectorized because the iteration space is too irregular.

ftn-6250 ftn: VECTOR File = InputOutput.f90, Line = 697 
  A loop starting at line 697 was not vectorized for an unspecified reason.

ftn-6306 ftn: VECTOR File = InputOutput.f90, Line = 716 
  A loop starting at line 716 was not vectorized because the iteration space is too irregular.

ftn-6263 ftn: VECTOR File = InputOutput.f90, Line = 717 
  A loop starting at line 717 was not vectorized because it contains a reference to a non-vector intrinsic on line 719.

ftn-6010 ftn: SCALAR File = InputOutput.f90, Line = 737 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = InputOutput.f90, Line = 738 
  A divide was turned into a multiply by a reciprocal

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 754 
  Routine READSST8REC was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 756 
  Routine NEARESTIJTOIBJB_R2D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 758 
  Routine IJTOIBJB_R was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 760 
  Routine READSST8REC was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 762 
  Routine NEARESTIJTOIBJB_R2D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 764 
  Routine IJTOIBJB_R was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6306 ftn: VECTOR File = InputOutput.f90, Line = 769 
  A loop starting at line 769 was not vectorized because the iteration space is too irregular.

ftn-6250 ftn: VECTOR File = InputOutput.f90, Line = 770 
  A loop starting at line 770 was not vectorized for an unspecified reason.

ftn-6306 ftn: VECTOR File = InputOutput.f90, Line = 793 
  A loop starting at line 793 was not vectorized because the iteration space is too irregular.

ftn-6263 ftn: VECTOR File = InputOutput.f90, Line = 794 
  A loop starting at line 794 was not vectorized because it contains a reference to a non-vector intrinsic on line 796.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 833 
  Routine READSNW8 was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 835 
  Routine AVEBOXIJTOIBJB_R2D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 837 
  Routine IJTOIBJB_R was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 852 
  Routine READSNW8 was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 854 
  Routine AVEBOXIJTOIBJB_R2D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 856 
  Routine IJTOIBJB_R was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6306 ftn: VECTOR File = InputOutput.f90, Line = 861 
  A loop starting at line 861 was not vectorized because the iteration space is too irregular.

ftn-6005 ftn: SCALAR File = InputOutput.f90, Line = 862 
  A loop starting at line 862 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = InputOutput.f90, Line = 862 
  A loop starting at line 862 was vectorized.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 896 
  Routine READSLM8 was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 898 
  Routine AVEBOXIJTOIBJB_R2D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 900 
  Routine IJTOIBJB_R was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 915 
  Routine READSLM8 was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 918 
  Routine AVEBOXIJTOIBJB_R2D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 920 
  Routine IJTOIBJB_R was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 928 
  Routine READSLM8 was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 931 
  Routine AVEBOXIJTOIBJB_R2D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 933 
  Routine IJTOIBJB_R was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6306 ftn: VECTOR File = InputOutput.f90, Line = 938 
  A loop starting at line 938 was not vectorized because the iteration space is too irregular.

ftn-6005 ftn: SCALAR File = InputOutput.f90, Line = 939 
  A loop starting at line 939 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = InputOutput.f90, Line = 939 
  A loop starting at line 939 was vectorized.

ftn-6010 ftn: SCALAR File = InputOutput.f90, Line = 962 
  A divide was turned into a multiply by a reciprocal

ftn-3001 ftn: IPA File = InputOutput.f90, Line = 962 
  The call to GETCO2 was textually inlined.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 985 
  Routine READOZONE8 was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 987 
  Routine NEARESTIJTOIBJB_R3D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 989 
  Routine IJTOIBJB3_R was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1007 
  Routine READOZONE8 was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1009 
  Routine NEARESTIJTOIBJB_R3D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1011 
  Routine IJTOIBJB3_R was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1016 
  Routine READOZONE8 was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1018 
  Routine NEARESTIJTOIBJB_R3D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1020 
  Routine IJTOIBJB3_R was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6306 ftn: VECTOR File = InputOutput.f90, Line = 1026 
  A loop starting at line 1026 was not vectorized because the iteration space is too irregular.

ftn-6007 ftn: SCALAR File = InputOutput.f90, Line = 1027 
  A loop starting at line 1027 was interchanged with the loop starting at line 1028.

ftn-6005 ftn: SCALAR File = InputOutput.f90, Line = 1027 
  A loop starting at line 1027 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = InputOutput.f90, Line = 1027 
  A loop starting at line 1027 was vectorized.

ftn-6294 ftn: VECTOR File = InputOutput.f90, Line = 1028 
  A loop starting at line 1028 was not vectorized because a better candidate was found at line 1027.

ftn-6204 ftn: VECTOR File = InputOutput.f90, Line = 1100 
  A loop starting at line 1100 was vectorized.

ftn-6204 ftn: VECTOR File = InputOutput.f90, Line = 1104 
  A loop starting at line 1104 was vectorized.

ftn-6204 ftn: VECTOR File = InputOutput.f90, Line = 1107 
  A loop starting at line 1107 was vectorized.

ftn-6010 ftn: SCALAR File = InputOutput.f90, Line = 1127 
  A divide was turned into a multiply by a reciprocal

ftn-6010 ftn: SCALAR File = InputOutput.f90, Line = 1177 
  A divide was turned into a multiply by a reciprocal

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1231 
  Routine GREADHEAD8 was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1234 
  Routine GREADFIELD81D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1236 
  Routine GREADFIELD81D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1238 
  Routine GREADFIELD82D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = InputOutput.f90, Line = 1240 
  A loop starting at line 1240 was not vectorized because it contains a call to subroutine "GREADFIELD81D" on line 1241.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1241 
  Routine GREADFIELD81D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1242 
  Routine GREADFIELD81D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1245 
  Routine GREADFIELD82D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1247 
  Routine GREADFIELD81D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6254 ftn: VECTOR File = InputOutput.f90, Line = 1248 
  A loop starting at line 1248 was not vectorized because a recurrence was found on "QGZS" at line 1253.

ftn-6202 ftn: VECTOR File = InputOutput.f90, Line = 1252 
  A loop starting at line 1252 was replaced by a library call.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1257 
  Routine GREADFIELD81D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6254 ftn: VECTOR File = InputOutput.f90, Line = 1258 
  A loop starting at line 1258 was not vectorized because a recurrence was found on "QLNP" at line 1263.

ftn-6202 ftn: VECTOR File = InputOutput.f90, Line = 1262 
  A loop starting at line 1262 was replaced by a library call.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1267 
  Routine GREADFIELD82D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6306 ftn: VECTOR File = InputOutput.f90, Line = 1268 
  A loop starting at line 1268 was not vectorized because the iteration space is too irregular.

ftn-6254 ftn: VECTOR File = InputOutput.f90, Line = 1269 
  A loop starting at line 1269 was not vectorized because a recurrence was found on "QTMP" at line 1274.

ftn-6202 ftn: VECTOR File = InputOutput.f90, Line = 1273 
  A loop starting at line 1273 was replaced by a library call.

ftn-6288 ftn: VECTOR File = InputOutput.f90, Line = 1279 
  A loop starting at line 1279 was not vectorized because it contains a call to subroutine "GREADFIELD81D" on line 1280.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1280 
  Routine GREADFIELD81D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1281 
  Routine GREADFIELD81D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6254 ftn: VECTOR File = InputOutput.f90, Line = 1283 
  A loop starting at line 1283 was not vectorized because a recurrence was found on "QDIV" at line 1288.

ftn-6005 ftn: SCALAR File = InputOutput.f90, Line = 1287 
  A loop starting at line 1287 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = InputOutput.f90, Line = 1287 
  A loop starting at line 1287 was vectorized.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1295 
  Routine GREADFIELD82D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6306 ftn: VECTOR File = InputOutput.f90, Line = 1296 
  A loop starting at line 1296 was not vectorized because the iteration space is too irregular.

ftn-6254 ftn: VECTOR File = InputOutput.f90, Line = 1297 
  A loop starting at line 1297 was not vectorized because a recurrence was found on "QQ" at line 1302.

ftn-6202 ftn: VECTOR File = InputOutput.f90, Line = 1301 
  A loop starting at line 1301 was replaced by a library call.

ftn-6005 ftn: SCALAR File = InputOutput.f90, Line = 1312 
  A loop starting at line 1312 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = InputOutput.f90, Line = 1312 
  A loop starting at line 1312 was vectorized.

ftn-6262 ftn: VECTOR File = InputOutput.f90, Line = 1315 
  A loop starting at line 1315 was not vectorized because it contains a call to a subroutine or function on line 1315.

ftn-6005 ftn: SCALAR File = InputOutput.f90, Line = 1316 
  A loop starting at line 1316 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = InputOutput.f90, Line = 1316 
  A loop starting at line 1316 was vectorized.

ftn-6262 ftn: VECTOR File = InputOutput.f90, Line = 1319 
  A loop starting at line 1319 was not vectorized because it contains a call to a subroutine or function on line 1319.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1371 
  Routine READHEAD4 was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6205 ftn: VECTOR File = InputOutput.f90, Line = 1378 
  A loop starting at line 1378 was vectorized with a single vector iteration.

ftn-6005 ftn: SCALAR File = InputOutput.f90, Line = 1382 
  A loop starting at line 1382 was unrolled 2 times.

ftn-6204 ftn: VECTOR File = InputOutput.f90, Line = 1382 
  A loop starting at line 1382 was vectorized.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1389 
  Routine READFIELD81D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1401 
  Routine READFIELD81D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1403 
  Routine READFIELD82D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = InputOutput.f90, Line = 1405 
  A loop starting at line 1405 was not vectorized because it contains a call to subroutine "READFIELD81D" on line 1406.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1406 
  Routine READFIELD81D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1407 
  Routine READFIELD81D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1410 
  Routine READFIELD82D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1412 
  Routine READFIELD81D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6254 ftn: VECTOR File = InputOutput.f90, Line = 1424 
  A loop starting at line 1424 was not vectorized because a recurrence was found on "QGZS" at line 1429.

ftn-6202 ftn: VECTOR File = InputOutput.f90, Line = 1428 
  A loop starting at line 1428 was replaced by a library call.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1433 
  Routine READFIELD81D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6254 ftn: VECTOR File = InputOutput.f90, Line = 1434 
  A loop starting at line 1434 was not vectorized because a recurrence was found on "QLNP" at line 1439.

ftn-6202 ftn: VECTOR File = InputOutput.f90, Line = 1438 
  A loop starting at line 1438 was replaced by a library call.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1443 
  Routine READFIELD82D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6306 ftn: VECTOR File = InputOutput.f90, Line = 1444 
  A loop starting at line 1444 was not vectorized because the iteration space is too irregular.

ftn-6254 ftn: VECTOR File = InputOutput.f90, Line = 1445 
  A loop starting at line 1445 was not vectorized because a recurrence was found on "QTMP" at line 1450.

ftn-6202 ftn: VECTOR File = InputOutput.f90, Line = 1449 
  A loop starting at line 1449 was replaced by a library call.

ftn-6288 ftn: VECTOR File = InputOutput.f90, Line = 1455 
  A loop starting at line 1455 was not vectorized because it contains a call to subroutine "READFIELD81D" on line 1456.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1456 
  Routine READFIELD81D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1457 
  Routine READFIELD81D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6254 ftn: VECTOR File = InputOutput.f90, Line = 1459 
  A loop starting at line 1459 was not vectorized because a recurrence was found on "QDIV" at line 1464.

ftn-6005 ftn: SCALAR File = InputOutput.f90, Line = 1463 
  A loop starting at line 1463 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = InputOutput.f90, Line = 1463 
  A loop starting at line 1463 was vectorized.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1471 
  Routine READFIELD82D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6306 ftn: VECTOR File = InputOutput.f90, Line = 1472 
  A loop starting at line 1472 was not vectorized because the iteration space is too irregular.

ftn-6254 ftn: VECTOR File = InputOutput.f90, Line = 1473 
  A loop starting at line 1473 was not vectorized because a recurrence was found on "QQ" at line 1478.

ftn-6202 ftn: VECTOR File = InputOutput.f90, Line = 1477 
  A loop starting at line 1477 was replaced by a library call.

ftn-6005 ftn: SCALAR File = InputOutput.f90, Line = 1487 
  A loop starting at line 1487 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = InputOutput.f90, Line = 1487 
  A loop starting at line 1487 was vectorized.

ftn-6262 ftn: VECTOR File = InputOutput.f90, Line = 1491 
  A loop starting at line 1491 was not vectorized because it contains a call to a subroutine or function on line 1491.

ftn-6005 ftn: SCALAR File = InputOutput.f90, Line = 1492 
  A loop starting at line 1492 was unrolled 4 times.

ftn-6204 ftn: VECTOR File = InputOutput.f90, Line = 1492 
  A loop starting at line 1492 was vectorized.

ftn-6262 ftn: VECTOR File = InputOutput.f90, Line = 1495 
  A loop starting at line 1495 was not vectorized because it contains a call to a subroutine or function on line 1495.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1528 
  Routine GWRITEHEAD8 was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1531 
  Routine GWRITEFIELD81D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1533 
  Routine GWRITEFIELD81D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1535 
  Routine GWRITEFIELD82D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = InputOutput.f90, Line = 1537 
  A loop starting at line 1537 was not vectorized because it contains a call to subroutine "GWRITEFIELD81D" on line 1538.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1538 
  Routine GWRITEFIELD81D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1539 
  Routine GWRITEFIELD81D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1542 
  Routine GWRITEFIELD82D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1544 
  Routine COLLECT_SPEC was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1545 
  Routine GWRITEFIELD81D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1547 
  Routine COLLECT_SPEC was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1548 
  Routine GWRITEFIELD81D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1550 
  Routine COLLECT_SPEC was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1551 
  Routine GWRITEFIELD82D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1553 
  Routine COLLECT_SPEC was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1554 
  Routine COLLECT_SPEC was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6288 ftn: VECTOR File = InputOutput.f90, Line = 1556 
  A loop starting at line 1556 was not vectorized because it contains a call to subroutine "GWRITEFIELD81D" on line 1557.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1557 
  Routine GWRITEFIELD81D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1558 
  Routine GWRITEFIELD81D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1562 
  Routine COLLECT_SPEC was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-3021 ftn: IPA File = InputOutput.f90, Line = 1563 
  Routine GWRITEFIELD82D was not inlined because the compiler was unable to locate the routine to expand it inline.

ftn-6010 ftn: SCALAR File = InputOutput.f90, Line = 1610 
  A divide was turned into a multiply by a reciprocal



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
               C r o s s   R e f e r e n c e   for   INPUTOUTPUT
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name                            Storage                           Attributes
----                            -------                           ----------

100                                                               FORMAT label
  Decl    1497
  Set 
  Used

100                                                               FORMAT label
  Decl    1321
  Set 
  Used

101                                                               FORMAT label
  Decl    1322
  Set 
  Used

101                                                               FORMAT label
  Decl    1498
  Set 
  Used

1999                                                              FORMAT label
  Decl    1061
  Set 
  Used

222                                                               FORMAT label
  Decl    1050
  Set 
  Used

223                                                               FORMAT label
  Decl    1051
  Set 
  Used

3001                                                              FORMAT label
  Decl    1567
  Set 
  Used

333                                                               FORMAT label
  Decl    1052
  Set 
  Used

444                                                               FORMAT label
  Decl    1053
  Set 
  Used

555                                                               FORMAT label
  Decl    1054
  Set 
  Used

666                                                               FORMAT label
  Decl    1055
  Set 
  Used

667                                                               FORMAT label
  Decl    1057
  Set 
  Used

888                                                               FORMAT label
  Decl    1058
  Set 
  Used

999                                                               FORMAT label
  Decl    1060
  Set 
  Used

999                                                               FORMAT label
  Decl    1325
  Set 
  Used

999                                                               FORMAT label
  Decl    1501
  Set 
  Used

A                                                                 REAL(KIND=8), PARAMETER
  Decl    1601
  Set 
  Used    1612

ABS                                                               Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0     488     722     797     799    1114

ADD                             Stack                             REAL(KIND=8)
  Decl    1173
  Set     1190    1191
  Used    1194

ADJUSTL                                                           Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0     229     237     246     251     252     267     268

ARRAY                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(INOUT)
  Decl     204     206
  Set      285
  Used     284

AUNITS                          Heap                              CHARACTER(16), DIMENSION(:), ALLOCATABLE, SAVE
  Decl      93     103
  Set 
  Used     172     174

AUX                             Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1222
  Set 
  Used    1253    1263    1274    1288    1289    1302

AUX                             Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1352
  Set 
  Used    1450    1464    1465    1478

AUX                             Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1525
  Set 
  Used    1544    1547    1550    1553    1562

AUX1                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1353
  Set 
  Used    1419    1429    1439

AUX1                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl    1526
  Set 
  Used    1554

AVEBOXIJTOIBJB_R2D              Use assoc                         Subroutine, From module UTILS, Module procedure, PRIVATE
  Decl
  Set 
  Used       0       0       0       0     524     555     854     918     524     544     555     835     854     898     918
           931

B                                                                 REAL(KIND=8), PARAMETER
  Decl    1602
  Set 
  Used    1612

BFR_IN                          Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     425
  Set 
  Used     524     544     555     604     643     676     688     745     756     762     835     854     898     918     931

BFR_IN3                         Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>)
  Decl     426
  Set 
  Used     987     989     997    1009    1011    1018    1020

BFR_OUT                         Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     427
  Set 
  Used     555     565     688     699     762     771     931     940

BFR_OUT3                        Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>)
  Decl     428
  Set 
  Used    1018    1020    1029

C                                                                 REAL(KIND=8), PARAMETER
  Decl    1603
  Set 
  Used    1612

C0                              Stack                             CHARACTER(20)
  Decl     210
  Set 
  Used     228     232     236     243     249     265

C1                              Stack                             CHARACTER(20)
  Decl     211
  Set 
  Used     244     250     266

CF                              Stack                             REAL(KIND=8)
  Decl     218
  Set      274
  Used     285

CF2                             Stack                             REAL(KIND=8)
  Decl     219
  Set      276     278
  Used     285

CNFAC                           Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     105
  Set 
  Used     178     180     274

CNFAC2                          Heap                              REAL(KIND=8), DIMENSION(:), ALLOCATABLE, PRIVATE, SAVE
  Decl     106
  Set 
  Used     184     186     276

CNVRAY                                                            Subroutine, Module procedure
  Decl      84     204
  Set 
  Used       0     337

CO2VAL                          Dummy Arg                         REAL(KIND=8), INTENT(OUT)
  Decl    1570    1606
  Set     1612
  Used

CO2VAL                          Use assoc                         REAL(KIND=8), From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     962

COLLECT_GRID_D                  Use assoc                         Subroutine, From module COMMUNICATIONS, Module procedure, PRIVATE
  Decl
  Set 
  Used     347

COLLECT_GRID_D                  Use assoc                         Subroutine, From module COMMUNICATIONS, Module procedure, PRIVATE
  Decl
  Set 
  Used     347

COLLECT_GRID_SUR                Use assoc                         Subroutine, From module COMMUNICATIONS, Module procedure, PRIVATE
  Decl
  Set 
  Used     345

COLLECT_GRID_SUR                Use assoc                         Subroutine, From module COMMUNICATIONS, Module procedure, PRIVATE
  Decl
  Set 
  Used     345

COLLECT_SPEC                    Use assoc                         Subroutine, From module COMMUNICATIONS, Module procedure, PRIVATE
  Decl
  Set 
  Used       0       0    1544    1550    1553    1554    1562

COLLECT_SPEC                    Use assoc                         Subroutine, From module COMMUNICATIONS, Module procedure, PRIVATE
  Decl
  Set 
  Used       0       0    1544    1550    1553    1554    1562

COMMUNICATIONS                                                    Module
  Decl
  Set 
  Used      75

CONSTANTS                                                         Module
  Decl
  Set 
  Used      13

DLA4                            Stack                             REAL(KIND=4), DIMENSION(<exp>)
  Decl    1363
  Set 
  Used    1384

DLAM                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1224
  Set     1313
  Used    1315

DLAM                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1355
  Set     1384    1488
  Used    1491

DODYN                           Dummy Arg                         LOGICAL, INTENT(IN)
  Decl    1334    1348
  Set 
  Used    1393    1416

DPH4                            Stack                             REAL(KIND=4), DIMENSION(<exp>)
  Decl    1362
  Set 
  Used    1383    1386

DPHI                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1223
  Set     1317
  Used    1319

DPHI                            Stack                             REAL(KIND=8), DIMENSION(<exp>)
  Decl    1354
  Set     1383    1386    1493
  Used    1495

DSI                             Stack                             INTEGER
  Decl    1082
  Set 
  Used    1091    1111

DSJ                             Stack                             INTEGER
  Decl    1082
  Set 
  Used    1094    1111

F1                              Stack                             REAL(KIND=8)
  Decl     444
  Set 
  Used     495     503     565     576     699     732     742     940     949    1029    1039

F1                              Dummy Arg                         REAL(KIND=8), INTENT(OUT)
  Decl    1067    1079
  Set     1154
  Used    1155

F1                              Dummy Arg                         REAL(KIND=8), INTENT(OUT)
  Decl    1159    1170
  Set     1194
  Used    1195

F2                              Stack                             REAL(KIND=8)
  Decl     445
  Set 
  Used     495     503     565     576     699     732     743     940     949    1029    1039

F2                              Dummy Arg                         REAL(KIND=8), INTENT(OUT)
  Decl    1067    1079
  Set     1155
  Used

F2                              Dummy Arg                         REAL(KIND=8), INTENT(OUT)
  Decl    1159    1170
  Set     1195
  Used

FACT1                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl     296     301
  Set 
  Used     306

FACT1                           Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl     326     330
  Set 
  Used     335

FHR                             Stack                             REAL(KIND=8)
  Decl     364
  Set      368
  Used     369

FHR                             Stack                             REAL(KIND=8)
  Decl     435
  Set      487
  Used     488

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl     296     300
  Set 
  Used     306

FIELD                           Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl     326     329
  Set 
  Used     335

FINT                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl     360     363
  Set 
  Used     367     369

FINT                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl     378     417
  Set 
  Used     486     488

FISST                           Stack                             REAL(KIND=8)
  Decl     449
  Set      736
  Used     738     739

FLDAUX                          Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     304
  Set      306
  Used     308     315

FLDAUX                          Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     333
  Set      335
  Used     337     345     347

FNAMEALBEDO                     Use assoc                         CHARACTER(206), From module OPTIONS, PRIVATE, SAVE
  Decl
  Set 
  Used     517     538

FNAMECNF2TB                     Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     120     128
  Set 
  Used     154

FNAMECNFTBL                     Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     119     127
  Set 
  Used     146

FNAMELOOKTB                     Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     120     129
  Set 
  Used     162

FNAMEOZONE                      Use assoc                         CHARACTER(206), From module OPTIONS, PRIVATE, SAVE
  Decl
  Set 
  Used     982    1003

FNAMESNOW                       Use assoc                         CHARACTER(226), From module OPTIONS, PRIVATE, SAVE
  Decl
  Set 
  Used     829     848

FNAMESOILMS                     Use assoc                         CHARACTER(211), From module OPTIONS, PRIVATE, SAVE
  Decl
  Set 
  Used     891     911

FNAMESSTAOI                     Use assoc                         CHARACTER(200), From module OPTIONS, PRIVATE, SAVE
  Decl
  Set 
  Used     596     634     668     751

FNAMEUNITTB                     Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     120     130
  Set 
  Used     138

FOUT                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     304
  Set 
  Used     315

FOUT                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     333
  Set 
  Used     345     347

FSBC                            Static offset=0                   LOGICAL, SAVE
  Decl      92     100
  Set 
  Used     369

FSST                            Stack                             REAL(KIND=8)
  Decl     448
  Set      699     771
  Used     700     701     703     704     706     707     708     772     773     775     776     778     779     780

FTN_LIB_DEFINITIONS                                               Module
  Decl
  Set 
  Used       1

GALB                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl     375     394
  Set      565
  Used     524     544     566     567

GETCO2                                                            Subroutine, Module procedure, PRIVATE
  Decl    1570
  Set 
  Used     962

GETRECWGTMONTHLYSST                                               Subroutine, Module procedure, PRIVATE
  Decl    1065
  Set 
  Used     493

GETSBC                                                            Subroutine, Module procedure
  Decl      88     375
  Set 
  Used

GETWEIGHTSOLD                                                     Subroutine, Module procedure, PRIVATE
  Decl    1159
  Set 
  Used     503

GMAX                            Stack                             REAL(KIND=8)
  Decl     446
  Set      560     566     609     622     694     701     767     773     859     863     936     941    1024    1030
  Used     576     627     700     732     772     790     872     949    1039

GMIN                            Stack                             REAL(KIND=8)
  Decl     447
  Set      561     567     610     623     695     704     768     776     860     864     937     942    1025    1031
  Used     576     627     703     732     775     790     872     949    1039

GOZO                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>, <exp>), INTENT(INOUT)
  Decl     375     401
  Set     1029
  Used     987     989    1009    1011    1030    1031

GREAD                                                             Subroutine, Module procedure
  Decl      89    1205
  Set 
  Used

GREAD4                                                            Subroutine, Module procedure
  Decl      90    1333
  Set 
  Used

GREADFIELD81D                   Use assoc                         Subroutine, From module IOLOWLEVEL, Module procedure, PRIVATE
  Decl
  Set 
  Used       0       0       0       0    1234    1241    1247    1280    1234    1236    1241    1242    1247    1257    1280
          1281

GREADFIELD82D                   Use assoc                         Subroutine, From module IOLOWLEVEL, Module procedure, PRIVATE
  Decl
  Set 
  Used       0       0    1238    1267    1238    1245    1267    1295

GREADHEAD8                      Use assoc                         Subroutine, From module IOLOWLEVEL, Module procedure, PRIVATE
  Decl
  Set 
  Used    1231

GSLM                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl     375     396
  Set      940
  Used     898     918     941     942

GSNW                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl     375     397
  Set 
  Used     835     854     863     864

GSST                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl     375     395
  Set      615     617     651     653     719     721     723     796     798     800
  Used     604     614     616     622     623     643     650     652     722     799

GWRITE                                                            Subroutine, Module procedure
  Decl      91    1508
  Set 
  Used

GWRITEFIELD81D                  Use assoc                         Subroutine, From module IOLOWLEVEL, Module procedure, PRIVATE
  Decl
  Set 
  Used       0       0       0       0    1531    1538    1545    1557    1531    1533    1538    1539    1545    1548    1557
          1558

GWRITEFIELD82D                  Use assoc                         Subroutine, From module IOLOWLEVEL, Module procedure, PRIVATE
  Decl
  Set 
  Used       0       0    1535    1551    1535    1542    1551    1563

GWRITEHEAD8                     Use assoc                         Subroutine, From module IOLOWLEVEL, Module procedure, PRIVATE
  Decl
  Set 
  Used    1528

H                                                                 CHARACTER(12), PARAMETER
  Decl     221
  Set 
  Used     229     230     233     234     237     238     245     247     251     253     267     269

I                               Stack                             INTEGER
  Decl     212
  Set      283
  Used     284     285

I                               Stack                             INTEGER
  Decl     440
  Set      564     613     649     697     717     770     794     862     939    1027
  Used     565     566     567     614     615     616     617     622     623     650     651     652     653     699     707
           709     719     720     721     722     723     771     779     781     796     797     798     799     800     863
           864     940     941     942    1029    1030    1031

I1                              Stack                             INTEGER
  Decl    1221
  Set     1250    1260    1271    1285    1299
  Used    1253    1263    1274    1288    1289    1302

I1                              Stack                             INTEGER
  Decl    1351
  Set     1426    1436    1447    1461    1475
  Used    1429    1439    1450    1464    1465    1478

I2                              Stack                             INTEGER
  Decl    1221
  Set     1251    1261    1272    1286    1300
  Used    1253    1263    1274    1288    1289    1302

I2                              Stack                             INTEGER
  Decl    1351
  Set     1427    1437    1448    1462    1476
  Used    1429    1439    1450    1464    1465    1478

I4                              Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used    1358    1359    1360

IBMAX                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     379     389
  Set 
  Used     394     395     396     397     401     424     427     428

IBMAXPERJB                      Dummy Arg                         INTEGER, DIMENSION(:), INTENT(IN)
  Decl     379     391
  Set 
  Used     564     613     649     697     717     770     794     862     939    1027

ICF                             Stack                             INTEGER
  Decl     213
  Set      260
  Used     264     265     274     275     276

IDAT4                           Stack                             INTEGER(KIND=4), DIMENSION(4)
  Decl    1359
  Set 
  Used    1371    1379

IDAT4C                          Stack                             INTEGER(KIND=4), DIMENSION(4)
  Decl    1360
  Set 
  Used    1371    1380

IDATE                           Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl     360     361
  Set 
  Used     368

IDATE                           Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl     376     413
  Set 
  Used     487     494     511     638     895

IDATE                           Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl    1066    1074
  Set 
  Used    1127

IDATE                           Dummy Arg                         INTEGER, DIMENSION(4), INTENT(OUT)
  Decl    1205    1210
  Set 
  Used    1231    1320

IDATE                           Dummy Arg                         INTEGER, DIMENSION(4), INTENT(OUT)
  Decl    1333    1338
  Set     1379
  Used    1496

IDATE                           Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl    1508    1513
  Set 
  Used    1528    1566

IDATEC                          Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl     376     414
  Set 
  Used     494     503     962

IDATEC                          Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl    1066    1074
  Set 
  Used    1122    1123    1130    1132

IDATEC                          Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl    1159    1166
  Set 
  Used    1176    1177    1179

IDATEC                          Dummy Arg                         INTEGER, DIMENSION(4), INTENT(OUT)
  Decl    1205    1211
  Set 
  Used    1231    1320

IDATEC                          Dummy Arg                         INTEGER, DIMENSION(4), INTENT(OUT)
  Decl    1333    1339
  Set     1380
  Used    1496

IDATEC                          Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl    1508    1514
  Set 
  Used    1528    1566

IDIM                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     204     205
  Set 
  Used     206     225     235     236     283

IERR                            Stack                             INTEGER
  Decl     131
  Set 
  Used     136     138     144     146     152     154     160     162

IERR                            Stack                             INTEGER
  Decl     453
  Set 
  Used     515     517     536     538     594     596     632     634     666     668     749     751     827     829     846
           848     889     891     909     911     980     982    1001    1003

IFALB                           Dummy Arg                         INTEGER, INTENT(INOUT)
  Decl     377     404
  Set      529     572
  Used     509     510

IFCO2                           Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     961     963     965     966     967

IFDAY                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     376     411
  Set 
  Used     532     571     662     718     728     737     795     842     868     905     945     996

IFDAY                           Dummy Arg                         INTEGER, INTENT(OUT)
  Decl    1205    1208
  Set 
  Used    1231    1320

IFDAY                           Dummy Arg                         INTEGER, INTENT(OUT)
  Decl    1333    1336
  Set     1372
  Used    1496

IFDAY                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1508    1511
  Set 
  Used    1528    1566

IFDAY4                          Stack                             INTEGER(KIND=4)
  Decl    1358
  Set 
  Used    1371    1372    1394    1395    1417    1418

IFDYN                           Static offset=0                   INTEGER, SAVE, Initialized
  Decl    1364
  Set     1392    1415
  Used    1391    1414

IFOZONE                         Dummy Arg                         INTEGER, INTENT(INOUT)
  Decl     377     408
  Set      992    1036
  Used     974     976    1035    1042

IFR                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl     204     207
  Set 
  Used     227     228     239     240     258

IFSLM                           Dummy Arg                         INTEGER, INTENT(INOUT)
  Decl     377     406
  Set      903     946
  Used     884     885

IFSNW                           Dummy Arg                         INTEGER, INTENT(INOUT)
  Decl     377     407
  Set      840     869
  Used     822     823

IFSST                           Dummy Arg                         INTEGER, INTENT(INOUT)
  Decl     377     405
  Set      628     660     729
  Used     589     590     627     629     734

IGPF                            Stack                             INTEGER
  Decl     214
  Set      240
  Used     242     243     248     249     260

IGPT                            Stack                             INTEGER
  Decl     216
  Set      241
  Used     242     244

IJTOIBJB3_R                     Use assoc                         Subroutine, From module UTILS, Module procedure, PRIVATE
  Decl
  Set 
  Used       0       0    1011     989    1011    1020

IJTOIBJB_R                      Use assoc                         Subroutine, From module UTILS, Module procedure, PRIVATE
  Decl
  Set 
  Used       0       0       0       0       0       0       0     526     557     645     690     764     856     920     526
           546     557     606     645     678     690     758     764     837     856     900     920     933

IMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     375     385
  Set 
  Used     425     426     429     430

INITINPUTOUTPUT                                                   Subroutine, Module procedure
  Decl      83     117
  Set 
  Used

INPUTOUTPUT                                                       Module
  Decl       6
  Set 
  Used

INTSST                          Dummy Arg                         INTEGER, INTENT(IN)
  Decl     378     416
  Set 
  Used     492     735     736     805

IOLOWLEVEL                                                        Module
  Decl
  Set 
  Used      16

IREC                            Stack                             INTEGER
  Decl     443
  Set      520     541     549     551     599     601     672     682     684     738     832     851     895     914     923
           925
  Used     495     521     542     548     553     600     602     640     673     681     686     754     790     833     852
           896     915     922     928

IREC                            Dummy Arg                         INTEGER, INTENT(OUT)
  Decl    1067    1078
  Set     1132    1133
  Used    1136

ITO                             Dummy Arg                         INTEGER, INTENT(IN)
  Decl     204     208
  Set 
  Used     231     232     239     241     259

IUF                             Stack                             INTEGER
  Decl     215
  Set      258
  Used     260

IUT                             Stack                             INTEGER
  Decl     217
  Set      259
  Used     260

J                               Stack                             INTEGER
  Decl     441
  Set      563     612     648     696     716     769     793     861     938    1026
  Used     564     565     566     567     613     614     615     616     617     622     623     649     650     651     652
           653     697     699     707     709     717     719     720     721     722     723     770     771     779     781
           794     796     797     798     799     800     862     863     864     939     940     941     942    1027    1029
          1030    1031

JBMAX                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     379     390
  Set 
  Used     394     395     396     397     401     424     427     428     563     612     648     696     716     769     793
           861     938    1026

JMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     375     386
  Set 
  Used     425     426     429     430

K                               Stack                             INTEGER
  Decl     442
  Set     1028
  Used    1029    1030    1031

K                               Stack                             INTEGER
  Decl    1221
  Set     1240    1268    1279    1296    1312    1315    1316    1319
  Used    1274    1282    1288    1289    1302    1313    1315    1317    1319

K                               Stack                             INTEGER
  Decl    1351
  Set     1378    1382    1405    1444    1455    1472    1487    1491    1492    1495
  Used    1379    1380    1383    1384    1450    1458    1464    1465    1478    1488    1491    1493    1495

K                               Stack                             INTEGER
  Decl    1524
  Set     1537    1556
  Used

KMAX                            Static offset=64                  INTEGER, PRIVATE, SAVE
  Decl      98
  Set      170
  Used    1230    1231    1240    1279    1312    1316    1370    1371    1382    1386    1405    1455    1487    1492    1537
          1550    1553    1554    1556    1562

KMAX                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     375     387
  Set 
  Used     401     426     428     430    1028

KMAXLOC                         Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE
  Decl
  Set 
  Used    1550    1553    1554    1562

KMAX_IN                         Dummy Arg                         INTEGER, INTENT(IN)
  Decl     118     125
  Set 
  Used     170

LABELSI                         Dummy Arg                         CHARACTER(10), INTENT(IN)
  Decl    1066    1076
  Set 
  Used    1089    1090    1091

LABELSI                         Use assoc                         CHARACTER(10), From module OPTIONS, PRIVATE, SAVE
  Decl
  Set 
  Used     494

LABELSJ                         Dummy Arg                         CHARACTER(10), INTENT(IN)
  Decl    1066    1076
  Set 
  Used    1092    1093    1094

LABELSJ                         Use assoc                         CHARACTER(10), From module OPTIONS, PRIVATE, SAVE
  Decl
  Set 
  Used     494

LEVS                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     296     298
  Set 
  Used     300     304     315

LEVS                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     326     328
  Set 
  Used     329     333     344     347

LEVSG                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl     296     299
  Set 
  Used     304     315

LOOKU                           Heap                              INTEGER, DIMENSION(:, :, :), ALLOCATABLE, PRIVATE, SAVE
  Decl     104
  Set 
  Used     190     192     260

LRECIN                          Stack                             INTEGER
  Decl     434
  Set 
  Used

LRECL                           Stack                             INTEGER
  Decl     434
  Set      746     998
  Used

LY                              Stack                             LOGICAL
  Decl    1174
  Set     1179
  Used

M                               Stack                             INTEGER
  Decl    1221
  Set     1249    1259    1270    1284    1298
  Used    1250    1251    1252    1260    1261    1262    1271    1272    1273    1285    1286    1287    1299    1300    1301

M                               Stack                             INTEGER
  Decl    1351
  Set     1425    1435    1446    1460    1474
  Used    1426    1427    1428    1436    1437    1438    1447    1448    1449    1461    1462    1463    1475    1476    1477

MAX                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0     566     863     941    1030

MAXNODES                        Use assoc                         INTEGER, From module PARALLELISM, PRIVATE, SAVE
  Decl
  Set 
  Used     310     339    1233    1388    1530

MF                              Stack                             INTEGER
  Decl     436
  Set     1014    1015
  Used     495     503     541     576     672     732     914     949    1007    1015    1016    1039

MF                              Dummy Arg                         INTEGER, INTENT(OUT)
  Decl    1159    1171
  Set     1178    1184    1186
  Used    1185    1186    1188    1189    1191

MIN                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0     567     864     942    1031

MM                              Stack                             INTEGER
  Decl     439
  Set      639
  Used

MM                              Stack                             INTEGER
  Decl    1221
  Set     1248    1258    1269    1283    1297
  Used    1249    1251    1259    1261    1270    1272    1284    1286    1298    1300

MM                              Stack                             INTEGER
  Decl    1351
  Set     1424    1434    1445    1459    1473
  Used    1425    1427    1435    1437    1446    1448    1460    1462    1474    1476

MMAX                            Static offset=128                 INTEGER, PRIVATE, SAVE
  Decl      95
  Set      167
  Used    1252    1262    1273    1287    1301    1428    1438    1449    1463    1477

MMAX_IN                         Dummy Arg                         INTEGER, INTENT(IN)
  Decl     118     122
  Set 
  Used     167

MN                              Stack                             INTEGER
  Decl     437
  Set 
  Used     495

MN                              Stack                             INTEGER
  Decl    1172
  Set     1185    1187
  Used    1187    1192    1193

MNL                             Stack                             INTEGER
  Decl    1172
  Set     1180    1181
  Used    1184

MNLF                            Stack                             INTEGER
  Decl    1172
  Set     1188    1189
  Used    1190    1194

MNLN                            Stack                             INTEGER
  Decl    1172
  Set     1192    1193
  Used    1194

MNMAP                           Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used    1250    1260    1271    1285    1299    1426    1436    1447    1461    1475

MNMAX                           Static offset=192                 INTEGER, PRIVATE, SAVE
  Decl      97
  Set      169
  Used

MNMAX_IN                        Dummy Arg                         INTEGER, INTENT(IN)
  Decl     118     124
  Set 
  Used     169

MOD                                                               Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0     259     488    1123    1136    1143    1148    1177    1179

MON                             Stack                             INTEGER
  Decl    1172
  Set     1176
  Used    1178    1180    1181    1184    1191

MONL                            Dummy Arg                         INTEGER, DIMENSION(12), INTENT(IN)
  Decl     379     420
  Set 
  Used     495     503

MONL                            Dummy Arg                         INTEGER, DIMENSION(12), INTENT(IN)
  Decl    1067    1074
  Set 
  Used    1101    1105    1108    1111    1122    1142    1147

MONL                            Dummy Arg                         INTEGER, DIMENSION(12), INTENT(IN)
  Decl    1159    1167
  Set 
  Used    1180    1188    1192

MONTH                           Stack                             INTEGER
  Decl     438
  Set      511     638
  Used     520     639

MRA                             Dummy Arg                         INTEGER, INTENT(OUT)
  Decl    1067    1078
  Set     1136    1137
  Used    1137    1138    1142

MRB                             Dummy Arg                         INTEGER, INTENT(OUT)
  Decl    1067    1078
  Set     1138    1139
  Used    1139    1147

MSI                             Stack                             INTEGER
  Decl    1082
  Set 
  Used    1090    1099    1111    1132    1136

MSINPROC                        Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used    1249    1259    1270    1284    1298    1425    1435    1446    1460    1474

MSJ                             Stack                             INTEGER
  Decl    1082
  Set 
  Used    1093    1099    1100    1107

MYFIRSTLEV                      Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE
  Decl
  Set 
  Used    1274    1288    1289    1302    1450    1464    1465    1478

MYID                            Use assoc                         INTEGER, From module PARALLELISM, PRIVATE, SAVE
  Decl
  Set 
  Used     316     349    1413    1528    1545    1548    1551    1555    1563

MYID_FOUR                       Use assoc                         INTEGER, From module PARALLELISM, PRIVATE, SAVE
  Decl
  Set 
  Used    1249    1259    1270    1284    1298    1425    1435    1446    1460    1474

MYLASTLEV                       Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE
  Decl
  Set 
  Used    1268    1282    1296    1444    1458    1472

MYMMAX                          Use assoc                         INTEGER, From module SIZES, PRIVATE, SAVE
  Decl
  Set 
  Used    1248    1258    1269    1283    1297    1424    1434    1445    1459    1473

MYMNMAP                         Use assoc                         INTEGER, From module SIZES, DIMENSION(:, :), ALLOCATABLE, PRIVATE, SAVE
  Decl
  Set 
  Used    1251    1261    1272    1286    1300    1427    1437    1448    1462    1476

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1205    1207
  Set 
  Used    1230    1231    1234    1236    1238    1241    1242    1245    1247    1257    1267    1280    1281    1295    1320

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1333    1335
  Set 
  Used    1370    1371    1389    1401    1403    1406    1407    1410    1412    1433    1443    1456    1457    1471    1496

N                               Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1508    1510
  Set 
  Used    1528    1531    1533    1535    1538    1539    1542    1545    1548    1551    1557    1558    1563    1566

NCF                             Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     178     264     266

NCF2                            Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     184     275

ND                              Stack                             INTEGER
  Decl    1082
  Set     1100    1104    1107
  Used    1101    1105    1108

NDIJ                            Stack                             INTEGER
  Decl    1082
  Set     1098    1101    1105    1108    1111
  Used    1114    1116

NEARESTIJTOIBJB_R2D             Use assoc                         Subroutine, From module UTILS, Module procedure, PRIVATE
  Decl
  Set 
  Used       0       0       0     604     676     756     604     643     676     688     756     762

NEARESTIJTOIBJB_R3D             Use assoc                         Subroutine, From module UTILS, Module procedure, PRIVATE
  Decl
  Set 
  Used       0       0    1009     987    1009    1018

NFALB                           Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     521     542     553

NFAUNTBL                        Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     174

NFCNF2TB                        Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     186

NFCNFTBL                        Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     180

NFCTRL                          Use assoc                         INTEGER, From module OPTIONS, DIMENSION(100), PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     575     731     789     871     948    1038    1230    1315    1319    1320    1370    1491    1495    1496    1566

NFDYN                           Dummy Arg                         INTEGER, INTENT(IN)
  Decl    1334    1349
  Set 
  Used    1395    1396    1418    1419

NFLOOKTB                        Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     192

NFOZONE                         Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     985    1007    1016

NFPRT                           Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     137     145     153     161     229     233     237     245     251     267     516     537     576     580     595
           627     633     667     732     750     790     813     828     847     872     875     890     910     949     952
           981    1002    1039    1043    1230    1315    1319    1320    1370    1394    1417    1491    1495    1496    1566

NFSLM                           Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     896     915     928

NFSNW                           Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     833     852

NFSST                           Use assoc                         INTEGER, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     600     602     637     640     673     686     754     760

NGRMX                           Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     190     248     250

NMAX                            Static offset=256                 INTEGER, PRIVATE, SAVE
  Decl      96
  Set      168
  Used

NMAX_IN                         Dummy Arg                         INTEGER, INTENT(IN)
  Decl     118     123
  Set 
  Used     168

NN                              Stack                             INTEGER
  Decl    1221
  Set     1252    1262    1273    1287    1301
  Used    1253    1263    1274    1288    1289    1302

NN                              Stack                             INTEGER
  Decl    1351
  Set     1428    1438    1449    1463    1477
  Used    1429    1439    1450    1464    1465    1478

NUFR                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     296     302
  Set 
  Used     308

NUFR                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     326     331
  Set 
  Used     337

NUMX                            Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     172

NUTO                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     296     303
  Set 
  Used     308

NUTO                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     326     332
  Set 
  Used     337

OPTIONS                                                           Module
  Decl
  Set 
  Used      32

PARALLELISM                                                       Module
  Decl
  Set 
  Used       8

PATH                            Static offset=320                 CHARACTER(100), PRIVATE, SAVE
  Decl     101
  Set      166
  Used

PATH_IN                         Dummy Arg                         CHARACTER(*), INTENT(IN)
  Decl     119     126
  Set 
  Used     166

QDIV                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    1206    1215
  Set     1288
  Used

QDIV                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    1334    1343
  Set     1464
  Used

QDIV                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1509    1518
  Set 
  Used    1553

QGZS                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    1206    1212
  Set     1253
  Used

QGZS                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    1334    1340
  Set     1429
  Used    1396

QGZS                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1509    1515
  Set 
  Used    1544

QLNP                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    1206    1213
  Set     1263
  Used

QLNP                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(OUT)
  Decl    1334    1341
  Set     1439
  Used

QLNP                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1509    1516
  Set 
  Used    1547

QQ                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    1206    1217
  Set     1302
  Used

QQ                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    1334    1345
  Set     1478
  Used

QQ                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1509    1520
  Set 
  Used    1562

QROT                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    1206    1216
  Set     1289
  Used

QROT                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    1334    1344
  Set     1465
  Used

QROT                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1509    1519
  Set 
  Used    1554

QTMP                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    1206    1214
  Set     1274
  Used

QTMP                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(OUT)
  Decl    1334    1342
  Set     1450
  Used

QTMP                            Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>, <exp>), INTENT(IN)
  Decl    1509    1517
  Set 
  Used    1550

R4                              Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     429     430    1361    1362    1363

R8                              Use assoc                         INTEGER, PARAMETER, From module CONSTANTS, PRIVATE
  Decl
  Set 
  Used     105     106     108     206     218     219     300     301     304     329     330     333     362     363     364
           368     394     395     396     397     401     412     415     417     418     419     424     425     426     427
           428     435     444     445     446     447     448     449     450     451     452     487     736    1075    1079
          1084    1125    1127    1130    1145    1150    1152    1209    1212    1213    1214    1215    1216    1217    1218
          1219    1222    1223    1224    1337    1340    1341    1342    1343    1344    1345    1346    1347    1352    1353
          1354    1355    1512    1515    1516    1517    1518    1519    1520    1521    1522    1525    1526    1601    1602
          1603    1606    1608

R8                                                                INTEGER, PARAMETER
  Decl    1165
  Set 
  Used    1168    1169    1170    1173    1177    1184    1190    1194

RBRF                            Stack                             REAL(KIND=4), DIMENSION(<exp>, <exp>)
  Decl     429
  Set      485
  Used     512     533     591     663     824     843     886     906     977

RBRF3                           Stack                             REAL(KIND=4), DIMENSION(<exp>, <exp>, <exp>)
  Decl     430
  Set 
  Used

READALB8                        Use assoc                         Subroutine, From module IOLOWLEVEL, Module procedure, PRIVATE
  Decl
  Set 
  Used       0       0     542     521     542     553

READFIELD81D                    Use assoc                         Subroutine, From module IOLOWLEVEL, Module procedure, PRIVATE
  Decl
  Set 
  Used       0       0       0       0    1389    1406    1412    1456    1389    1401    1406    1407    1412    1433    1456
          1457

READFIELD82D                    Use assoc                         Subroutine, From module IOLOWLEVEL, Module procedure, PRIVATE
  Decl
  Set 
  Used       0       0    1403    1443    1403    1410    1443    1471

READHEAD4                       Use assoc                         Subroutine, From module IOLOWLEVEL, Module procedure, PRIVATE
  Decl
  Set 
  Used    1371

READOZONE8                      Use assoc                         Subroutine, From module IOLOWLEVEL, Module procedure, PRIVATE
  Decl
  Set 
  Used       0       0    1007     985    1007    1016

READSLM8                        Use assoc                         Subroutine, From module IOLOWLEVEL, Module procedure, PRIVATE
  Decl
  Set 
  Used       0       0     915     896     915     928

READSNW8                        Use assoc                         Subroutine, From module IOLOWLEVEL, Module procedure, PRIVATE
  Decl
  Set 
  Used       0     833     833     852

READSST8                        Use assoc                         Subroutine, From module IOLOWLEVEL, Module procedure, PRIVATE
  Decl
  Set 
  Used       0       0       0     602     673     600     602     640     673     686

READSST8REC                     Use assoc                         Subroutine, From module IOLOWLEVEL, Module procedure, PRIVATE
  Decl
  Set 
  Used       0     754     754     760

REAL                                                              Function, REAL, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0     368     736    1127    1145    1150    1152    1177    1184    1190    1194

REDUCEDGRID                     Use assoc                         LOGICAL, From module OPTIONS, PRIVATE, SAVE, Initialized
  Decl
  Set 
  Used     523     543     554     603     642     675     687     755     761     834     853     897     917     930     986
          1008    1017

SCLOUTGR                                                          Subroutine, Module procedure
  Decl      86     326
  Set 
  Used

SCLOUTSP                                                          Subroutine, Module procedure
  Decl      85     296
  Set 
  Used

SELECTED_REAL_KIND                                                Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used    1165

SI                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1206    1218
  Set 
  Used    1317

SI                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1334    1346
  Set 
  Used    1493

SI                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1509    1521
  Set 
  Used

SIZES                                                             Module
  Decl
  Set 
  Used      61

SIZES                           Use assoc                         Module, Used indirectly (from module COMMUNICATIONS)
  Decl
  Set 
  Used

SIZES                           Use assoc                         Module, Used indirectly (from module UTILS)
  Decl
  Set 
  Used      61

SL                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1206    1219
  Set 
  Used    1313

SL                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1334    1347
  Set 
  Used    1488

SL                              Dummy Arg                         REAL(KIND=8), DIMENSION(<exp>), INTENT(IN)
  Decl    1509    1522
  Set 
  Used

SSTLAG                          Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl     378     415
  Set 
  Used     737

TC                              Stack                             REAL(KIND=8)
  Decl    1084
  Set     1127    1129
  Used    1129    1130

TDIF                            Stack                             REAL(KIND=8)
  Decl    1608
  Set     1610
  Used    1612

TICE                            Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl     378     418
  Set 
  Used     720     722     723     797     799     800

TIME                            Dummy Arg                         INTEGER, DIMENSION(4), INTENT(IN)
  Decl    1570    1605
  Set 
  Used    1610

TMCA                            Stack                             INTEGER
  Decl    1083
  Set     1142    1143
  Used    1145    1152

TMCB                            Stack                             INTEGER
  Decl    1083
  Set     1147    1148
  Used    1150

TMCF                            Stack                             INTEGER
  Decl    1083
  Set     1122    1123
  Used    1125

TOD                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl     360     362
  Set 
  Used     368

TOD                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl     376     412
  Set 
  Used     487     494     503     737

TOD                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    1066    1075
  Set 
  Used    1127

TOD                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    1159    1168
  Set 
  Used    1177

TOD                             Dummy Arg                         REAL(KIND=8), INTENT(OUT)
  Decl    1205    1209
  Set 
  Used    1231    1320

TOD                             Dummy Arg                         REAL(KIND=8), INTENT(OUT)
  Decl    1333    1337
  Set     1373
  Used    1496

TOD                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    1508    1512
  Set 
  Used    1528    1566

TOD4                            Stack                             REAL(KIND=4)
  Decl    1361
  Set 
  Used    1371    1373    1394    1395    1417    1418

TRIM                                                              Function, INTEGER, Implicit type, INTRINSIC
  Decl
  Set 
  Used       0       0       0       0       0       0       0       0       0       0     134     142     150     158     229
           237     246     252     268     517     538     592     596     630     634     664     668     747     751     825
           829     844     848     887     891     907     911     978     982     999    1003

UNDEF                                                             REAL(KIND=8), PARAMETER, PRIVATE
  Decl     108
  Set 
  Used     284

UNIT                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     296     297
  Set 
  Used     312     316

UNIT                            Dummy Arg                         INTEGER, INTENT(IN)
  Decl     326     327
  Set 
  Used     341     349

UTILS                                                             Module
  Decl
  Set 
  Used      56

WILLGETSBC                                                        Function, LOGICAL, RESULT(WILLGETSBC), Module procedure
  Decl      87     360
  Set 
  Used

WILLGETSBC                      Register                          LOGICAL, Function result
  Decl
  Set      366     369
  Used

WRITEFIELD82D                   Use assoc                         Subroutine, From module IOLOWLEVEL, Module procedure, PRIVATE
  Decl
  Set 
  Used       0       0     312     341     312     316     341     349

XDAY                            Stack                             REAL(KIND=8)
  Decl     452
  Set      737
  Used     738     739

XDAY                            Stack                             REAL(KIND=8)
  Decl    1084
  Set     1130    1152
  Used    1133    1152    1154

XSST                            Stack                             REAL(KIND=8), DIMENSION(<exp>, <exp>)
  Decl     424
  Set      707     709     779     781
  Used     676     699     719     720     721     756     771     796     797     798

XX1                             Stack                             REAL(KIND=8)
  Decl     450
  Set      739     742
  Used     740     771     790

XX2                             Stack                             REAL(KIND=8)
  Decl     451
  Set      740     743
  Used     771     790

YDAY                            Stack                             REAL(KIND=8)
  Decl    1173
  Set     1177
  Used    1184    1194

YRL                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl     379     419
  Set 
  Used     503

YRL                             Dummy Arg                         REAL(KIND=8), INTENT(IN)
  Decl    1159    1169
  Set 
  Used    1179

YSI                             Stack                             INTEGER
  Decl    1082
  Set 
  Used    1089    1111    1132    1143

YSJ                             Stack                             INTEGER
  Decl    1082
  Set 
  Used    1092    1111    1148

ZDAYA                           Stack                             REAL(KIND=8)
  Decl    1084
  Set     1145
  Used    1154

ZDAYB                           Stack                             REAL(KIND=8)
  Decl    1084
  Set     1150
  Used    1154

ZDAYF                           Stack                             REAL(KIND=8)
  Decl    1084
  Set     1125
  Used    1133    1152


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                         E x t e r n a l   R e p o r t
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name  Messages
----  --------
ABORT(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ABORT
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ABS(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GETCO2 in INPUTOUTPUT (Line 369, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 488, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 720, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 722, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 797, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 799, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 1114, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 1114, file InputOutput.f90)

Name  Messages
----  --------
ADJUSTL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GETCO2 in INPUTOUTPUT (Line 229, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 233, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 237, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 245, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 246, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 251, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 252, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 267, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 268, file InputOutput.f90)

Name  Messages
----  --------
AVEBOXIJTOIBJB_R2D in UTILS
      Defined as:  No definitions.

      Interface:   None

      Called By:   INPUTOUTPUT (Line 524, file InputOutput.f90)
                   INPUTOUTPUT (Line 544, file InputOutput.f90)
                   INPUTOUTPUT (Line 555, file InputOutput.f90)
                   INPUTOUTPUT (Line 835, file InputOutput.f90)
                   INPUTOUTPUT (Line 854, file InputOutput.f90)
                   INPUTOUTPUT (Line 898, file InputOutput.f90)
                   INPUTOUTPUT (Line 918, file InputOutput.f90)
                   INPUTOUTPUT (Line 931, file InputOutput.f90)

Name  Messages
----  --------
CNVRAY in INPUTOUTPUT
      Defined as:  Subroutine (line 84, file InputOutput.f90)

      Interface:   None

      Called By:   CNVRAY in INPUTOUTPUT (Line 308, file InputOutput.f90)
                   CNVRAY in INPUTOUTPUT (Line 337, file InputOutput.f90)

      Calls:       CNVRAY in INPUTOUTPUT (Line 308, file InputOutput.f90)
                   CNVRAY in INPUTOUTPUT (Line 337, file InputOutput.f90)

Name  Messages
----  --------
COLLECT_GRID_D in COMMUNICATIONS
      Defined as:  No definitions.

      Interface:   None

      Called By:   INPUTOUTPUT (Line 347, file InputOutput.f90)

Name  Messages
----  --------
COLLECT_GRID_SUR in COMMUNICATIONS
      Defined as:  No definitions.

      Interface:   None

      Called By:   INPUTOUTPUT (Line 345, file InputOutput.f90)

Name  Messages
----  --------
COLLECT_SPEC in COMMUNICATIONS
      Defined as:  No definitions.

      Interface:   None

      Called By:   INPUTOUTPUT (Line 315, file InputOutput.f90)
                   INPUTOUTPUT (Line 1544, file InputOutput.f90)
                   INPUTOUTPUT (Line 1547, file InputOutput.f90)
                   INPUTOUTPUT (Line 1550, file InputOutput.f90)
                   INPUTOUTPUT (Line 1553, file InputOutput.f90)
                   INPUTOUTPUT (Line 1554, file InputOutput.f90)
                   INPUTOUTPUT (Line 1562, file InputOutput.f90)

Name  Messages
----  --------
COMMUNICATIONS
      Defined as:  No definitions.

      Used By:     INPUTOUTPUT

Name  Messages
----  --------
CONSTANTS
      Defined as:  No definitions.

      Used By:     INPUTOUTPUT

Name  Messages
----  --------
EXIT(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FLUSH
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FLUSH_8
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
FTN_LIB_DEFINITIONS
      Defined as:  No definitions.

      Used By:     INPUTOUTPUT

Name  Messages
----  --------
GETCO2 in INPUTOUTPUT
      Defined as:  Subroutine (line 1570, file InputOutput.f90)

      Interface:   None

      Called By:   GETCO2 in INPUTOUTPUT (Line 962, file InputOutput.f90)

      Calls:       SELECTED_REAL_KIND(Intrinsic) (Line 1165, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 962, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 134, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 138, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 142, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 146, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 150, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 154, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 158, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 162, file InputOutput.f90)
                   ADJUSTL(Intrinsic) (Line 229, file InputOutput.f90)
                   ADJUSTL(Intrinsic) (Line 233, file InputOutput.f90)
                   ADJUSTL(Intrinsic) (Line 237, file InputOutput.f90)
                   ADJUSTL(Intrinsic) (Line 245, file InputOutput.f90)
                   ADJUSTL(Intrinsic) (Line 246, file InputOutput.f90)
                   ADJUSTL(Intrinsic) (Line 251, file InputOutput.f90)
                   ADJUSTL(Intrinsic) (Line 252, file InputOutput.f90)
                   ADJUSTL(Intrinsic) (Line 267, file InputOutput.f90)
                   ADJUSTL(Intrinsic) (Line 268, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 229, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 233, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 237, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 245, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 246, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 251, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 252, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 267, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 268, file InputOutput.f90)
                   MOD(Intrinsic) (Line 258, file InputOutput.f90)
                   MOD(Intrinsic) (Line 259, file InputOutput.f90)
                   REAL(Intrinsic) (Line 368, file InputOutput.f90)
                   MOD(Intrinsic) (Line 369, file InputOutput.f90)
                   ABS(Intrinsic) (Line 369, file InputOutput.f90)
                   REAL(Intrinsic) (Line 487, file InputOutput.f90)
                   REAL(Intrinsic) (Line 736, file InputOutput.f90)
                   MOD(Intrinsic) (Line 488, file InputOutput.f90)
                   MOD(Intrinsic) (Line 739, file InputOutput.f90)
                   ABS(Intrinsic) (Line 488, file InputOutput.f90)
                   ABS(Intrinsic) (Line 720, file InputOutput.f90)
                   ABS(Intrinsic) (Line 722, file InputOutput.f90)
                   ABS(Intrinsic) (Line 797, file InputOutput.f90)
                   ABS(Intrinsic) (Line 799, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 513, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 517, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 534, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 538, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 592, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 596, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 630, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 634, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 664, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 668, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 747, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 751, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 825, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 829, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 844, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 848, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 887, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 891, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 907, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 911, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 978, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 982, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 999, file InputOutput.f90)
                   TRIM(Intrinsic) (Line 1003, file InputOutput.f90)
                   MAX(Intrinsic) (Line 566, file InputOutput.f90)
                   MAX(Intrinsic) (Line 622, file InputOutput.f90)
                   MAX(Intrinsic) (Line 863, file InputOutput.f90)
                   MAX(Intrinsic) (Line 941, file InputOutput.f90)
                   MAX(Intrinsic) (Line 1030, file InputOutput.f90)
                   MIN(Intrinsic) (Line 567, file InputOutput.f90)
                   MIN(Intrinsic) (Line 623, file InputOutput.f90)
                   MIN(Intrinsic) (Line 864, file InputOutput.f90)
                   MIN(Intrinsic) (Line 942, file InputOutput.f90)
                   MIN(Intrinsic) (Line 1031, file InputOutput.f90)
                   ABS(Intrinsic) (Line 1114, file InputOutput.f90)
                   ABS(Intrinsic) (Line 1114, file InputOutput.f90)
                   MOD(Intrinsic) (Line 1123, file InputOutput.f90)
                   MOD(Intrinsic) (Line 1136, file InputOutput.f90)
                   MOD(Intrinsic) (Line 1143, file InputOutput.f90)
                   MOD(Intrinsic) (Line 1148, file InputOutput.f90)
                   REAL(Intrinsic) (Line 1125, file InputOutput.f90)
                   REAL(Intrinsic) (Line 1127, file InputOutput.f90)
                   REAL(Intrinsic) (Line 1130, file InputOutput.f90)
                   REAL(Intrinsic) (Line 1145, file InputOutput.f90)
                   REAL(Intrinsic) (Line 1145, file InputOutput.f90)
                   REAL(Intrinsic) (Line 1150, file InputOutput.f90)
                   REAL(Intrinsic) (Line 1152, file InputOutput.f90)
                   REAL(Intrinsic) (Line 1177, file InputOutput.f90)
                   REAL(Intrinsic) (Line 1177, file InputOutput.f90)
                   REAL(Intrinsic) (Line 1184, file InputOutput.f90)
                   REAL(Intrinsic) (Line 1190, file InputOutput.f90)
                   REAL(Intrinsic) (Line 1194, file InputOutput.f90)
                   MOD(Intrinsic) (Line 1177, file InputOutput.f90)
                   MOD(Intrinsic) (Line 1179, file InputOutput.f90)

Name  Messages
----  --------
GETRECWGTMONTHLYSST in INPUTOUTPUT
      Defined as:  Subroutine (line 1065, file InputOutput.f90)

      Interface:   None

      Called By:   GETRECWGTMONTHLYSST in INPUTOUTPUT (Line 493, file InputOutput.f90)

      Calls:       GETRECWGTMONTHLYSST in INPUTOUTPUT (Line 493, file InputOutput.f90)

Name  Messages
----  --------
GETSBC in INPUTOUTPUT
      Defined as:  Subroutine (line 88, file InputOutput.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GETWEIGHTSOLD in INPUTOUTPUT
      Defined as:  Subroutine (line 1159, file InputOutput.f90)

      Interface:   None

      Called By:   GETWEIGHTSOLD in INPUTOUTPUT (Line 503, file InputOutput.f90)

      Calls:       GETWEIGHTSOLD in INPUTOUTPUT (Line 503, file InputOutput.f90)

Name  Messages
----  --------
GREAD in INPUTOUTPUT
      Defined as:  Subroutine (line 89, file InputOutput.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GREAD4 in INPUTOUTPUT
      Defined as:  Subroutine (line 90, file InputOutput.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GREADFIELD41D in IOLOWLEVEL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GREADFIELD42D in IOLOWLEVEL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GREADFIELD81D in IOLOWLEVEL
      Defined as:  No definitions.

      Interface:   None

      Called By:   INPUTOUTPUT (Line 1234, file InputOutput.f90)
                   INPUTOUTPUT (Line 1236, file InputOutput.f90)
                   INPUTOUTPUT (Line 1241, file InputOutput.f90)
                   INPUTOUTPUT (Line 1242, file InputOutput.f90)
                   INPUTOUTPUT (Line 1247, file InputOutput.f90)
                   INPUTOUTPUT (Line 1257, file InputOutput.f90)
                   INPUTOUTPUT (Line 1280, file InputOutput.f90)
                   INPUTOUTPUT (Line 1281, file InputOutput.f90)

Name  Messages
----  --------
GREADFIELD82D in IOLOWLEVEL
      Defined as:  No definitions.

      Interface:   None

      Called By:   INPUTOUTPUT (Line 1238, file InputOutput.f90)
                   INPUTOUTPUT (Line 1245, file InputOutput.f90)
                   INPUTOUTPUT (Line 1267, file InputOutput.f90)
                   INPUTOUTPUT (Line 1295, file InputOutput.f90)

Name  Messages
----  --------
GREADHEAD4 in IOLOWLEVEL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GREADHEAD8 in IOLOWLEVEL
      Defined as:  No definitions.

      Interface:   None

      Called By:   INPUTOUTPUT (Line 1231, file InputOutput.f90)

Name  Messages
----  --------
GWRITE in INPUTOUTPUT
      Defined as:  Subroutine (line 91, file InputOutput.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GWRITEFIELD41D in IOLOWLEVEL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GWRITEFIELD42D in IOLOWLEVEL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GWRITEFIELD81D in IOLOWLEVEL
      Defined as:  No definitions.

      Interface:   None

      Called By:   INPUTOUTPUT (Line 1531, file InputOutput.f90)
                   INPUTOUTPUT (Line 1533, file InputOutput.f90)
                   INPUTOUTPUT (Line 1538, file InputOutput.f90)
                   INPUTOUTPUT (Line 1539, file InputOutput.f90)
                   INPUTOUTPUT (Line 1545, file InputOutput.f90)
                   INPUTOUTPUT (Line 1548, file InputOutput.f90)
                   INPUTOUTPUT (Line 1557, file InputOutput.f90)
                   INPUTOUTPUT (Line 1558, file InputOutput.f90)

Name  Messages
----  --------
GWRITEFIELD82D in IOLOWLEVEL
      Defined as:  No definitions.

      Interface:   None

      Called By:   INPUTOUTPUT (Line 1535, file InputOutput.f90)
                   INPUTOUTPUT (Line 1542, file InputOutput.f90)
                   INPUTOUTPUT (Line 1551, file InputOutput.f90)
                   INPUTOUTPUT (Line 1563, file InputOutput.f90)

Name  Messages
----  --------
GWRITEHEAD4 in IOLOWLEVEL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
GWRITEHEAD8 in IOLOWLEVEL
      Defined as:  No definitions.

      Interface:   None

      Called By:   INPUTOUTPUT (Line 1528, file InputOutput.f90)

Name  Messages
----  --------
ICEIL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
ICEIL_J
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
IJTOIBJB3_I in UTILS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
IJTOIBJB3_R in UTILS
      Defined as:  No definitions.

      Interface:   None

      Called By:   INPUTOUTPUT (Line 989, file InputOutput.f90)
                   INPUTOUTPUT (Line 1011, file InputOutput.f90)
                   INPUTOUTPUT (Line 1020, file InputOutput.f90)

Name  Messages
----  --------
IJTOIBJB_I in UTILS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
IJTOIBJB_R in UTILS
      Defined as:  No definitions.

      Interface:   None

      Called By:   INPUTOUTPUT (Line 526, file InputOutput.f90)
                   INPUTOUTPUT (Line 546, file InputOutput.f90)
                   INPUTOUTPUT (Line 557, file InputOutput.f90)
                   INPUTOUTPUT (Line 606, file InputOutput.f90)
                   INPUTOUTPUT (Line 645, file InputOutput.f90)
                   INPUTOUTPUT (Line 678, file InputOutput.f90)
                   INPUTOUTPUT (Line 690, file InputOutput.f90)
                   INPUTOUTPUT (Line 758, file InputOutput.f90)
                   INPUTOUTPUT (Line 764, file InputOutput.f90)
                   INPUTOUTPUT (Line 837, file InputOutput.f90)
                   INPUTOUTPUT (Line 856, file InputOutput.f90)
                   INPUTOUTPUT (Line 900, file InputOutput.f90)
                   INPUTOUTPUT (Line 920, file InputOutput.f90)
                   INPUTOUTPUT (Line 933, file InputOutput.f90)

Name  Messages
----  --------
INITINPUTOUTPUT in INPUTOUTPUT
      Defined as:  Subroutine (line 83, file InputOutput.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
INPUTOUTPUT
      Defined as:  Module (line 6, file InputOutput.f90)

      Calls:       AVEBOXIJTOIBJB_R2D in UTILS (Line 524, file InputOutput.f90)
                   AVEBOXIJTOIBJB_R2D in UTILS (Line 544, file InputOutput.f90)
                   AVEBOXIJTOIBJB_R2D in UTILS (Line 555, file InputOutput.f90)
                   AVEBOXIJTOIBJB_R2D in UTILS (Line 835, file InputOutput.f90)
                   AVEBOXIJTOIBJB_R2D in UTILS (Line 854, file InputOutput.f90)
                   AVEBOXIJTOIBJB_R2D in UTILS (Line 898, file InputOutput.f90)
                   AVEBOXIJTOIBJB_R2D in UTILS (Line 918, file InputOutput.f90)
                   AVEBOXIJTOIBJB_R2D in UTILS (Line 931, file InputOutput.f90)
                   COLLECT_GRID_D in COMMUNICATIONS (Line 347, file InputOutput.f90)
                   COLLECT_GRID_SUR in COMMUNICATIONS (Line 345, file InputOutput.f90)
                   COLLECT_SPEC in COMMUNICATIONS (Line 315, file InputOutput.f90)
                   COLLECT_SPEC in COMMUNICATIONS (Line 1544, file InputOutput.f90)
                   COLLECT_SPEC in COMMUNICATIONS (Line 1547, file InputOutput.f90)
                   COLLECT_SPEC in COMMUNICATIONS (Line 1550, file InputOutput.f90)
                   COLLECT_SPEC in COMMUNICATIONS (Line 1553, file InputOutput.f90)
                   COLLECT_SPEC in COMMUNICATIONS (Line 1554, file InputOutput.f90)
                   COLLECT_SPEC in COMMUNICATIONS (Line 1562, file InputOutput.f90)
                   GREADFIELD81D in IOLOWLEVEL (Line 1234, file InputOutput.f90)
                   GREADFIELD81D in IOLOWLEVEL (Line 1236, file InputOutput.f90)
                   GREADFIELD82D in IOLOWLEVEL (Line 1238, file InputOutput.f90)
                   GREADFIELD81D in IOLOWLEVEL (Line 1241, file InputOutput.f90)
                   GREADFIELD81D in IOLOWLEVEL (Line 1242, file InputOutput.f90)
                   GREADFIELD82D in IOLOWLEVEL (Line 1245, file InputOutput.f90)
                   GREADFIELD81D in IOLOWLEVEL (Line 1247, file InputOutput.f90)
                   GREADFIELD81D in IOLOWLEVEL (Line 1257, file InputOutput.f90)
                   GREADFIELD82D in IOLOWLEVEL (Line 1267, file InputOutput.f90)
                   GREADFIELD81D in IOLOWLEVEL (Line 1280, file InputOutput.f90)
                   GREADFIELD81D in IOLOWLEVEL (Line 1281, file InputOutput.f90)
                   GREADFIELD82D in IOLOWLEVEL (Line 1295, file InputOutput.f90)
                   GREADHEAD8 in IOLOWLEVEL (Line 1231, file InputOutput.f90)
                   GWRITEFIELD81D in IOLOWLEVEL (Line 1531, file InputOutput.f90)
                   GWRITEFIELD81D in IOLOWLEVEL (Line 1533, file InputOutput.f90)
                   GWRITEFIELD82D in IOLOWLEVEL (Line 1535, file InputOutput.f90)
                   GWRITEFIELD81D in IOLOWLEVEL (Line 1538, file InputOutput.f90)
                   GWRITEFIELD81D in IOLOWLEVEL (Line 1539, file InputOutput.f90)
                   GWRITEFIELD82D in IOLOWLEVEL (Line 1542, file InputOutput.f90)
                   GWRITEFIELD81D in IOLOWLEVEL (Line 1545, file InputOutput.f90)
                   GWRITEFIELD81D in IOLOWLEVEL (Line 1548, file InputOutput.f90)
                   GWRITEFIELD82D in IOLOWLEVEL (Line 1551, file InputOutput.f90)
                   GWRITEFIELD81D in IOLOWLEVEL (Line 1557, file InputOutput.f90)
                   GWRITEFIELD81D in IOLOWLEVEL (Line 1558, file InputOutput.f90)
                   GWRITEFIELD82D in IOLOWLEVEL (Line 1563, file InputOutput.f90)
                   GWRITEHEAD8 in IOLOWLEVEL (Line 1528, file InputOutput.f90)
                   IJTOIBJB_R in UTILS (Line 526, file InputOutput.f90)
                   IJTOIBJB_R in UTILS (Line 546, file InputOutput.f90)
                   IJTOIBJB_R in UTILS (Line 557, file InputOutput.f90)
                   IJTOIBJB_R in UTILS (Line 606, file InputOutput.f90)
                   IJTOIBJB_R in UTILS (Line 645, file InputOutput.f90)
                   IJTOIBJB_R in UTILS (Line 678, file InputOutput.f90)
                   IJTOIBJB_R in UTILS (Line 690, file InputOutput.f90)
                   IJTOIBJB_R in UTILS (Line 758, file InputOutput.f90)
                   IJTOIBJB_R in UTILS (Line 764, file InputOutput.f90)
                   IJTOIBJB_R in UTILS (Line 837, file InputOutput.f90)
                   IJTOIBJB_R in UTILS (Line 856, file InputOutput.f90)
                   IJTOIBJB_R in UTILS (Line 900, file InputOutput.f90)
                   IJTOIBJB_R in UTILS (Line 920, file InputOutput.f90)
                   IJTOIBJB_R in UTILS (Line 933, file InputOutput.f90)
                   IJTOIBJB3_R in UTILS (Line 989, file InputOutput.f90)
                   IJTOIBJB3_R in UTILS (Line 1011, file InputOutput.f90)
                   IJTOIBJB3_R in UTILS (Line 1020, file InputOutput.f90)
                   NEARESTIJTOIBJB_R2D in UTILS (Line 604, file InputOutput.f90)
                   NEARESTIJTOIBJB_R2D in UTILS (Line 643, file InputOutput.f90)
                   NEARESTIJTOIBJB_R2D in UTILS (Line 676, file InputOutput.f90)
                   NEARESTIJTOIBJB_R2D in UTILS (Line 688, file InputOutput.f90)
                   NEARESTIJTOIBJB_R2D in UTILS (Line 756, file InputOutput.f90)
                   NEARESTIJTOIBJB_R2D in UTILS (Line 762, file InputOutput.f90)
                   NEARESTIJTOIBJB_R3D in UTILS (Line 987, file InputOutput.f90)
                   NEARESTIJTOIBJB_R3D in UTILS (Line 1009, file InputOutput.f90)
                   NEARESTIJTOIBJB_R3D in UTILS (Line 1018, file InputOutput.f90)
                   READFIELD81D in IOLOWLEVEL (Line 1389, file InputOutput.f90)
                   READFIELD81D in IOLOWLEVEL (Line 1401, file InputOutput.f90)
                   READFIELD82D in IOLOWLEVEL (Line 1403, file InputOutput.f90)
                   READFIELD81D in IOLOWLEVEL (Line 1406, file InputOutput.f90)
                   READFIELD81D in IOLOWLEVEL (Line 1407, file InputOutput.f90)
                   READFIELD82D in IOLOWLEVEL (Line 1410, file InputOutput.f90)
                   READFIELD81D in IOLOWLEVEL (Line 1412, file InputOutput.f90)
                   READFIELD81D in IOLOWLEVEL (Line 1433, file InputOutput.f90)
                   READFIELD82D in IOLOWLEVEL (Line 1443, file InputOutput.f90)
                   READFIELD81D in IOLOWLEVEL (Line 1456, file InputOutput.f90)
                   READFIELD81D in IOLOWLEVEL (Line 1457, file InputOutput.f90)
                   READFIELD82D in IOLOWLEVEL (Line 1471, file InputOutput.f90)
                   READALB8 in IOLOWLEVEL (Line 521, file InputOutput.f90)
                   READALB8 in IOLOWLEVEL (Line 542, file InputOutput.f90)
                   READALB8 in IOLOWLEVEL (Line 553, file InputOutput.f90)
                   READSLM8 in IOLOWLEVEL (Line 896, file InputOutput.f90)
                   READSLM8 in IOLOWLEVEL (Line 915, file InputOutput.f90)
                   READSLM8 in IOLOWLEVEL (Line 928, file InputOutput.f90)
                   READSNW8 in IOLOWLEVEL (Line 833, file InputOutput.f90)
                   READSNW8 in IOLOWLEVEL (Line 852, file InputOutput.f90)
                   READSST8 in IOLOWLEVEL (Line 600, file InputOutput.f90)
                   READSST8 in IOLOWLEVEL (Line 602, file InputOutput.f90)
                   READSST8 in IOLOWLEVEL (Line 640, file InputOutput.f90)
                   READSST8 in IOLOWLEVEL (Line 673, file InputOutput.f90)
                   READSST8 in IOLOWLEVEL (Line 686, file InputOutput.f90)
                   READSST8REC in IOLOWLEVEL (Line 754, file InputOutput.f90)
                   READSST8REC in IOLOWLEVEL (Line 760, file InputOutput.f90)
                   READHEAD4 in IOLOWLEVEL (Line 1371, file InputOutput.f90)
                   READOZONE8 in IOLOWLEVEL (Line 985, file InputOutput.f90)
                   READOZONE8 in IOLOWLEVEL (Line 1007, file InputOutput.f90)
                   READOZONE8 in IOLOWLEVEL (Line 1016, file InputOutput.f90)
                   WRITEFIELD82D in IOLOWLEVEL (Line 312, file InputOutput.f90)
                   WRITEFIELD82D in IOLOWLEVEL (Line 316, file InputOutput.f90)
                   WRITEFIELD82D in IOLOWLEVEL (Line 341, file InputOutput.f90)
                   WRITEFIELD82D in IOLOWLEVEL (Line 349, file InputOutput.f90)

        Uses:      FTN_LIB_DEFINITIONS
                   PARALLELISM
                   CONSTANTS
                   IOLOWLEVEL
                   OPTIONS
                   UTILS
                   SIZES  (indirectly)
                   SIZES
                   COMMUNICATIONS
                   SIZES  (indirectly)

Name  Messages
----  --------
IOLOWLEVEL
      Defined as:  No definitions.

      Used By:     INPUTOUTPUT

Name  Messages
----  --------
MAX(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GETCO2 in INPUTOUTPUT (Line 566, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 622, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 863, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 941, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 1030, file InputOutput.f90)

Name  Messages
----  --------
MIN(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GETCO2 in INPUTOUTPUT (Line 567, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 623, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 864, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 942, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 1031, file InputOutput.f90)

Name  Messages
----  --------
MOD(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GETCO2 in INPUTOUTPUT (Line 258, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 259, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 369, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 488, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 739, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 1123, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 1136, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 1143, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 1148, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 1177, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 1179, file InputOutput.f90)

Name  Messages
----  --------
NEARESTIJTOIBJB_I2D in UTILS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
NEARESTIJTOIBJB_I3D in UTILS
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
NEARESTIJTOIBJB_R2D in UTILS
      Defined as:  No definitions.

      Interface:   None

      Called By:   INPUTOUTPUT (Line 604, file InputOutput.f90)
                   INPUTOUTPUT (Line 643, file InputOutput.f90)
                   INPUTOUTPUT (Line 676, file InputOutput.f90)
                   INPUTOUTPUT (Line 688, file InputOutput.f90)
                   INPUTOUTPUT (Line 756, file InputOutput.f90)
                   INPUTOUTPUT (Line 762, file InputOutput.f90)

Name  Messages
----  --------
NEARESTIJTOIBJB_R3D in UTILS
      Defined as:  No definitions.

      Interface:   None

      Called By:   INPUTOUTPUT (Line 987, file InputOutput.f90)
                   INPUTOUTPUT (Line 1009, file InputOutput.f90)
                   INPUTOUTPUT (Line 1018, file InputOutput.f90)

Name  Messages
----  --------
OPTIONS
      Defined as:  No definitions.

      Used By:     INPUTOUTPUT

Name  Messages
----  --------
PARALLELISM
      Defined as:  No definitions.

      Used By:     INPUTOUTPUT

Name  Messages
----  --------
READALB4 in IOLOWLEVEL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READALB8 in IOLOWLEVEL
      Defined as:  No definitions.

      Interface:   None

      Called By:   INPUTOUTPUT (Line 521, file InputOutput.f90)
                   INPUTOUTPUT (Line 542, file InputOutput.f90)
                   INPUTOUTPUT (Line 553, file InputOutput.f90)

Name  Messages
----  --------
READFIELD41D in IOLOWLEVEL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READFIELD42D in IOLOWLEVEL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READFIELD81D in IOLOWLEVEL
      Defined as:  No definitions.

      Interface:   None

      Called By:   INPUTOUTPUT (Line 1389, file InputOutput.f90)
                   INPUTOUTPUT (Line 1401, file InputOutput.f90)
                   INPUTOUTPUT (Line 1406, file InputOutput.f90)
                   INPUTOUTPUT (Line 1407, file InputOutput.f90)
                   INPUTOUTPUT (Line 1412, file InputOutput.f90)
                   INPUTOUTPUT (Line 1433, file InputOutput.f90)
                   INPUTOUTPUT (Line 1456, file InputOutput.f90)
                   INPUTOUTPUT (Line 1457, file InputOutput.f90)

Name  Messages
----  --------
READFIELD82D in IOLOWLEVEL
      Defined as:  No definitions.

      Interface:   None

      Called By:   INPUTOUTPUT (Line 1403, file InputOutput.f90)
                   INPUTOUTPUT (Line 1410, file InputOutput.f90)
                   INPUTOUTPUT (Line 1443, file InputOutput.f90)
                   INPUTOUTPUT (Line 1471, file InputOutput.f90)

Name  Messages
----  --------
READHEAD4 in IOLOWLEVEL
      Defined as:  No definitions.

      Interface:   None

      Called By:   INPUTOUTPUT (Line 1371, file InputOutput.f90)

Name  Messages
----  --------
READHEAD8 in IOLOWLEVEL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READOZONE8 in IOLOWLEVEL
      Defined as:  No definitions.

      Interface:   None

      Called By:   INPUTOUTPUT (Line 985, file InputOutput.f90)
                   INPUTOUTPUT (Line 1007, file InputOutput.f90)
                   INPUTOUTPUT (Line 1016, file InputOutput.f90)

Name  Messages
----  --------
READSLM4 in IOLOWLEVEL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READSLM8 in IOLOWLEVEL
      Defined as:  No definitions.

      Interface:   None

      Called By:   INPUTOUTPUT (Line 896, file InputOutput.f90)
                   INPUTOUTPUT (Line 915, file InputOutput.f90)
                   INPUTOUTPUT (Line 928, file InputOutput.f90)

Name  Messages
----  --------
READSNW4 in IOLOWLEVEL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READSNW8 in IOLOWLEVEL
      Defined as:  No definitions.

      Interface:   None

      Called By:   INPUTOUTPUT (Line 833, file InputOutput.f90)
                   INPUTOUTPUT (Line 852, file InputOutput.f90)

Name  Messages
----  --------
READSST4 in IOLOWLEVEL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READSST4REC in IOLOWLEVEL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
READSST8 in IOLOWLEVEL
      Defined as:  No definitions.

      Interface:   None

      Called By:   INPUTOUTPUT (Line 600, file InputOutput.f90)
                   INPUTOUTPUT (Line 602, file InputOutput.f90)
                   INPUTOUTPUT (Line 640, file InputOutput.f90)
                   INPUTOUTPUT (Line 673, file InputOutput.f90)
                   INPUTOUTPUT (Line 686, file InputOutput.f90)

Name  Messages
----  --------
READSST8REC in IOLOWLEVEL
      Defined as:  No definitions.

      Interface:   None

      Called By:   INPUTOUTPUT (Line 754, file InputOutput.f90)
                   INPUTOUTPUT (Line 760, file InputOutput.f90)

Name  Messages
----  --------
REAL(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GETCO2 in INPUTOUTPUT (Line 368, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 487, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 736, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 1125, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 1127, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 1130, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 1145, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 1145, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 1150, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 1152, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 1177, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 1177, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 1184, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 1190, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 1194, file InputOutput.f90)

Name  Messages
----  --------
SCLOUTGR in INPUTOUTPUT
      Defined as:  Subroutine (line 86, file InputOutput.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SCLOUTSP in INPUTOUTPUT
      Defined as:  Subroutine (line 85, file InputOutput.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
SELECTED_REAL_KIND(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GETCO2 in INPUTOUTPUT (Line 1165, file InputOutput.f90)

Name  Messages
----  --------
SIZES
      Defined as:  No definitions.

      Used By:     INPUTOUTPUT  (indirectly)
                   INPUTOUTPUT
                   INPUTOUTPUT  (indirectly)

Name  Messages
----  --------
TRIM(Intrinsic)
      Defined as:  No definitions.

      Interface:   None

      Called By:   GETCO2 in INPUTOUTPUT (Line 134, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 138, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 142, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 146, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 150, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 154, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 158, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 162, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 229, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 233, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 237, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 245, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 246, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 251, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 252, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 267, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 268, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 513, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 517, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 534, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 538, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 592, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 596, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 630, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 634, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 664, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 668, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 747, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 751, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 825, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 829, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 844, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 848, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 887, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 891, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 907, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 911, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 978, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 982, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 999, file InputOutput.f90)
                   GETCO2 in INPUTOUTPUT (Line 1003, file InputOutput.f90)

Name  Messages
----  --------
UTILS
      Defined as:  No definitions.

      Used By:     INPUTOUTPUT

Name  Messages
----  --------
WILLGETSBC in INPUTOUTPUT
      Defined as:  Function (line 87, file InputOutput.f90)

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRITEFIELD41D in IOLOWLEVEL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRITEFIELD42D in IOLOWLEVEL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRITEFIELD81D in IOLOWLEVEL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRITEFIELD82D in IOLOWLEVEL
      Defined as:  No definitions.

      Interface:   None

      Called By:   INPUTOUTPUT (Line 312, file InputOutput.f90)
                   INPUTOUTPUT (Line 316, file InputOutput.f90)
                   INPUTOUTPUT (Line 341, file InputOutput.f90)
                   INPUTOUTPUT (Line 349, file InputOutput.f90)

Name  Messages
----  --------
WRITEHEAD4 in IOLOWLEVEL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
WRITEHEAD8 in IOLOWLEVEL
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
flush_(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None

Name  Messages
----  --------
flush_8_(Intrinsic)
      Defined as:  No definitions.

                   No calls.  It is not called and does not use any procedure.

      Interface:   None


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
