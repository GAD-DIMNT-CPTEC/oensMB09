       !        
       !        Cray Inc. Decompilation
       !        Notice - This output is provided for information only.
       !        
       !        Cray Inc. reserves the right to change the format of this
       !        information at any time and does not guarantee the
       !        readability or accuracy of this information.
       !        
       !        This information may not be compilable and corresponds to
       !        the internal representation of the program during the
       !        optimization phase of the compilation process.
       !        
       !        Source                :  Sizes.f90
       !        File                  :  Sizes.opt
       !        Network               :  Gemini interconnect
       !        Target                :  X86, 64-bit, sse3
       !        
  435.       
  435.       subroutine registerbasicsizes( trunc, nlat, nlon, vert )
  386.       jmax = nlat
  387.       jmaxhalf = nlat / 2
  389.       imax = nlon
  391.       kmax = vert
  393.       mmax = 1 + trunc
  394.       nmax = 1 + trunc
  395.       nextmax = 2 + trunc
  396.       mnextmax = ( trunc + ( 2 + trunc ) * ( 2 + trunc ) ) / 2
  397.       mextmap%header%a_contig = 1
  397.       mextmap%dim_1%LB = 1
  397.       mextmap%dim_1%EX = _zla( 0, ( trunc + ( 2 + trunc ) * ( 2 + trunc ) ) / 2 )
  397.       mextmap%dim_1%SM = 1
  397.       $_allo_P0(0) = 0x1000000000001L
  397.       $_allo_P0(1) = loc( mextmap )
  397.       call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
  398.       nextmap%header%a_contig = 1
  398.       nextmap%dim_1%LB = 1
  398.       nextmap%dim_1%EX = _zla( 0, ( trunc + ( 2 + trunc ) * ( 2 + trunc ) ) / 2 )
  398.       nextmap%dim_1%SM = 1
  398.       $_allo_P1(0) = 0x1000000000001L
  398.       $_allo_P1(1) = loc( nextmap )
  398.       call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
  399.       mnextmap%header%a_contig = 1
  399.       mnextmap%dim_1%LB = 1
  399.       mnextmap%dim_1%EX = _zla( 0, ( 1 + trunc ) )
  399.       mnextmap%dim_1%SM = 1
  399.       mnextmap%dim_2%LB = 1
  399.       mnextmap%dim_2%EX = _zla( 0, ( 2 + trunc ) )
  399.       mnextmap%dim_2%SM = _zla( 0, ( 1 + trunc ) )
  399.       $_allo_P2(0) = 0x1000000000001L
  399.       $_allo_P2(1) = loc( mnextmap )
  399.       call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
  400.       $F_A33 = _zla( 0, ( trunc + ( 2 + trunc ) * ( 2 + trunc ) ) / 2 )
  400.       if ( trunc + ( 2 + trunc ) * ( 2 + trunc ) >= 2 ) then
  400.          $I_A1 = 0
  400. !dir$ ivdep
  400.          do
  400.             (nextmap%base_addr)(1 + $I_A1, 0) = -1
  400.             $I_A1 = 1 + $I_A1
  400.             if ( $I_A1 >= $F_A33 ) exit
  400.          enddo
  400.       endif
  401.       $F_A34 = _zla( 0, ( trunc + ( 2 + trunc ) * ( 2 + trunc ) ) / 2 )
  401.       if ( trunc + ( 2 + trunc ) * ( 2 + trunc ) >= 2 ) then
  401.          $I_A1 = 0
  401. !dir$ ivdep
  401.          do
  401.             (mextmap%base_addr)(1 + $I_A1, 0) = -1
  401.             $I_A1 = 1 + $I_A1
  401.             if ( $I_A1 >= $F_A34 ) exit
  401.          enddo
  401.       endif
  402.       $F_A35 = _zla( 0, ( 2 + trunc ) )
  402.       $F_A36 = _zla( 0, ( 1 + trunc ) )
  402.       if ( and( -$F_A36, -$F_A35 ) < 0 ) then
  402.          $I_A2 = 0
  402.          do
  402.             $I_A1 = 0
  402. !dir$ ivdep
  402.             do
  402.                (mnextmap%base_addr)(1 + $I_A1, 1 + $I_A2, 0) = -1
  402.                $I_A1 = 1 + $I_A1
  402.                if ( $I_A1 >= $F_A36 ) exit
  402.             enddo
  402.             $I_A2 = 1 + $I_A2
  402.             if ( $I_A2 >= $F_A35 ) exit
  402.          enddo
  402.       endif
  403.       $mn_S1 = 0
  404.       if ( trunc >= 0 ) then
  404.          $I_L404_22 = 0
  404.          do
  405.             $I_L405_18 = 0
  405. !dir$ ivdep
  405.             do
  407.                (mnextmap%base_addr)(1 + $I_L404_22, $I_L405_18 + $I_L404_22 + 1, 0) = ( $mn_S1 + $I_L405_18 + 1 )
  408.                (mextmap%base_addr)($mn_S1 + $I_L405_18 + 1, 0) = ( 1 + $I_L404_22 )
  409.                (nextmap%base_addr)($mn_S1 + $I_L405_18 + 1, 0) = ( $I_L405_18 + $I_L404_22 + 1 )
  410.                $I_L405_18 = 1 + $I_L405_18
  405.                if ( $I_L405_18 >= trunc + -$I_L404_22 + 2 ) exit
  405.             enddo
  406.             $mn_S1 = ( trunc + $mn_S1 + -$I_L404_22 + 2 )
  411.             $I_L404_22 = 1 + $I_L404_22
  410.             if ( $I_L404_22 >= 1 + trunc ) exit
  410.          enddo
  410.       endif
  412.       mnmax = ( trunc * trunc + 3 * trunc + 2 ) / 2
  413.       mnmap%header%a_contig = 1
  413.       mnmap%dim_1%LB = 1
  413.       mnmap%dim_1%EX = ( max( 0, 1 + trunc ) )
  413.       mnmap%dim_1%SM = 1
  413.       mnmap%dim_2%LB = 1
  413.       mnmap%dim_2%EX = ( max( 0, 1 + trunc ) )
  413.       mnmap%dim_2%SM = ( max( 0, 1 + trunc ) )
  413.       $_allo_P3(0) = 0x1000000000001L
  413.       $_allo_P3(1) = loc( mnmap )
  413.       call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
  414.       mmap%header%a_contig = 1
  414.       mmap%dim_1%LB = 1
  414.       mmap%dim_1%EX = ( max( 0, ( trunc + ( 1 + trunc ) * ( 1 + trunc ) + 1 ) / 2 ) )
  414.       mmap%dim_1%SM = 1
  414.       $_allo_P4(0) = 0x1000000000001L
  414.       $_allo_P4(1) = loc( mmap )
  414.       call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
  415.       nmap%header%a_contig = 1
  415.       nmap%dim_1%LB = 1
  415.       nmap%dim_1%EX = ( max( 0, ( trunc + ( 1 + trunc ) * ( 1 + trunc ) + 1 ) / 2 ) )
  415.       nmap%dim_1%SM = 1
  415.       $_allo_P5(0) = 0x1000000000001L
  415.       $_allo_P5(1) = loc( nmap )
  415.       call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
  416.       $F_A37 = ( 1 + trunc )
  416.       $F_A38 = ( 1 + trunc )
  416.       if ( and( -$F_A38, -$F_A37 ) < 0 ) then
  416.          $I_A2 = 0
  416.          do
  416.             $I_A1 = 0
  416. !dir$ ivdep
  416.             do
  416.                (mnmap%base_addr)(1 + $I_A1, 1 + $I_A2, 0) = -1
  416.                $I_A1 = 1 + $I_A1
  416.                if ( $I_A1 >= $F_A38 ) exit
  416.             enddo
  416.             $I_A2 = 1 + $I_A2
  416.             if ( $I_A2 >= $F_A37 ) exit
  416.          enddo
  416.       endif
  417.       $F_A39 = ( trunc * trunc + 3 * trunc + 2 ) / 2
  417.       if ( trunc * trunc + 3 * trunc >= 0 ) then
  417.          $I_A1 = 0
  417. !dir$ ivdep
  417.          do
  417.             (mmap%base_addr)(1 + $I_A1, 0) = -1
  417.             $I_A1 = 1 + $I_A1
  417.             if ( $I_A1 >= $F_A39 ) exit
  417.          enddo
  417.       endif
  418.       $F_A40 = ( trunc * trunc + 3 * trunc + 2 ) / 2
  418.       if ( trunc * trunc + 3 * trunc >= 0 ) then
  418.          $I_A1 = 0
  418. !dir$ ivdep
  418.          do
  418.             (nmap%base_addr)(1 + $I_A1, 0) = -1
  418.             $I_A1 = 1 + $I_A1
  418.             if ( $I_A1 >= $F_A40 ) exit
  418.          enddo
  418.       endif
  419.       $mn_S4 = 0
  420.       if ( trunc >= 0 ) then
  420.          $I_L420_24 = 0
  420.          do
  421.             $I_L421_20 = 0
  421. !dir$ ivdep
  421.             do
  423.                (mnmap%base_addr)(1 + $I_L420_24, $I_L421_20 + $I_L420_24 + 1, 0) = ( $mn_S4 + $I_L421_20 + 1 )
  424.                (mmap%base_addr)($mn_S4 + $I_L421_20 + 1, 0) = ( 1 + $I_L420_24 )
  425.                (nmap%base_addr)($mn_S4 + $I_L421_20 + 1, 0) = ( $I_L421_20 + $I_L420_24 + 1 )
  426.                $I_L421_20 = 1 + $I_L421_20
  421.                if ( $I_L421_20 >= trunc + -$I_L420_24 + 1 ) exit
  421.             enddo
  422.             $mn_S4 = ( trunc + $mn_S4 + -$I_L420_24 + 1 )
  427.             $I_L420_24 = 1 + $I_L420_24
  426.             if ( $I_L420_24 >= 1 + trunc ) exit
  426.          enddo
  426.       endif
  433.       ijmaxgauqua = nlat * nlon
  435.       return
  435.       end
  435.       
  439.       
  439.       subroutine verticalgroups( givenfouriergroups, nproc_vert )
  448.       if ( givenfouriergroups ) then
  449.          $ng_S5 = nproc_vert
  449.       else
  451.          $npsq_S1 = int( _sqrt( real( maxnodes ) ) )
  452.          $nl_S3 = 1
  452.          if ( kmax > 0 ) then
  452.             $I_L452_51 = 0
  452. !dir$ ivdep
  452.             do
  453.                $nn_S2 = ( maxnodes + maxnodes * $I_L452_51 ) / kmax
  454.                if ( $nn_S2 >= $npsq_S1 ) then
  452.                   $nl_S3 = ( 1 + $I_L452_51 )
  452.                   goto 10
  452.                endif
  455.                $I_L452_51 = 1 + $I_L452_51
  455.                if ( $I_L452_51 >= kmax ) exit
  455.             enddo
  455.             $nl_S3 = ( 1 + kmax )
  455.          endif
  455.    10    continue
  456.          $ng_S4 = kmax / $nl_S3
  457.          $ng_S5 = $ng_S4 + ( $nl_S3 * $ng_S4 < kmax )
  457.       endif
  459.       ngroups_four = $ng_S5
  460.       $nl_S6 = kmax / $ng_S5
  463.       kfirst_four%header%a_contig = 1
  463.       kfirst_four%dim_1%LB = 0
  463.       kfirst_four%dim_1%EX = _zla( 0, ( 1 + maxnodes ) )
  463.       kfirst_four%dim_1%SM = 1
  463.       $_allo_P0(0) = 0x1000000000001L
  463.       $_allo_P0(1) = loc( kfirst_four )
  463.       call __allocate( $_allo_P0, 0, 0, _fcd( 0, 0 ) )
  464.       klast_four%header%a_contig = 1
  464.       klast_four%dim_1%LB = 0
  464.       klast_four%dim_1%EX = _zla( 0, ( 1 + maxnodes ) )
  464.       klast_four%dim_1%SM = 1
  464.       $_allo_P1(0) = 0x1000000000001L
  464.       $_allo_P1(1) = loc( klast_four )
  464.       call __allocate( $_allo_P1, 0, 0, _fcd( 0, 0 ) )
  465.       npperg_four%header%a_contig = 1
  465.       npperg_four%dim_1%LB = 1
  465.       npperg_four%dim_1%EX = _zla( 0, $ng_S5 )
  465.       npperg_four%dim_1%SM = 1
  465.       $_allo_P2(0) = 0x1000000000001L
  465.       $_allo_P2(1) = loc( npperg_four )
  465.       call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
  466.       nlevperg_four%header%a_contig = 1
  466.       nlevperg_four%dim_1%LB = 1
  466.       nlevperg_four%dim_1%EX = _zla( 0, $ng_S5 )
  466.       nlevperg_four%dim_1%SM = 1
  466.       $_allo_P3(0) = 0x1000000000001L
  466.       $_allo_P3(1) = loc( nlevperg_four )
  466.       call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
  467.       first_proc_four%header%a_contig = 1
  467.       first_proc_four%dim_1%LB = 1
  467.       first_proc_four%dim_1%EX = _zla( 0, $ng_S5 )
  467.       first_proc_four%dim_1%SM = 1
  467.       $_allo_P4(0) = 0x1000000000001L
  467.       $_allo_P4(1) = loc( first_proc_four )
  467.       call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
  468.       np = 0
  469.       if ( $ng_S5 > 0 ) then
  469.          $I_L469_53 = 0
  469. !dir$ ivdep
  469.          do
  475.             (nlevperg_four%base_addr)(1 + $I_L469_53, 0) = cvmg( $nl_S6 + ( $ng_S5 * $nl_S6 < kmax ), $nl_S6 + ( $ng_S5 * $nl_S6 < kmax ) + -1, ( 1 + $I_L469_53 ) > -kmax + $ng_S5 * $nl_S6 + $ng_S5 * ( $ng_S5 * $nl_S6 < kmax ) )
  476.             $npperg_four_WR0_R0 = maxnodes * cvmg( $nl_S6 + ( $ng_S5 * $nl_S6 < kmax ), $nl_S6 + ( $ng_S5 * $nl_S6 < kmax ) + -1, ( 1 + $I_L469_53 ) > -kmax + $ng_S5 * $nl_S6 + $ng_S5 * ( $ng_S5 * $nl_S6 < kmax ) ) / kmax
  476.             (npperg_four%base_addr)(1 + $I_L469_53, 0) = $npperg_four_WR0_R0
  477.             np = np + $npperg_four_WR0_R0
  478.             $I_L469_53 = 1 + $I_L469_53
  469.             if ( $I_L469_53 >= $ng_S5 ) exit
  469.          enddo
  469.       endif
  480.       $next_S9 = ( maxnodes + -np ) / $ng_S5
  482.       if ( $ng_S5 > 0 ) then
  482.          $I_L482_32 = 0
  488.          if ( 0 > maxnodes + -np + -( $ng_S5 * $next_S9 ) + -1 ) then
  488.             goto 20
  488.          else
  482.             $I_L482_55 = 0
  482. !dir$ ivdep
  482.             do
  484.                (npperg_four%base_addr)(1 + $I_L482_55, 0) = $next_S9 + (npperg_four%base_addr)(1 + $I_L482_55, 0) + 1
  488.                $I_L482_55 = 1 + $I_L482_55
  487.                if ( $I_L482_55 >= min( $ng_S5, maxnodes + -np + -( $ng_S5 * $next_S9 ) ) ) exit
  487.             enddo
  488.             $I_L482_32 = min( $ng_S5, maxnodes + -np + -( $ng_S5 * $next_S9 ) )
  488.             if ( maxnodes + -np + -( $ng_S5 * $next_S9 ) < $ng_S5 ) then
  488.    20          continue
  482.                $I_L482_67 = 0
  482. !dir$ ivdep
  482.                do
  486.                   (npperg_four%base_addr)($I_L482_32 + $I_L482_67 + 1, 0) = $next_S9 + (npperg_four%base_addr)($I_L482_32 + $I_L482_67 + 1, 0)
  488.                   $I_L482_67 = 1 + $I_L482_67
  487.                   if ( $I_L482_67 >= $ng_S5 + -$I_L482_32 ) exit
  487.                enddo
  487.             endif
  487.          endif
  487.       endif
  489.       nset%header%a_contig = 1
  489.       nset%dim_1%LB = 1
  489.       nset%dim_1%EX = ( max( 0, $ng_S5 ) )
  489.       nset%dim_1%SM = 1
  489.       $_allo_P5(0) = 0x1000000000001L
  489.       $_allo_P5(1) = loc( nset )
  489.       call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
  490.       $Reduc_A34 = 0xffffffff80000001
  490.       $F_A36 = _zla( 0, $ng_S5 )
  490.       if ( $ng_S5 > 0 ) then
  490.          $I_L490_63 = 0
  490. !dir$ ivdep
  490.          do
  490.             $Reduc_A34 = max( $Reduc_A34, (npperg_four%base_addr)(1 + $I_L490_63, 0) )
  490.             $I_L490_63 = 1 + $I_L490_63
  490.             if ( $I_L490_63 >= $F_A36 ) exit
  490.          enddo
  490.       endif
  490.       nprocmax_four = $Reduc_A34
  491.       map_four%header%a_contig = 1
  491.       map_four%dim_1%LB = 1
  491.       map_four%dim_1%EX = ( max( 0, $ng_S5 ) )
  491.       map_four%dim_1%SM = 1
  491.       map_four%dim_2%LB = 0
  491.       map_four%dim_2%EX = ( max( 0, $Reduc_A34 ) )
  491.       map_four%dim_2%SM = ( max( 0, $ng_S5 ) )
  491.       $_allo_P6(0) = 0x1000000000001L
  491.       $_allo_P6(1) = loc( map_four )
  491.       call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
  492.       $n_S12 = 0
  493.       $F_A37 = $ng_S5
  493.       if ( $ng_S5 > 0 ) then
  493.          $I_L493_65 = 0
  493. !dir$ ivdep
  493.          do
  493.             (nset%base_addr)(1 + $I_L493_65, 0) = 0
  493.             $I_L493_65 = 1 + $I_L493_65
  493.             if ( $I_L493_65 >= $F_A37 ) exit
  493.          enddo
  494.          do
  495.             $I_L495_57 = 0
  495. !dir$ ivdep
  495.             do
  496.                if ( (nset%base_addr)(1 + $I_L495_57, 0) < (npperg_four%base_addr)(1 + $I_L495_57, 0) ) then
  497.                   if ( myid + -$n_S12 == 0 ) then
  498.                      mygroup_four = ( 1 + $I_L495_57 )
  499.                      maxnodes_four = (npperg_four%base_addr)(1 + $I_L495_57, 0)
  500.                      myid_four = (nset%base_addr)(1 + $I_L495_57, 0)
  500.                   endif
  502.                   (map_four%base_addr)(1 + $I_L495_57, (nset%base_addr)(1 + $I_L495_57, 0), 0) = $n_S12
  503.                   (nset%base_addr)(1 + $I_L495_57, 0) = 1 + (nset%base_addr)(1 + $I_L495_57, 0)
  504.                   $n_S12 = 1 + $n_S12
  504.                endif
  506.                $I_L495_57 = 1 + $I_L495_57
  505.                if ( $I_L495_57 >= $ng_S5 ) exit
  505.             enddo
  506.             if ( $n_S12 >= maxnodes ) exit
  506.          enddo
  506.       else if ( 0 < maxnodes ) then
  494.          do
  506.          enddo
  506.       endif
  509.       $m_S16 = 0
  510.       if ( $ng_S5 > 0 ) then
  510.          $I_L510_69 = 0
  510.          do
  511.             $t_S14 = -1 + (npperg_four%base_addr)(1 + $I_L510_69, 0)
  511.             if ( (npperg_four%base_addr)(1 + $I_L510_69, 0) > 0 ) then
  511.                $SCA_nlevperg_four_I0 = (nlevperg_four%base_addr)(1 + $I_L510_69, 0)
  511.                $I_L511_59 = 0
  511. !dir$ ivdep
  511.                do
  512.                   $l_S17 = (map_four%base_addr)(1 + $I_L510_69, $I_L511_59, 0)
  513.                   (kfirst_four%base_addr)($l_S17, 0) = 1 + $m_S16
  514.                   (klast_four%base_addr)($l_S17, 0) = $m_S16 + $SCA_nlevperg_four_I0
  515.                   $I_L511_59 = 1 + $I_L511_59
  511.                   if ( $I_L511_59 >= 1 + $t_S14 ) exit
  511.                enddo
  511.             endif
  516.             $m_S16 = $m_S16 + (nlevperg_four%base_addr)(1 + $I_L510_69, 0)
  517.             $I_L510_69 = 1 + $I_L510_69
  515.             if ( $I_L510_69 >= $ng_S5 ) exit
  515.          enddo
  518.          $I_L518_61 = 0
  518. !dir$ ivdep
  518.          do
  519.             (first_proc_four%base_addr)(1 + $I_L518_61, 0) = $I_L518_61
  520.             $I_L518_61 = 1 + $I_L518_61
  518.             if ( $I_L518_61 >= $ng_S5 ) exit
  518.          enddo
  518.       endif
  521.       kmaxloc = (klast_four%base_addr)(myid, 0) + -(kfirst_four%base_addr)(myid, 0) + 1
  522.       myfirstlev = (kfirst_four%base_addr)(myid, 0)
  523.       mylastlev = (klast_four%base_addr)(myid, 0)
  525.       return
  525.       end
  525.       
  721.       
  721.       subroutine registerothersizes( imaxperlat, mperlat, myid, maxnodes )
  529.       t$4 = jmax
  530.       t$107 = _zla( 0, jmax )
  529.       t$5 = maxnodes_four
  539.       t$108 = _zla( 0, maxnodes_four )
  539.       t$111 = 4 * _zla( 0, maxnodes_four )
  539.       t$113 = 8 * _zla( 0, maxnodes_four )
  541.       t$115 = 12 * _zla( 0, maxnodes_four )
  540.       t$117 = 16 * _zla( 0, maxnodes_four )
  541.       t$119 = 20 * _zla( 0, maxnodes_four )
  529.       t$109 = int( _alloc( 20 * _zla( 0, maxnodes_four ) ), 8 )
  539.       t$110 = t$109
  539.       t$112 = t$109 + 4 * _zla( 0, maxnodes_four )
  541.       t$114 = t$109 + 8 * _zla( 0, maxnodes_four )
  540.       t$116 = t$109 + 12 * _zla( 0, maxnodes_four )
  541.       t$118 = t$109 + 16 * _zla( 0, maxnodes_four )
  545.       mmaxperj%header%a_contig = 1
  545.       mmaxperj%dim_1%LB = 1
  545.       mmaxperj%dim_1%EX = _zla( 0, jmax )
  545.       mmaxperj%dim_1%SM = 1
  545.       $_allo_P2(0) = 0x1000000000001L
  545.       $_allo_P2(1) = loc( mmaxperj )
  545.       call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
  546.       $F_A39 = jmax
  546.       if ( jmax > 0 ) then
  546.          $I_L546_102 = 0
  546. !dir$ ivdep
  546.          do
  546.             (mmaxperj%base_addr)(1 + $I_L546_102, 0) = mperlat(1 + $I_L546_102)
  546.             $I_L546_102 = 1 + $I_L546_102
  546.             if ( $I_L546_102 >= $F_A39 ) exit
  546.          enddo
  546.       endif
  547.       imaxperj%header%a_contig = 1
  547.       imaxperj%dim_1%LB = 1
  547.       imaxperj%dim_1%EX = ( max( 0, jmax ) )
  547.       imaxperj%dim_1%SM = 1
  547.       $_allo_P3(0) = 0x1000000000001L
  547.       $_allo_P3(1) = loc( imaxperj )
  547.       call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
  548.       $F_A40 = jmax
  548.       if ( jmax > 0 ) then
  548.          $I_L548_104 = 0
  548. !dir$ ivdep
  548.          do
  548.             (imaxperj%base_addr)(1 + $I_L548_104, 0) = imaxperlat(1 + $I_L548_104)
  548.             $I_L548_104 = 1 + $I_L548_104
  548.             if ( $I_L548_104 >= $F_A40 ) exit
  548.          enddo
  548.       endif
  549.       $Reduc_A41 = 0xffffffff80000001
  549.       $F_A43 = jmax
  549.       if ( jmax > 0 ) then
  549.          $I_L549_106 = 0
  549. !dir$ ivdep
  549.          do
  549.             $Reduc_A41 = max( $Reduc_A41, (imaxperj%base_addr)(1 + $I_L549_106, 0) )
  549.             $I_L549_106 = 1 + $I_L549_106
  549.             if ( $I_L549_106 >= $F_A43 ) exit
  549.          enddo
  549.       endif
  549.       if ( imax < $Reduc_A41 ) then
  550.           _substr(t$159,1,27) = ' imax and imaxperj disagree'
  550.          call _stop(  _substr(t$159,1,27) )
  550.       else
  552.          $Reduc_A44 = 0
  552.          $F_A46 = jmax
  552.          if ( jmax > 0 ) then
  552.             $I_L552_108 = 0
  552. !dir$ ivdep
  552.             do
  552.                $Reduc_A44 = $Reduc_A44 + (imaxperj%base_addr)(1 + $I_L552_108, 0)
  552.                $I_L552_108 = 1 + $I_L552_108
  552.                if ( $I_L552_108 >= $F_A46 ) exit
  552.             enddo
  552.          endif
  552.          ijmax = $Reduc_A44
  554.          firstlatinproc_f%header%a_contig = 1
  554.          firstlatinproc_f%dim_1%LB = 0
  554.          firstlatinproc_f%dim_1%EX = ( max( 0, maxnodes_four ) )
  554.          firstlatinproc_f%dim_1%SM = 1
  554.          $_allo_P4(0) = 0x1000000000001L
  554.          $_allo_P4(1) = loc( firstlatinproc_f )
  554.          call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
  555.          lastlatinproc_f%header%a_contig = 1
  555.          lastlatinproc_f%dim_1%LB = 0
  555.          lastlatinproc_f%dim_1%EX = ( max( 0, maxnodes_four ) )
  555.          lastlatinproc_f%dim_1%SM = 1
  555.          $_allo_P5(0) = 0x1000000000001L
  555.          $_allo_P5(1) = loc( lastlatinproc_f )
  555.          call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
  556.          nlatsinproc_f%header%a_contig = 1
  556.          nlatsinproc_f%dim_1%LB = 0
  556.          nlatsinproc_f%dim_1%EX = ( max( 0, maxnodes_four ) )
  556.          nlatsinproc_f%dim_1%SM = 1
  556.          $_allo_P6(0) = 0x1000000000001L
  556.          $_allo_P6(1) = loc( nlatsinproc_f )
  556.          call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
  557.          nodehasj_f%header%a_contig = 1
  557.          nodehasj_f%dim_1%LB = 1
  557.          nodehasj_f%dim_1%EX = ( max( 0, jmax ) )
  557.          nodehasj_f%dim_1%SM = 1
  557.          $_allo_P7(0) = 0x1000000000001L
  557.          $_allo_P7(1) = loc( nodehasj_f )
  557.          call __allocate( $_allo_P7, 0, 0, _fcd( 0, 0 ) )
  560.          if ( reducedgrid ) then
  562.             $meanp_S1 = ijmax / maxnodes_four
  564.             $F_A47 = maxnodes_four
  564.             if ( maxnodes_four > 0 ) then
  564.                $I_L564_110 = 0
  564. !dir$ ivdep
  564.                do
  564.                   mlast(1 + $I_L564_110) = 0
  564.                   $I_L564_110 = 1 + $I_L564_110
  564.                   if ( $I_L564_110 >= $F_A47 ) exit
  564.                enddo
  564.             endif
  565.             $F_A48 = maxnodes_four
  565.             if ( maxnodes_four > 0 ) then
  565.                $I_L565_112 = 0
  565. !dir$ ivdep
  565.                do
  565.                   npoints(1 + $I_L565_112) = 0
  565.                   $I_L565_112 = 1 + $I_L565_112
  565.                   if ( $I_L565_112 >= $F_A48 ) exit
  565.                enddo
  565.             endif
  566.             $F_A49 = maxnodes_four
  566.             if ( maxnodes_four > 0 ) then
  566.                $I_L566_114 = 0
  566. !dir$ ivdep
  566.                do
  566.                   mlast1(1 + $I_L566_114) = 0
  566.                   $I_L566_114 = 1 + $I_L566_114
  566.                   if ( $I_L566_114 >= $F_A49 ) exit
  566.                enddo
  566.             endif
  567.             $F_A50 = maxnodes_four
  567.             if ( maxnodes_four > 0 ) then
  567.                $I_L567_116 = 0
  567. !dir$ ivdep
  567.                do
  567.                   npoints1(1 + $I_L567_116) = 0
  567.                   $I_L567_116 = 1 + $I_L567_116
  567.                   if ( $I_L567_116 >= $F_A50 ) exit
  567.                enddo
  567.             endif
  568.             $jlast_S2 = jmax
  569.             $jused_S5 = 0
  571.             if ( $meanp_S1 <= 0 ) then
  572.                 _substr(t$160,1,87) = '**(RegisterOtherSizes)** Too many MPI processes; there are processes with 0 grid-points'
  572.                call fatalerror(  _substr(t$160,1,87) )
  574.                 _substr(t$161,1,4) = ' '
  574.                call _stop(  _substr(t$161,1,1) )
  574.             else
  579.                if ( maxnodes_four > 0 ) then
  579.                   $I_L579_147 = 0
  579.                   do
  580.                      if ( $jlast_S2 > 0 ) then
  581.                         $SC_npoints_I2 = npoints(maxnodes_four + -$I_L579_147)
  580.                         $I_L580_86 = 0
  580.                         do
  581.                            if ( $SC_npoints_I2 >= $meanp_S1 ) exit
  582.                            $SC_npoints_I2 = $SC_npoints_I2 + (imaxperj%base_addr)($jlast_S2 + -$I_L580_86, 0)
  583.                            if ( mlast(maxnodes_four + -$I_L579_147) == 0 ) then
  583.                               mlast(maxnodes_four + -$I_L579_147) = ( $jlast_S2 + -$I_L580_86 )
  583.                            endif
  584.                            $jused_S5 = ( $jlast_S2 + -$I_L580_86 )
  588.                            $I_L580_86 = 1 + $I_L580_86
  583.                            if ( $I_L580_86 >= $jlast_S2 ) exit
  583.                         enddo
  582.                         npoints(maxnodes_four + -$I_L579_147) = $SC_npoints_I2
  582.                      endif
  589.                      $jlast_S2 = -1 + $jused_S5
  590.                      $I_L579_147 = 1 + $I_L579_147
  588.                      if ( $I_L579_147 >= maxnodes_four ) exit
  588.                   enddo
  588.                endif
  591.                $Reduc_A51 = 0xffffffff80000001
  591.                $F_A53 = maxnodes_four
  591.                if ( maxnodes_four > 0 ) then
  591.                   $I_L591_118 = 0
  591. !dir$ ivdep
  591.                   do
  591.                      $Reduc_A51 = max( $Reduc_A51, npoints(1 + $I_L591_118) )
  591.                      $I_L591_118 = 1 + $I_L591_118
  591.                      if ( $I_L591_118 >= $F_A53 ) exit
  591.                   enddo
  591.                endif
  591.                $maxpointsold_S7 = $Reduc_A51
  595.                do
  596.                   $jlast_S6 = jmax
  597.                   if ( maxnodes_four > 0 ) then
  597.                      $I_L597_149 = 0
  597.                      do
  598.                         if ( $jlast_S6 > 0 ) then
  599.                            $SC_npoints1_I3 = npoints1(maxnodes_four + -$I_L597_149)
  598.                            $I_L598_88 = 0
  598.                            do
  599.                               if ( $SC_npoints1_I3 + (imaxperj%base_addr)($jlast_S6 + -$I_L598_88, 0) >= $maxpointsold_S7 ) exit
  600.                               $SC_npoints1_I3 = $SC_npoints1_I3 + (imaxperj%base_addr)($jlast_S6 + -$I_L598_88, 0)
  601.                               if ( mlast1(maxnodes_four + -$I_L597_149) == 0 ) then
  601.                                  mlast1(maxnodes_four + -$I_L597_149) = ( $jlast_S6 + -$I_L598_88 )
  601.                               endif
  602.                               $jused_S5 = ( $jlast_S6 + -$I_L598_88 )
  606.                               $I_L598_88 = 1 + $I_L598_88
  601.                               if ( $I_L598_88 >= $jlast_S6 ) exit
  601.                            enddo
  600.                            npoints1(maxnodes_four + -$I_L597_149) = $SC_npoints1_I3
  600.                         endif
  607.                         $jlast_S6 = -1 + $jused_S5
  608.                         $I_L597_149 = 1 + $I_L597_149
  606.                         if ( $I_L597_149 >= maxnodes_four ) exit
  606.                      enddo
  606.                   endif
  609.                   if ( $jlast_S6 /= 0 ) goto 10
  610.                   $Reduc_A54 = 0xffffffff80000001
  610.                   $F_A56 = maxnodes_four
  610.                   if ( maxnodes_four > 0 ) then
  610.                      $I_L610_120 = 0
  610. !dir$ ivdep
  610.                      do
  610.                         $Reduc_A54 = max( $Reduc_A54, npoints1(1 + $I_L610_120) )
  610.                         $I_L610_120 = 1 + $I_L610_120
  610.                         if ( $I_L610_120 >= $F_A56 ) exit
  610.                      enddo
  610.                   endif
  614.                   if ( $Reduc_A54 >= $maxpointsold_S7 ) goto 10
  615.                   $F_A57 = maxnodes_four
  615.                   if ( maxnodes_four > 0 ) then
  615.                      $I_L615_122 = 0
  615. !dir$ ivdep
  615.                      do
  615.                         npoints(1 + $I_L615_122) = npoints1(1 + $I_L615_122)
  615.                         $I_L615_122 = 1 + $I_L615_122
  615.                         if ( $I_L615_122 >= $F_A57 ) exit
  615.                      enddo
  615.                   endif
  617.                   $F_A58 = maxnodes_four
  617.                   if ( maxnodes_four > 0 ) then
  617.                      $I_L617_124 = 0
  617. !dir$ ivdep
  617.                      do
  617.                         mlast(1 + $I_L617_124) = mlast1(1 + $I_L617_124)
  617.                         $I_L617_124 = 1 + $I_L617_124
  617.                         if ( $I_L617_124 >= $F_A58 ) exit
  617.                      enddo
  617.                   endif
  616.                   $F_A59 = maxnodes_four
  616.                   if ( maxnodes_four > 0 ) then
  616.                      $I_L616_126 = 0
  616. !dir$ ivdep
  616.                      do
  616.                         npoints1(1 + $I_L616_126) = 0
  616.                         $I_L616_126 = 1 + $I_L616_126
  616.                         if ( $I_L616_126 >= $F_A59 ) exit
  616.                      enddo
  616.                   endif
  618.                   $F_A60 = maxnodes_four
  618.                   if ( maxnodes_four > 0 ) then
  618.                      $I_L618_128 = 0
  618. !dir$ ivdep
  618.                      do
  618.                         mlast1(1 + $I_L618_128) = 0
  618.                         $I_L618_128 = 1 + $I_L618_128
  618.                         if ( $I_L618_128 >= $F_A60 ) exit
  618.                      enddo
  618.                   endif
  615.                enddo
  615.    10          continue
  627.                if ( maxnodes_four > 0 ) then
  627.                   $I_L627_90 = 0
  627. !dir$ ivdep
  627.                   do
  628.                      if ( mlast(1 + $I_L627_90) >= ( 1 + $I_L627_90 ) ) then
  629.                         $jused_S5 = ( 1 + $I_L627_90 )
  629.                         goto 20
  629.                      endif
  632.                      $I_L627_90 = 1 + $I_L627_90
  631.                      if ( $I_L627_90 >= maxnodes_four ) exit
  631.                   enddo
  631.                endif
  631.    20          continue
  633.                if ( -1 + $jused_S5 > 0 ) then
  633.                   $I_L633_92 = 0
  633. !dir$ ivdep
  633.                   do
  634.                      mlast(1 + $I_L633_92) = ( 1 + $I_L633_92 )
  635.                      npoints(1 + $I_L633_92) = (imaxperj%base_addr)(1 + $I_L633_92, 0)
  636.                      $I_L633_92 = 1 + $I_L633_92
  633.                      if ( $I_L633_92 >= -1 + $jused_S5 ) exit
  633.                   enddo
  633.                endif
  637.                npoints($jused_S5) = 0
  638.                $t_S13 = mlast($jused_S5)
  638.                if ( $t_S13 + -$jused_S5 >= 0 ) then
  639.                   $SC_npoints_I0 = 0
  638.                   $I_L638_94 = 0
  638. !dir$ ivdep
  638.                   do
  639.                      $SC_npoints_I0 = $SC_npoints_I0 + (imaxperj%base_addr)($jused_S5 + $I_L638_94, 0)
  640.                      $I_L638_94 = 1 + $I_L638_94
  638.                      if ( $I_L638_94 >= $t_S13 + -$jused_S5 + 1 ) exit
  638.                   enddo
  639.                   npoints($jused_S5) = $SC_npoints_I0
  639.                endif
  641.                $F_A61 = maxnodes_four
  641.                if ( maxnodes_four > 0 ) then
  641.                   $I_L641_130 = 0
  641. !dir$ ivdep
  641.                   do
  641.                      mfirst(1 + $I_L641_130) = 0
  641.                      $I_L641_130 = 1 + $I_L641_130
  641.                      if ( $I_L641_130 >= $F_A61 ) exit
  641.                   enddo
  641.                endif
  642.                if ( npoints(1) > 0 ) then
  642.                   mfirst(1) = 1
  642.                endif
  643.                if ( -2 + maxnodes_four >= 0 ) then
  643.                   $I_L643_96 = 0
  643. !dir$ ivdep
  643.                   do
  644.                      if ( npoints(2 + $I_L643_96) > 0 ) then
  644.                         mfirst(2 + $I_L643_96) = 1 + mlast(1 + $I_L643_96)
  644.                      endif
  645.                      $I_L643_96 = 1 + $I_L643_96
  644.                      if ( $I_L643_96 >= -1 + maxnodes_four ) exit
  644.                   enddo
  646.                   do
  647.                      $improved_S17 = .false.
  648.                      $I_L648_98 = 0
  648.                      do
  649.                         if ( npoints(1 + $I_L648_98) + -npoints(2 + $I_L648_98) > (imaxperj%base_addr)(mlast(1 + $I_L648_98), 0) ) then
  650.                            npoints(1 + $I_L648_98) = npoints(1 + $I_L648_98) + -(imaxperj%base_addr)(mlast(1 + $I_L648_98), 0)
  651.                            $LD_SPLT_P10 = npoints(2 + $I_L648_98)
  651.                            npoints(2 + $I_L648_98) = $LD_SPLT_P10 + (imaxperj%base_addr)(mlast(1 + $I_L648_98), 0)
  652.                            if ( mlast(2 + $I_L648_98) == 0 ) then
  652.                               mlast(2 + $I_L648_98) = mlast(1 + $I_L648_98)
  652.                            endif
  653.                            mlast(1 + $I_L648_98) = -1 + mlast(1 + $I_L648_98)
  654.                            $improved_S17 = .true.
  655.                         else if ( npoints(2 + $I_L648_98) + -npoints(1 + $I_L648_98) > (imaxperj%base_addr)(mfirst(2 + $I_L648_98), 0) ) then
  656.                            $LD_SPLT_P11 = npoints(1 + $I_L648_98)
  656.                            npoints(1 + $I_L648_98) = $LD_SPLT_P11 + (imaxperj%base_addr)(mfirst(2 + $I_L648_98), 0)
  657.                            $LD_SPLT_P12 = npoints(2 + $I_L648_98)
  657.                            npoints(2 + $I_L648_98) = $LD_SPLT_P12 + -(imaxperj%base_addr)(mfirst(2 + $I_L648_98), 0)
  658.                            mlast(1 + $I_L648_98) = mfirst(2 + $I_L648_98)
  659.                            mfirst(2 + $I_L648_98) = 1 + mfirst(2 + $I_L648_98)
  660.                            if ( mfirst(1 + $I_L648_98) == 0 ) then
  660.                               mfirst(1 + $I_L648_98) = mlast(1 + $I_L648_98)
  660.                            endif
  661.                            $improved_S17 = .true.
  661.                         endif
  663.                         $I_L648_98 = 1 + $I_L648_98
  662.                         if ( $I_L648_98 >= -1 + maxnodes_four ) exit
  662.                      enddo
  663.                      if ( $improved_S17 == 0 ) exit
  663.                   enddo
  663.                endif
  663.                goto 30
  663.             endif
  663.          else
  669.             $nlp_S18 = jmax / maxnodes_four
  671.             if ( maxnodes_four + -jmax + maxnodes_four * $nlp_S18 > 0 ) then
  674.                $SC_imaxperj_I1 = (imaxperj%base_addr)(1, 0)
  671.                $I_L671_84 = 0
  671. !dir$ ivdep
  671.                do
  672.                   mfirst(1 + $I_L671_84) = ( 1 + $nlp_S18 * $I_L671_84 )
  673.                   mlast(1 + $I_L671_84) = ( $nlp_S18 + $nlp_S18 * $I_L671_84 )
  674.                   npoints(1 + $I_L671_84) = $nlp_S18 * $SC_imaxperj_I1
  675.                   $I_L671_84 = 1 + $I_L671_84
  671.                   if ( $I_L671_84 >= ( maxnodes_four + -jmax + maxnodes_four * $nlp_S18 ) ) exit
  671.                enddo
  671.             endif
  676.             if ( jmax + -( maxnodes_four * $nlp_S18 ) > 0 ) then
  679.                $SC_imaxperj_I1 = (imaxperj%base_addr)(1, 0)
  676.                $mlast_WR0_R0 = mlast(maxnodes_four + -jmax + maxnodes_four * $nlp_S18)
  676.                $I_L676_144 = 0
  676. !dir$ unroll 4
  676.                do
  677.                   mfirst(maxnodes_four + $I_L676_144 + -jmax + maxnodes_four * $nlp_S18 + 1) = ( $mlast_WR0_R0 + $I_L676_144 + $nlp_S18 * $I_L676_144 + 1 )
  678.                   mlast(maxnodes_four + $I_L676_144 + -jmax + maxnodes_four * $nlp_S18 + 1) = ( $nlp_S18 + $mlast_WR0_R0 + $I_L676_144 + $nlp_S18 * $I_L676_144 + 1 )
  679.                   npoints(maxnodes_four + $I_L676_144 + -jmax + maxnodes_four * $nlp_S18 + 1) = $SC_imaxperj_I1 + $nlp_S18 * $SC_imaxperj_I1
  680.                   $I_L676_144 = 1 + $I_L676_144
  676.                   if ( $I_L676_144 >= ( jmax + -( maxnodes_four * $nlp_S18 ) ) ) exit
  676.                enddo
  676.             endif
  676.    30       continue
  684.             $Reduc_A62 = .false.
  684.             $F_A64 = maxnodes_four
  684.             if ( maxnodes_four > 0 ) then
  684.                $I_L684_132 = 0
  684. !dir$ ivdep
  684.                do
  684.                   if ( npoints(1 + $I_L684_132) <= 0 ) then
  684.                      $Reduc_A62 = .true.
  684.                      goto 40
  684.                   endif
  684.                   $I_L684_132 = 1 + $I_L684_132
  684.                   if ( $I_L684_132 >= $F_A64 ) exit
  684.                enddo
  684.             endif
  684.    40       continue
  684.             if ( $Reduc_A62 ) then
  685.                 _substr(t$197,1,85) = '**(RegisterOtherSizes)** Too many MPI processes; there are processes with 0 latitudes'
  685.                call fatalerror(  _substr(t$197,1,85) )
  687.                 _substr(t$198,1,4) = ' '
  687.                call _stop(  _substr(t$198,1,1) )
  687.             else
  690.                myfirstlat_f = mfirst(1 + myid_four)
  691.                mylastlat_f = mlast(1 + myid_four)
  693.                $F_A65 = jmax
  693.                if ( jmax > 0 ) then
  693.                   $I_L693_134 = 0
  693. !dir$ ivdep
  693.                   do
  693.                      (nodehasj_f%base_addr)(1 + $I_L693_134, 0) = -1
  693.                      $I_L693_134 = 1 + $I_L693_134
  693.                      if ( $I_L693_134 >= $F_A65 ) exit
  693.                   enddo
  693.                endif
  694.                if ( maxnodes_four > 0 ) then
  694.                   $I_L694_151 = 0
  694.                   do
  695.                      (firstlatinproc_f%base_addr)($I_L694_151, 0) = mfirst(1 + $I_L694_151)
  696.                      (lastlatinproc_f%base_addr)($I_L694_151, 0) = mlast(1 + $I_L694_151)
  697.                      (nlatsinproc_f%base_addr)($I_L694_151, 0) = mlast(1 + $I_L694_151) + -mfirst(1 + $I_L694_151) + 1
  698.                      $t_S23 = (firstlatinproc_f%base_addr)($I_L694_151, 0)
  698.                      $t_S24 = (lastlatinproc_f%base_addr)($I_L694_151, 0)
  698.                      if ( $t_S24 + -$t_S23 >= 0 ) then
  698.                         $I_L698_100 = 0
  698. !dir$ ivdep
  698.                         do
  699.                            (nodehasj_f%base_addr)($t_S23 + $I_L698_100, 0) = $I_L694_151
  700.                            $I_L698_100 = 1 + $I_L698_100
  698.                            if ( $I_L698_100 >= $t_S24 + -$t_S23 + 1 ) exit
  698.                         enddo
  698.                      endif
  701.                      $I_L694_151 = 1 + $I_L694_151
  700.                      if ( $I_L694_151 >= maxnodes_four ) exit
  700.                   enddo
  700.                endif
  702.                $Reduc_A66 = 0xffffffff80000001
  702.                $F_A68 = maxnodes_four
  702.                if ( maxnodes_four > 0 ) then
  702.                   $I_L702_136 = 0
  702. !dir$ ivdep
  702.                   do
  702.                      $Reduc_A66 = max( $Reduc_A66, (nlatsinproc_f%base_addr)($I_L702_136, 0) )
  702.                      $I_L702_136 = 1 + $I_L702_136
  702.                      if ( $I_L702_136 >= $F_A68 ) exit
  702.                   enddo
  702.                endif
  702.                jmaxlocal_f = $Reduc_A66
  703.                myjmax_f = mylastlat_f + -myfirstlat_f + 1
  705.                jminperm%header%a_contig = 1
  705.                jminperm%dim_1%LB = 1
  705.                jminperm%dim_1%EX = ( max( 0, mmax ) )
  705.                jminperm%dim_1%SM = 1
  705.                $_allo_P8(0) = 0x1000000000001L
  705.                $_allo_P8(1) = loc( jminperm )
  705.                call __allocate( $_allo_P8, 0, 0, _fcd( 0, 0 ) )
  706.                jmaxperm%header%a_contig = 1
  706.                jmaxperm%dim_1%LB = 1
  706.                jmaxperm%dim_1%EX = ( max( 0, mmax ) )
  706.                jmaxperm%dim_1%SM = 1
  706.                $_allo_P9(0) = 0x1000000000001L
  706.                $_allo_P9(1) = loc( jmaxperm )
  706.                call __allocate( $_allo_P9, 0, 0, _fcd( 0, 0 ) )
  707.                $F_A69 = mmax
  707.                if ( mmax > 0 ) then
  707.                   $I_L707_138 = 0
  707. !dir$ ivdep
  707.                   do
  707.                      (jminperm%base_addr)(1 + $I_L707_138, 0) = jmaxhalf
  707.                      $I_L707_138 = 1 + $I_L707_138
  707.                      if ( $I_L707_138 >= $F_A69 ) exit
  707.                   enddo
  707.                endif
  708.                if ( jmaxhalf > 0 ) then
  708.                   $I_L708_153 = 0
  708.                   do
  709.                      $m_S27 = (mmaxperj%base_addr)(1 + $I_L708_153, 0)
  710.                      $F_A70 = $m_S27
  710.                      if ( $m_S27 > 0 ) then
  710.                         $I_L710_140 = 0
  710. !dir$ ivdep
  710.                         do
  710.                            (jminperm%base_addr)(1 + $I_L710_140, 0) = min( (jminperm%base_addr)(1 + $I_L710_140, 0), ( 1 + $I_L708_153 ) )
  710.                            $I_L710_140 = 1 + $I_L710_140
  710.                            if ( $I_L710_140 >= $F_A70 ) exit
  710.                         enddo
  710.                      endif
  711.                      $I_L708_153 = 1 + $I_L708_153
  708.                      if ( $I_L708_153 >= jmaxhalf ) exit
  708.                   enddo
  708.                endif
  712.                $F_A71 = mmax
  712.                if ( mmax > 0 ) then
  712.                   $I_L712_142 = 0
  712. !dir$ ivdep
  712.                   do
  712.                      (jmaxperm%base_addr)(1 + $I_L712_142, 0) = jmax + -(jminperm%base_addr)(1 + $I_L712_142, 0) + 1
  712.                      $I_L712_142 = 1 + $I_L712_142
  712.                      if ( $I_L712_142 >= $F_A71 ) exit
  712.                   enddo
  712.                endif
  529.                _free( t$109 )
  529.             endif
  529.          endif
  529.       endif
  721.       return
  721.       end
  721.       
  813.       
  813.       subroutine dumpsizes
  738.       t$212 = unitdump
  738.       t$213(1) = 0x100000000000000L
  738. !dir$ suppress t$212
  738.       t$213(2) = int( loc( t$212 ), 8 )
  738.       t$213(3) = 0
  738.       t$213(5) = 0
  738.       t$213(6) = 0
  738.       t$213(7) = 0
  738. !dir$ suppress op
  738.       t$213(8) = int( loc( op ), 8 )
  738.       t$213(9) = 0
  738.       t$213(10) = 0
  738.       t$213(11) = 0
  738.       t$213(13) = 0
  738.       t$213(15) = 0
  738.       t$213(17) = 0
  738.       t$213(19) = 0
  738.       t$213(21) = 0
  738.       t$213(23) = 0
  738.       t$213(25) = 0
  738.       t$213(26) = 0
  738.       t$213(27) = 0
  738.       t$213(29) = 0
  738.       t$213(31) = 0
  738.       t$213(33) = 0
  738.       t$213(35) = 0
  738.       t$213(37) = 0
  738.       t$213(39) = 0
  738.       t$213(41) = 0
  738.       t$213(43) = 0
  738.       t$213(44) = 0
  738.       t$213(45) = 0x2000500000000L
  738.       t$213(46) = 0
  738.       t$213(47) = 0
  738.       t$213(48) = 0
  738.       t$213(49) = 0
  738.       t$213(50) = 0
  738.       t$213(52) = 0
  738.       t$213(54) = 0
  738.       t$213(56) = 0
  738.       t$213(57) = 0
  738.       t$213(58) = 0
  738.       t$213(60) = 0
  738.       t$213(61) = 0
  738.       t$213(62) = 0
  738.       t$213(63) = 0
  738.       t$213(64) = 0
  738.       t$213(66) = 0
  738.       t$213(68) = 0
  738.       t$213(69) = 0
  738.       t$213(70) = 0
  738.       t$211 = _inquire( t$213 )
  739.       if ( op == 0 ) then
  740.           _substr(t$214,1,66) = '**(DumpSizes)** unitDump not opened; CreateParallelism not invoked'
  740.          call fatalerror(  _substr(t$214,1,66) )
  740.       endif
  745.       if ( mmax == -1 ) then
  746.          $Unit_temp_O0 = unitdump
  746.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, t$7,  _substr(t$6,1,24), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(DumpSizes)**', 0x800600000000L ) ) )
  746.       else
  748.          _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$9,  _substr(t$8,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( mmax, 0x2000200000000L ) ) )
  749.          _fwrite( _clist( 0, 0, 3,  _substr(c2,1,10), Null_Arg, Null_Arg, t$11,  _substr(t$10,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( nmax, 0x2000200000000L ) ) )
  750.          _fwrite( _clist( 0, 0, 3,  _substr(c3,1,10), Null_Arg, Null_Arg, t$13,  _substr(t$12,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( mnmax, 0x2000200000000L ) ) )
  751.          _fwrite( _clist( 0, 0, 3,  _substr(c4,1,10), Null_Arg, Null_Arg, t$15,  _substr(t$14,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( mnextmax, 0x2000200000000L ) ) )
  753.          _f90_adjustl(  _substr(t$215,1,10),  _substr(c1,1,10) )
  752.          t$219 = _ltrim(  _substr(t$215,1,10) )
  753.          t$221 = int( _alloc( max( 0, t$219 ) ), 8 )
  753.           _substr(t$220,1,max( 0, t$219 )) =  _substr(t$215,1,_ltrim(  _substr(t$215,1,10) ))
  753.          _f90_adjustl(  _substr(t$216,1,10),  _substr(c2,1,10) )
  752.          t$222 = _ltrim(  _substr(t$216,1,10) )
  753.          t$224 = int( _alloc( max( 0, t$222 ) ), 8 )
  753.           _substr(t$223,1,max( 0, t$222 )) =  _substr(t$216,1,_ltrim(  _substr(t$216,1,10) ))
  753.          _f90_adjustl(  _substr(t$217,1,10),  _substr(c3,1,10) )
  752.          t$225 = _ltrim(  _substr(t$217,1,10) )
  753.          t$227 = int( _alloc( max( 0, t$225 ) ), 8 )
  753.           _substr(t$226,1,max( 0, t$225 )) =  _substr(t$217,1,_ltrim(  _substr(t$217,1,10) ))
  754.          _f90_adjustl(  _substr(t$218,1,10),  _substr(c4,1,10) )
  752.          t$228 = _ltrim(  _substr(t$218,1,10) )
  754.          t$230 = int( _alloc( max( 0, t$228 ) ), 8 )
  754.           _substr(t$229,1,max( 0, t$228 )) =  _substr(t$218,1,_ltrim(  _substr(t$218,1,10) ))
  752.          $Unit_temp_O1 = unitdump
  752.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$17,  _substr(t$16,1,55), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(DumpSizes)**', 0x800600000000L ), _iotype(  _substr(t$220,1,max( 0, t$219 )), 0x800600000000L ), _iotype(  _substr(t$223,1,max( 0, t$222 )), 0x800600000000L ), _iotype(  _substr(t$226,1,max( 0, t$225 )), 0x800600000000L ), _iotype(  _substr(t$229,1,max( 0, t$228 )), 0x800600000000L ) ) )
  754.          _free( t$230 )
  753.          _free( t$227 )
  753.          _free( t$224 )
  753.          _free( t$221 )
  755.          _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$19,  _substr(t$18,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( jmax, 0x2000200000000L ) ) )
  756.          _fwrite( _clist( 0, 0, 3,  _substr(c2,1,10), Null_Arg, Null_Arg, t$21,  _substr(t$20,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( jmaxhalf, 0x2000200000000L ) ) )
  758.          _f90_adjustl(  _substr(t$231,1,10),  _substr(c1,1,10) )
  757.          t$233 = _ltrim(  _substr(t$231,1,10) )
  758.          t$235 = int( _alloc( max( 0, t$233 ) ), 8 )
  758.           _substr(t$234,1,max( 0, t$233 )) =  _substr(t$231,1,_ltrim(  _substr(t$231,1,10) ))
  758.          _f90_adjustl(  _substr(t$232,1,10),  _substr(c2,1,10) )
  757.          t$236 = _ltrim(  _substr(t$232,1,10) )
  758.          t$238 = int( _alloc( max( 0, t$236 ) ), 8 )
  758.           _substr(t$237,1,max( 0, t$236 )) =  _substr(t$232,1,_ltrim(  _substr(t$232,1,10) ))
  757.          $Unit_temp_O2 = unitdump
  757.          _fwrite( _clist( 0, 0, 3, $Unit_temp_O2, Null_Arg, Null_Arg, t$23,  _substr(t$22,1,30), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(DumpSizes)**', 0x800600000000L ), _iotype(  _substr(t$234,1,max( 0, t$233 )), 0x800600000000L ), _iotype(  _substr(t$237,1,max( 0, t$236 )), 0x800600000000L ) ) )
  758.          _free( t$238 )
  758.          _free( t$235 )
  759.          _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$25,  _substr(t$24,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( imax, 0x2000200000000L ) ) )
  760.          _fwrite( _clist( 0, 0, 3,  _substr(c2,1,10), Null_Arg, Null_Arg, t$27,  _substr(t$26,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( kmax, 0x2000200000000L ) ) )
  761.          _fwrite( _clist( 0, 0, 3,  _substr(c3,1,10), Null_Arg, Null_Arg, t$29,  _substr(t$28,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ijmax, 0x2000200000000L ) ) )
  762.          if ( ijmax == -1 ) then
  764.             _f90_adjustl(  _substr(t$239,1,10),  _substr(c1,1,10) )
  763.             t$241 = _ltrim(  _substr(t$239,1,10) )
  764.             t$243 = int( _alloc( max( 0, t$241 ) ), 8 )
  764.              _substr(t$242,1,max( 0, t$241 )) =  _substr(t$239,1,_ltrim(  _substr(t$239,1,10) ))
  764.             _f90_adjustl(  _substr(t$240,1,10),  _substr(c2,1,10) )
  763.             t$244 = _ltrim(  _substr(t$240,1,10) )
  764.             t$246 = int( _alloc( max( 0, t$244 ) ), 8 )
  764.              _substr(t$245,1,max( 0, t$244 )) =  _substr(t$240,1,_ltrim(  _substr(t$240,1,10) ))
  763.             $Unit_temp_O3 = unitdump
  763.             _fwrite( _clist( 0, 0, 3, $Unit_temp_O3, Null_Arg, Null_Arg, t$31,  _substr(t$30,1,26), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(DumpSizes)**', 0x800600000000L ), _iotype(  _substr(t$242,1,max( 0, t$241 )), 0x800600000000L ), _iotype(  _substr(t$245,1,max( 0, t$244 )), 0x800600000000L ) ) )
  764.             _free( t$246 )
  764.             _free( t$243 )
  765.             $Unit_temp_O4 = unitdump
  765.             _fwrite( _clist( 0, 0, 3, $Unit_temp_O4, Null_Arg, Null_Arg, t$33,  _substr(t$32,1,30), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(DumpSizes)**', 0x800600000000L ) ) )
  765.          else
  768.             _f90_adjustl(  _substr(t$247,1,10),  _substr(c1,1,10) )
  767.             t$250 = _ltrim(  _substr(t$247,1,10) )
  768.             t$252 = int( _alloc( max( 0, t$250 ) ), 8 )
  768.              _substr(t$251,1,max( 0, t$250 )) =  _substr(t$247,1,_ltrim(  _substr(t$247,1,10) ))
  768.             _f90_adjustl(  _substr(t$248,1,10),  _substr(c2,1,10) )
  767.             t$253 = _ltrim(  _substr(t$248,1,10) )
  768.             t$255 = int( _alloc( max( 0, t$253 ) ), 8 )
  768.              _substr(t$254,1,max( 0, t$253 )) =  _substr(t$248,1,_ltrim(  _substr(t$248,1,10) ))
  768.             _f90_adjustl(  _substr(t$249,1,10),  _substr(c3,1,10) )
  767.             t$256 = _ltrim(  _substr(t$249,1,10) )
  768.             t$258 = int( _alloc( max( 0, t$256 ) ), 8 )
  768.              _substr(t$257,1,max( 0, t$256 )) =  _substr(t$249,1,_ltrim(  _substr(t$249,1,10) ))
  767.             $Unit_temp_O5 = unitdump
  767.             _fwrite( _clist( 0, 0, 3, $Unit_temp_O5, Null_Arg, Null_Arg, t$35,  _substr(t$34,1,39), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(DumpSizes)**', 0x800600000000L ), _iotype(  _substr(t$251,1,max( 0, t$250 )), 0x800600000000L ), _iotype(  _substr(t$254,1,max( 0, t$253 )), 0x800600000000L ), _iotype(  _substr(t$257,1,max( 0, t$256 )), 0x800600000000L ) ) )
  768.             _free( t$258 )
  768.             _free( t$255 )
  768.             _free( t$252 )
  772.              _substr(t$259,1,15) = '**(DumpSizes)**'
  772.              _substr(t$260,1,31) = ' latitude domain decomposition:'
  772.             call msgdump(  _substr(t$259,1,15),  _substr(t$260,1,31) )
  773.             _fwrite( _clist( 0, 0, 3,  _substr(c1,1,10), Null_Arg, Null_Arg, t$37,  _substr(t$36,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( myjmax_f, 0x2000200000000L ) ) )
  774.             _fwrite( _clist( 0, 0, 3,  _substr(c2,1,10), Null_Arg, Null_Arg, t$39,  _substr(t$38,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( myfirstlat_f, 0x2000200000000L ) ) )
  775.             _fwrite( _clist( 0, 0, 3,  _substr(c3,1,10), Null_Arg, Null_Arg, t$41,  _substr(t$40,1,5), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( mylastlat_f, 0x2000200000000L ) ) )
  776.             _f90_adjustl(  _substr(t$261,1,10),  _substr(c1,1,10) )
  777.             _f90_adjustl(  _substr(t$262,1,10),  _substr(c2,1,10) )
  778.             _f90_adjustl(  _substr(t$263,1,10),  _substr(c3,1,10) )
  776.              _substr(t$264,1,15) = '**(DumpSizes)**'
  776.             t$265 = ( _ltrim(  _substr(t$261,1,10) ) ) + ( _ltrim(  _substr(t$262,1,10) ) ) + ( _ltrim(  _substr(t$263,1,10) ) ) + 39
  778.             t$267 = int( _alloc( max( 0, t$265 ) ), 8 )
  778.              _substr(t$266,1,max( 0, t$265 )) = //( ' myJmax_f=', //(  _substr(t$261,1,_ltrim(  _substr(t$261,1,10) )), //( '; myFirstLat_f=', //(  _substr(t$262,1,_ltrim(  _substr(t$262,1,10) )), //( '; myLastLat_f=',  _substr(t$263,1,_ltrim(  _substr(t$263,1,10) )) ) ) ) ) )
  776.             call msgdump(  _substr(t$264,1,15),  _substr(t$266,1,max( 0, t$265 )) )
  778.             _free( t$267 )
  782.             $nnodes_S0 = ( max( 0, firstlatinproc_f%dim_1%EX ) )
  783.              _substr(t$268,1,15) = '**(DumpSizes)**'
  783.              _substr(t$269,1,25) = ' latitudes per processor:'
  783.             call msgdump(  _substr(t$268,1,15),  _substr(t$269,1,25) )
  784.              _substr(t$270,1,15) = '**(DumpSizes)**'
  784.              _substr(t$271,1,48) = ' firstLatInProc_f:lastLatInProc_f(nLatsInProc_f)'
  784.             call msgdump(  _substr(t$270,1,15),  _substr(t$271,1,48) )
  785.             if ( $nnodes_S0 > 0 ) then
  785.                $t_S1 = ( 4 + $nnodes_S0 ) / 5
  785.                $I_L785_20 = 0
  785.                do
  785.                   pstart = ( 5 * $I_L785_20 )
  786.                   pend = min( ( 4 + 5 * $I_L785_20 ), -1 + $nnodes_S0 )
  787.                    _substr(line,1,256) = ' procs XXXX to XXXX ='
  788.                   _fwrite( _clist( 0, 0, 3,  _substr(line,8,4), Null_Arg, Null_Arg, t$43,  _substr(t$42,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( pstart, 0x2000200000000L ) ) )
  789.                   _fwrite( _clist( 0, 0, 3,  _substr(line,16,4), Null_Arg, Null_Arg, t$45,  _substr(t$44,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( pend, 0x2000200000000L ) ) )
  790.                   if ( min( ( 4 + 5 * $I_L785_20 ), -1 + $nnodes_S0 ) + -( 5 * $I_L785_20 ) >= 0 ) then
  790.                      $I_L790_16 = 0
  790.                      do
  793.                         if ( ( $I_L790_16 + 5 * $I_L785_20 ) < firstlatinproc_f%dim_1%LB .or. ( $I_L790_16 + 5 * $I_L785_20 ) > firstlatinproc_f%dim_1%EX + firstlatinproc_f%dim_1%LB + -1 ) then
  793.                             _substr(t$280,1,10) = 'Sizes.f90'
  793.                             _substr(t$281,1,17) = 'FIRSTLATINPROC_F'
  793.                            t$212 = firstlatinproc_f%dim_1%LB
  793.                            t$282 = firstlatinproc_f%dim_1%EX + firstlatinproc_f%dim_1%LB + -1
  793.                            t$283 = $I_L790_16 + 5 * $I_L785_20
  793.                            call _bounds_error(  _substr(t$280,1,10), 793,  _substr(t$281,1,17), 1, t$212, t$282, t$283, t$279 )
  793.                         endif
  793.                         if ( ( $I_L790_16 + 5 * $I_L785_20 ) < lastlatinproc_f%dim_1%LB .or. ( $I_L790_16 + 5 * $I_L785_20 ) > lastlatinproc_f%dim_1%LB + lastlatinproc_f%dim_1%EX + -1 ) then
  793.                             _substr(t$285,1,10) = 'Sizes.f90'
  793.                             _substr(t$286,1,16) = 'LASTLATINPROC_F'
  793.                            t$287 = lastlatinproc_f%dim_1%LB
  793.                            t$288 = lastlatinproc_f%dim_1%LB + lastlatinproc_f%dim_1%EX + -1
  793.                            t$289 = $I_L790_16 + 5 * $I_L785_20
  793.                            call _bounds_error(  _substr(t$285,1,10), 793,  _substr(t$286,1,16), 1, t$287, t$288, t$289, t$284 )
  793.                         endif
  793.                         if ( ( $I_L790_16 + 5 * $I_L785_20 ) < nlatsinproc_f%dim_1%LB .or. ( $I_L790_16 + 5 * $I_L785_20 ) > nlatsinproc_f%dim_1%LB + nlatsinproc_f%dim_1%EX + -1 ) then
  793.                             _substr(t$291,1,10) = 'Sizes.f90'
  793.                             _substr(t$292,1,14) = 'NLATSINPROC_F'
  793.                            t$293 = nlatsinproc_f%dim_1%LB
  793.                            t$294 = nlatsinproc_f%dim_1%LB + nlatsinproc_f%dim_1%EX + -1
  793.                            t$295 = $I_L790_16 + 5 * $I_L785_20
  793.                            call _bounds_error(  _substr(t$291,1,10), 793,  _substr(t$292,1,14), 1, t$293, t$294, t$295, t$290 )
  793.                         endif
  792.                         $IOitem_O6 = (firstlatinproc_f%base_addr)($I_L790_16 + 5 * $I_L785_20, 0)
  792.                         $IOitem_O7 = (lastlatinproc_f%base_addr)($I_L790_16 + 5 * $I_L785_20, 0)
  792.                         $IOitem_O8 = (nlatsinproc_f%base_addr)($I_L790_16 + 5 * $I_L785_20, 0)
  792.                         _fwrite( _clist( 0, 0, 3,  _substr(line,( 22 + 15 * $I_L790_16 ),15), Null_Arg, Null_Arg, t$47,  _substr(t$46,1,19), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O6, 0x2000200000000L ), _iotype( ':', 0x800600000000L ), _iotype( $IOitem_O7, 0x2000200000000L ), _iotype( '(', 0x800600000000L ), _iotype( $IOitem_O8, 0x2000200000000L ), _iotype( ')', 0x800600000000L ) ) )
  794.                         $I_L790_16 = 1 + $I_L790_16
  794.                         if ( $I_L790_16 >= min( ( 4 + 5 * $I_L785_20 ), -1 + $nnodes_S0 ) + -( 5 * $I_L785_20 ) + 1 ) exit
  794.                      enddo
  794.                   endif
  795.                    _substr(t$296,1,15) = '**(DumpSizes)**'
  795.                   call msgdump(  _substr(t$296,1,15),  _substr(line,1,_ltrim(  _substr(line,1,256) )) )
  796.                   $I_L785_20 = 1 + $I_L785_20
  796.                   if ( $I_L785_20 >= $t_S1 ) exit
  796.                enddo
  796.             endif
  799.              _substr(t$297,1,15) = '**(DumpSizes)**'
  799.              _substr(t$298,1,35) = ' which processor has each latitude:'
  799.             call msgdump(  _substr(t$297,1,15),  _substr(t$298,1,35) )
  800.             if ( jmax > 0 ) then
  800.                $t_S3 = ( 9 + jmax ) / 10
  800.                $I_L800_22 = 0
  800.                do
  800.                   jstart = ( 1 + 10 * $I_L800_22 )
  801.                   jend = min( jmax, ( 10 + 10 * $I_L800_22 ) )
  802.                    _substr(line,1,256) = ' nodeHasJ(    :    )='
  803.                   _fwrite( _clist( 0, 0, 3,  _substr(line,11,4), Null_Arg, Null_Arg, t$49,  _substr(t$48,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( jstart, 0x2000200000000L ) ) )
  804.                   _fwrite( _clist( 0, 0, 3,  _substr(line,16,4), Null_Arg, Null_Arg, t$51,  _substr(t$50,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( jend, 0x2000200000000L ) ) )
  805.                   $t_S2 = min( jmax, ( 10 + 10 * $I_L800_22 ) )
  805.                   if ( ( min( jmax, ( 10 + 10 * $I_L800_22 ) ) + -10 * $I_L800_22 + -1 ) >= 0 ) then
  805.                      $I_L805_18 = 0
  805.                      do
  807.                         if ( ( $I_L805_18 + 10 * $I_L800_22 + 1 ) < nodehasj_f%dim_1%LB .or. ( $I_L805_18 + 10 * $I_L800_22 + 1 ) > nodehasj_f%dim_1%LB + nodehasj_f%dim_1%EX + -1 ) then
  807.                             _substr(t$307,1,10) = 'Sizes.f90'
  807.                             _substr(t$308,1,11) = 'NODEHASJ_F'
  807.                            t$212 = nodehasj_f%dim_1%LB
  807.                            t$282 = nodehasj_f%dim_1%LB + nodehasj_f%dim_1%EX + -1
  807.                            t$283 = $I_L805_18 + 10 * $I_L800_22 + 1
  807.                            call _bounds_error(  _substr(t$307,1,10), 807,  _substr(t$308,1,11), 1, t$212, t$282, t$283, t$306 )
  807.                         endif
  807.                         $IOitem_O9 = (nodehasj_f%base_addr)($I_L805_18 + 10 * $I_L800_22 + 1, 0)
  807.                         _fwrite( _clist( 0, 0, 3,  _substr(line,( 22 + 5 * $I_L805_18 ),5), Null_Arg, Null_Arg, t$53,  _substr(t$52,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O9, 0x2000200000000L ) ) )
  808.                         $I_L805_18 = 1 + $I_L805_18
  808.                         if ( $I_L805_18 >= $t_S2 + -10 * $I_L800_22 ) exit
  808.                      enddo
  808.                   endif
  809.                    _substr(t$309,1,15) = '**(DumpSizes)**'
  809.                   call msgdump(  _substr(t$309,1,15),  _substr(line,1,_ltrim(  _substr(line,1,256) )) )
  810.                   $I_L800_22 = 1 + $I_L800_22
  810.                   if ( $I_L800_22 >= $t_S3 ) exit
  810.                enddo
  810.             endif
  810.          endif
  810.       endif
  813.       return
  813.       end
  813.       
 1220.       
 1220.       subroutine spectraldomaindecomp
  840.       ini%header%el_len = 32
  840.       ini%header%assoc = 0
  840.       ini%header%ptr_alloc = 0
  840.       ini%header%p_or_a = 2
  840.       ini%header%a_contig = 1
  840.       ini%header%dv_versn = 2
  840.       ini%header%dv_smunit = 32
  840.       ini%header%d_type = 0
  840.       ini%header%n_params = 0
  840.       ini%header%pad_codim = 0
  840.       ini%header%n_codim = 0
  840.       ini%header%pad_dim = 0
  840.       ini%header%n_dim = 1
  840.       ini%header%d_type_idx = 10
  840.       ini%header%typ_code = 131074
  840.       ini%header%orig_base = 0
  840.       ini%header%orig_size = 0
  840.       ini%dim_1%LB = 1
  840.       ini%dim_1%EX = 0
  840.       ini%dim_1%SM = 1
  823.       sends%header%el_len = 32
  823.       sends%header%assoc = 0
  823.       sends%header%ptr_alloc = 0
  823.       sends%header%p_or_a = 2
  823.       sends%header%a_contig = 1
  823.       sends%header%dv_versn = 2
  823.       sends%header%dv_smunit = 32
  823.       sends%header%d_type = 0
  823.       sends%header%n_params = 0
  823.       sends%header%pad_codim = 0
  823.       sends%header%n_codim = 0
  823.       sends%header%pad_dim = 0
  823.       sends%header%n_dim = 1
  823.       sends%header%d_type_idx = 10
  823.       sends%header%typ_code = 131074
  823.       sends%header%orig_base = 0
  823.       sends%header%orig_size = 0
  823.       sends%dim_1%LB = 1
  823.       sends%dim_1%EX = 0
  823.       sends%dim_1%SM = 1
  853.       $mmaxlocal_S0 = mmax / maxnodes_four
  854.       mmaxlocal = $mmaxlocal_S0 + ( mmax + -( maxnodes_four * $mmaxlocal_S0 ) /= 0 )
  859.       msperproc%header%a_contig = 1
  859.       msperproc%dim_1%LB = 0
  859.       msperproc%dim_1%EX = _zla( 0, maxnodes_four )
  859.       msperproc%dim_1%SM = 1
  859.       $_allo_P2(0) = 0x1000000000001L
  859.       $_allo_P2(1) = loc( msperproc )
  859.       call __allocate( $_allo_P2, ierr, 0x2000200000000L, _fcd( 0, 0 ) )
  860.       if ( ierr /= 0 ) then
  861.          _fwrite( _clist( 0, 0, 3,  _substr(c0,1,8), Null_Arg, Null_Arg, t$55,  _substr(t$54,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ierr, 0x2000200000000L ) ) )
  862.          _f90_adjustl(  _substr(t$310,1,8),  _substr(c0,1,8) )
  862.          t$311 = 60 + ( _ltrim(  _substr(t$310,1,8) ) )
  862.          t$313 = int( _alloc( _zla( 0, t$311 ) ), 8 )
  862.           _substr(t$312,1,_zla( 0, t$311 )) = //( '**(SpectralDomainDecomp)** allocate msPerProc returned stat=',  _substr(t$310,1,_ltrim(  _substr(t$310,1,8) )) )
  862.          call fatalerror(  _substr(t$312,1,_zla( 0, t$311 )) )
  862.          _free( t$313 )
  862.       endif
  869.       msinproc%header%a_contig = 1
  869.       msinproc%dim_1%LB = 1
  869.       msinproc%dim_1%EX = _zla( 0, mmaxlocal )
  869.       msinproc%dim_1%SM = 1
  869.       msinproc%dim_2%LB = 0
  869.       msinproc%dim_2%EX = _zla( 0, maxnodes_four )
  869.       msinproc%dim_2%SM = _zla( 0, mmaxlocal )
  869.       $_allo_P3(0) = 0x1000000000001L
  869.       $_allo_P3(1) = loc( msinproc )
  869.       call __allocate( $_allo_P3, ierr, 0x2000200000000L, _fcd( 0, 0 ) )
  870.       if ( ierr /= 0 ) then
  871.          _fwrite( _clist( 0, 0, 3,  _substr(c0,1,8), Null_Arg, Null_Arg, t$57,  _substr(t$56,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ierr, 0x2000200000000L ) ) )
  872.          _f90_adjustl(  _substr(t$314,1,8),  _substr(c0,1,8) )
  872.          t$315 = 59 + ( _ltrim(  _substr(t$314,1,8) ) )
  872.          t$317 = int( _alloc( _zla( 0, t$315 ) ), 8 )
  872.           _substr(t$316,1,_zla( 0, t$315 )) = //( '**(SpectralDomainDecomp)** allocate msInProc returned stat=',  _substr(t$314,1,_ltrim(  _substr(t$314,1,8) )) )
  872.          call fatalerror(  _substr(t$316,1,_zla( 0, t$315 )) )
  872.          _free( t$317 )
  872.       endif
  881.       nodehasm%header%a_contig = 1
  881.       nodehasm%dim_1%LB = 1
  881.       nodehasm%dim_1%EX = _zla( 0, mmax )
  881.       nodehasm%dim_1%SM = 1
  881.       nodehasm%dim_2%LB = 1
  881.       nodehasm%dim_2%EX = _zla( 0, ngroups_four )
  881.       nodehasm%dim_2%SM = _zla( 0, mmax )
  881.       $_allo_P4(0) = 0x1000000000001L
  881.       $_allo_P4(1) = loc( nodehasm )
  881.       call __allocate( $_allo_P4, ierr, 0x2000200000000L, _fcd( 0, 0 ) )
  882.       if ( ierr /= 0 ) then
  883.          _fwrite( _clist( 0, 0, 3,  _substr(c0,1,8), Null_Arg, Null_Arg, t$59,  _substr(t$58,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ierr, 0x2000200000000L ) ) )
  884.          _f90_adjustl(  _substr(t$318,1,8),  _substr(c0,1,8) )
  884.          t$319 = 59 + ( _ltrim(  _substr(t$318,1,8) ) )
  884.          t$321 = int( _alloc( _zla( 0, t$319 ) ), 8 )
  884.           _substr(t$320,1,_zla( 0, t$319 )) = //( '**(SpectralDomainDecomp)** allocate nodeHasM returned stat=',  _substr(t$318,1,_ltrim(  _substr(t$318,1,8) )) )
  884.          call fatalerror(  _substr(t$320,1,_zla( 0, t$319 )) )
  884.          _free( t$321 )
  884.       endif
  889.       if ( ngroups_four > 0 ) then
  889.          $I_L889_268 = 0
  889.          do
  890.             $maxn_S2 = (npperg_four%base_addr)(1 + $I_L889_268, 0)
  892.             if ( ( mmax /= 1 .and. xor( 2 * $maxn_S2, -1 + mmax ) < 0 ) == 0 ) then
  892.                $t_S6 = ( mmax + 2 * $maxn_S2 + -1 ) / ( 2 * $maxn_S2 )
  892.                $I_L892_244 = 0
  892.                do
  894.                   if ( ( min( mmax, ( $maxn_S2 + $maxn_S2 * $I_L892_244 * 2 ) ) + $maxn_S2 * $I_L892_244 * -2 + -1 ) >= 0 ) then
  894.                      $I_L894_166 = 0
  894. !dir$ ivdep
  894.                      do
  895.                         (nodehasm%base_addr)($I_L894_166 + $maxn_S2 * $I_L892_244 * 2 + 1, 1 + $I_L889_268, 0) = $I_L894_166
  896.                         $I_L894_166 = 1 + $I_L894_166
  894.                         if ( $I_L894_166 >= min( mmax, ( $maxn_S2 + $maxn_S2 * $I_L892_244 * 2 ) ) + $maxn_S2 * $I_L892_244 * -2 ) exit
  894.                      enddo
  894.                   endif
  898.                   if ( ( min( mmax, ( 2 * $maxn_S2 + $maxn_S2 * $I_L892_244 * 2 ) ) + -$maxn_S2 + $maxn_S2 * $I_L892_244 * -2 ) > 0 ) then
  898.                      $I_L898_168 = 0
  898. !dir$ ivdep
  898.                      do
  899.                         (nodehasm%base_addr)($maxn_S2 + $I_L898_168 + $maxn_S2 * $I_L892_244 * 2 + 1, 1 + $I_L889_268, 0) = ( $maxn_S2 + -$I_L898_168 + -1 )
  900.                         $I_L898_168 = 1 + $I_L898_168
  898.                         if ( $I_L898_168 >= min( mmax, ( 2 * $maxn_S2 + $maxn_S2 * $I_L892_244 * 2 ) ) + -$maxn_S2 + $maxn_S2 * $I_L892_244 * -2 ) exit
  898.                      enddo
  898.                   endif
  902.                   $I_L892_244 = 1 + $I_L892_244
  900.                   if ( $I_L892_244 >= $t_S6 ) exit
  900.                enddo
  900.             endif
  903.             $I_L889_268 = 1 + $I_L889_268
  902.             if ( $I_L889_268 >= ngroups_four ) exit
  902.          enddo
  902.       endif
  904.       havem1 = myid_four + -(nodehasm%base_addr)(1, mygroup_four, 0) == 0
  910.       havesurf = mygroup_four == 1
  912.       $F_A37 = msperproc%dim_1%EX
  912.       if ( msperproc%dim_1%EX > 0 ) then
  912.          $SC_msperproc_I50 = msperproc%dim_1%LB
  912.          $I_L912_194 = 0
  912. !dir$ ivdep
  912.          do
  912.             (msperproc%base_addr)($SC_msperproc_I50 + $I_L912_194, 0) = 0
  912.             $I_L912_194 = 1 + $I_L912_194
  912.             if ( $I_L912_194 >= $F_A37 ) exit
  912.          enddo
  912.       endif
  914.       if ( ( mmax /= 1 .and. xor( 2 * maxnodes_four, -1 + mmax ) < 0 ) == 0 ) then
  914.          $t_S12 = ( mmax + 2 * maxnodes_four + -1 ) / ( 2 * maxnodes_four )
  914.          $I_L914_246 = 0
  914.          do
  916.             if ( ( min( mmax, ( maxnodes_four + maxnodes_four * $I_L914_246 * 2 ) ) + maxnodes_four * $I_L914_246 * -2 + -1 ) >= 0 ) then
  916.                $I_L916_170 = 0
  916. !dir$ unroll 4
  916.                do
  917.                   (msperproc%base_addr)((nodehasm%base_addr)($I_L916_170 + maxnodes_four * $I_L914_246 * 2 + 1, mygroup_four, 0), 0) = 1 + (msperproc%base_addr)((nodehasm%base_addr)($I_L916_170 + maxnodes_four * $I_L914_246 * 2 + 1, mygroup_four, 0), 0)
  918.                   (msinproc%base_addr)(1 + 2 * $I_L914_246, (nodehasm%base_addr)($I_L916_170 + maxnodes_four * $I_L914_246 * 2 + 1, mygroup_four, 0), 0) = ( $I_L916_170 + maxnodes_four * $I_L914_246 * 2 + 1 )
  919.                   $I_L916_170 = 1 + $I_L916_170
  916.                   if ( $I_L916_170 >= min( mmax, ( maxnodes_four + maxnodes_four * $I_L914_246 * 2 ) ) + maxnodes_four * $I_L914_246 * -2 ) exit
  916.                enddo
  916.             endif
  921.             if ( ( min( mmax, ( 2 * maxnodes_four + maxnodes_four * $I_L914_246 * 2 ) ) + -maxnodes_four + maxnodes_four * $I_L914_246 * -2 ) > 0 ) then
  921.                $I_L921_172 = 0
  921. !dir$ unroll 4
  921.                do
  922.                   (msperproc%base_addr)((nodehasm%base_addr)(maxnodes_four + $I_L921_172 + maxnodes_four * $I_L914_246 * 2 + 1, mygroup_four, 0), 0) = 1 + (msperproc%base_addr)((nodehasm%base_addr)(maxnodes_four + $I_L921_172 + maxnodes_four * $I_L914_246 * 2 + 1, mygroup_four, 0), 0)
  923.                   (msinproc%base_addr)(2 + 2 * $I_L914_246, (nodehasm%base_addr)(maxnodes_four + $I_L921_172 + maxnodes_four * $I_L914_246 * 2 + 1, mygroup_four, 0), 0) = ( maxnodes_four + $I_L921_172 + maxnodes_four * $I_L914_246 * 2 + 1 )
  924.                   $I_L921_172 = 1 + $I_L921_172
  921.                   if ( $I_L921_172 >= min( mmax, ( 2 * maxnodes_four + maxnodes_four * $I_L914_246 * 2 ) ) + -maxnodes_four + maxnodes_four * $I_L914_246 * -2 ) exit
  921.                enddo
  921.             endif
  926.             $I_L914_246 = 1 + $I_L914_246
  924.             if ( $I_L914_246 >= $t_S12 ) exit
  924.          enddo
  924.       endif
  931.       $Reduc_A38 = .false.
  931.       $F_A40 = msperproc%dim_1%EX
  931.       if ( msperproc%dim_1%EX > 0 ) then
  931.          $I_L931_196 = 0
  931. !dir$ ivdep
  931.          do
  931.             if ( (msperproc%base_addr)(msperproc%dim_1%LB + $I_L931_196, 0) <= 0 ) then
  931.                $Reduc_A38 = .true.
  931.                goto 10
  931.             endif
  931.             $I_L931_196 = 1 + $I_L931_196
  931.             if ( $I_L931_196 >= $F_A40 ) exit
  931.          enddo
  931.       endif
  931.    10 continue
  931.       if ( $Reduc_A38 ) then
  932.           _substr(t$349,1,91) = '**(SpectralDomainDecomp)** Too many MPI processes; there are processes with 0 Fourier waves'
  932.          call fatalerror(  _substr(t$349,1,91) )
  934.           _substr(t$350,1,4) = ' '
  934.          call _stop(  _substr(t$350,1,1) )
  934.       else
  939.          mymmax = (msperproc%base_addr)(myid_four, 0)
  944.          lm2m%header%a_contig = 1
  944.          lm2m%dim_1%LB = 1
  944.          lm2m%dim_1%EX = ( max( 0, mymmax ) )
  944.          lm2m%dim_1%SM = 1
  944.          $_allo_P5(0) = 0x1000000000001L
  944.          $_allo_P5(1) = loc( lm2m )
  944.          call __allocate( $_allo_P5, ierr, 0x2000200000000L, _fcd( 0, 0 ) )
  945.          if ( ierr /= 0 ) then
  946.             _fwrite( _clist( 0, 0, 3,  _substr(c0,1,8), Null_Arg, Null_Arg, t$61,  _substr(t$60,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ierr, 0x2000200000000L ) ) )
  947.             _f90_adjustl(  _substr(t$351,1,8),  _substr(c0,1,8) )
  947.             t$352 = 55 + ( _ltrim(  _substr(t$351,1,8) ) )
  947.             t$354 = int( _alloc( max( 0, t$352 ) ), 8 )
  947.              _substr(t$353,1,max( 0, t$352 )) = //( '**(SpectralDomainDecomp)** allocate lm2m returned stat=',  _substr(t$351,1,_ltrim(  _substr(t$351,1,8) )) )
  947.             call fatalerror(  _substr(t$353,1,max( 0, t$352 )) )
  947.             _free( t$354 )
  947.          endif
  949.          $F_A41 = mymmax
  949.          if ( mymmax > 0 ) then
  949.             $SC_lm2m_I56 = lm2m%dim_1%EX
  949.             $SC_lm2m_I57 = lm2m%dim_1%LB
  949.             $SC_msinproc_I54 = msinproc%dim_2%SM
  949.             $SC_msinproc_I53 = msinproc%dim_2%EX
  949.             $SC_msinproc_I55 = msinproc%dim_2%LB
  949.             $SC_msinproc_I51 = msinproc%dim_1%EX
  949.             $SC_msinproc_I52 = msinproc%dim_1%LB
  949.             $I_L949_198 = 0
  949. !dir$ ivdep
  949.             do
  949.                (lm2m%base_addr)(1 + $I_L949_198, 0) = (msinproc%base_addr)(1 + $I_L949_198, myid_four, 0)
  949.                $I_L949_198 = 1 + $I_L949_198
  949.                if ( $I_L949_198 >= $F_A41 ) exit
  949.             enddo
  949.          endif
  962.          mnsperproc%header%a_contig = 1
  962.          mnsperproc%dim_1%LB = 0
  962.          mnsperproc%dim_1%EX = ( max( 0, maxnodes_four ) )
  962.          mnsperproc%dim_1%SM = 1
  962.          $_allo_P6(0) = 0x1000000000001L
  962.          $_allo_P6(1) = loc( mnsperproc )
  962.          call __allocate( $_allo_P6, ierr, 0x2000200000000L, _fcd( 0, 0 ) )
  963.          if ( ierr /= 0 ) then
  964.             _fwrite( _clist( 0, 0, 3,  _substr(c0,1,8), Null_Arg, Null_Arg, t$63,  _substr(t$62,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ierr, 0x2000200000000L ) ) )
  965.             _f90_adjustl(  _substr(t$355,1,8),  _substr(c0,1,8) )
  965.             t$356 = 61 + ( _ltrim(  _substr(t$355,1,8) ) )
  965.             t$358 = int( _alloc( max( 0, t$356 ) ), 8 )
  965.              _substr(t$357,1,max( 0, t$356 )) = //( '**(SpectralDomainDecomp)** allocate mnsPerProc returned stat=',  _substr(t$355,1,_ltrim(  _substr(t$355,1,8) )) )
  965.             call fatalerror(  _substr(t$357,1,max( 0, t$356 )) )
  965.             _free( t$358 )
  965.          endif
  970.          mnsextperproc%header%a_contig = 1
  970.          mnsextperproc%dim_1%LB = 0
  970.          mnsextperproc%dim_1%EX = ( max( 0, maxnodes_four ) )
  970.          mnsextperproc%dim_1%SM = 1
  970.          $_allo_P7(0) = 0x1000000000001L
  970.          $_allo_P7(1) = loc( mnsextperproc )
  970.          call __allocate( $_allo_P7, ierr, 0x2000200000000L, _fcd( 0, 0 ) )
  971.          if ( ierr /= 0 ) then
  972.             _fwrite( _clist( 0, 0, 3,  _substr(c0,1,8), Null_Arg, Null_Arg, t$65,  _substr(t$64,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ierr, 0x2000200000000L ) ) )
  973.             _f90_adjustl(  _substr(t$359,1,8),  _substr(c0,1,8) )
  973.             t$360 = 61 + ( _ltrim(  _substr(t$359,1,8) ) )
  973.             t$362 = int( _alloc( max( 0, t$360 ) ), 8 )
  973.              _substr(t$361,1,max( 0, t$360 )) = //( '**(SpectralDomainDecomp)** allocate mnsPerProc returned stat=',  _substr(t$359,1,_ltrim(  _substr(t$359,1,8) )) )
  973.             call fatalerror(  _substr(t$361,1,max( 0, t$360 )) )
  973.             _free( t$362 )
  973.          endif
  979.          $F_A42 = mnsperproc%dim_1%EX
  979.          if ( mnsperproc%dim_1%EX > 0 ) then
  979.             $SC_mnsperproc_I58 = mnsperproc%dim_1%LB
  979.             $I_L979_200 = 0
  979. !dir$ ivdep
  979.             do
  979.                (mnsperproc%base_addr)($SC_mnsperproc_I58 + $I_L979_200, 0) = 0
  979.                $I_L979_200 = 1 + $I_L979_200
  979.                if ( $I_L979_200 >= $F_A42 ) exit
  979.             enddo
  979.          endif
  980.          $F_A43 = mnsextperproc%dim_1%EX
  980.          if ( mnsextperproc%dim_1%EX > 0 ) then
  980.             $SC_mnsextperproc_I59 = mnsextperproc%dim_1%LB
  980.             $I_L980_202 = 0
  980. !dir$ ivdep
  980.             do
  980.                (mnsextperproc%base_addr)($SC_mnsextperproc_I59 + $I_L980_202, 0) = 0
  980.                $I_L980_202 = 1 + $I_L980_202
  980.                if ( $I_L980_202 >= $F_A43 ) exit
  980.             enddo
  980.          endif
  982.          if ( ( mmax /= 1 .and. xor( 2 * maxnodes_four, -1 + mmax ) < 0 ) == 0 ) then
  982.             $t_S17 = ( mmax + 2 * maxnodes_four + -1 ) / ( 2 * maxnodes_four )
  982.             $I_L982_248 = 0
  982.             do
  984.                if ( ( min( mmax, ( maxnodes_four + maxnodes_four * $I_L982_248 * 2 ) ) + maxnodes_four * $I_L982_248 * -2 + -1 ) >= 0 ) then
  984.                   $I_L984_174 = 0
  984. !dir$ unroll 2
  984.                   do
  985.                      (mnsperproc%base_addr)((nodehasm%base_addr)($I_L984_174 + maxnodes_four * $I_L982_248 * 2 + 1, mygroup_four, 0), 0) = ( mmax + (mnsperproc%base_addr)((nodehasm%base_addr)($I_L984_174 + maxnodes_four * $I_L982_248 * 2 + 1, mygroup_four, 0), 0) + -$I_L984_174 + maxnodes_four * $I_L982_248 * -2 )
  986.                      (mnsextperproc%base_addr)((nodehasm%base_addr)($I_L984_174 + maxnodes_four * $I_L982_248 * 2 + 1, mygroup_four, 0), 0) = ( mmax + (mnsextperproc%base_addr)((nodehasm%base_addr)($I_L984_174 + maxnodes_four * $I_L982_248 * 2 + 1, mygroup_four, 0), 0) + -$I_L984_174 + maxnodes_four * $I_L982_248 * -2 + 1 )
  987.                      $I_L984_174 = 1 + $I_L984_174
  984.                      if ( $I_L984_174 >= min( mmax, ( maxnodes_four + maxnodes_four * $I_L982_248 * 2 ) ) + maxnodes_four * $I_L982_248 * -2 ) exit
  984.                   enddo
  984.                endif
  989.                if ( ( min( mmax, ( 2 * maxnodes_four + maxnodes_four * $I_L982_248 * 2 ) ) + -maxnodes_four + maxnodes_four * $I_L982_248 * -2 ) > 0 ) then
  989.                   $I_L989_176 = 0
  989. !dir$ unroll 2
  989.                   do
  990.                      (mnsperproc%base_addr)((nodehasm%base_addr)(maxnodes_four + $I_L989_176 + maxnodes_four * $I_L982_248 * 2 + 1, mygroup_four, 0), 0) = ( mmax + (mnsperproc%base_addr)((nodehasm%base_addr)(maxnodes_four + $I_L989_176 + maxnodes_four * $I_L982_248 * 2 + 1, mygroup_four, 0), 0) + -maxnodes_four + -$I_L989_176 + maxnodes_four * $I_L982_248 * -2 )
  991.                      (mnsextperproc%base_addr)((nodehasm%base_addr)(maxnodes_four + $I_L989_176 + maxnodes_four * $I_L982_248 * 2 + 1, mygroup_four, 0), 0) = ( mmax + (mnsextperproc%base_addr)((nodehasm%base_addr)(maxnodes_four + $I_L989_176 + maxnodes_four * $I_L982_248 * 2 + 1, mygroup_four, 0), 0) + -maxnodes_four + -$I_L989_176 + maxnodes_four * $I_L982_248 * -2 + 1 )
  992.                      $I_L989_176 = 1 + $I_L989_176
  989.                      if ( $I_L989_176 >= min( mmax, ( 2 * maxnodes_four + maxnodes_four * $I_L982_248 * 2 ) ) + -maxnodes_four + maxnodes_four * $I_L982_248 * -2 ) exit
  989.                   enddo
  989.                endif
  994.                $I_L982_248 = 1 + $I_L982_248
  992.                if ( $I_L982_248 >= $t_S17 ) exit
  992.             enddo
  992.          endif
 1000.          $Reduc_A44 = 0xffffffff80000001
 1000.          $F_A46 = mnsperproc%dim_1%EX
 1000.          if ( mnsperproc%dim_1%EX > 0 ) then
 1000.             $SC_mnsperproc_I58 = mnsperproc%dim_1%LB
 1000.             $I_L1000_204 = 0
 1000. !dir$ ivdep
 1000.             do
 1000.                $Reduc_A44 = max( $Reduc_A44, (mnsperproc%base_addr)($SC_mnsperproc_I58 + $I_L1000_204, 0) )
 1000.                $I_L1000_204 = 1 + $I_L1000_204
 1000.                if ( $I_L1000_204 >= $F_A46 ) exit
 1000.             enddo
 1000.          endif
 1000.          mnmaxlocal = $Reduc_A44
 1001.          $Reduc_A47 = 0xffffffff80000001
 1001.          $F_A49 = mnsextperproc%dim_1%EX
 1001.          if ( mnsextperproc%dim_1%EX > 0 ) then
 1001.             $SC_mnsextperproc_I59 = mnsextperproc%dim_1%LB
 1001.             $I_L1001_206 = 0
 1001. !dir$ ivdep
 1001.             do
 1001.                $Reduc_A47 = max( $Reduc_A47, (mnsextperproc%base_addr)($SC_mnsextperproc_I59 + $I_L1001_206, 0) )
 1001.                $I_L1001_206 = 1 + $I_L1001_206
 1001.                if ( $I_L1001_206 >= $F_A49 ) exit
 1001.             enddo
 1001.          endif
 1001.          mnextmaxlocal = $Reduc_A47
 1006.          mymnmax = (mnsperproc%base_addr)(myid_four, 0)
 1007.          mymnextmax = (mnsextperproc%base_addr)(myid_four, 0)
 1022.          mymnmap%header%a_contig = 1
 1022.          mymnmap%dim_1%LB = 1
 1022.          mymnmap%dim_1%EX = ( max( 0, mymmax ) )
 1022.          mymnmap%dim_1%SM = 1
 1022.          mymnmap%dim_2%LB = 1
 1022.          mymnmap%dim_2%EX = ( max( 0, nmax ) )
 1022.          mymnmap%dim_2%SM = ( max( 0, mymmax ) )
 1022.          $_allo_P8(0) = 0x1000000000001L
 1022.          $_allo_P8(1) = loc( mymnmap )
 1022.          call __allocate( $_allo_P8, 0, 0, _fcd( 0, 0 ) )
 1023.          mymmap%header%a_contig = 1
 1023.          mymmap%dim_1%LB = 1
 1023.          mymmap%dim_1%EX = ( max( 0, mymnmax ) )
 1023.          mymmap%dim_1%SM = 1
 1023.          $_allo_P9(0) = 0x1000000000001L
 1023.          $_allo_P9(1) = loc( mymmap )
 1023.          call __allocate( $_allo_P9, 0, 0, _fcd( 0, 0 ) )
 1024.          mynmap%header%a_contig = 1
 1024.          mynmap%dim_1%LB = 1
 1024.          mynmap%dim_1%EX = ( max( 0, mymnmax ) )
 1024.          mynmap%dim_1%SM = 1
 1024.          $_allo_P10(0) = 0x1000000000001L
 1024.          $_allo_P10(1) = loc( mynmap )
 1024.          call __allocate( $_allo_P10, 0, 0, _fcd( 0, 0 ) )
 1025.          $F_A50 = nmax
 1025.          $F_A51 = mymmax
 1025.          if ( and( -$F_A51, -$F_A50 ) < 0 ) then
 1025.             $I_L1025_260 = 0
 1025.             do
 1025.                $I_L1025_208 = 0
 1025. !dir$ ivdep
 1025.                do
 1025.                   (mymnmap%base_addr)(1 + $I_L1025_208, 1 + $I_L1025_260, 0) = -1
 1025.                   $I_L1025_208 = 1 + $I_L1025_208
 1025.                   if ( $I_L1025_208 >= $F_A51 ) exit
 1025.                enddo
 1025.                $I_L1025_260 = 1 + $I_L1025_260
 1025.                if ( $I_L1025_260 >= $F_A50 ) exit
 1025.             enddo
 1025.          endif
 1026.          $F_A52 = mymnmax
 1026.          if ( mymnmax > 0 ) then
 1026.             $I_L1026_210 = 0
 1026. !dir$ ivdep
 1026.             do
 1026.                (mymmap%base_addr)(1 + $I_L1026_210, 0) = -1
 1026.                $I_L1026_210 = 1 + $I_L1026_210
 1026.                if ( $I_L1026_210 >= $F_A52 ) exit
 1026.             enddo
 1026.          endif
 1027.          $F_A53 = mymnmax
 1027.          if ( mymnmax > 0 ) then
 1027.             $I_L1027_212 = 0
 1027. !dir$ ivdep
 1027.             do
 1027.                (mynmap%base_addr)(1 + $I_L1027_212, 0) = -1
 1027.                $I_L1027_212 = 1 + $I_L1027_212
 1027.                if ( $I_L1027_212 >= $F_A53 ) exit
 1027.             enddo
 1027.          endif
 1028.          $mn_S20 = 0
 1029.          if ( mymmax > 0 ) then
 1029.             $I_L1029_250 = 0
 1029.             do
 1030.                $t_S19 = (lm2m%base_addr)(1 + $I_L1029_250, 0)
 1030.                if ( mmax + -$t_S19 >= 0 ) then
 1030.                   $I_L1030_178 = 0
 1030. !dir$ ivdep
 1030.                   do
 1032.                      (mymnmap%base_addr)(1 + $I_L1029_250, $t_S19 + $I_L1030_178, 0) = ( $mn_S20 + $I_L1030_178 + 1 )
 1033.                      (mymmap%base_addr)($mn_S20 + $I_L1030_178 + 1, 0) = ( 1 + $I_L1029_250 )
 1034.                      (mynmap%base_addr)($mn_S20 + $I_L1030_178 + 1, 0) = ( $t_S19 + $I_L1030_178 )
 1035.                      $I_L1030_178 = 1 + $I_L1030_178
 1030.                      if ( $I_L1030_178 >= mmax + -$t_S19 + 1 ) exit
 1030.                   enddo
 1031.                   $mn_S20 = ( mmax + $mn_S20 + -$t_S19 + 1 )
 1031.                endif
 1036.                $I_L1029_250 = 1 + $I_L1029_250
 1035.                if ( $I_L1029_250 >= mymmax ) exit
 1035.             enddo
 1035.          endif
 1044.          mymextmap%header%a_contig = 1
 1044.          mymextmap%dim_1%LB = 1
 1044.          mymextmap%dim_1%EX = ( max( 0, mymnextmax ) )
 1044.          mymextmap%dim_1%SM = 1
 1044.          $_allo_P11(0) = 0x1000000000001L
 1044.          $_allo_P11(1) = loc( mymextmap )
 1044.          call __allocate( $_allo_P11, 0, 0, _fcd( 0, 0 ) )
 1045.          mynextmap%header%a_contig = 1
 1045.          mynextmap%dim_1%LB = 1
 1045.          mynextmap%dim_1%EX = ( max( 0, mymnextmax ) )
 1045.          mynextmap%dim_1%SM = 1
 1045.          $_allo_P12(0) = 0x1000000000001L
 1045.          $_allo_P12(1) = loc( mynextmap )
 1045.          call __allocate( $_allo_P12, 0, 0, _fcd( 0, 0 ) )
 1046.          mymnextmap%header%a_contig = 1
 1046.          mymnextmap%dim_1%LB = 1
 1046.          mymnextmap%dim_1%EX = ( max( 0, mymmax ) )
 1046.          mymnextmap%dim_1%SM = 1
 1046.          mymnextmap%dim_2%LB = 1
 1046.          mymnextmap%dim_2%EX = ( max( 0, nextmax ) )
 1046.          mymnextmap%dim_2%SM = ( max( 0, mymmax ) )
 1046.          $_allo_P13(0) = 0x1000000000001L
 1046.          $_allo_P13(1) = loc( mymnextmap )
 1046.          call __allocate( $_allo_P13, 0, 0, _fcd( 0, 0 ) )
 1047.          $F_A54 = mymnextmax
 1047.          if ( mymnextmax > 0 ) then
 1047.             $I_L1047_214 = 0
 1047. !dir$ ivdep
 1047.             do
 1047.                (mymextmap%base_addr)(1 + $I_L1047_214, 0) = -1
 1047.                $I_L1047_214 = 1 + $I_L1047_214
 1047.                if ( $I_L1047_214 >= $F_A54 ) exit
 1047.             enddo
 1047.          endif
 1048.          $F_A55 = mymnextmax
 1048.          if ( mymnextmax > 0 ) then
 1048.             $I_L1048_216 = 0
 1048. !dir$ ivdep
 1048.             do
 1048.                (mynextmap%base_addr)(1 + $I_L1048_216, 0) = -1
 1048.                $I_L1048_216 = 1 + $I_L1048_216
 1048.                if ( $I_L1048_216 >= $F_A55 ) exit
 1048.             enddo
 1048.          endif
 1049.          $F_A56 = nextmax
 1049.          $F_A57 = mymmax
 1049.          if ( and( -$F_A57, -$F_A56 ) < 0 ) then
 1049.             $I_L1049_262 = 0
 1049.             do
 1049.                $I_L1049_218 = 0
 1049. !dir$ ivdep
 1049.                do
 1049.                   (mymnextmap%base_addr)(1 + $I_L1049_218, 1 + $I_L1049_262, 0) = -1
 1049.                   $I_L1049_218 = 1 + $I_L1049_218
 1049.                   if ( $I_L1049_218 >= $F_A57 ) exit
 1049.                enddo
 1049.                $I_L1049_262 = 1 + $I_L1049_262
 1049.                if ( $I_L1049_262 >= $F_A56 ) exit
 1049.             enddo
 1049.          endif
 1050.          $mn_S24 = 0
 1051.          if ( mymmax > 0 ) then
 1051.             $I_L1051_252 = 0
 1051.             do
 1052.                $t_S23 = (lm2m%base_addr)(1 + $I_L1051_252, 0)
 1052.                if ( mmax + -$t_S23 + 1 >= 0 ) then
 1052.                   $I_L1052_180 = 0
 1052. !dir$ ivdep
 1052.                   do
 1054.                      (mymnextmap%base_addr)(1 + $I_L1051_252, $t_S23 + $I_L1052_180, 0) = ( $mn_S24 + $I_L1052_180 + 1 )
 1055.                      (mymextmap%base_addr)($mn_S24 + $I_L1052_180 + 1, 0) = ( 1 + $I_L1051_252 )
 1056.                      (mynextmap%base_addr)($mn_S24 + $I_L1052_180 + 1, 0) = ( $t_S23 + $I_L1052_180 )
 1057.                      $I_L1052_180 = 1 + $I_L1052_180
 1052.                      if ( $I_L1052_180 >= mmax + -$t_S23 + 2 ) exit
 1052.                   enddo
 1053.                   $mn_S24 = ( mmax + $mn_S24 + -$t_S23 + 2 )
 1053.                endif
 1058.                $I_L1051_252 = 1 + $I_L1051_252
 1057.                if ( $I_L1051_252 >= mymmax ) exit
 1057.             enddo
 1057.          endif
 1069.          mnsinproc_si%header%a_contig = 1
 1069.          mnsinproc_si%dim_1%LB = 0
 1069.          mnsinproc_si%dim_1%EX = ( max( 0, maxnodes ) )
 1069.          mnsinproc_si%dim_1%SM = 1
 1069.          $_allo_P14(0) = 0x1000000000001L
 1069.          $_allo_P14(1) = loc( mnsinproc_si )
 1069.          call __allocate( $_allo_P14, 0, 0, _fcd( 0, 0 ) )
 1070.          mnprocmap_si%header%a_contig = 1
 1070.          mnprocmap_si%dim_1%LB = 1
 1070.          mnprocmap_si%dim_1%EX = ( max( 0, mnmax ) )
 1070.          mnprocmap_si%dim_1%SM = 1
 1070.          $_allo_P15(0) = 0x1000000000001L
 1070.          $_allo_P15(1) = loc( mnprocmap_si )
 1070.          call __allocate( $_allo_P15, 0, 0, _fcd( 0, 0 ) )
 1072.          $mnsperproc_si_S26 = mnmax / maxnodes
 1073.          $rest_S27 = mnmax + -( maxnodes * $mnsperproc_si_S26 )
 1074.          if ( maxnodes > 0 ) then
 1074.             $I_L1074_182 = 0
 1074. !dir$ unroll 4
 1074.             do
 1075.                if ( $rest_S27 > 0 ) then
 1076.                   (mnsinproc_si%base_addr)($I_L1074_182, 0) = 1 + $mnsperproc_si_S26
 1077.                   $rest_S27 = -1 + $rest_S27
 1077.                else
 1079.                   (mnsinproc_si%base_addr)($I_L1074_182, 0) = $mnsperproc_si_S26
 1079.                endif
 1083.                $I_L1074_182 = 1 + $I_L1074_182
 1080.                if ( $I_L1074_182 >= maxnodes ) exit
 1080.             enddo
 1080.          endif
 1085.          ini%header%a_contig = 1
 1085.          ini%dim_1%LB = 0
 1085.          ini%dim_1%EX = ( max( 0, 1 + maxnodes ) )
 1085.          ini%dim_1%SM = 1
 1085.          $_allo_P16(0) = 0x1000000000001L
 1085.          $_allo_P16(1) = loc( ini )
 1085.          call __allocate( $_allo_P16, 0, 0, _fcd( 0, 0 ) )
 1086.          $mn_S33 = 0
 1087.          $ip_S30 = 0
 1088.          $inc_S34 = 1
 1089.          $F_A58 = ( 1 + maxnodes )
 1089.          if ( maxnodes >= 0 ) then
 1089.             $I_L1089_220 = 0
 1089. !dir$ ivdep
 1089.             do
 1089.                (ini%base_addr)($I_L1089_220, 0) = 0
 1089.                $I_L1089_220 = 1 + $I_L1089_220
 1089.                if ( $I_L1089_220 >= $F_A58 ) exit
 1089.             enddo
 1089.          endif
 1090.          if ( mmax > 0 ) then
 1090.             $I_L1090_270 = 0
 1090.             do
 1091.                $ns_S31 = ( mmax + -$I_L1090_270 )
 1092.                do
 1093.                   $mngiv_S32 = min( $ns_S31, (mnsinproc_si%base_addr)($ip_S30, 0) + -(ini%base_addr)($ip_S30, 0) )
 1094.                   $F_A59 = $mngiv_S32
 1094.                   if ( $mngiv_S32 > 0 ) then
 1094.                      $I_L1094_222 = 0
 1094. !dir$ ivdep
 1094.                      do
 1094.                         (mnprocmap_si%base_addr)($mn_S33 + $I_L1094_222 + 1, 0) = $ip_S30
 1094.                         $I_L1094_222 = 1 + $I_L1094_222
 1094.                         if ( $I_L1094_222 >= $F_A59 ) exit
 1094.                      enddo
 1094.                   endif
 1095.                   $mn_S33 = $mngiv_S32 + $mn_S33
 1096.                   $ns_S31 = $ns_S31 + -$mngiv_S32
 1097.                   (ini%base_addr)($ip_S30, 0) = $mngiv_S32 + (ini%base_addr)($ip_S30, 0)
 1098.                   $ip_S30 = $ip_S30 + $inc_S34
 1099.                   if ( $ip_S30 + -maxnodes == 0 ) then
 1100.                      $inc_S34 = -1
 1101.                      $ip_S30 = -1 + maxnodes
 1102.                   else if ( $ip_S30 == -1 ) then
 1103.                      $inc_S34 = 1
 1104.                      $ip_S30 = 0
 1104.                   endif
 1105.                   if ( $ns_S31 == 0 ) exit
 1105.                enddo
 1108.                $I_L1090_270 = 1 + $I_L1090_270
 1107.                if ( $I_L1090_270 >= mmax ) exit
 1107.             enddo
 1107.          endif
 1111.          mnmax_si = (mnsinproc_si%base_addr)(myid, 0)
 1115.          mynmap_si%header%a_contig = 1
 1115.          mynmap_si%dim_1%LB = 1
 1115.          mynmap_si%dim_1%EX = ( max( 0, mnmax_si ) )
 1115.          mynmap_si%dim_1%SM = 1
 1115.          $_allo_P17(0) = 0x1000000000001L
 1115.          $_allo_P17(1) = loc( mynmap_si )
 1115.          call __allocate( $_allo_P17, 0, 0, _fcd( 0, 0 ) )
 1116.          mymnmap_si%header%a_contig = 1
 1116.          mymnmap_si%dim_1%LB = 1
 1116.          mymnmap_si%dim_1%EX = ( max( 0, mnmax_si ) )
 1116.          mymnmap_si%dim_1%SM = 1
 1116.          $_allo_P18(0) = 0x1000000000001L
 1116.          $_allo_P18(1) = loc( mymnmap_si )
 1116.          call __allocate( $_allo_P18, 0, 0, _fcd( 0, 0 ) )
 1118.          $mn_S36 = 1
 1119.          if ( mnmax > 0 ) then
 1119.             $I_L1119_184 = 0
 1119. !dir$ ivdep
 1119.             do
 1120.                if ( (mnprocmap_si%base_addr)(1 + $I_L1119_184, 0) + -myid == 0 ) then
 1121.                   (mymnmap_si%base_addr)($mn_S36, 0) = ( 1 + $I_L1119_184 )
 1122.                   (mynmap_si%base_addr)($mn_S36, 0) = (nmap%base_addr)(1 + $I_L1119_184, 0)
 1123.                   $mn_S36 = 1 + $mn_S36
 1123.                endif
 1125.                $I_L1119_184 = 1 + $I_L1119_184
 1124.                if ( $I_L1119_184 >= mnmax ) exit
 1124.             enddo
 1124.          endif
 1128.          mnsendsmap_si%header%a_contig = 1
 1128.          mnsendsmap_si%dim_1%LB = 1
 1128.          mnsendsmap_si%dim_1%EX = ( max( 0, mymnmax ) )
 1128.          mnsendsmap_si%dim_1%SM = 1
 1128.          $_allo_P19(0) = 0x1000000000001L
 1128.          $_allo_P19(1) = loc( mnsendsmap_si )
 1128.          call __allocate( $_allo_P19, 0, 0, _fcd( 0, 0 ) )
 1130.          if ( mymnmax > 0 ) then
 1130.             $I_L1130_186 = 0
 1130. !dir$ ivdep
 1130.             do
 1131.                $m_S38 = (lm2m%base_addr)((mymmap%base_addr)(1 + $I_L1130_186, 0), 0)
 1132.                $n_S39 = (mynmap%base_addr)(1 + $I_L1130_186, 0)
 1133.                $mng_S40 = (mnmap%base_addr)($m_S38, $n_S39, 0)
 1134.                (mnsendsmap_si%base_addr)(1 + $I_L1130_186, 0) = (mnprocmap_si%base_addr)($mng_S40, 0)
 1135.                $I_L1130_186 = 1 + $I_L1130_186
 1130.                if ( $I_L1130_186 >= mymnmax ) exit
 1130.             enddo
 1130.          endif
 1137.          maps_si%header%a_contig = 1
 1137.          maps_si%dim_1%LB = 0
 1137.          maps_si%dim_1%EX = ( max( 0, maxnodes ) )
 1137.          maps_si%dim_1%SM = 1
 1137.          $_allo_P20(0) = 0x1000000000001L
 1137.          $_allo_P20(1) = loc( maps_si )
 1137.          call __allocate( $_allo_P20, 0, 0, _fcd( 0, 0 ) )
 1138.          mapr_si%header%a_contig = 1
 1138.          mapr_si%dim_1%LB = 0
 1138.          mapr_si%dim_1%EX = ( max( 0, maxnodes ) )
 1138.          mapr_si%dim_1%SM = 1
 1138.          $_allo_P21(0) = 0x1000000000001L
 1138.          $_allo_P21(1) = loc( mapr_si )
 1138.          call __allocate( $_allo_P21, 0, 0, _fcd( 0, 0 ) )
 1139.          sends%header%a_contig = 1
 1139.          sends%dim_1%LB = 1
 1139.          sends%dim_1%EX = ( max( 0, maxnodes ) )
 1139.          sends%dim_1%SM = 1
 1139.          $_allo_P22(0) = 0x1000000000001L
 1139.          $_allo_P22(1) = loc( sends )
 1139.          call __allocate( $_allo_P22, 0, 0, _fcd( 0, 0 ) )
 1141.          (sends%base_addr)(1, 0) = (mnsendsmap_si%base_addr)(1, 0)
 1142.          nsends_si = 1
 1143.          (ini%base_addr)(1, 0) = 1
 1144.          (maps_si%base_addr)((sends%base_addr)(1, 0), 0) = 1
 1145.          if ( -2 + mymnmax >= 0 ) then
 1145.             $I_L1145_254 = 0
 1145.             do
 1146.                $Reduc_A60 = .true.
 1146.                $F_A62 = nsends_si
 1146.                if ( $F_A62 > 0 ) then
 1146.                   $SC_mnsendsmap_si_I49 = (mnsendsmap_si%base_addr)(2 + $I_L1145_254, 0)
 1146.                   $I_L1146_224 = 0
 1146. !dir$ ivdep
 1146.                   do
 1146.                      if ( (sends%base_addr)(1 + $I_L1146_224, 0) + -$SC_mnsendsmap_si_I49 == 0 ) then
 1146.                         $Reduc_A60 = .false.
 1146.                         goto 20
 1146.                      endif
 1146.                      $I_L1146_224 = 1 + $I_L1146_224
 1146.                      if ( $I_L1146_224 >= $F_A62 ) exit
 1146.                   enddo
 1146.                endif
 1146.    20          continue
 1146.                if ( $Reduc_A60 ) then
 1147.                   nsends_si = 1 + nsends_si
 1148.                   (sends%base_addr)(nsends_si, 0) = (mnsendsmap_si%base_addr)(2 + $I_L1145_254, 0)
 1149.                   (maps_si%base_addr)((mnsendsmap_si%base_addr)(2 + $I_L1145_254, 0), 0) = nsends_si
 1149.                endif
 1151.                (ini%base_addr)((maps_si%base_addr)((mnsendsmap_si%base_addr)(2 + $I_L1145_254, 0), 0), 0) = 1 + (ini%base_addr)((maps_si%base_addr)((mnsendsmap_si%base_addr)(2 + $I_L1145_254, 0), 0), 0)
 1152.                $I_L1145_254 = 1 + $I_L1145_254
 1150.                if ( $I_L1145_254 >= -1 + mymnmax ) exit
 1150.             enddo
 1150.          endif
 1153.          (ini%base_addr)(0, 0) = 1
 1154.          if ( nsends_si > 0 ) then
 1154.             $ini_WR0_R0 = 1
 1154.             $I_L1154_188 = 0
 1154. !dir$ unroll 4
 1154.             do
 1155.                $SCF_P35 = kmaxloc * (ini%base_addr)(1 + $I_L1154_188, 0) * 6 + 2 * (ini%base_addr)(1 + $I_L1154_188, 0)
 1155.                $ini_WR0_R0 = $SCF_P35 + $ini_WR0_R0
 1155.                (ini%base_addr)(1 + $I_L1154_188, 0) = $ini_WR0_R0
 1156.                $I_L1154_188 = 1 + $I_L1154_188
 1154.                if ( $I_L1154_188 >= nsends_si ) exit
 1154.             enddo
 1154.          endif
 1158.          mysends_si%header%a_contig = 1
 1158.          mysends_si%dim_1%LB = 1
 1158.          mysends_si%dim_1%EX = ( max( 0, nsends_si ) )
 1158.          mysends_si%dim_1%SM = 1
 1158.          $_allo_P23(0) = 0x1000000000001L
 1158.          $_allo_P23(1) = loc( mysends_si )
 1158.          call __allocate( $_allo_P23, 0, 0, _fcd( 0, 0 ) )
 1159.          inibs_si%header%a_contig = 1
 1159.          inibs_si%dim_1%LB = 1
 1159.          inibs_si%dim_1%EX = ( max( 0, 1 + nsends_si ) )
 1159.          inibs_si%dim_1%SM = 1
 1159.          $_allo_P24(0) = 0x1000000000001L
 1159.          $_allo_P24(1) = loc( inibs_si )
 1159.          call __allocate( $_allo_P24, 0, 0, _fcd( 0, 0 ) )
 1160.          $F_A63 = ( 1 + nsends_si )
 1160.          if ( nsends_si >= 0 ) then
 1160.             $I_L1160_226 = 0
 1160. !dir$ ivdep
 1160.             do
 1160.                (inibs_si%base_addr)(1 + $I_L1160_226, 0) = (ini%base_addr)($I_L1160_226, 0)
 1160.                $I_L1160_226 = 1 + $I_L1160_226
 1160.                if ( $I_L1160_226 >= $F_A63 ) exit
 1160.             enddo
 1160.          endif
 1161.          $F_A64 = nsends_si
 1161.          if ( nsends_si > 0 ) then
 1161.             $I_L1161_228 = 0
 1161. !dir$ ivdep
 1161.             do
 1161.                (mysends_si%base_addr)(1 + $I_L1161_228, 0) = (sends%base_addr)(1 + $I_L1161_228, 0)
 1161.                $I_L1161_228 = 1 + $I_L1161_228
 1161.                if ( $I_L1161_228 >= $F_A64 ) exit
 1161.             enddo
 1161.          endif
 1163.          $_allo_P25(0) = 0x1000000000001L
 1163.          $_allo_P25(1) = loc( ini )
 1163.          call __deallocate( $_allo_P25, 0, 0, _fcd( 0, 0 ) )
 1163.          ini%header%assoc = 0
 1164.          $_allo_P26(0) = 0x1000000000001L
 1164.          $_allo_P26(1) = loc( sends )
 1164.          call __deallocate( $_allo_P26, 0, 0, _fcd( 0, 0 ) )
 1164.          sends%header%assoc = 0
 1169.          if ( ngroups_four > 1 ) then
 1170.             if ( mygroup_four == 1 ) then
 1171.                comm_spread%header%a_contig = 1
 1171.                comm_spread%dim_1%LB = 1
 1171.                comm_spread%dim_1%EX = ( max( 0, maxnodes ) )
 1171.                comm_spread%dim_1%SM = 1
 1171.                comm_spread%dim_2%LB = 1
 1171.                comm_spread%dim_2%EX = 2
 1171.                comm_spread%dim_2%SM = ( max( 0, maxnodes ) )
 1171.                $_allo_P27(0) = 0x1000000000001L
 1171.                $_allo_P27(1) = loc( comm_spread )
 1171.                call __allocate( $_allo_P27, 0, 0, _fcd( 0, 0 ) )
 1172.                ms_spread%header%a_contig = 1
 1172.                ms_spread%dim_1%LB = 1
 1172.                ms_spread%dim_1%EX = ( max( 0, mymmax ) )
 1172.                ms_spread%dim_1%SM = 1
 1172.                ms_spread%dim_2%LB = 1
 1172.                ms_spread%dim_2%EX = ( max( 0, ngroups_four ) )
 1172.                ms_spread%dim_2%SM = ( max( 0, mymmax ) )
 1172.                $_allo_P28(0) = 0x1000000000001L
 1172.                $_allo_P28(1) = loc( ms_spread )
 1172.                call __allocate( $_allo_P28, 0, 0, _fcd( 0, 0 ) )
 1173.                ini%header%a_contig = 1
 1173.                ini%dim_1%LB = 0
 1173.                ini%dim_1%EX = ( max( 0, 1 + nprocmax_four ) )
 1173.                ini%dim_1%SM = 1
 1173.                $_allo_P29(0) = 0x1000000000001L
 1173.                $_allo_P29(1) = loc( ini )
 1173.                call __allocate( $_allo_P29, 0, 0, _fcd( 0, 0 ) )
 1174.                $F_A65 = maxnodes
 1174.                if ( maxnodes > 0 ) then
 1174.                   $I_L1174_264 = 0
 1174.                   do
 1174.                      $I_L1174_230 = 0
 1174. !dir$ ivdep
 1174.                      do
 1174.                         (comm_spread%base_addr)(1 + $I_L1174_230, 1 + $I_L1174_264, 0) = 0
 1174.                         $I_L1174_230 = 1 + $I_L1174_230
 1174.                         if ( $I_L1174_230 >= $F_A65 ) exit
 1174.                      enddo
 1174.                      $I_L1174_264 = 1 + $I_L1174_264
 1174.                      if ( $I_L1174_264 >= 2 ) exit
 1174.                   enddo
 1174.                endif
 1175.                $mng_S47 = 0
 1178.                if ( mymmax > 0 ) then
 1176.                   $I_L1176_256 = 0
 1176.                   do
 1177.                      $F_A66 = ( 1 + nprocmax_four )
 1177.                      if ( nprocmax_four >= 0 ) then
 1177.                         $I_L1177_232 = 0
 1177. !dir$ ivdep
 1177.                         do
 1177.                            (ini%base_addr)($I_L1177_232, 0) = 0
 1177.                            $I_L1177_232 = 1 + $I_L1177_232
 1177.                            if ( $I_L1177_232 >= $F_A66 ) exit
 1177.                         enddo
 1177.                      endif
 1178.                      $I_L1178_192 = 0
 1178. !dir$ unroll 2
 1178.                      do
 1179.                         $npl_S46 = (nodehasm%base_addr)((lm2m%base_addr)(1 + $I_L1178_192, 0), 2 + $I_L1176_256, 0)
 1180.                         $np_S48 = (map_four%base_addr)(2 + $I_L1176_256, $npl_S46, 0)
 1181.                         if ( (ini%base_addr)($npl_S46, 0) == 0 ) then
 1182.                            $mng_S47 = 1 + $mng_S47
 1183.                            (ini%base_addr)($npl_S46, 0) = $mng_S47
 1183.                         endif
 1185.                         $mn_S49 = (ini%base_addr)($npl_S46, 0)
 1186.                         (comm_spread%base_addr)($mn_S49, 1, 0) = $np_S48
 1187.                         $SCF_P37 = mmax + -(lm2m%base_addr)(1 + $I_L1178_192, 0) + 1
 1187.                         (comm_spread%base_addr)($mn_S49, 2, 0) = (comm_spread%base_addr)($mn_S49, 2, 0) + $SCF_P37
 1188.                         (ms_spread%base_addr)(1 + $I_L1178_192, 2 + $I_L1176_256, 0) = $mn_S49
 1189.                         $I_L1178_192 = 1 + $I_L1178_192
 1184.                         if ( $I_L1178_192 >= mymmax ) exit
 1184.                      enddo
 1190.                      $I_L1176_256 = 1 + $I_L1176_256
 1189.                      if ( $I_L1176_256 >= -1 + ngroups_four ) exit
 1189.                   enddo
 1189.                else
 1176.                   $I_L1176_258 = 0
 1176.                   do
 1177.                      $F_A67 = ( 1 + nprocmax_four )
 1177.                      if ( nprocmax_four >= 0 ) then
 1177.                         $I_L1177_234 = 0
 1177. !dir$ ivdep
 1177.                         do
 1177.                            (ini%base_addr)($I_L1177_234, 0) = 0
 1177.                            $I_L1177_234 = 1 + $I_L1177_234
 1177.                            if ( $I_L1177_234 >= $F_A67 ) exit
 1177.                         enddo
 1177.                      endif
 1190.                      $I_L1176_258 = 1 + $I_L1176_258
 1189.                      if ( $I_L1176_258 >= -1 + ngroups_four ) exit
 1189.                   enddo
 1189.                endif
 1191.                $F_A68 = maxnodes
 1191.                if ( maxnodes > 0 ) then
 1191.                   $I_L1191_236 = 0
 1191. !dir$ ivdep
 1191.                   do
 1191.                      (comm_spread%base_addr)(1 + $I_L1191_236, 2, 0) = 2 * (comm_spread%base_addr)(1 + $I_L1191_236, 2, 0)
 1191.                      $I_L1191_236 = 1 + $I_L1191_236
 1191.                      if ( $I_L1191_236 >= $F_A68 ) exit
 1191.                   enddo
 1191.                endif
 1192.                ncomm_spread = $mng_S47
 1192.             else
 1194.                comm_spread%header%a_contig = 1
 1194.                comm_spread%dim_1%LB = 1
 1194.                comm_spread%dim_1%EX = ( max( 0, (npperg_four%base_addr)(1, 0) ) )
 1194.                comm_spread%dim_1%SM = 1
 1194.                comm_spread%dim_2%LB = 1
 1194.                comm_spread%dim_2%EX = 2
 1194.                comm_spread%dim_2%SM = ( max( 0, (npperg_four%base_addr)(1, 0) ) )
 1194.                $_allo_P30(0) = 0x1000000000001L
 1194.                $_allo_P30(1) = loc( comm_spread )
 1194.                call __allocate( $_allo_P30, 0, 0, _fcd( 0, 0 ) )
 1195.                ms_spread%header%a_contig = 1
 1195.                ms_spread%dim_1%LB = 1
 1195.                ms_spread%dim_1%EX = ( max( 0, mymmax ) )
 1195.                ms_spread%dim_1%SM = 1
 1195.                ms_spread%dim_2%LB = 1
 1195.                ms_spread%dim_2%EX = 1
 1195.                ms_spread%dim_2%SM = ( max( 0, mymmax ) )
 1195.                $_allo_P31(0) = 0x1000000000001L
 1195.                $_allo_P31(1) = loc( ms_spread )
 1195.                call __allocate( $_allo_P31, 0, 0, _fcd( 0, 0 ) )
 1196.                ini%header%a_contig = 1
 1196.                ini%dim_1%LB = 0
 1196.                ini%dim_1%EX = ( max( 0, 1 + nprocmax_four ) )
 1196.                ini%dim_1%SM = 1
 1196.                $_allo_P32(0) = 0x1000000000001L
 1196.                $_allo_P32(1) = loc( ini )
 1196.                call __allocate( $_allo_P32, 0, 0, _fcd( 0, 0 ) )
 1197.                $F_A69 = comm_spread%dim_1%EX
 1197.                if ( comm_spread%dim_1%EX > 0 ) then
 1197.                   $SC_comm_spread_I60 = comm_spread%dim_2%SM
 1197.                   $I_L1197_266 = 0
 1197.                   do
 1197.                      $I_L1197_238 = 0
 1197. !dir$ ivdep
 1197.                      do
 1197.                         (comm_spread%base_addr)(1 + $I_L1197_238, 1 + $I_L1197_266, 0) = 0
 1197.                         $I_L1197_238 = 1 + $I_L1197_238
 1197.                         if ( $I_L1197_238 >= $F_A69 ) exit
 1197.                      enddo
 1197.                      $I_L1197_266 = 1 + $I_L1197_266
 1197.                      if ( $I_L1197_266 >= 2 ) exit
 1197.                   enddo
 1197.                endif
 1198.                $mng_S52 = 0
 1199.                $F_A70 = ( 1 + nprocmax_four )
 1199.                if ( nprocmax_four >= 0 ) then
 1199.                   $I_L1199_240 = 0
 1199. !dir$ ivdep
 1199.                   do
 1199.                      (ini%base_addr)($I_L1199_240, 0) = 0
 1199.                      $I_L1199_240 = 1 + $I_L1199_240
 1199.                      if ( $I_L1199_240 >= $F_A70 ) exit
 1199.                   enddo
 1199.                endif
 1200.                if ( mymmax > 0 ) then
 1200.                   $I_L1200_190 = 0
 1200. !dir$ unroll 4
 1200.                   do
 1201.                      $npl_S51 = (nodehasm%base_addr)((lm2m%base_addr)(1 + $I_L1200_190, 0), 1, 0)
 1202.                      $np_S53 = (map_four%base_addr)(1, $npl_S51, 0)
 1203.                      if ( (ini%base_addr)($npl_S51, 0) == 0 ) then
 1204.                         $mng_S52 = 1 + $mng_S52
 1205.                         (ini%base_addr)($npl_S51, 0) = $mng_S52
 1205.                      endif
 1207.                      $mn_S54 = (ini%base_addr)($npl_S51, 0)
 1208.                      (comm_spread%base_addr)($mn_S54, 1, 0) = $np_S53
 1209.                      $SCF_P39 = mmax + -(lm2m%base_addr)(1 + $I_L1200_190, 0) + 1
 1209.                      (comm_spread%base_addr)($mn_S54, 2, 0) = $SCF_P39 + (comm_spread%base_addr)($mn_S54, 2, 0)
 1210.                      (ms_spread%base_addr)(1 + $I_L1200_190, 1, 0) = $mn_S54
 1211.                      $I_L1200_190 = 1 + $I_L1200_190
 1206.                      if ( $I_L1200_190 >= mymmax ) exit
 1206.                   enddo
 1206.                endif
 1212.                $F_A71 = comm_spread%dim_1%EX
 1212.                if ( comm_spread%dim_1%EX > 0 ) then
 1212.                   $SC_comm_spread_I60 = comm_spread%dim_2%SM
 1212.                   $I_L1212_242 = 0
 1212. !dir$ ivdep
 1212.                   do
 1212.                      (comm_spread%base_addr)(1 + $I_L1212_242, 2, 0) = 2 * (comm_spread%base_addr)(1 + $I_L1212_242, 2, 0)
 1212.                      $I_L1212_242 = 1 + $I_L1212_242
 1212.                      if ( $I_L1212_242 >= $F_A71 ) exit
 1212.                   enddo
 1212.                endif
 1213.                ncomm_spread = $mng_S52
 1213.             endif
 1213.          endif
  840.          $_allo_P33(0) = 0x2000000000001L
  840.          $_allo_P33(1) = loc( sends )
  840.          $_allo_P33(2) = loc( ini )
  840.          call _dealloc( $_allo_P33, 0, 0, _fcd( 0, 0 ) )
  840.       endif
 1220.       return
 1220.       end
 1220.       
 1275.       
 1275.       subroutine dumpspecdecomp( maxnodes )
 1230.        _substr(t$416,1,20) = '**(DumpSpecDecomp)**'
 1230.        _substr(t$417,1,32) = ' local sizes of m, mn and mnExt:'
 1230.       call msgdump(  _substr(t$416,1,20),  _substr(t$417,1,32) )
 1231.        _substr(line,1,256) = ' myMMax=    ; myMNMax=        ; myMNExtMax=        '
 1232.       _fwrite( _clist( 0, 0, 3,  _substr(line,9,4), Null_Arg, Null_Arg, t$67,  _substr(t$66,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( mymmax, 0x2000200000000L ) ) )
 1233.       _fwrite( _clist( 0, 0, 3,  _substr(line,23,8), Null_Arg, Null_Arg, t$69,  _substr(t$68,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( mymnmax, 0x2000200000000L ) ) )
 1234.       _fwrite( _clist( 0, 0, 3,  _substr(line,44,8), Null_Arg, Null_Arg, t$71,  _substr(t$70,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( mymnextmax, 0x2000200000000L ) ) )
 1235.        _substr(t$418,1,20) = '**(DumpSpecDecomp)**'
 1235.       call msgdump(  _substr(t$418,1,20),  _substr(line,1,_ltrim(  _substr(line,1,256) )) )
 1237.        _substr(t$419,1,20) = '**(DumpSpecDecomp)**'
 1237.        _substr(t$420,1,32) = ' mapping of local m to global m:'
 1237.       call msgdump(  _substr(t$419,1,20),  _substr(t$420,1,32) )
 1238.       if ( mymmax > 0 ) then
 1238.          $t_S1 = ( 9 + mymmax ) / 10
 1238.          $I_L1238_30 = 0
 1238.          do
 1238.             mstart = ( 1 + 10 * $I_L1238_30 )
 1239.             mend = min( mymmax, ( 10 + 10 * $I_L1238_30 ) )
 1240.              _substr(line,1,256) = ' lm2m(    :    )='
 1241.             _fwrite( _clist( 0, 0, 3,  _substr(line,7,4), Null_Arg, Null_Arg, t$73,  _substr(t$72,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( mstart, 0x2000200000000L ) ) )
 1242.             _fwrite( _clist( 0, 0, 3,  _substr(line,12,4), Null_Arg, Null_Arg, t$75,  _substr(t$74,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( mend, 0x2000200000000L ) ) )
 1243.             $t_S0 = min( mymmax, ( 10 + 10 * $I_L1238_30 ) )
 1243.             if ( ( min( mymmax, ( 10 + 10 * $I_L1238_30 ) ) + -10 * $I_L1238_30 + -1 ) >= 0 ) then
 1243.                $I_L1243_24 = 0
 1243.                do
 1245.                   if ( ( $I_L1243_24 + 10 * $I_L1238_30 + 1 ) < lm2m%dim_1%LB .or. ( $I_L1243_24 + 10 * $I_L1238_30 + 1 ) > lm2m%dim_1%LB + lm2m%dim_1%EX + -1 ) then
 1245.                       _substr(t$429,1,10) = 'Sizes.f90'
 1245.                       _substr(t$430,1,5) = 'LM2M'
 1245.                      t$431 = lm2m%dim_1%LB
 1245.                      t$432 = lm2m%dim_1%LB + lm2m%dim_1%EX + -1
 1245.                      t$433 = $I_L1243_24 + 10 * $I_L1238_30 + 1
 1245.                      call _bounds_error(  _substr(t$429,1,10), 1245,  _substr(t$430,1,5), 1, t$431, t$432, t$433, t$428 )
 1245.                   endif
 1245.                   $IOitem_O0 = (lm2m%base_addr)($I_L1243_24 + 10 * $I_L1238_30 + 1, 0)
 1245.                   _fwrite( _clist( 0, 0, 3,  _substr(line,( 18 + 5 * $I_L1243_24 ),5), Null_Arg, Null_Arg, t$77,  _substr(t$76,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O0, 0x2000200000000L ) ) )
 1246.                   $I_L1243_24 = 1 + $I_L1243_24
 1246.                   if ( $I_L1243_24 >= $t_S0 + -10 * $I_L1238_30 ) exit
 1246.                enddo
 1246.             endif
 1247.              _substr(t$434,1,20) = '**(DumpSpecDecomp)**'
 1247.             call msgdump(  _substr(t$434,1,20),  _substr(line,1,_ltrim(  _substr(line,1,256) )) )
 1248.             $I_L1238_30 = 1 + $I_L1238_30
 1248.             if ( $I_L1238_30 >= $t_S1 ) exit
 1248.          enddo
 1248.       endif
 1250.        _substr(t$435,1,20) = '**(DumpSpecDecomp)**'
 1250.        _substr(t$436,1,25) = ' how many ms per process:'
 1250.       call msgdump(  _substr(t$435,1,20),  _substr(t$436,1,25) )
 1251.       if ( maxnodes > 0 ) then
 1251.          $t_S2 = ( 9 + maxnodes ) / 10
 1251.          $I_L1251_32 = 0
 1251.          do
 1251.             pestart = ( 10 * $I_L1251_32 )
 1252.             peend = min( ( 9 + 10 * $I_L1251_32 ), -1 + maxnodes )
 1253.              _substr(line,1,256) = ' msPerProc(    :    )='
 1254.             _fwrite( _clist( 0, 0, 3,  _substr(line,12,4), Null_Arg, Null_Arg, t$79,  _substr(t$78,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( pestart, 0x2000200000000L ) ) )
 1255.             _fwrite( _clist( 0, 0, 3,  _substr(line,17,4), Null_Arg, Null_Arg, t$81,  _substr(t$80,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( peend, 0x2000200000000L ) ) )
 1256.             if ( min( ( 9 + 10 * $I_L1251_32 ), -1 + maxnodes ) + -( 10 * $I_L1251_32 ) >= 0 ) then
 1256.                $I_L1256_26 = 0
 1256.                do
 1258.                   if ( ( $I_L1256_26 + 10 * $I_L1251_32 ) < msperproc%dim_1%LB .or. ( $I_L1256_26 + 10 * $I_L1251_32 ) > msperproc%dim_1%LB + msperproc%dim_1%EX + -1 ) then
 1258.                       _substr(t$445,1,10) = 'Sizes.f90'
 1258.                       _substr(t$446,1,10) = 'MSPERPROC'
 1258.                      t$431 = msperproc%dim_1%LB
 1258.                      t$432 = msperproc%dim_1%LB + msperproc%dim_1%EX + -1
 1258.                      t$433 = $I_L1256_26 + 10 * $I_L1251_32
 1258.                      call _bounds_error(  _substr(t$445,1,10), 1258,  _substr(t$446,1,10), 1, t$431, t$432, t$433, t$444 )
 1258.                   endif
 1258.                   $IOitem_O1 = (msperproc%base_addr)($I_L1256_26 + 10 * $I_L1251_32, 0)
 1258.                   _fwrite( _clist( 0, 0, 3,  _substr(line,( 23 + 5 * $I_L1256_26 ),5), Null_Arg, Null_Arg, t$83,  _substr(t$82,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O1, 0x2000200000000L ) ) )
 1259.                   $I_L1256_26 = 1 + $I_L1256_26
 1259.                   if ( $I_L1256_26 >= min( ( 9 + 10 * $I_L1251_32 ), -1 + maxnodes ) + -( 10 * $I_L1251_32 ) + 1 ) exit
 1259.                enddo
 1259.             endif
 1260.              _substr(t$447,1,20) = '**(DumpSpecDecomp)**'
 1260.             call msgdump(  _substr(t$447,1,20),  _substr(line,1,_ltrim(  _substr(line,1,256) )) )
 1261.             $I_L1251_32 = 1 + $I_L1251_32
 1261.             if ( $I_L1251_32 >= $t_S2 ) exit
 1261.          enddo
 1261.       endif
 1263.        _substr(t$448,1,20) = '**(DumpSpecDecomp)**'
 1263.        _substr(t$449,1,23) = ' which node has each m:'
 1263.       call msgdump(  _substr(t$448,1,20),  _substr(t$449,1,23) )
 1264.       if ( mmax > 0 ) then
 1264.          $t_S4 = ( 9 + mmax ) / 10
 1264.          $I_L1264_34 = 0
 1264.          do
 1264.             mstart = ( 1 + 10 * $I_L1264_34 )
 1265.             mend = min( mmax, ( 10 + 10 * $I_L1264_34 ) )
 1266.              _substr(line,1,256) = ' nodeHasM(    :    )='
 1267.             _fwrite( _clist( 0, 0, 3,  _substr(line,11,4), Null_Arg, Null_Arg, t$85,  _substr(t$84,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( mstart, 0x2000200000000L ) ) )
 1268.             _fwrite( _clist( 0, 0, 3,  _substr(line,16,4), Null_Arg, Null_Arg, t$87,  _substr(t$86,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( mend, 0x2000200000000L ) ) )
 1269.             $t_S3 = min( mmax, ( 10 + 10 * $I_L1264_34 ) )
 1269.             if ( ( min( mmax, ( 10 + 10 * $I_L1264_34 ) ) + -10 * $I_L1264_34 + -1 ) >= 0 ) then
 1269.                $I_L1269_28 = 0
 1269.                do
 1271.                   if ( ( $I_L1269_28 + 10 * $I_L1264_34 + 1 ) < nodehasm%dim_1%LB .or. ( $I_L1269_28 + 10 * $I_L1264_34 + 1 ) > nodehasm%dim_1%LB + nodehasm%dim_1%EX + -1 ) then
 1271.                       _substr(t$458,1,10) = 'Sizes.f90'
 1271.                       _substr(t$459,1,9) = 'NODEHASM'
 1271.                      t$431 = nodehasm%dim_1%LB
 1271.                      t$432 = nodehasm%dim_1%LB + nodehasm%dim_1%EX + -1
 1271.                      t$433 = $I_L1269_28 + 10 * $I_L1264_34 + 1
 1271.                      call _bounds_error(  _substr(t$458,1,10), 1271,  _substr(t$459,1,9), 1, t$431, t$432, t$433, t$457 )
 1271.                   endif
 1271.                   if ( mygroup_four < nodehasm%dim_2%LB .or. mygroup_four > nodehasm%dim_2%LB + nodehasm%dim_2%EX + -1 ) then
 1271.                       _substr(t$461,1,10) = 'Sizes.f90'
 1271.                       _substr(t$462,1,9) = 'NODEHASM'
 1271.                      t$463 = nodehasm%dim_2%LB
 1271.                      t$464 = nodehasm%dim_2%LB + nodehasm%dim_2%EX + -1
 1271.                      t$465 = mygroup_four
 1271.                      call _bounds_error(  _substr(t$461,1,10), 1271,  _substr(t$462,1,9), 2, t$463, t$464, t$465, t$460 )
 1271.                   endif
 1271.                   $IOitem_O2 = (nodehasm%base_addr)($I_L1269_28 + 10 * $I_L1264_34 + 1, mygroup_four, 0)
 1271.                   _fwrite( _clist( 0, 0, 3,  _substr(line,( 22 + 5 * $I_L1269_28 ),5), Null_Arg, Null_Arg, t$89,  _substr(t$88,1,4), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O2, 0x2000200000000L ) ) )
 1272.                   $I_L1269_28 = 1 + $I_L1269_28
 1272.                   if ( $I_L1269_28 >= $t_S3 + -10 * $I_L1264_34 ) exit
 1272.                enddo
 1272.             endif
 1273.              _substr(t$466,1,20) = '**(DumpSpecDecomp)**'
 1273.             call msgdump(  _substr(t$466,1,20),  _substr(line,1,_ltrim(  _substr(line,1,256) )) )
 1274.             $I_L1264_34 = 1 + $I_L1264_34
 1274.             if ( $I_L1264_34 >= $t_S4 ) exit
 1274.          enddo
 1274.       endif
 1275.       return
 1275.       end
 1275.       
 1342.       
 1342.       subroutine threaddecomp( firstind, lastind, minind, maxind, msg )
 1282.       t$120 = _len( msg )
 1303.       $inparallel_S0 = omp_in_parallel
 1304.       if ( $inparallel_S0 ) then
 1305.          $ntrd_S1 = omp_get_num_threads
 1306.          $itrd_S3 = omp_get_thread_num
 1308.          $chunk_S2 = ( lastind + -firstind + 1 ) / $ntrd_S1
 1310.          if ( $itrd_S3 < lastind + -firstind + -( $ntrd_S1 * $chunk_S2 ) + 1 ) then
 1311.             minind = firstind + $itrd_S3 + $chunk_S2 * $itrd_S3
 1312.             maxind = firstind + $chunk_S2 + $itrd_S3 + $chunk_S2 * $itrd_S3
 1312.          else
 1314.             minind = lastind + -( $ntrd_S1 * $chunk_S2 ) + $chunk_S2 * $itrd_S3 + 1
 1315.             maxind = lastind + $chunk_S2 + -( $ntrd_S1 * $chunk_S2 ) + $chunk_S2 * $itrd_S3
 1315.          endif
 1315.       else
 1318.          minind = firstind
 1319.          maxind = lastind
 1319.       endif
 1342.       return
 1342.       end
 1342.       
 1345.       
 1345.       subroutine threaddecompms( m, myms, nms )
 1345.       t$94 = m
 1347.       t$121 = _zla( 0, m )
 1360.       $inparallel_S0 = omp_in_parallel
 1361.       if ( $inparallel_S0 ) then
 1362.          $ntrd_S1 = omp_get_num_threads
 1363.          $t_S2 = omp_get_thread_num
 1364.          nms = 0
 1365.          $i_S3 = 1
 1366.          $j_S5 = 1
 1367.          if ( m > 0 ) then
 1367.             $I_L1367_14 = 0
 1367. !dir$ unroll 4
 1367.             do
 1368.                if ( $i_S3 + -$t_S2 == 1 ) then
 1369.                   nms = 1 + nms
 1370.                   myms(nms) = ( 1 + $I_L1367_14 )
 1370.                endif
 1372.                $i_S3 = $i_S3 + $j_S5
 1373.                if ( $ntrd_S1 + -$i_S3 == -1 ) then
 1374.                   $j_S5 = -1
 1375.                   $i_S3 = $ntrd_S1
 1375.                endif
 1377.                if ( $i_S3 == 0 ) then
 1378.                   $j_S5 = 1
 1379.                   $i_S3 = 1
 1379.                endif
 1381.                $I_L1367_14 = 1 + $I_L1367_14
 1380.                if ( $I_L1367_14 >= m ) exit
 1380.             enddo
 1380.          endif
 1380.       else
 1383.          if ( m > 0 ) then
 1383.             $I_L1383_12 = 0
 1383. !dir$ ivdep
 1383.             do
 1384.                myms(1 + $I_L1383_12) = ( 1 + $I_L1383_12 )
 1385.                $I_L1383_12 = 1 + $I_L1383_12
 1383.                if ( $I_L1383_12 >= m ) exit
 1383.             enddo
 1383.          endif
 1386.          nms = m
 1386.       endif
 1389.       return
 1389.       end
 1389.       
 1473.       
 1473.       subroutine initversizes( si_in, sl_in, del_in )
 1392.       si_in%dim_1%LB = 1
 1392.       sl_in%dim_1%LB = 1
 1392.       del_in%dim_1%LB = 1
 1405.       if ( kmax + -_zla( 0, sl_in%dim_1%EX ) /= 0 ) then
 1405.           _substr(t$481,1,48) = ' Error in InitVerSizes: kMaxsl=SIZE(sl) /= kMax '
 1405.          call _stop(  _substr(t$481,1,48) )
 1405.       else
 1406.          del%header%a_contig = 1
 1406.          del%dim_1%LB = 1
 1406.          del%dim_1%EX = _zla( 0, kmax )
 1406.          del%dim_1%SM = 1
 1406.          $_allo_P2(0) = 0x1000000000001L
 1406.          $_allo_P2(1) = loc( del )
 1406.          call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
 1407.          delcl%header%a_contig = 1
 1407.          delcl%dim_1%LB = 1
 1407.          delcl%dim_1%EX = _zla( 0, ( -1 + kmax ) )
 1407.          delcl%dim_1%SM = 1
 1407.          $_allo_P3(0) = 0x1000000000001L
 1407.          $_allo_P3(1) = loc( delcl )
 1407.          call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
 1408.          rdel2%header%a_contig = 1
 1408.          rdel2%dim_1%LB = 1
 1408.          rdel2%dim_1%EX = _zla( 0, kmax )
 1408.          rdel2%dim_1%SM = 1
 1408.          $_allo_P4(0) = 0x1000000000001L
 1408.          $_allo_P4(1) = loc( rdel2 )
 1408.          call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
 1409.          ci%header%a_contig = 1
 1409.          ci%dim_1%LB = 1
 1409.          ci%dim_1%EX = _zla( 0, ( 1 + kmax ) )
 1409.          ci%dim_1%SM = 1
 1409.          $_allo_P5(0) = 0x1000000000001L
 1409.          $_allo_P5(1) = loc( ci )
 1409.          call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
 1410.          si%header%a_contig = 1
 1410.          si%dim_1%LB = 1
 1410.          si%dim_1%EX = _zla( 0, ( 1 + kmax ) )
 1410.          si%dim_1%SM = 1
 1410.          $_allo_P6(0) = 0x1000000000001L
 1410.          $_allo_P6(1) = loc( si )
 1410.          call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
 1411.          sl%header%a_contig = 1
 1411.          sl%dim_1%LB = 1
 1411.          sl%dim_1%EX = _zla( 0, kmax )
 1411.          sl%dim_1%SM = 1
 1411.          $_allo_P7(0) = 0x1000000000001L
 1411.          $_allo_P7(1) = loc( sl )
 1411.          call __allocate( $_allo_P7, 0, 0, _fcd( 0, 0 ) )
 1412.          cl%header%a_contig = 1
 1412.          cl%dim_1%LB = 1
 1412.          cl%dim_1%EX = _zla( 0, kmax )
 1412.          cl%dim_1%SM = 1
 1412.          $_allo_P8(0) = 0x1000000000001L
 1412.          $_allo_P8(1) = loc( cl )
 1412.          call __allocate( $_allo_P8, 0, 0, _fcd( 0, 0 ) )
 1413.          rpi%header%a_contig = 1
 1413.          rpi%dim_1%LB = 1
 1413.          rpi%dim_1%EX = _zla( 0, ( -1 + kmax ) )
 1413.          rpi%dim_1%SM = 1
 1413.          $_allo_P9(0) = 0x1000000000001L
 1413.          $_allo_P9(1) = loc( rpi )
 1413.          call __allocate( $_allo_P9, 0, 0, _fcd( 0, 0 ) )
 1415.          if ( kmax > 0 ) then
 1415.             $I_L1415_46 = 0
 1415. !dir$ ivdep
 1415.             do
 1416.                (del%base_addr)(1 + $I_L1415_46, 0) = (si_in%base_addr)(1 + $I_L1415_46, 0) + -(si_in%base_addr)(2 + $I_L1415_46, 0)
 1417.                $I_L1415_46 = 1 + $I_L1415_46
 1415.                if ( $I_L1415_46 >= kmax ) exit
 1415.             enddo
 1415.          endif
 1418.          $F_A33 = _zla( 0, kmax )
 1418.          if ( kmax > 0 ) then
 1418.             $SC_del_in_I5 = del_in%dim_1%SM
 1418.             $SC_del_in_I4 = del_in%dim_1%EX
 1418.             $I_L1418_58 = 0
 1418. !dir$ ivdep
 1418.             do
 1418.                (del_in%base_addr)(1 + $I_L1418_58, 0) = (del%base_addr)(1 + $I_L1418_58, 0)
 1418.                $I_L1418_58 = 1 + $I_L1418_58
 1418.                if ( $I_L1418_58 >= $F_A33 ) exit
 1418.             enddo
 1418.          endif
 1419.          $F_A34 = _zla( 0, kmax )
 1419.          if ( kmax > 0 ) then
 1419.             $I_L1419_60 = 0
 1419. !dir$ ivdep
 1419.             do
 1419.                (rdel2%base_addr)(1 + $I_L1419_60, 0) = ( 5.0e-1 * 1.0/(del%base_addr)(1 + $I_L1419_60, 0) )
 1419.                $I_L1419_60 = 1 + $I_L1419_60
 1419.                if ( $I_L1419_60 >= $F_A34 ) exit
 1419.             enddo
 1419.          endif
 1424.          (ci%base_addr)(1, 0) = 0.0
 1425.          if ( -1 + kmax > 0 ) then
 1425.             $ci_WR0_R0 = 0.0
 1425.             $I_L1425_48 = 0
 1425. !dir$ unroll 4
 1425.             do
 1426.                $ci_WR0_R0 = $ci_WR0_R0 + (del%base_addr)(1 + $I_L1425_48, 0)
 1426.                (ci%base_addr)(2 + $I_L1425_48, 0) = $ci_WR0_R0
 1427.                $I_L1425_48 = 1 + $I_L1425_48
 1425.                if ( $I_L1425_48 >= -1 + kmax ) exit
 1425.             enddo
 1425.          endif
 1428.          (ci%base_addr)(1 + kmax, 0) = 1.0
 1430.          if ( kmax >= 0 ) then
 1430.             $I_L1430_50 = 0
 1430. !dir$ ivdep
 1430.             do
 1431.                (si%base_addr)(1 + $I_L1430_50, 0) = 1.0 + -(ci%base_addr)(1 + $I_L1430_50, 0)
 1432.                $I_L1430_50 = 1 + $I_L1430_50
 1430.                if ( $I_L1430_50 >= 1 + kmax ) exit
 1430.             enddo
 1430.          endif
 1434.          if ( kmax > 0 ) then
 1445.             if ( 0 < -1 + kmax ) then
 1434.                $I_L1434_52 = 0
 1434. !dir$ ivdep
 1434.                do
 1435.                   $sirk_S5 = _expn( 1.2857356161656381 * log( (si%base_addr)(1 + $I_L1434_52, 0) ) )
 1437.                   $sirk1_S4 = _expn( 1.2857356161656381 * log( (si%base_addr)(2 + $I_L1434_52, 0) ) )
 1442.                   $dif_S6 = ( ( $sirk_S5 + -$sirk1_S4 ) * 1.0/( 1.2857356161656381 * ( (si%base_addr)(1 + $I_L1434_52, 0) + -(si%base_addr)(2 + $I_L1434_52, 0) ) ) )
 1443.                   $sl_WR0_R1 = _expn( 3.4997387214770943 * log( $dif_S6 ) )
 1443.                   (sl%base_addr)(1 + $I_L1434_52, 0) = $sl_WR0_R1
 1444.                   (cl%base_addr)(1 + $I_L1434_52, 0) = 1.0 + -$sl_WR0_R1
 1445.                   $I_L1434_52 = 1 + $I_L1434_52
 1440.                   if ( $I_L1434_52 >= -1 + kmax ) exit
 1440.                enddo
 1440.             endif
 1435.             $sirk_S5 = _expn( 1.2857356161656381 * log( (si%base_addr)(kmax, 0) ) )
 1442.             $dif_S6 = ( $sirk_S5 * 1.0/( 1.2857356161656381 * ( (si%base_addr)(kmax, 0) + -(si%base_addr)(1 + kmax, 0) ) ) )
 1443.             (sl%base_addr)(kmax, 0) = _expn( 3.4997387214770943 * log( $dif_S6 ) )
 1444.             (cl%base_addr)(kmax, 0) = 1.0 + -(sl%base_addr)(kmax, 0)
 1444.          endif
 1446.          if ( -1 + kmax > 0 ) then
 1446.             $I_L1446_54 = 0
 1446. !dir$ ivdep
 1446.             do
 1447.                (delcl%base_addr)(1 + $I_L1446_54, 0) = (cl%base_addr)(2 + $I_L1446_54, 0) + -(cl%base_addr)(1 + $I_L1446_54, 0)
 1453.                (rpi%base_addr)(1 + $I_L1446_54, 0) = _expn( 2.8573561616563808e-1 * log( ( (sl%base_addr)(2 + $I_L1446_54, 0) * 1.0/(sl%base_addr)(1 + $I_L1446_54, 0) ) ) )
 1448.                $I_L1446_54 = 1 + $I_L1446_54
 1446.                if ( $I_L1446_54 >= -1 + kmax ) exit
 1446.             enddo
 1446.          endif
 1457.           _substr(t$500,1,18) = '**(InitVerSizes)**'
 1457.           _substr(t$501,1,19) = ' Model sigma levels'
 1457.          call msgone(  _substr(t$500,1,18),  _substr(t$501,1,19) )
 1458.          if ( myid == 0 ) then
 1459.             _fwrite( _clist( 0, 0, 3, Null_Arg, Null_Arg, Null_Arg, t$96,  _substr(t$95,1,17), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( 'k', 0x800600000000L ), _iotype( 'si(k)', 0x800600000000L ), _iotype( 'ci(k)', 0x800600000000L ), _iotype( 'sl(k)', 0x800600000000L ), _iotype( 'cl(k)', 0x800600000000L ), _iotype( 'del(k)', 0x800600000000L ), _iotype( 'delcl(k)', 0x800600000000L ) ) )
 1461.             $t_S9 = -1 + kmax
 1461.             if ( -1 + kmax > 0 ) then
 1461.                $I_L1461_56 = 0
 1461.                do
 1463.                   if ( ( 1 + $I_L1461_56 ) < si%dim_1%LB .or. ( 1 + $I_L1461_56 ) > si%dim_1%LB + si%dim_1%EX + -1 ) then
 1463.                       _substr(t$506,1,10) = 'Sizes.f90'
 1463.                       _substr(t$507,1,4) = 'SI'
 1463.                      t$508 = si%dim_1%LB
 1463.                      t$509 = si%dim_1%LB + si%dim_1%EX + -1
 1463.                      t$510 = 1 + $I_L1461_56
 1463.                      call _bounds_error(  _substr(t$506,1,10), 1463,  _substr(t$507,1,3), 1, t$508, t$509, t$510, t$505 )
 1463.                   endif
 1463.                   if ( ( 1 + $I_L1461_56 ) < ci%dim_1%LB .or. ( 1 + $I_L1461_56 ) > ci%dim_1%LB + ci%dim_1%EX + -1 ) then
 1463.                       _substr(t$512,1,10) = 'Sizes.f90'
 1463.                       _substr(t$513,1,4) = 'CI'
 1463.                      t$514 = ci%dim_1%LB
 1463.                      t$515 = ci%dim_1%LB + ci%dim_1%EX + -1
 1463.                      t$516 = 1 + $I_L1461_56
 1463.                      call _bounds_error(  _substr(t$512,1,10), 1463,  _substr(t$513,1,3), 1, t$514, t$515, t$516, t$511 )
 1463.                   endif
 1463.                   if ( ( 1 + $I_L1461_56 ) < sl%dim_1%LB .or. ( 1 + $I_L1461_56 ) > sl%dim_1%LB + sl%dim_1%EX + -1 ) then
 1463.                       _substr(t$518,1,10) = 'Sizes.f90'
 1463.                       _substr(t$519,1,4) = 'SL'
 1463.                      t$520 = sl%dim_1%LB
 1463.                      t$521 = sl%dim_1%LB + sl%dim_1%EX + -1
 1463.                      t$522 = 1 + $I_L1461_56
 1463.                      call _bounds_error(  _substr(t$518,1,10), 1463,  _substr(t$519,1,3), 1, t$520, t$521, t$522, t$517 )
 1463.                   endif
 1463.                   if ( ( 1 + $I_L1461_56 ) < cl%dim_1%LB .or. ( 1 + $I_L1461_56 ) > cl%dim_1%LB + cl%dim_1%EX + -1 ) then
 1463.                       _substr(t$524,1,10) = 'Sizes.f90'
 1463.                       _substr(t$525,1,4) = 'CL'
 1463.                      t$526 = cl%dim_1%LB
 1463.                      t$527 = cl%dim_1%LB + cl%dim_1%EX + -1
 1463.                      t$528 = 1 + $I_L1461_56
 1463.                      call _bounds_error(  _substr(t$524,1,10), 1463,  _substr(t$525,1,3), 1, t$526, t$527, t$528, t$523 )
 1463.                   endif
 1463.                   if ( ( 1 + $I_L1461_56 ) < del%dim_1%LB .or. ( 1 + $I_L1461_56 ) > del%dim_1%LB + del%dim_1%EX + -1 ) then
 1463.                       _substr(t$530,1,10) = 'Sizes.f90'
 1463.                       _substr(t$531,1,4) = 'DEL'
 1463.                      t$532 = del%dim_1%LB
 1463.                      t$533 = del%dim_1%LB + del%dim_1%EX + -1
 1463.                      t$534 = 1 + $I_L1461_56
 1463.                      call _bounds_error(  _substr(t$530,1,10), 1463,  _substr(t$531,1,4), 1, t$532, t$533, t$534, t$529 )
 1463.                   endif
 1463.                   if ( ( 1 + $I_L1461_56 ) < delcl%dim_1%LB .or. ( 1 + $I_L1461_56 ) > delcl%dim_1%LB + delcl%dim_1%EX + -1 ) then
 1463.                       _substr(t$536,1,10) = 'Sizes.f90'
 1463.                       _substr(t$537,1,6) = 'DELCL'
 1463.                      t$538 = delcl%dim_1%LB
 1463.                      t$539 = delcl%dim_1%LB + delcl%dim_1%EX + -1
 1463.                      t$540 = 1 + $I_L1461_56
 1463.                      call _bounds_error(  _substr(t$536,1,10), 1463,  _substr(t$537,1,6), 1, t$538, t$539, t$540, t$535 )
 1463.                   endif
 1462.                   $IOitem_O0 = ( 1 + $I_L1461_56 )
 1462.                   _fwrite( _clist( 0, 0, 3, Null_Arg, Null_Arg, Null_Arg, t$98,  _substr(t$97,1,19), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( $IOitem_O0, 0x2000200000000L ), _iotype( (si%base_addr)(1 + $I_L1461_56, 0), 0x804060300000000L ), _iotype( (ci%base_addr)(1 + $I_L1461_56, 0), 0x804060300000000L ), _iotype( (sl%base_addr)(1 + $I_L1461_56, 0), 0x804060300000000L ), _iotype( (cl%base_addr)(1 + $I_L1461_56, 0), 0x804060300000000L ), _iotype( (del%base_addr)(1 + $I_L1461_56, 0), 0x804060300000000L ), _iotype( (delcl%base_addr)(1 + $I_L1461_56, 0), 0x804060300000000L ) ) )
 1464.                   $I_L1461_56 = 1 + $I_L1461_56
 1464.                   if ( $I_L1461_56 >= $t_S9 ) exit
 1464.                enddo
 1464.             endif
 1465.             k = kmax
 1467.             if ( kmax < si%dim_1%LB .or. kmax > si%dim_1%LB + si%dim_1%EX + -1 ) then
 1467.                 _substr(t$542,1,10) = 'Sizes.f90'
 1467.                 _substr(t$543,1,4) = 'SI'
 1467.                t$508 = si%dim_1%LB
 1467.                t$509 = si%dim_1%LB + si%dim_1%EX + -1
 1467.                t$510 = kmax
 1467.                call _bounds_error(  _substr(t$542,1,10), 1467,  _substr(t$543,1,3), 1, t$508, t$509, t$510, t$541 )
 1467.             endif
 1467.             if ( k < ci%dim_1%LB .or. k > ci%dim_1%LB + ci%dim_1%EX + -1 ) then
 1467.                 _substr(t$545,1,10) = 'Sizes.f90'
 1467.                 _substr(t$546,1,4) = 'CI'
 1467.                t$514 = ci%dim_1%LB
 1467.                t$515 = ci%dim_1%LB + ci%dim_1%EX + -1
 1467.                t$516 = k
 1467.                call _bounds_error(  _substr(t$545,1,10), 1467,  _substr(t$546,1,3), 1, t$514, t$515, t$516, t$544 )
 1467.             endif
 1467.             if ( k < sl%dim_1%LB .or. k > sl%dim_1%LB + sl%dim_1%EX + -1 ) then
 1467.                 _substr(t$548,1,10) = 'Sizes.f90'
 1467.                 _substr(t$549,1,4) = 'SL'
 1467.                t$520 = sl%dim_1%LB
 1467.                t$521 = sl%dim_1%LB + sl%dim_1%EX + -1
 1467.                t$522 = k
 1467.                call _bounds_error(  _substr(t$548,1,10), 1467,  _substr(t$549,1,3), 1, t$520, t$521, t$522, t$547 )
 1467.             endif
 1467.             if ( k < cl%dim_1%LB .or. k > cl%dim_1%LB + cl%dim_1%EX + -1 ) then
 1467.                 _substr(t$551,1,10) = 'Sizes.f90'
 1467.                 _substr(t$552,1,4) = 'CL'
 1467.                t$526 = cl%dim_1%LB
 1467.                t$527 = cl%dim_1%LB + cl%dim_1%EX + -1
 1467.                t$528 = k
 1467.                call _bounds_error(  _substr(t$551,1,10), 1467,  _substr(t$552,1,3), 1, t$526, t$527, t$528, t$550 )
 1467.             endif
 1467.             if ( k < del%dim_1%LB .or. k > del%dim_1%LB + del%dim_1%EX + -1 ) then
 1467.                 _substr(t$554,1,10) = 'Sizes.f90'
 1467.                 _substr(t$555,1,4) = 'DEL'
 1467.                t$532 = del%dim_1%LB
 1467.                t$533 = del%dim_1%LB + del%dim_1%EX + -1
 1467.                t$534 = k
 1467.                call _bounds_error(  _substr(t$554,1,10), 1467,  _substr(t$555,1,4), 1, t$532, t$533, t$534, t$553 )
 1467.             endif
 1466.             $IOitem_O1 = (si%base_addr)(k, 0)
 1466.             $IOitem_O2 = (ci%base_addr)(k, 0)
 1466.             $IOitem_O3 = (sl%base_addr)(k, 0)
 1466.             $IOitem_O4 = (cl%base_addr)(k, 0)
 1466.             $IOitem_O5 = (del%base_addr)(k, 0)
 1466.             $_IOitem_P0(0) = $IOitem_O1
 1466.             $_IOitem_P0(1) = $IOitem_O2
 1466.             $_IOitem_P0(2) = $IOitem_O3
 1466.             $_IOitem_P0(3) = $IOitem_O4
 1466.             $_IOitem_P0(4) = $IOitem_O5
 1466.             _fwrite( _clist( 0, 0, 3, Null_Arg, Null_Arg, Null_Arg, t$100,  _substr(t$99,1,19), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( k, 0x2000200000000L ), _iotype( $_IOitem_P0(:( 0, 4, 1 )), 0x804060300000000L ) ) )
 1468.             k = 1 + kmax
 1470.             if ( 1 + kmax < si%dim_1%LB .or. 1 + kmax > si%dim_1%LB + si%dim_1%EX + -1 ) then
 1470.                 _substr(t$557,1,10) = 'Sizes.f90'
 1470.                 _substr(t$558,1,4) = 'SI'
 1470.                t$538 = si%dim_1%LB
 1470.                t$539 = si%dim_1%LB + si%dim_1%EX + -1
 1470.                t$540 = ( 1 + kmax )
 1470.                call _bounds_error(  _substr(t$557,1,10), 1470,  _substr(t$558,1,3), 1, t$538, t$539, t$540, t$556 )
 1470.             endif
 1470.             if ( k < ci%dim_1%LB .or. k > ci%dim_1%LB + ci%dim_1%EX + -1 ) then
 1470.                 _substr(t$560,1,10) = 'Sizes.f90'
 1470.                 _substr(t$561,1,4) = 'CI'
 1470.                t$508 = ci%dim_1%LB
 1470.                t$509 = ci%dim_1%LB + ci%dim_1%EX + -1
 1470.                t$510 = k
 1470.                call _bounds_error(  _substr(t$560,1,10), 1470,  _substr(t$561,1,3), 1, t$508, t$509, t$510, t$559 )
 1470.             endif
 1469.             $IOitem_O6 = (si%base_addr)(k, 0)
 1469.             $IOitem_O7 = (ci%base_addr)(k, 0)
 1469.             $_IOitem_P1(0) = $IOitem_O6
 1469.             $_IOitem_P1(1) = $IOitem_O7
 1469.             _fwrite( _clist( 0, 0, 3, Null_Arg, Null_Arg, Null_Arg, t$102,  _substr(t$101,1,19), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( k, 0x2000200000000L ), _iotype( $_IOitem_P1(:( 0, 1, 1 )), 0x804060300000000L ) ) )
 1469.          endif
 1469.       endif
 1473.       return
 1473.       end
 1473.       
 1492.       
 1492.       subroutine griddecomposition( ibmax, jbmax, jbmax_ext, nproc, myid, vmax_est )
 1494.       firstlatingroup%header%el_len = 32
 1494.       firstlatingroup%header%assoc = 0
 1494.       firstlatingroup%header%ptr_alloc = 0
 1494.       firstlatingroup%header%p_or_a = 2
 1494.       firstlatingroup%header%a_contig = 1
 1494.       firstlatingroup%header%dv_versn = 2
 1494.       firstlatingroup%header%dv_smunit = 32
 1494.       firstlatingroup%header%d_type = 0
 1494.       firstlatingroup%header%n_params = 0
 1494.       firstlatingroup%header%pad_codim = 0
 1494.       firstlatingroup%header%n_codim = 0
 1494.       firstlatingroup%header%pad_dim = 0
 1494.       firstlatingroup%header%n_dim = 1
 1494.       firstlatingroup%header%d_type_idx = 10
 1494.       firstlatingroup%header%typ_code = 131074
 1494.       firstlatingroup%header%orig_base = 0
 1494.       firstlatingroup%header%orig_size = 0
 1494.       firstlatingroup%dim_1%LB = 1
 1494.       firstlatingroup%dim_1%EX = 0
 1494.       firstlatingroup%dim_1%SM = 1
 1498.       firstloningroup%header%el_len = 32
 1498.       firstloningroup%header%assoc = 0
 1498.       firstloningroup%header%ptr_alloc = 0
 1498.       firstloningroup%header%p_or_a = 2
 1498.       firstloningroup%header%a_contig = 1
 1498.       firstloningroup%header%dv_versn = 2
 1498.       firstloningroup%header%dv_smunit = 32
 1498.       firstloningroup%header%d_type = 0
 1498.       firstloningroup%header%n_params = 0
 1498.       firstloningroup%header%pad_codim = 0
 1498.       firstloningroup%header%n_codim = 0
 1498.       firstloningroup%header%pad_dim = 0
 1498.       firstloningroup%header%n_dim = 1
 1498.       firstloningroup%header%d_type_idx = 10
 1498.       firstloningroup%header%typ_code = 131074
 1498.       firstloningroup%header%orig_base = 0
 1498.       firstloningroup%header%orig_size = 0
 1498.       firstloningroup%dim_1%LB = 1
 1498.       firstloningroup%dim_1%EX = 0
 1498.       firstloningroup%dim_1%SM = 1
 1489.       iaux%header%el_len = 32
 1489.       iaux%header%assoc = 0
 1489.       iaux%header%ptr_alloc = 0
 1489.       iaux%header%p_or_a = 2
 1489.       iaux%header%a_contig = 1
 1489.       iaux%header%dv_versn = 2
 1489.       iaux%header%dv_smunit = 32
 1489.       iaux%header%d_type = 0
 1489.       iaux%header%n_params = 0
 1489.       iaux%header%pad_codim = 0
 1489.       iaux%header%n_codim = 0
 1489.       iaux%header%pad_dim = 0
 1489.       iaux%header%n_dim = 2
 1489.       iaux%header%d_type_idx = 10
 1489.       iaux%header%typ_code = 131074
 1489.       iaux%header%orig_base = 0
 1489.       iaux%header%orig_size = 0
 1489.       iaux%dim_1%LB = 1
 1489.       iaux%dim_1%EX = 0
 1489.       iaux%dim_1%SM = 1
 1489.       iaux%dim_2%LB = 1
 1489.       iaux%dim_2%EX = 0
 1489.       iaux%dim_2%SM = 1
 1496.       iovlap%header%el_len = 32
 1496.       iovlap%header%assoc = 0
 1496.       iovlap%header%ptr_alloc = 0
 1496.       iovlap%header%p_or_a = 2
 1496.       iovlap%header%a_contig = 1
 1496.       iovlap%header%dv_versn = 2
 1496.       iovlap%header%dv_smunit = 32
 1496.       iovlap%header%d_type = 0
 1496.       iovlap%header%n_params = 0
 1496.       iovlap%header%pad_codim = 0
 1496.       iovlap%header%n_codim = 0
 1496.       iovlap%header%pad_dim = 0
 1496.       iovlap%header%n_dim = 1
 1496.       iovlap%header%d_type_idx = 10
 1496.       iovlap%header%typ_code = 131074
 1496.       iovlap%header%orig_base = 0
 1496.       iovlap%header%orig_size = 0
 1496.       iovlap%dim_1%LB = 1
 1496.       iovlap%dim_1%EX = 0
 1496.       iovlap%dim_1%SM = 1
 1493.       jbmaxingroup%header%el_len = 32
 1493.       jbmaxingroup%header%assoc = 0
 1493.       jbmaxingroup%header%ptr_alloc = 0
 1493.       jbmaxingroup%header%p_or_a = 2
 1493.       jbmaxingroup%header%a_contig = 1
 1493.       jbmaxingroup%header%dv_versn = 2
 1493.       jbmaxingroup%header%dv_smunit = 32
 1493.       jbmaxingroup%header%d_type = 0
 1493.       jbmaxingroup%header%n_params = 0
 1493.       jbmaxingroup%header%pad_codim = 0
 1493.       jbmaxingroup%header%n_codim = 0
 1493.       jbmaxingroup%header%pad_dim = 0
 1493.       jbmaxingroup%header%n_dim = 1
 1493.       jbmaxingroup%header%d_type_idx = 10
 1493.       jbmaxingroup%header%typ_code = 131074
 1493.       jbmaxingroup%header%orig_base = 0
 1493.       jbmaxingroup%header%orig_size = 0
 1493.       jbmaxingroup%dim_1%LB = 1
 1493.       jbmaxingroup%dim_1%EX = 0
 1493.       jbmaxingroup%dim_1%SM = 1
 1495.       lastlatingroup%header%el_len = 32
 1495.       lastlatingroup%header%assoc = 0
 1495.       lastlatingroup%header%ptr_alloc = 0
 1495.       lastlatingroup%header%p_or_a = 2
 1495.       lastlatingroup%header%a_contig = 1
 1495.       lastlatingroup%header%dv_versn = 2
 1495.       lastlatingroup%header%dv_smunit = 32
 1495.       lastlatingroup%header%d_type = 0
 1495.       lastlatingroup%header%n_params = 0
 1495.       lastlatingroup%header%pad_codim = 0
 1495.       lastlatingroup%header%n_codim = 0
 1495.       lastlatingroup%header%pad_dim = 0
 1495.       lastlatingroup%header%n_dim = 1
 1495.       lastlatingroup%header%d_type_idx = 10
 1495.       lastlatingroup%header%typ_code = 131074
 1495.       lastlatingroup%header%orig_base = 0
 1495.       lastlatingroup%header%orig_size = 0
 1495.       lastlatingroup%dim_1%LB = 1
 1495.       lastlatingroup%dim_1%EX = 0
 1495.       lastlatingroup%dim_1%SM = 1
 1489.       lastloningroup%header%el_len = 32
 1489.       lastloningroup%header%assoc = 0
 1489.       lastloningroup%header%ptr_alloc = 0
 1489.       lastloningroup%header%p_or_a = 2
 1489.       lastloningroup%header%a_contig = 1
 1489.       lastloningroup%header%dv_versn = 2
 1489.       lastloningroup%header%dv_smunit = 32
 1489.       lastloningroup%header%d_type = 0
 1489.       lastloningroup%header%n_params = 0
 1489.       lastloningroup%header%pad_codim = 0
 1489.       lastloningroup%header%n_codim = 0
 1489.       lastloningroup%header%pad_dim = 0
 1489.       lastloningroup%header%n_dim = 1
 1489.       lastloningroup%header%d_type_idx = 10
 1489.       lastloningroup%header%typ_code = 131074
 1489.       lastloningroup%header%orig_base = 0
 1489.       lastloningroup%header%orig_size = 0
 1489.       lastloningroup%dim_1%LB = 1
 1489.       lastloningroup%dim_1%EX = 0
 1489.       lastloningroup%dim_1%SM = 1
 1491.       lon%header%el_len = 32
 1491.       lon%header%assoc = 0
 1491.       lon%header%ptr_alloc = 0
 1491.       lon%header%p_or_a = 2
 1491.       lon%header%a_contig = 1
 1491.       lon%header%dv_versn = 2
 1491.       lon%header%dv_smunit = 32
 1491.       lon%header%d_type = 0
 1491.       lon%header%n_params = 0
 1491.       lon%header%pad_codim = 0
 1491.       lon%header%n_codim = 0
 1491.       lon%header%pad_dim = 0
 1491.       lon%header%n_dim = 1
 1491.       lon%header%d_type_idx = 10
 1491.       lon%header%typ_code = 131074
 1491.       lon%header%orig_base = 0
 1491.       lon%header%orig_size = 0
 1491.       lon%dim_1%LB = 1
 1491.       lon%dim_1%EX = 0
 1491.       lon%dim_1%SM = 1
 1490.       npointsingroup%header%el_len = 32
 1490.       npointsingroup%header%assoc = 0
 1490.       npointsingroup%header%ptr_alloc = 0
 1490.       npointsingroup%header%p_or_a = 2
 1490.       npointsingroup%header%a_contig = 1
 1490.       npointsingroup%header%dv_versn = 2
 1490.       npointsingroup%header%dv_smunit = 32
 1490.       npointsingroup%header%d_type = 0
 1490.       npointsingroup%header%n_params = 0
 1490.       npointsingroup%header%pad_codim = 0
 1490.       npointsingroup%header%n_codim = 0
 1490.       npointsingroup%header%pad_dim = 0
 1490.       npointsingroup%header%n_dim = 1
 1490.       npointsingroup%header%d_type_idx = 10
 1490.       npointsingroup%header%typ_code = 131074
 1490.       npointsingroup%header%orig_base = 0
 1490.       npointsingroup%header%orig_size = 0
 1490.       npointsingroup%dim_1%LB = 1
 1490.       npointsingroup%dim_1%EX = 0
 1490.       npointsingroup%dim_1%SM = 1
 1497.       nprocsingroup%header%el_len = 32
 1497.       nprocsingroup%header%assoc = 0
 1497.       nprocsingroup%header%ptr_alloc = 0
 1497.       nprocsingroup%header%p_or_a = 2
 1497.       nprocsingroup%header%a_contig = 1
 1497.       nprocsingroup%header%dv_versn = 2
 1497.       nprocsingroup%header%dv_smunit = 32
 1497.       nprocsingroup%header%d_type = 0
 1497.       nprocsingroup%header%n_params = 0
 1497.       nprocsingroup%header%pad_codim = 0
 1497.       nprocsingroup%header%n_codim = 0
 1497.       nprocsingroup%header%pad_dim = 0
 1497.       nprocsingroup%header%n_dim = 1
 1497.       nprocsingroup%header%d_type_idx = 10
 1497.       nprocsingroup%header%typ_code = 131074
 1497.       nprocsingroup%header%orig_base = 0
 1497.       nprocsingroup%header%orig_size = 0
 1497.       nprocsingroup%dim_1%LB = 1
 1497.       nprocsingroup%dim_1%EX = 0
 1497.       nprocsingroup%dim_1%SM = 1
 1476.       procingroup%header%el_len = 32
 1476.       procingroup%header%assoc = 0
 1476.       procingroup%header%ptr_alloc = 0
 1476.       procingroup%header%p_or_a = 2
 1476.       procingroup%header%a_contig = 1
 1476.       procingroup%header%dv_versn = 2
 1476.       procingroup%header%dv_smunit = 32
 1476.       procingroup%header%d_type = 0
 1476.       procingroup%header%n_params = 0
 1476.       procingroup%header%pad_codim = 0
 1476.       procingroup%header%n_codim = 0
 1476.       procingroup%header%pad_dim = 0
 1476.       procingroup%header%n_dim = 1
 1476.       procingroup%header%d_type_idx = 10
 1476.       procingroup%header%typ_code = 131074
 1476.       procingroup%header%orig_base = 0
 1476.       procingroup%header%orig_size = 0
 1476.       procingroup%dim_1%LB = 1
 1476.       procingroup%dim_1%EX = 0
 1476.       procingroup%dim_1%SM = 1
 1502.       if ( nproc <= 3 ) then
 1503.          $ngroups_S2 = nproc
 1504.          $npperg_S0 = 1
 1505.          $nrest_S3 = 0
 1506.          $iex_S1 = 0
 1507.       else if ( nproc <= 5 ) then
 1509.          $ngroups_S2 = 1
 1510.          $npperg_S0 = -1 + nproc
 1511.          $nrest_S3 = 0
 1512.          $iex_S1 = 1
 1512.       else
 1516.          $ngroups_S2 = cvmg( int( _sqrt( real( nproc / 2 ) ) ), 1 + int( _sqrt( real( nproc / 2 ) ) ), int( _sqrt( real( nproc / 2 ) ) ) + int( _sqrt( real( nproc / 2 ) ) ) * int( _sqrt( real( nproc / 2 ) ) ) >= nproc / 2 )
 1521.          $npperg_S0 = nproc / cvmg( int( _sqrt( real( nproc / 2 ) ) ), 1 + int( _sqrt( real( nproc / 2 ) ) ), int( _sqrt( real( nproc / 2 ) ) ) + int( _sqrt( real( nproc / 2 ) ) ) * int( _sqrt( real( nproc / 2 ) ) ) >= nproc / 2 )
 1522.          $nrest_S3 = nproc + -( $npperg_S0 * cvmg( int( _sqrt( real( nproc / 2 ) ) ), 1 + int( _sqrt( real( nproc / 2 ) ) ), int( _sqrt( real( nproc / 2 ) ) ) + int( _sqrt( real( nproc / 2 ) ) ) * int( _sqrt( real( nproc / 2 ) ) ) >= nproc / 2 ) )
 1523.          $iex_S1 = cvmg( 2, 1, $npperg_S0 > 8 )
 1523.       endif
 1530.       $hj_S27 = ( 3.1415926535897931 * 1.0/jmax )
 1531.       gridmap%header%a_contig = 1
 1531.       gridmap%dim_1%LB = 1
 1531.       gridmap%dim_1%EX = _zla( 0, imax )
 1531.       gridmap%dim_1%SM = 1
 1531.       gridmap%dim_2%LB = 1
 1531.       gridmap%dim_2%EX = _zla( 0, jmax )
 1531.       gridmap%dim_2%SM = _zla( 0, imax )
 1531.       $_allo_P2(0) = 0x1000000000001L
 1531.       $_allo_P2(1) = loc( gridmap )
 1531.       call __allocate( $_allo_P2, 0, 0, _fcd( 0, 0 ) )
 1532.       procingroup%header%a_contig = 1
 1532.       procingroup%dim_1%LB = 0
 1532.       procingroup%dim_1%EX = _zla( 0, nproc )
 1532.       procingroup%dim_1%SM = 1
 1532.       $_allo_P3(0) = 0x1000000000001L
 1532.       $_allo_P3(1) = loc( procingroup )
 1532.       call __allocate( $_allo_P3, 0, 0, _fcd( 0, 0 ) )
 1533.       nprocsingroup%header%a_contig = 1
 1533.       nprocsingroup%dim_1%LB = 1
 1533.       nprocsingroup%dim_1%EX = _zla( 0, ( $ngroups_S2 + 2 * $iex_S1 ) )
 1533.       nprocsingroup%dim_1%SM = 1
 1533.       $_allo_P4(0) = 0x1000000000001L
 1533.       $_allo_P4(1) = loc( nprocsingroup )
 1533.       call __allocate( $_allo_P4, 0, 0, _fcd( 0, 0 ) )
 1534.       (nprocsingroup%base_addr)(1, 0) = 1
 1535.       (nprocsingroup%base_addr)($ngroups_S2 + 2 * $iex_S1, 0) = 1
 1536.       if ( $iex_S1 == 2 ) then
 1538.          (nprocsingroup%base_addr)(2, 0) = 1 + int( _sqrt( real( $npperg_S0 ) ) )
 1539.          (nprocsingroup%base_addr)(3, 0) = $npperg_S0 + -( int( _sqrt( real( $npperg_S0 ) ) ) ) + -2
 1540.          (nprocsingroup%base_addr)(3 + $ngroups_S2, 0) = 1 + int( _sqrt( real( $npperg_S0 ) ) )
 1541.          (nprocsingroup%base_addr)(2 + $ngroups_S2, 0) = $npperg_S0 + -( int( _sqrt( real( $npperg_S0 ) ) ) ) + -2
 1542.       else if ( $iex_S1 == 1 ) then
 1544.          (nprocsingroup%base_addr)(2, 0) = -1 + $npperg_S0
 1545.          (nprocsingroup%base_addr)(1 + $ngroups_S2, 0) = -1 + $npperg_S0
 1545.       endif
 1548.       $F_A41 = ( -2 + $ngroups_S2 )
 1548.       if ( -2 + $ngroups_S2 > 0 ) then
 1548.          $I_L1548_257 = 0
 1548. !dir$ ivdep
 1548.          do
 1548.             (nprocsingroup%base_addr)($iex_S1 + $I_L1548_257 + 2, 0) = $npperg_S0
 1548.             $I_L1548_257 = 1 + $I_L1548_257
 1548.             if ( $I_L1548_257 >= $F_A41 ) exit
 1548.          enddo
 1548.       endif
 1549.       if ( $nrest_S3 > 0 ) then
 1549.          $I_L1549_229 = 0
 1549. !dir$ ivdep
 1549.          do
 1550.             (nprocsingroup%base_addr)($iex_S1 + $I_L1549_229 + 2, 0) = 1 + (nprocsingroup%base_addr)($iex_S1 + $I_L1549_229 + 2, 0)
 1551.             $I_L1549_229 = 1 + $I_L1549_229
 1549.             if ( $I_L1549_229 >= $nrest_S3 ) exit
 1549.          enddo
 1549.       endif
 1553.       $i_S7 = -1
 1554.       if ( $ngroups_S2 + 2 * $iex_S1 > 0 ) then
 1554.          $I_L1554_351 = 0
 1554.          do
 1555.             $F_A42 = (nprocsingroup%base_addr)(1 + $I_L1554_351, 0)
 1555.             if ( (nprocsingroup%base_addr)(1 + $I_L1554_351, 0) > 0 ) then
 1555.                $I_L1555_259 = 0
 1555. !dir$ ivdep
 1555.                do
 1555.                   (procingroup%base_addr)($i_S7 + $I_L1555_259 + 1, 0) = ( 1 + $I_L1554_351 )
 1555.                   $I_L1555_259 = 1 + $I_L1555_259
 1555.                   if ( $I_L1555_259 >= $F_A42 ) exit
 1555.                enddo
 1555.             endif
 1556.             $i_S7 = $i_S7 + (nprocsingroup%base_addr)(1 + $I_L1554_351, 0)
 1557.             $I_L1554_351 = 1 + $I_L1554_351
 1554.             if ( $I_L1554_351 >= ( $ngroups_S2 + 2 * $iex_S1 ) ) exit
 1554.          enddo
 1554.       endif
 1558.       npointsingroup%header%a_contig = 1
 1558.       npointsingroup%dim_1%LB = 1
 1558.       npointsingroup%dim_1%EX = ( max( 0, $ngroups_S2 + 2 * $iex_S1 ) )
 1558.       npointsingroup%dim_1%SM = 1
 1558.       $_allo_P5(0) = 0x1000000000001L
 1558.       $_allo_P5(1) = loc( npointsingroup )
 1558.       call __allocate( $_allo_P5, 0, 0, _fcd( 0, 0 ) )
 1559.       pointsinproc%header%a_contig = 1
 1559.       pointsinproc%dim_1%LB = 0
 1559.       pointsinproc%dim_1%EX = ( max( 0, nproc ) )
 1559.       pointsinproc%dim_1%SM = 1
 1559.       $_allo_P6(0) = 0x1000000000001L
 1559.       $_allo_P6(1) = loc( pointsinproc )
 1559.       call __allocate( $_allo_P6, 0, 0, _fcd( 0, 0 ) )
 1560.       firstlatingroup%header%a_contig = 1
 1560.       firstlatingroup%dim_1%LB = 1
 1560.       firstlatingroup%dim_1%EX = ( max( 0, $ngroups_S2 + 2 * $iex_S1 ) )
 1560.       firstlatingroup%dim_1%SM = 1
 1560.       $_allo_P7(0) = 0x1000000000001L
 1560.       $_allo_P7(1) = loc( firstlatingroup )
 1560.       call __allocate( $_allo_P7, 0, 0, _fcd( 0, 0 ) )
 1561.       firstloningroup%header%a_contig = 1
 1561.       firstloningroup%dim_1%LB = 1
 1561.       firstloningroup%dim_1%EX = ( max( 0, $ngroups_S2 + 2 * $iex_S1 ) )
 1561.       firstloningroup%dim_1%SM = 1
 1561.       $_allo_P8(0) = 0x1000000000001L
 1561.       $_allo_P8(1) = loc( firstloningroup )
 1561.       call __allocate( $_allo_P8, 0, 0, _fcd( 0, 0 ) )
 1562.       lastlatingroup%header%a_contig = 1
 1562.       lastlatingroup%dim_1%LB = 1
 1562.       lastlatingroup%dim_1%EX = ( max( 0, $ngroups_S2 + 2 * $iex_S1 ) )
 1562.       lastlatingroup%dim_1%SM = 1
 1562.       $_allo_P9(0) = 0x1000000000001L
 1562.       $_allo_P9(1) = loc( lastlatingroup )
 1562.       call __allocate( $_allo_P9, 0, 0, _fcd( 0, 0 ) )
 1563.       lastloningroup%header%a_contig = 1
 1563.       lastloningroup%dim_1%LB = 1
 1563.       lastloningroup%dim_1%EX = ( max( 0, $ngroups_S2 + 2 * $iex_S1 ) )
 1563.       lastloningroup%dim_1%SM = 1
 1563.       $_allo_P10(0) = 0x1000000000001L
 1563.       $_allo_P10(1) = loc( lastloningroup )
 1563.       call __allocate( $_allo_P10, 0, 0, _fcd( 0, 0 ) )
 1564.       jbmaxingroup%header%a_contig = 1
 1564.       jbmaxingroup%dim_1%LB = 1
 1564.       jbmaxingroup%dim_1%EX = ( max( 0, $ngroups_S2 + 2 * $iex_S1 ) )
 1564.       jbmaxingroup%dim_1%SM = 1
 1564.       $_allo_P11(0) = 0x1000000000001L
 1564.       $_allo_P11(1) = loc( jbmaxingroup )
 1564.       call __allocate( $_allo_P11, 0, 0, _fcd( 0, 0 ) )
 1565.       $Reduc_A43 = 0
 1565.       $F_A45 = jmax
 1565.       if ( jmax > 0 ) then
 1565.          $SC_imaxperj_I21 = imaxperj%dim_1%EX
 1565.          $SC_imaxperj_I22 = imaxperj%dim_1%LB
 1565.          $I_L1565_261 = 0
 1565. !dir$ ivdep
 1565.          do
 1565.             $Reduc_A43 = $Reduc_A43 + (imaxperj%base_addr)(1 + $I_L1565_261, 0)
 1565.             $I_L1565_261 = 1 + $I_L1565_261
 1565.             if ( $I_L1565_261 >= $F_A45 ) exit
 1565.          enddo
 1565.       endif
 1566.       $ngpperproc_S9 = $Reduc_A43 / nproc
 1567.       $nrest_S11 = $Reduc_A43 + -( nproc * $ngpperproc_S9 )
 1568.       $F_A46 = ( $Reduc_A43 + -( nproc * $ngpperproc_S9 ) )
 1568.       if ( $Reduc_A43 + -( nproc * $ngpperproc_S9 ) > 0 ) then
 1568.          $I_L1568_263 = 0
 1568. !dir$ ivdep
 1568.          do
 1568.             (pointsinproc%base_addr)($I_L1568_263, 0) = 1 + $ngpperproc_S9
 1568.             $I_L1568_263 = 1 + $I_L1568_263
 1568.             if ( $I_L1568_263 >= $F_A46 ) exit
 1568.          enddo
 1568.       endif
 1569.       $F_A47 = ( nproc + -$Reduc_A43 + nproc * $ngpperproc_S9 )
 1569.       if ( nproc + -$Reduc_A43 + nproc * $ngpperproc_S9 > 0 ) then
 1569.          $I_L1569_265 = 0
 1569. !dir$ ivdep
 1569.          do
 1569.             (pointsinproc%base_addr)($Reduc_A43 + $I_L1569_265 + -( nproc * $ngpperproc_S9 ), 0) = $ngpperproc_S9
 1569.             $I_L1569_265 = 1 + $I_L1569_265
 1569.             if ( $I_L1569_265 >= $F_A47 ) exit
 1569.          enddo
 1569.       endif
 1570.       $lat_S13 = 1
 1571.       $usedinlat_S14 = 0
 1573.       if ( $ngroups_S2 + 2 * $iex_S1 > 0 ) then
 1573.          $I_L1573_353 = 0
 1573.          do
 1574.             $next_S12 = min( $nrest_S11, (nprocsingroup%base_addr)(1 + $I_L1573_353, 0) )
 1575.             (npointsingroup%base_addr)(1 + $I_L1573_353, 0) = $next_S12 + $ngpperproc_S9 * (nprocsingroup%base_addr)(1 + $I_L1573_353, 0)
 1576.             $nrest_S11 = $nrest_S11 + -$next_S12
 1577.             (firstlatingroup%base_addr)(1 + $I_L1573_353, 0) = $lat_S13
 1578.             (firstloningroup%base_addr)(1 + $I_L1573_353, 0) = 1 + $usedinlat_S14
 1579.             $np_S15 = (imaxperj%base_addr)($lat_S13, 0) + -$usedinlat_S14
 1581.             $SC_npointsingroup_I17 = (npointsingroup%base_addr)(1 + $I_L1573_353, 0)
 1580.             do
 1581.                if ( $np_S15 >= $SC_npointsingroup_I17 ) goto 10
 1582.                $lat_S13 = 1 + $lat_S13
 1582.             enddo
 1582.    10       continue
 1585.             (lastlatingroup%base_addr)(1 + $I_L1573_353, 0) = $lat_S13
 1586.             $usedinlat_S14 = $SC_npointsingroup_I17 + (imaxperj%base_addr)($lat_S13, 0) + -$np_S15
 1587.             (lastloningroup%base_addr)(1 + $I_L1573_353, 0) = $usedinlat_S14
 1588.             if ( (imaxperj%base_addr)($lat_S13, 0) + -$usedinlat_S14 == 0 ) then
 1589.                $lat_S13 = 1 + $lat_S13
 1590.                $usedinlat_S14 = 0
 1590.             endif
 1592.             $I_L1573_353 = 1 + $I_L1573_353
 1591.             if ( $I_L1573_353 >= ( $ngroups_S2 + 2 * $iex_S1 ) ) exit
 1591.          enddo
 1591.       endif
 1593.       $F_A48 = ( $ngroups_S2 + 2 * $iex_S1 )
 1593.       if ( $ngroups_S2 + 2 * $iex_S1 > 0 ) then
 1593.          $I_L1593_267 = 0
 1593. !dir$ ivdep
 1593.          do
 1593.             (jbmaxingroup%base_addr)(1 + $I_L1593_267, 0) = (lastlatingroup%base_addr)(1 + $I_L1593_267, 0) + -(firstlatingroup%base_addr)(1 + $I_L1593_267, 0) + 1
 1593.             $I_L1593_267 = 1 + $I_L1593_267
 1593.             if ( $I_L1593_267 >= $F_A48 ) exit
 1593.          enddo
 1593.       endif
 1594.       $Reduc_A49 = 0xffffffff80000001
 1594.       $F_A51 = ( $ngroups_S2 + 2 * $iex_S1 )
 1594.       if ( $ngroups_S2 + 2 * $iex_S1 > 0 ) then
 1594.          $I_L1594_269 = 0
 1594. !dir$ ivdep
 1594.          do
 1594.             $Reduc_A49 = max( $Reduc_A49, (jbmaxingroup%base_addr)(1 + $I_L1594_269, 0) )
 1594.             $I_L1594_269 = 1 + $I_L1594_269
 1594.             if ( $I_L1594_269 >= $F_A51 ) exit
 1594.          enddo
 1594.       endif
 1600.       jovlap = cvmg( cvmg( int( 2.0 + 2.4985008994603237e-8 * ( delt * vmax_est * imax ) ), int( 2.0 + 4.9970017989206473e-8 * ( vmax_est * delt * imax ) ), sl_twotime_scheme ), 0, slagr )
 1601.       ndim = $npperg_S0 * cvmg( cvmg( int( 2.0 + 2.4985008994603237e-8 * ( delt * vmax_est * imax ) ), int( 2.0 + 4.9970017989206473e-8 * ( vmax_est * delt * imax ) ), sl_twotime_scheme ), 0, slagr ) * 2 + 4 * $Reduc_A49
 1602.       mysendsgr%header%a_contig = 1
 1602.       mysendsgr%dim_1%LB = 1
 1602.       mysendsgr%dim_1%EX = 4
 1602.       mysendsgr%dim_1%SM = 1
 1602.       mysendsgr%dim_2%LB = 1
 1602.       mysendsgr%dim_2%EX = ( max( 0, $npperg_S0 * cvmg( cvmg( int( 2.0 + 2.4985008994603237e-8 * ( delt * vmax_est * imax ) ), int( 2.0 + 4.9970017989206473e-8 * ( vmax_est * delt * imax ) ), sl_twotime_scheme ), 0, slagr ) * 2 + 4 * $Reduc_A49 ) )
 1602.       mysendsgr%dim_2%SM = 4
 1602.       $_allo_P12(0) = 0x1000000000001L
 1602.       $_allo_P12(1) = loc( mysendsgr )
 1602.       call __allocate( $_allo_P12, 0, 0, _fcd( 0, 0 ) )
 1603.       mysendspr%header%a_contig = 1
 1603.       mysendspr%dim_1%LB = 1
 1603.       mysendspr%dim_1%EX = 2
 1603.       mysendspr%dim_1%SM = 1
 1603.       mysendspr%dim_2%LB = 1
 1603.       mysendspr%dim_2%EX = ( max( 0, nproc ) )
 1603.       mysendspr%dim_2%SM = 2
 1603.       $_allo_P13(0) = 0x1000000000001L
 1603.       $_allo_P13(1) = loc( mysendspr )
 1603.       call __allocate( $_allo_P13, 0, 0, _fcd( 0, 0 ) )
 1604.       myrecsgr%header%a_contig = 1
 1604.       myrecsgr%dim_1%LB = 1
 1604.       myrecsgr%dim_1%EX = 4
 1604.       myrecsgr%dim_1%SM = 1
 1604.       myrecsgr%dim_2%LB = 1
 1604.       myrecsgr%dim_2%EX = ( max( 0, jovlap * $npperg_S0 * 2 + 4 * $Reduc_A49 ) )
 1604.       myrecsgr%dim_2%SM = 4
 1604.       $_allo_P14(0) = 0x1000000000001L
 1604.       $_allo_P14(1) = loc( myrecsgr )
 1604.       call __allocate( $_allo_P14, 0, 0, _fcd( 0, 0 ) )
 1605.       myrecspr%header%a_contig = 1
 1605.       myrecspr%dim_1%LB = 1
 1605.       myrecspr%dim_1%EX = 2
 1605.       myrecspr%dim_1%SM = 1
 1605.       myrecspr%dim_2%LB = 1
 1605.       myrecspr%dim_2%EX = ( max( 0, nproc ) )
 1605.       myrecspr%dim_2%SM = 2
 1605.       $_allo_P15(0) = 0x1000000000001L
 1605.       $_allo_P15(1) = loc( myrecspr )
 1605.       call __allocate( $_allo_P15, 0, 0, _fcd( 0, 0 ) )
 1606.       firstlat%header%a_contig = 1
 1606.       firstlat%dim_1%LB = 0
 1606.       firstlat%dim_1%EX = ( max( 0, nproc ) )
 1606.       firstlat%dim_1%SM = 1
 1606.       $_allo_P16(0) = 0x1000000000001L
 1606.       $_allo_P16(1) = loc( firstlat )
 1606.       call __allocate( $_allo_P16, 0, 0, _fcd( 0, 0 ) )
 1607.       firstlon%header%a_contig = 1
 1607.       firstlon%dim_1%LB = 1
 1607.       firstlon%dim_1%EX = ( max( 0, $Reduc_A49 ) )
 1607.       firstlon%dim_1%SM = 1
 1607.       firstlon%dim_2%LB = 0
 1607.       firstlon%dim_2%EX = ( max( 0, nproc ) )
 1607.       firstlon%dim_2%SM = ( max( 0, $Reduc_A49 ) )
 1607.       $_allo_P17(0) = 0x1000000000001L
 1607.       $_allo_P17(1) = loc( firstlon )
 1607.       call __allocate( $_allo_P17, 0, 0, _fcd( 0, 0 ) )
 1608.       lastlat%header%a_contig = 1
 1608.       lastlat%dim_1%LB = 0
 1608.       lastlat%dim_1%EX = ( max( 0, nproc ) )
 1608.       lastlat%dim_1%SM = 1
 1608.       $_allo_P18(0) = 0x1000000000001L
 1608.       $_allo_P18(1) = loc( lastlat )
 1608.       call __allocate( $_allo_P18, 0, 0, _fcd( 0, 0 ) )
 1609.       lastlon%header%a_contig = 1
 1609.       lastlon%dim_1%LB = 1
 1609.       lastlon%dim_1%EX = ( max( 0, $Reduc_A49 ) )
 1609.       lastlon%dim_1%SM = 1
 1609.       lastlon%dim_2%LB = 0
 1609.       lastlon%dim_2%EX = ( max( 0, nproc ) )
 1609.       lastlon%dim_2%SM = ( max( 0, $Reduc_A49 ) )
 1609.       $_allo_P19(0) = 0x1000000000001L
 1609.       $_allo_P19(1) = loc( lastlon )
 1609.       call __allocate( $_allo_P19, 0, 0, _fcd( 0, 0 ) )
 1610.       lon%header%a_contig = 1
 1610.       lon%dim_1%LB = 1
 1610.       lon%dim_1%EX = ( max( 0, $Reduc_A49 ) )
 1610.       lon%dim_1%SM = 1
 1610.       $_allo_P20(0) = 0x1000000000001L
 1610.       $_allo_P20(1) = loc( lon )
 1610.       call __allocate( $_allo_P20, 0, 0, _fcd( 0, 0 ) )
 1612.       $iproc_S18 = 0
 1613.       if ( $ngroups_S2 + 2 * $iex_S1 > 0 ) then
 1613.          $I_L1613_389 = 0
 1613.          do
 1614.             (firstlon%base_addr)(1, $iproc_S18, 0) = (firstloningroup%base_addr)(1 + $I_L1613_389, 0)
 1615.             $F_A52 = ( -1 + (jbmaxingroup%base_addr)(1 + $I_L1613_389, 0) )
 1615.             if ( $F_A52 > 0 ) then
 1615.                $I_L1615_271 = 0
 1615. !dir$ ivdep
 1615.                do
 1615.                   (firstlon%base_addr)(2 + $I_L1615_271, $iproc_S18, 0) = 1
 1615.                   $I_L1615_271 = 1 + $I_L1615_271
 1615.                   if ( $I_L1615_271 >= $F_A52 ) exit
 1615.                enddo
 1615.             endif
 1616.             $F_A53 = (jbmaxingroup%base_addr)(1 + $I_L1613_389, 0)
 1616.             if ( (jbmaxingroup%base_addr)(1 + $I_L1613_389, 0) > 0 ) then
 1616.                $I_L1616_273 = 0
 1616. !dir$ ivdep
 1616.                do
 1616.                   (lastlon%base_addr)(1 + $I_L1616_273, $iproc_S18, 0) = 0
 1616.                   $I_L1616_273 = 1 + $I_L1616_273
 1616.                   if ( $I_L1616_273 >= $F_A53 ) exit
 1616.                enddo
 1616.             endif
 1617.             $F_A54 = (jbmaxingroup%base_addr)(1 + $I_L1613_389, 0)
 1617.             if ( (jbmaxingroup%base_addr)(1 + $I_L1613_389, 0) > 0 ) then
 1617.                $I_L1617_275 = 0
 1617. !dir$ ivdep
 1617.                do
 1617.                   (lon%base_addr)(1 + $I_L1617_275, 0) = (firstlon%base_addr)(1 + $I_L1617_275, $iproc_S18, 0)
 1617.                   $I_L1617_275 = 1 + $I_L1617_275
 1617.                   if ( $I_L1617_275 >= $F_A54 ) exit
 1617.                enddo
 1617.             endif
 1618.             $t_S19 = (nprocsingroup%base_addr)(1 + $I_L1613_389, 0)
 1618.             if ( $t_S19 > 0 ) then
 1620.                $SC_lastlatingroup_I3 = (lastlatingroup%base_addr)(1 + $I_L1613_389, 0)
 1620.                $SC_firstlatingroup_I4 = (firstlatingroup%base_addr)(1 + $I_L1613_389, 0)
 1620.                $SC_jbmaxingroup_I5 = (jbmaxingroup%base_addr)(1 + $I_L1613_389, 0)
 1618.                $I_L1618_381 = 0
 1618.                do
 1619.                   $t_S20 = (pointsinproc%base_addr)($iproc_S18 + $I_L1618_381, 0)
 1619.                   if ( $t_S20 > 0 ) then
 1620.                      if ( $SC_jbmaxingroup_I5 > 0 ) then
 1619.                         $I_L1619_355 = 0
 1619.                         do
 1620.                            $SC_MLoc_I18 = 0
 1620.                            $F_A57 = $SC_jbmaxingroup_I5
 1620.                            $Reduc_A58 = inf
 1620.                            $I_L1620_277 = 0
 1620. !dir$ ivdep
 1620.                            do
 1620.                               $A59 = ( real( (lon%base_addr)(1 + $I_L1620_277, 0) ) * 1.0/( real( (imaxperj%base_addr)($SC_firstlatingroup_I4 + $I_L1620_277, 0) ) ) )
 1620.                               if ( $A59 < $Reduc_A58 ) then
 1620.                                  $Reduc_A58 = $A59
 1620.                                  $SC_MLoc_I18 = 1 + $I_L1620_277
 1620.                               endif
 1620.                               $I_L1620_277 = 1 + $I_L1620_277
 1620.                               if ( $I_L1620_277 >= $F_A57 ) exit
 1620.                            enddo
 1623.                            (lastlon%base_addr)($SC_MLoc_I18, $iproc_S18 + $I_L1618_381, 0) = (lon%base_addr)($SC_MLoc_I18, 0)
 1624.                            (gridmap%base_addr)((lon%base_addr)($SC_MLoc_I18, 0), $SC_firstlatingroup_I4 + $SC_MLoc_I18 + -1, 0) = ( $iproc_S18 + $I_L1618_381 )
 1625.                            (lon%base_addr)($SC_MLoc_I18, 0) = 1 + (lon%base_addr)($SC_MLoc_I18, 0)
 1626.                            if ( $SC_MLoc_I18 + -$SC_jbmaxingroup_I5 == 0 ) then
 1626.                               if ( (lon%base_addr)($SC_MLoc_I18, 0) > (lastloningroup%base_addr)(1 + $I_L1613_389, 0) ) then
 1627.                                  (lon%base_addr)($SC_MLoc_I18, 0) = 1 + (imaxperj%base_addr)($SC_lastlatingroup_I3, 0)
 1627.                               endif
 1627.                            endif
 1628.                            $I_L1619_355 = 1 + $I_L1619_355
 1626.                            if ( $I_L1619_355 >= $t_S20 ) exit
 1626.                         enddo
 1626.                      else if ( $SC_jbmaxingroup_I5 == 0 ) then
 1626.                         $SC_lastloningroup_I25 = (lastloningroup%base_addr)(1 + $I_L1613_389, 0)
 1623.                         $SC_lon_I23 = (lon%base_addr)(0, 0)
 1619.                         $I_L1619_347 = 0
 1619. !dir$ unroll 4
 1619.                         do
 1623.                            $SC_lastlon_I24 = $SC_lon_I23
 1624.                            (gridmap%base_addr)($SC_lon_I23, -1 + $SC_firstlatingroup_I4, 0) = ( $iproc_S18 + $I_L1618_381 )
 1625.                            $SC_lon_I23 = 1 + $SC_lon_I23
 1626.                            if ( $SC_lon_I23 > $SC_lastloningroup_I25 ) then
 1627.                               $SC_lon_I23 = 1 + (imaxperj%base_addr)($SC_lastlatingroup_I3, 0)
 1627.                            endif
 1628.                            $I_L1619_347 = 1 + $I_L1619_347
 1626.                            if ( $I_L1619_347 >= $t_S20 ) exit
 1626.                         enddo
 1623.                         (lastlon%base_addr)(0, $iproc_S18 + $I_L1618_381, 0) = $SC_lastlon_I24
 1625.                         (lon%base_addr)(0, 0) = $SC_lon_I23
 1625.                      else
 1625.                         $N218 = (lon%base_addr)(0, 0)
 1619.                         $I_L1619_349 = 0
 1619. !dir$ ivdep
 1619.                         do
 1623.                            $SC_lastlon_I24 = ( $N218 + $I_L1619_349 )
 1624.                            (gridmap%base_addr)($N218 + $I_L1619_349, -1 + $SC_firstlatingroup_I4, 0) = ( $iproc_S18 + $I_L1618_381 )
 1625.                            $SC_lon_I23 = ( $N218 + $I_L1619_349 + 1 )
 1628.                            $I_L1619_349 = 1 + $I_L1619_349
 1626.                            if ( $I_L1619_349 >= $t_S20 ) exit
 1626.                         enddo
 1623.                         (lastlon%base_addr)(0, $iproc_S18 + $I_L1618_381, 0) = $SC_lastlon_I24
 1625.                         (lon%base_addr)(0, 0) = $SC_lon_I23
 1625.                      endif
 1625.                   endif
 1629.                   if ( (lastlon%base_addr)(1, $iproc_S18 + $I_L1618_381, 0) == 0 ) then
 1630.                      (firstlat%base_addr)($iproc_S18 + $I_L1618_381, 0) = 1 + $SC_firstlatingroup_I4
 1630.                   else
 1632.                      (firstlat%base_addr)($iproc_S18 + $I_L1618_381, 0) = $SC_firstlatingroup_I4
 1632.                   endif
 1634.                   if ( (lastlon%base_addr)($SC_jbmaxingroup_I5, $iproc_S18 + $I_L1618_381, 0) == 0 ) then
 1635.                      (lastlat%base_addr)($iproc_S18 + $I_L1618_381, 0) = -1 + $SC_lastlatingroup_I3
 1635.                   else
 1637.                      (lastlat%base_addr)($iproc_S18 + $I_L1618_381, 0) = $SC_lastlatingroup_I3
 1637.                   endif
 1640.                   if ( $iproc_S18 + $I_L1618_381 + -nproc + 1 /= 0 ) then
 1641.                      $F_A60 = $SC_jbmaxingroup_I5
 1641.                      if ( $SC_jbmaxingroup_I5 > 0 ) then
 1641.                         $I_L1641_279 = 0
 1641. !dir$ ivdep
 1641.                         do
 1641.                            (firstlon%base_addr)(1 + $I_L1641_279, $iproc_S18 + $I_L1618_381 + 1, 0) = (lon%base_addr)(1 + $I_L1641_279, 0)
 1641.                            $I_L1641_279 = 1 + $I_L1641_279
 1641.                            if ( $I_L1641_279 >= $F_A60 ) exit
 1641.                         enddo
 1641.                      endif
 1642.                      $F_A61 = $SC_jbmaxingroup_I5
 1642.                      if ( $SC_jbmaxingroup_I5 > 0 ) then
 1642.                         $I_L1642_281 = 0
 1642. !dir$ ivdep
 1642.                         do
 1642.                            (lastlon%base_addr)(1 + $I_L1642_281, $iproc_S18 + $I_L1618_381 + 1, 0) = 0
 1642.                            $I_L1642_281 = 1 + $I_L1642_281
 1642.                            if ( $I_L1642_281 >= $F_A61 ) exit
 1642.                         enddo
 1642.                      endif
 1642.                   endif
 1644.                   $I_L1618_381 = 1 + $I_L1618_381
 1643.                   if ( $I_L1618_381 >= $t_S19 ) exit
 1643.                enddo
 1639.                $iproc_S18 = $iproc_S18 + $t_S19
 1639.             endif
 1645.             $I_L1613_389 = 1 + $I_L1613_389
 1644.             if ( $I_L1613_389 >= ( $ngroups_S2 + 2 * $iex_S1 ) ) exit
 1644.          enddo
 1644.       endif
 1646.       $mygridpoints_S24 = (pointsinproc%base_addr)(myid, 0)
 1648.       $jbmax_S25 = $mygridpoints_S24 / ibmax
 1649.       jbmax = $jbmax_S25 + ( ibmax * $jbmax_S25 < $mygridpoints_S24 )
 1650.       iperijb%header%a_contig = 1
 1650.       iperijb%dim_1%LB = 1
 1650.       iperijb%dim_1%EX = ( max( 0, ibmax ) )
 1650.       iperijb%dim_1%SM = 1
 1650.       iperijb%dim_2%LB = 1
 1650.       iperijb%dim_2%EX = ( max( 0, $jbmax_S25 + ( ibmax * $jbmax_S25 < $mygridpoints_S24 ) ) )
 1650.       iperijb%dim_2%SM = ( max( 0, ibmax ) )
 1650.       $_allo_P21(0) = 0x1000000000001L
 1650.       $_allo_P21(1) = loc( iperijb )
 1650.       call __allocate( $_allo_P21, 0, 0, _fcd( 0, 0 ) )
 1651.       jperijb%header%a_contig = 1
 1651.       jperijb%dim_1%LB = 1
 1651.       jperijb%dim_1%EX = ( max( 0, ibmax ) )
 1651.       jperijb%dim_1%SM = 1
 1651.       jperijb%dim_2%LB = 1
 1651.       jperijb%dim_2%EX = ( max( 0, $jbmax_S25 + ( ibmax * $jbmax_S25 < $mygridpoints_S24 ) ) )
 1651.       jperijb%dim_2%SM = ( max( 0, ibmax ) )
 1651.       $_allo_P22(0) = 0x1000000000001L
 1651.       $_allo_P22(1) = loc( jperijb )
 1651.       call __allocate( $_allo_P22, 0, 0, _fcd( 0, 0 ) )
 1652.       ibmaxperjb%header%a_contig = 1
 1652.       ibmaxperjb%dim_1%LB = 1
 1652.       ibmaxperjb%dim_1%EX = ( max( 0, $jbmax_S25 + ( ibmax * $jbmax_S25 < $mygridpoints_S24 ) ) )
 1652.       ibmaxperjb%dim_1%SM = 1
 1652.       $_allo_P23(0) = 0x1000000000001L
 1652.       $_allo_P23(1) = loc( ibmaxperjb )
 1652.       call __allocate( $_allo_P23, 0, 0, _fcd( 0, 0 ) )
 1654.       myfirstlat = (firstlat%base_addr)(myid, 0)
 1655.       mylastlat = (lastlat%base_addr)(myid, 0)
 1658.       myfirstlon%header%a_contig = 1
 1658.       myfirstlon%dim_1%LB = ( max( 1, myfirstlat + -jovlap ) )
 1658.       myfirstlon%dim_1%EX = ( max( 0, min( jmax, jovlap + mylastlat ) + -max( 1, myfirstlat + -jovlap ) + 1 ) )
 1658.       myfirstlon%dim_1%SM = 1
 1658.       $_allo_P24(0) = 0x1000000000001L
 1658.       $_allo_P24(1) = loc( myfirstlon )
 1658.       call __allocate( $_allo_P24, 0, 0, _fcd( 0, 0 ) )
 1659.       mylastlon%header%a_contig = 1
 1659.       mylastlon%dim_1%LB = ( max( 1, myfirstlat + -jovlap ) )
 1659.       mylastlon%dim_1%EX = ( max( 0, min( jmax, jovlap + mylastlat ) + -max( 1, myfirstlat + -jovlap ) + 1 ) )
 1659.       mylastlon%dim_1%SM = 1
 1659.       $_allo_P25(0) = 0x1000000000001L
 1659.       $_allo_P25(1) = loc( mylastlon )
 1659.       call __allocate( $_allo_P25, 0, 0, _fcd( 0, 0 ) )
 1660.       iovlap%header%a_contig = 1
 1660.       iovlap%dim_1%LB = ( max( 1, myfirstlat + -jovlap ) )
 1660.       iovlap%dim_1%EX = ( max( 0, min( jmax, jovlap + mylastlat ) + -max( 1, myfirstlat + -jovlap ) + 1 ) )
 1660.       iovlap%dim_1%SM = 1
 1660.       $_allo_P26(0) = 0x1000000000001L
 1660.       $_allo_P26(1) = loc( iovlap )
 1660.       call __allocate( $_allo_P26, 0, 0, _fcd( 0, 0 ) )
 1661.       if ( min( jmax, jovlap + mylastlat ) + -max( 1, myfirstlat + -jovlap ) >= 0 ) then
 1661.          $I_L1661_231 = 0
 1661. !dir$ ivdep
 1661.          do
 1662.             $i_S28 = _anint( ( real( jovlap, 8 ) * (imaxperj%base_addr)($I_L1661_231 + max( 1, myfirstlat + -jovlap ), 0) * 1.0/( imax * sin( ( -5.0e-1 + ( $I_L1661_231 + max( 1, myfirstlat + -jovlap ) ) ) * $hj_S27 ) ) ) )
 1663.             (iovlap%base_addr)($I_L1661_231 + max( 1, myfirstlat + -jovlap ), 0) = 1 + $i_S28
 1664.             $I_L1661_231 = 1 + $I_L1661_231
 1661.             if ( $I_L1661_231 >= min( jmax, jovlap + mylastlat ) + -max( 1, myfirstlat + -jovlap ) + 1 ) exit
 1661.          enddo
 1661.       endif
 1671.       ibperij%header%a_contig = 1
 1671.       ibperij%dim_1%LB = ( 1 + -cvmg( 2, 0, slagr ) )
 1671.       ibperij%dim_1%EX = ( max( 0, imax + 2 * cvmg( 2, 0, slagr ) ) )
 1671.       ibperij%dim_1%SM = 1
 1671.       ibperij%dim_2%LB = -1
 1671.       ibperij%dim_2%EX = ( max( 0, 4 + jmax ) )
 1671.       ibperij%dim_2%SM = ( max( 0, imax + 2 * cvmg( 2, 0, slagr ) ) )
 1671.       $_allo_P27(0) = 0x1000000000001L
 1671.       $_allo_P27(1) = loc( ibperij )
 1671.       call __allocate( $_allo_P27, 0, 0, _fcd( 0, 0 ) )
 1672.       jbperij%header%a_contig = 1
 1672.       jbperij%dim_1%LB = ( 1 + -cvmg( 2, 0, slagr ) )
 1672.       jbperij%dim_1%EX = ( max( 0, imax + 2 * cvmg( 2, 0, slagr ) ) )
 1672.       jbperij%dim_1%SM = 1
 1672.       jbperij%dim_2%LB = -1
 1672.       jbperij%dim_2%EX = ( max( 0, 4 + jmax ) )
 1672.       jbperij%dim_2%SM = ( max( 0, imax + 2 * cvmg( 2, 0, slagr ) ) )
 1672.       $_allo_P28(0) = 0x1000000000001L
 1672.       $_allo_P28(1) = loc( jbperij )
 1672.       call __allocate( $_allo_P28, 0, 0, _fcd( 0, 0 ) )
 1673.       $F_A62 = ( 4 + jmax )
 1673.       $F_A63 = ( imax + 2 * cvmg( 2, 0, slagr ) )
 1673.       if ( and( -$F_A63, -$F_A62 ) < 0 ) then
 1673.          $I_L1673_375 = 0
 1673.          do
 1673.             $I_L1673_283 = 0
 1673. !dir$ ivdep
 1673.             do
 1673.                (ibperij%base_addr)($I_L1673_283 + -cvmg( 2, 0, slagr ) + 1, -1 + $I_L1673_375, 0) = 0
 1673.                $I_L1673_283 = 1 + $I_L1673_283
 1673.                if ( $I_L1673_283 >= $F_A63 ) exit
 1673.             enddo
 1673.             $I_L1673_375 = 1 + $I_L1673_375
 1673.             if ( $I_L1673_375 >= $F_A62 ) exit
 1673.          enddo
 1673.       endif
 1674.       $F_A64 = ( 4 + jmax )
 1674.       $F_A65 = ( imax + 2 * cvmg( 2, 0, slagr ) )
 1674.       if ( and( -$F_A65, -$F_A64 ) < 0 ) then
 1674.          $I_L1674_377 = 0
 1674.          do
 1674.             $I_L1674_285 = 0
 1674. !dir$ ivdep
 1674.             do
 1674.                (jbperij%base_addr)($I_L1674_285 + -cvmg( 2, 0, slagr ) + 1, -1 + $I_L1674_377, 0) = 0
 1674.                $I_L1674_285 = 1 + $I_L1674_285
 1674.                if ( $I_L1674_285 >= $F_A65 ) exit
 1674.             enddo
 1674.             $I_L1674_377 = 1 + $I_L1674_377
 1674.             if ( $I_L1674_377 >= $F_A64 ) exit
 1674.          enddo
 1674.       endif
 1676.       $F_A66 = ( mylastlat + (firstlatingroup%base_addr)((procingroup%base_addr)(myid, 0), 0) + (jbmaxingroup%base_addr)((procingroup%base_addr)(myid, 0), 0) + -myfirstlat + -(lastlatingroup%base_addr)((procingroup%base_addr)(myid, 0), 0) )
 1676.       if ( mylastlat + (firstlatingroup%base_addr)((procingroup%base_addr)(myid, 0), 0) + (jbmaxingroup%base_addr)((procingroup%base_addr)(myid, 0), 0) + -myfirstlat + -(lastlatingroup%base_addr)((procingroup%base_addr)(myid, 0), 0) > 0 ) then
 1676.          $SCA_procingroup_I12 = (procingroup%base_addr)(myid, 0)
 1676.          $SCA_firstlatingroup_I13 = (firstlatingroup%base_addr)($SCA_procingroup_I12, 0)
 1676.          $I_L1676_287 = 0
 1676. !dir$ ivdep
 1676.          do
 1676.             (myfirstlon%base_addr)(myfirstlat + $I_L1676_287, 0) = (firstlon%base_addr)(myfirstlat + $I_L1676_287 + -$SCA_firstlatingroup_I13 + 1, myid, 0)
 1676.             $I_L1676_287 = 1 + $I_L1676_287
 1676.             if ( $I_L1676_287 >= $F_A66 ) exit
 1676.          enddo
 1676.       endif
 1680.       $F_A67 = ( mylastlat + (firstlatingroup%base_addr)((procingroup%base_addr)(myid, 0), 0) + (jbmaxingroup%base_addr)((procingroup%base_addr)(myid, 0), 0) + -myfirstlat + -(lastlatingroup%base_addr)((procingroup%base_addr)(myid, 0), 0) )
 1680.       if ( mylastlat + (firstlatingroup%base_addr)((procingroup%base_addr)(myid, 0), 0) + (jbmaxingroup%base_addr)((procingroup%base_addr)(myid, 0), 0) + -myfirstlat + -(lastlatingroup%base_addr)((procingroup%base_addr)(myid, 0), 0) > 0 ) then
 1680.          $SCA_firstlatingroup_I10 = (firstlatingroup%base_addr)((procingroup%base_addr)(myid, 0), 0)
 1680.          $I_L1680_289 = 0
 1680. !dir$ ivdep
 1680.          do
 1680.             (mylastlon%base_addr)(myfirstlat + $I_L1680_289, 0) = (lastlon%base_addr)(myfirstlat + $I_L1680_289 + -$SCA_firstlatingroup_I10 + 1, myid, 0)
 1680.             $I_L1680_289 = 1 + $I_L1680_289
 1680.             if ( $I_L1680_289 >= $F_A67 ) exit
 1680.          enddo
 1680.       endif
 1684.       $Reduc_A68 = inf
 1684.       $F_A70 = ( mylastlat + -myfirstlat + 1 )
 1684.       if ( mylastlat + -myfirstlat >= 0 ) then
 1684.          $SC_imaxperj_I21 = imaxperj%dim_1%EX
 1684.          $SC_imaxperj_I22 = imaxperj%dim_1%LB
 1684.          $I_L1684_291 = 0
 1684. !dir$ ivdep
 1684.          do
 1684.             $Reduc_A68 = min( $Reduc_A68, ( real( (myfirstlon%base_addr)(myfirstlat + $I_L1684_291, 0) ) * 1.0/( real( (imaxperj%base_addr)(myfirstlat + $I_L1684_291, 0) ) ) ) )
 1684.             $I_L1684_291 = 1 + $I_L1684_291
 1684.             if ( $I_L1684_291 >= $F_A70 ) exit
 1684.          enddo
 1684.       endif
 1684.       $ifirst_S36 = real( $Reduc_A68, 8 )
 1686.       $Reduc_A71 = -inf
 1686.       $F_A73 = ( mylastlat + -myfirstlat + 1 )
 1686.       if ( mylastlat + -myfirstlat >= 0 ) then
 1686.          $SC_imaxperj_I21 = imaxperj%dim_1%EX
 1686.          $SC_imaxperj_I22 = imaxperj%dim_1%LB
 1686.          $I_L1686_293 = 0
 1686. !dir$ ivdep
 1686.          do
 1686.             $Reduc_A71 = max( $Reduc_A71, ( real( (mylastlon%base_addr)(myfirstlat + $I_L1686_293, 0) ) * 1.0/( real( (imaxperj%base_addr)(myfirstlat + $I_L1686_293, 0) ) ) ) )
 1686.             $I_L1686_293 = 1 + $I_L1686_293
 1686.             if ( $I_L1686_293 >= $F_A73 ) exit
 1686.          enddo
 1686.       endif
 1686.       $ilast_S37 = real( $Reduc_A71, 8 )
 1691.       $ijb_S32 = 0
 1692.       if ( mylastlat + -myfirstlat >= 0 ) then
 1692.          $I_L1692_357 = 0
 1692.          do
 1693.             $t_S30 = (myfirstlon%base_addr)(myfirstlat + $I_L1692_357, 0)
 1693.             $t_S31 = (mylastlon%base_addr)(myfirstlat + $I_L1692_357, 0)
 1693.             if ( $t_S31 + -$t_S30 >= 0 ) then
 1693.                $I_L1693_233 = 0
 1693. !dir$ ivdep
 1693.                do
 1694.                   ib = 1 + mod( ( $ijb_S32 + $I_L1693_233 ), ibmax )
 1695.                   jb = 1 + ( $ijb_S32 + $I_L1693_233 ) / ibmax
 1697.                   (iperijb%base_addr)(ib, jb, 0) = ( $t_S30 + $I_L1693_233 )
 1698.                   (jperijb%base_addr)(ib, jb, 0) = ( myfirstlat + $I_L1692_357 )
 1699.                   (ibperij%base_addr)($t_S30 + $I_L1693_233, myfirstlat + $I_L1692_357, 0) = ib
 1700.                   (jbperij%base_addr)($t_S30 + $I_L1693_233, myfirstlat + $I_L1692_357, 0) = jb
 1701.                   $I_L1693_233 = 1 + $I_L1693_233
 1693.                   if ( $I_L1693_233 >= $t_S31 + -$t_S30 + 1 ) exit
 1693.                enddo
 1696.                $ijb_S32 = ( $t_S31 + $ijb_S32 + -$t_S30 + 1 )
 1696.             endif
 1702.             $I_L1692_357 = 1 + $I_L1692_357
 1701.             if ( $I_L1692_357 >= mylastlat + -myfirstlat + 1 ) exit
 1701.          enddo
 1701.       endif
 1703.       $F_A74 = ( $jbmax_S25 + ( ibmax * $jbmax_S25 < $mygridpoints_S24 ) + -1 )
 1703.       if ( $jbmax_S25 + ( ibmax * $jbmax_S25 < $mygridpoints_S24 ) + -1 > 0 ) then
 1703.          $I_L1703_295 = 0
 1703. !dir$ ivdep
 1703.          do
 1703.             (ibmaxperjb%base_addr)(1 + $I_L1703_295, 0) = ibmax
 1703.             $I_L1703_295 = 1 + $I_L1703_295
 1703.             if ( $I_L1703_295 >= $F_A74 ) exit
 1703.          enddo
 1703.       endif
 1704.       (ibmaxperjb%base_addr)($jbmax_S25 + ( ibmax * $jbmax_S25 < $mygridpoints_S24 ), 0) = ib
 1705.       jbmax_ext = jb
 1708.       if ( slagr ) then
 1710.          iaux%header%a_contig = 1
 1710.          iaux%dim_1%LB = 1
 1710.          iaux%dim_1%EX = ( max( 0, imax ) )
 1710.          iaux%dim_1%SM = 1
 1710.          iaux%dim_2%LB = 1
 1710.          iaux%dim_2%EX = ( max( 0, jmax ) )
 1710.          iaux%dim_2%SM = ( max( 0, imax ) )
 1710.          $_allo_P29(0) = 0x1000000000001L
 1710.          $_allo_P29(1) = loc( iaux )
 1710.          call __allocate( $_allo_P29, 0, 0, _fcd( 0, 0 ) )
 1711.          $F_A75 = jmax
 1711.          $F_A76 = imax
 1711.          if ( and( -$F_A76, -$F_A75 ) < 0 ) then
 1711.             $I_L1711_379 = 0
 1711.             do
 1711.                $I_L1711_297 = 0
 1711. !dir$ ivdep
 1711.                do
 1711.                   (iaux%base_addr)(1 + $I_L1711_297, 1 + $I_L1711_379, 0) = -1
 1711.                   $I_L1711_297 = 1 + $I_L1711_297
 1711.                   if ( $I_L1711_297 >= $F_A76 ) exit
 1711.                enddo
 1711.                $I_L1711_379 = 1 + $I_L1711_379
 1711.                if ( $I_L1711_379 >= $F_A75 ) exit
 1711.             enddo
 1711.          endif
 1715.          ipar = 0
 1718.          if ( mylastlat + -myfirstlat + 2 * jovlap >= 0 ) then
 1718.             $I_L1718_359 = 0
 1718.             do
 1719.                $j_S35 = ( myfirstlat + $I_L1718_359 + -jovlap )
 1720.                $iadd_S40 = 0
 1721.                if ( ( myfirstlat + $I_L1718_359 + -jovlap ) <= 0 ) then
 1721.                   $j_S35 = ( jovlap + -myfirstlat + -$I_L1718_359 + 1 )
 1721.                endif
 1722.                if ( ( myfirstlat + $I_L1718_359 + -jovlap ) > jmax ) then
 1722.                   $j_S35 = ( jovlap + -myfirstlat + -$I_L1718_359 + 2 * jmax + 1 )
 1722.                endif
 1723.                if ( myfirstlat + $I_L1718_359 + -jovlap + -$j_S35 /= 0 ) then
 1723.                   $iadd_S40 = (imaxperj%base_addr)($j_S35, 0) / 2
 1723.                endif
 1724.                $i1_S38 = -(iovlap%base_addr)($j_S35, 0) + _anint( $ifirst_S36 * (imaxperj%base_addr)($j_S35, 0) )
 1725.                $i2_S39 = (iovlap%base_addr)($j_S35, 0) + _anint( $ilast_S37 * (imaxperj%base_addr)($j_S35, 0) )
 1726.                if ( $i2_S39 + -$i1_S38 + 1 >= (imaxperj%base_addr)($j_S35, 0) ) then
 1727.                   $i1_S38 = 1
 1728.                   $i2_S39 = (imaxperj%base_addr)($j_S35, 0)
 1728.                endif
 1730.                if ( $i2_S39 + -$i1_S38 >= 0 ) then
 1730.                   $SCA_imaxperj_I16 = (imaxperj%base_addr)($j_S35, 0)
 1730.                   $I_L1730_235 = 0
 1730. !dir$ ivdep
 1730.                   do
 1731.                      $ij_S42 = 1 + mod( ( $i1_S38 + $iadd_S40 + $SCA_imaxperj_I16 + $I_L1730_235 + -1 ), $SCA_imaxperj_I16 )
 1732.                      if ( (gridmap%base_addr)($ij_S42, $j_S35, 0) + -myid /= 0 ) then
 1732.                         (iaux%base_addr)($ij_S42, $j_S35, 0) = (gridmap%base_addr)($ij_S42, $j_S35, 0)
 1732.                      endif
 1733.                      $I_L1730_235 = 1 + $I_L1730_235
 1732.                      if ( $I_L1730_235 >= $i2_S39 + -$i1_S38 + 1 ) exit
 1732.                   enddo
 1732.                endif
 1734.                $I_L1718_359 = 1 + $I_L1718_359
 1733.                if ( $I_L1718_359 >= mylastlat + -myfirstlat + 2 * jovlap + 1 ) exit
 1733.             enddo
 1733.          endif
 1736.          if ( min( jmax, jovlap + mylastlat ) + -max( 1, myfirstlat + -jovlap ) >= 0 ) then
 1736.             $I_L1736_361 = 0
 1736.             do
 1737.                $t_S44 = (imaxperj%base_addr)($I_L1736_361 + max( 1, myfirstlat + -jovlap ), 0)
 1737.                if ( $t_S44 > 0 ) then
 1737.                   $I_L1737_237 = 0
 1737. !dir$ ivdep
 1737.                   do
 1738.                      if ( (iaux%base_addr)(1 + $I_L1737_237, $I_L1736_361 + max( 1, myfirstlat + -jovlap ), 0) /= -1 ) then
 1739.                         $ib_S46 = 1 + mod( $ijb_S32, ibmax )
 1740.                         jb = 1 + $ijb_S32 / ibmax
 1741.                         $ijb_S32 = 1 + $ijb_S32
 1742.                         (ibperij%base_addr)(1 + $I_L1737_237, $I_L1736_361 + max( 1, myfirstlat + -jovlap ), 0) = $ib_S46
 1743.                         (jbperij%base_addr)(1 + $I_L1737_237, $I_L1736_361 + max( 1, myfirstlat + -jovlap ), 0) = jb
 1743.                      endif
 1745.                      $I_L1737_237 = 1 + $I_L1737_237
 1744.                      if ( $I_L1737_237 >= $t_S44 ) exit
 1744.                   enddo
 1744.                endif
 1746.                $i2_S47 = 0
 1747.                if ( $t_S44 > 0 ) then
 1747.                   $I_L1747_239 = 0
 1747. !dir$ unroll 2
 1747.                   do
 1748.                      if ( $i2_S47 == 1 ) then
 1749.                         if ( (myrecsgr%base_addr)(4, ipar, 0) + -(iaux%base_addr)(1 + $I_L1747_239, $I_L1736_361 + max( 1, myfirstlat + -jovlap ), 0) /= 0 ) then
 1750.                            (myrecsgr%base_addr)(2, ipar, 0) = $I_L1747_239
 1751.                            $i2_S47 = 0
 1752.                            if ( (iaux%base_addr)(1 + $I_L1747_239, $I_L1736_361 + max( 1, myfirstlat + -jovlap ), 0) /= -1 ) then
 1753.                               ipar = 1 + ipar
 1754.                               (myrecsgr%base_addr)(1, ipar, 0) = ( 1 + $I_L1747_239 )
 1755.                               (myrecsgr%base_addr)(2, ipar, 0) = $t_S44
 1756.                               (myrecsgr%base_addr)(3, ipar, 0) = ( $I_L1736_361 + max( 1, myfirstlat + -jovlap ) )
 1757.                               (myrecsgr%base_addr)(4, ipar, 0) = (iaux%base_addr)(1 + $I_L1747_239, $I_L1736_361 + max( 1, myfirstlat + -jovlap ), 0)
 1758.                               $i2_S47 = 1
 1758.                            endif
 1758.                         endif
 1761.                      else if ( (iaux%base_addr)(1 + $I_L1747_239, $I_L1736_361 + max( 1, myfirstlat + -jovlap ), 0) /= -1 ) then
 1763.                         ipar = 1 + ipar
 1764.                         (myrecsgr%base_addr)(1, ipar, 0) = ( 1 + $I_L1747_239 )
 1765.                         (myrecsgr%base_addr)(2, ipar, 0) = $t_S44
 1766.                         (myrecsgr%base_addr)(3, ipar, 0) = ( $I_L1736_361 + max( 1, myfirstlat + -jovlap ) )
 1767.                         (myrecsgr%base_addr)(4, ipar, 0) = (iaux%base_addr)(1 + $I_L1747_239, $I_L1736_361 + max( 1, myfirstlat + -jovlap ), 0)
 1768.                         $i2_S47 = 1
 1768.                      endif
 1771.                      $I_L1747_239 = 1 + $I_L1747_239
 1770.                      if ( $I_L1747_239 >= $t_S44 ) exit
 1770.                   enddo
 1770.                endif
 1772.                $I_L1736_361 = 1 + $I_L1736_361
 1771.                if ( $I_L1736_361 >= min( jmax, jovlap + mylastlat ) + -max( 1, myfirstlat + -jovlap ) + 1 ) exit
 1771.             enddo
 1771.          endif
 1774.          jbmax_ext = jb
 1775.          if ( ipar > ndim ) then
 1776.             $Unit_temp_O0 = nfprt
 1776.             $_IOitem_P0(0) = ndim
 1776.             $_IOitem_P0(1) = ipar
 1776.             _fwrite( _clist( 0, 0, 3, $Unit_temp_O0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ' ndim, ipar  ', 0x800600000000L ), _iotype( $_IOitem_P0(:( 0, 1, 1 )), 0x2000200000000L ) ) )
 1777.             $Unit_temp_O1 = nfprt
 1777.             _fwrite( _clist( 0, 0, 3, $Unit_temp_O1, Null_Arg, Null_Arg, t$104,  _substr(t$103,1,53), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(GridDecomposition)**', 0x800600000000L ) ) )
 1778.              _substr(t$610,1,23) = '**(GridDecomposition)**'
 1778.             call _stop(  _substr(t$610,1,23) )
 1778.          else
 1784.             if ( 0 > myfirstlat + -max( 2, jovlap ) ) then
 1785.                $imp2_S49 = (imaxperj%base_addr)(2, 0) / 2
 1786.                $F_A77 = $imp2_S49
 1786.                if ( $imp2_S49 > 0 ) then
 1786.                   $I_L1786_299 = 0
 1786. !dir$ ivdep
 1786.                   do
 1786.                      (ibperij%base_addr)(1 + $I_L1786_299, -1, 0) = (ibperij%base_addr)($imp2_S49 + $I_L1786_299 + 1, 2, 0)
 1786.                      $I_L1786_299 = 1 + $I_L1786_299
 1786.                      if ( $I_L1786_299 >= $F_A77 ) exit
 1786.                   enddo
 1786.                endif
 1788.                $F_A78 = $imp2_S49
 1788.                if ( $imp2_S49 > 0 ) then
 1788.                   $I_L1788_301 = 0
 1788. !dir$ ivdep
 1788.                   do
 1788.                      (jbperij%base_addr)(1 + $I_L1788_301, -1, 0) = (jbperij%base_addr)($imp2_S49 + $I_L1788_301 + 1, 2, 0)
 1788.                      $I_L1788_301 = 1 + $I_L1788_301
 1788.                      if ( $I_L1788_301 >= $F_A78 ) exit
 1788.                   enddo
 1788.                endif
 1787.                $F_A79 = $imp2_S49
 1787.                if ( $imp2_S49 > 0 ) then
 1787.                   $I_L1787_303 = 0
 1787. !dir$ ivdep
 1787.                   do
 1787.                      (ibperij%base_addr)($imp2_S49 + $I_L1787_303 + 1, -1, 0) = (ibperij%base_addr)(1 + $I_L1787_303, 2, 0)
 1787.                      $I_L1787_303 = 1 + $I_L1787_303
 1787.                      if ( $I_L1787_303 >= $F_A79 ) exit
 1787.                   enddo
 1787.                endif
 1789.                $F_A80 = $imp2_S49
 1789.                if ( $imp2_S49 > 0 ) then
 1789.                   $I_L1789_305 = 0
 1789. !dir$ ivdep
 1789.                   do
 1789.                      (jbperij%base_addr)($imp2_S49 + $I_L1789_305 + 1, -1, 0) = (jbperij%base_addr)(1 + $I_L1789_305, 2, 0)
 1789.                      $I_L1789_305 = 1 + $I_L1789_305
 1789.                      if ( $I_L1789_305 >= $F_A80 ) exit
 1789.                   enddo
 1789.                endif
 1789.             endif
 1792.             if ( 0 >= myfirstlat + -max( 2, jovlap ) ) then
 1793.                $imp2_S50 = (imaxperj%base_addr)(1, 0) / 2
 1794.                $F_A81 = $imp2_S50
 1794.                if ( $imp2_S50 > 0 ) then
 1794.                   $I_L1794_307 = 0
 1794. !dir$ ivdep
 1794.                   do
 1794.                      (ibperij%base_addr)(1 + $I_L1794_307, 0, 0) = (ibperij%base_addr)($imp2_S50 + $I_L1794_307 + 1, 1, 0)
 1794.                      $I_L1794_307 = 1 + $I_L1794_307
 1794.                      if ( $I_L1794_307 >= $F_A81 ) exit
 1794.                   enddo
 1794.                endif
 1796.                $F_A82 = $imp2_S50
 1796.                if ( $imp2_S50 > 0 ) then
 1796.                   $I_L1796_309 = 0
 1796. !dir$ ivdep
 1796.                   do
 1796.                      (jbperij%base_addr)(1 + $I_L1796_309, 0, 0) = (jbperij%base_addr)($imp2_S50 + $I_L1796_309 + 1, 1, 0)
 1796.                      $I_L1796_309 = 1 + $I_L1796_309
 1796.                      if ( $I_L1796_309 >= $F_A82 ) exit
 1796.                   enddo
 1796.                endif
 1795.                $F_A83 = $imp2_S50
 1795.                if ( $imp2_S50 > 0 ) then
 1795.                   $I_L1795_311 = 0
 1795. !dir$ ivdep
 1795.                   do
 1795.                      (ibperij%base_addr)($imp2_S50 + $I_L1795_311 + 1, 0, 0) = (ibperij%base_addr)(1 + $I_L1795_311, 1, 0)
 1795.                      $I_L1795_311 = 1 + $I_L1795_311
 1795.                      if ( $I_L1795_311 >= $F_A83 ) exit
 1795.                   enddo
 1795.                endif
 1797.                $F_A84 = $imp2_S50
 1797.                if ( $imp2_S50 > 0 ) then
 1797.                   $I_L1797_313 = 0
 1797. !dir$ ivdep
 1797.                   do
 1797.                      (jbperij%base_addr)($imp2_S50 + $I_L1797_313 + 1, 0, 0) = (jbperij%base_addr)(1 + $I_L1797_313, 1, 0)
 1797.                      $I_L1797_313 = 1 + $I_L1797_313
 1797.                      if ( $I_L1797_313 >= $F_A84 ) exit
 1797.                   enddo
 1797.                endif
 1797.             endif
 1800.             if ( 1 + jmax <= mylastlat + max( 2, jovlap ) ) then
 1801.                $imp2_S51 = (imaxperj%base_addr)(jmax, 0) / 2
 1802.                $F_A85 = $imp2_S51
 1802.                if ( $imp2_S51 > 0 ) then
 1802.                   $I_L1802_315 = 0
 1802. !dir$ ivdep
 1802.                   do
 1802.                      (ibperij%base_addr)(1 + $I_L1802_315, 1 + jmax, 0) = (ibperij%base_addr)($imp2_S51 + $I_L1802_315 + 1, jmax, 0)
 1802.                      $I_L1802_315 = 1 + $I_L1802_315
 1802.                      if ( $I_L1802_315 >= $F_A85 ) exit
 1802.                   enddo
 1802.                endif
 1804.                $F_A86 = $imp2_S51
 1804.                if ( $imp2_S51 > 0 ) then
 1804.                   $I_L1804_317 = 0
 1804. !dir$ ivdep
 1804.                   do
 1804.                      (jbperij%base_addr)(1 + $I_L1804_317, 1 + jmax, 0) = (jbperij%base_addr)($imp2_S51 + $I_L1804_317 + 1, jmax, 0)
 1804.                      $I_L1804_317 = 1 + $I_L1804_317
 1804.                      if ( $I_L1804_317 >= $F_A86 ) exit
 1804.                   enddo
 1804.                endif
 1803.                $F_A87 = $imp2_S51
 1803.                if ( $imp2_S51 > 0 ) then
 1803.                   $I_L1803_319 = 0
 1803. !dir$ ivdep
 1803.                   do
 1803.                      (ibperij%base_addr)($imp2_S51 + $I_L1803_319 + 1, 1 + jmax, 0) = (ibperij%base_addr)(1 + $I_L1803_319, jmax, 0)
 1803.                      $I_L1803_319 = 1 + $I_L1803_319
 1803.                      if ( $I_L1803_319 >= $F_A87 ) exit
 1803.                   enddo
 1803.                endif
 1805.                $F_A88 = $imp2_S51
 1805.                if ( $imp2_S51 > 0 ) then
 1805.                   $I_L1805_321 = 0
 1805. !dir$ ivdep
 1805.                   do
 1805.                      (jbperij%base_addr)($imp2_S51 + $I_L1805_321 + 1, 1 + jmax, 0) = (jbperij%base_addr)(1 + $I_L1805_321, jmax, 0)
 1805.                      $I_L1805_321 = 1 + $I_L1805_321
 1805.                      if ( $I_L1805_321 >= $F_A88 ) exit
 1805.                   enddo
 1805.                endif
 1805.             endif
 1808.             if ( 2 + jmax <= mylastlat + max( 2, jovlap ) ) then
 1809.                $imp2_S52 = (imaxperj%base_addr)(-1 + jmax, 0) / 2
 1810.                $F_A89 = $imp2_S52
 1810.                if ( $imp2_S52 > 0 ) then
 1810.                   $I_L1810_323 = 0
 1810. !dir$ ivdep
 1810.                   do
 1810.                      (ibperij%base_addr)(1 + $I_L1810_323, 2 + jmax, 0) = (ibperij%base_addr)($imp2_S52 + $I_L1810_323 + 1, -1 + jmax, 0)
 1810.                      $I_L1810_323 = 1 + $I_L1810_323
 1810.                      if ( $I_L1810_323 >= $F_A89 ) exit
 1810.                   enddo
 1810.                endif
 1812.                $F_A90 = $imp2_S52
 1812.                if ( $imp2_S52 > 0 ) then
 1812.                   $I_L1812_325 = 0
 1812. !dir$ ivdep
 1812.                   do
 1812.                      (jbperij%base_addr)(1 + $I_L1812_325, 2 + jmax, 0) = (jbperij%base_addr)($imp2_S52 + $I_L1812_325 + 1, -1 + jmax, 0)
 1812.                      $I_L1812_325 = 1 + $I_L1812_325
 1812.                      if ( $I_L1812_325 >= $F_A90 ) exit
 1812.                   enddo
 1812.                endif
 1811.                $F_A91 = $imp2_S52
 1811.                if ( $imp2_S52 > 0 ) then
 1811.                   $I_L1811_327 = 0
 1811. !dir$ ivdep
 1811.                   do
 1811.                      (ibperij%base_addr)($imp2_S52 + $I_L1811_327 + 1, 2 + jmax, 0) = (ibperij%base_addr)(1 + $I_L1811_327, -1 + jmax, 0)
 1811.                      $I_L1811_327 = 1 + $I_L1811_327
 1811.                      if ( $I_L1811_327 >= $F_A91 ) exit
 1811.                   enddo
 1811.                endif
 1813.                $F_A92 = $imp2_S52
 1813.                if ( $imp2_S52 > 0 ) then
 1813.                   $I_L1813_329 = 0
 1813. !dir$ ivdep
 1813.                   do
 1813.                      (jbperij%base_addr)($imp2_S52 + $I_L1813_329 + 1, 2 + jmax, 0) = (jbperij%base_addr)(1 + $I_L1813_329, -1 + jmax, 0)
 1813.                      $I_L1813_329 = 1 + $I_L1813_329
 1813.                      if ( $I_L1813_329 >= $F_A92 ) exit
 1813.                   enddo
 1813.                endif
 1813.             endif
 1817.             if ( min( jovlap + mylastlat, 2 + jmax ) + -max( -1, myfirstlat + -jovlap ) >= 0 ) then
 1817.                $I_L1817_241 = 0
 1817. !dir$ ivdep
 1817.                do
 1818.                   $jb_S54 = ( $I_L1817_241 + max( -1, myfirstlat + -jovlap ) )
 1819.                   if ( $I_L1817_241 + max( -1, myfirstlat + -jovlap ) == -1 ) then
 1819.                      $jb_S54 = 2
 1819.                   endif
 1820.                   if ( $I_L1817_241 + max( -1, myfirstlat + -jovlap ) == 0 ) then
 1820.                      $jb_S54 = 1
 1820.                   endif
 1821.                   if ( jmax + -max( -1, myfirstlat + -jovlap ) + -$I_L1817_241 == -1 ) then
 1821.                      $jb_S54 = jmax
 1821.                   endif
 1822.                   if ( jmax + -max( -1, myfirstlat + -jovlap ) + -$I_L1817_241 == -2 ) then
 1822.                      $jb_S54 = -1 + jmax
 1822.                   endif
 1823.                   $ib_S55 = (imaxperj%base_addr)($jb_S54, 0)
 1824.                   (ibperij%base_addr)(0, $I_L1817_241 + max( -1, myfirstlat + -jovlap ), 0) = (ibperij%base_addr)($ib_S55, $I_L1817_241 + max( -1, myfirstlat + -jovlap ), 0)
 1825.                   (ibperij%base_addr)(-1, $I_L1817_241 + max( -1, myfirstlat + -jovlap ), 0) = (ibperij%base_addr)(-1 + $ib_S55, $I_L1817_241 + max( -1, myfirstlat + -jovlap ), 0)
 1826.                   (ibperij%base_addr)(1 + $ib_S55, $I_L1817_241 + max( -1, myfirstlat + -jovlap ), 0) = (ibperij%base_addr)(1, $I_L1817_241 + max( -1, myfirstlat + -jovlap ), 0)
 1827.                   (ibperij%base_addr)(2 + $ib_S55, $I_L1817_241 + max( -1, myfirstlat + -jovlap ), 0) = (ibperij%base_addr)(2, $I_L1817_241 + max( -1, myfirstlat + -jovlap ), 0)
 1828.                   (jbperij%base_addr)(0, $I_L1817_241 + max( -1, myfirstlat + -jovlap ), 0) = (jbperij%base_addr)($ib_S55, $I_L1817_241 + max( -1, myfirstlat + -jovlap ), 0)
 1829.                   (jbperij%base_addr)(-1, $I_L1817_241 + max( -1, myfirstlat + -jovlap ), 0) = (jbperij%base_addr)(-1 + $ib_S55, $I_L1817_241 + max( -1, myfirstlat + -jovlap ), 0)
 1830.                   (jbperij%base_addr)(1 + $ib_S55, $I_L1817_241 + max( -1, myfirstlat + -jovlap ), 0) = (jbperij%base_addr)(1, $I_L1817_241 + max( -1, myfirstlat + -jovlap ), 0)
 1831.                   (jbperij%base_addr)(2 + $ib_S55, $I_L1817_241 + max( -1, myfirstlat + -jovlap ), 0) = (jbperij%base_addr)(2, $I_L1817_241 + max( -1, myfirstlat + -jovlap ), 0)
 1832.                   $I_L1817_241 = 1 + $I_L1817_241
 1822.                   if ( $I_L1817_241 >= min( jovlap + mylastlat, 2 + jmax ) + -max( -1, myfirstlat + -jovlap ) + 1 ) exit
 1822.                enddo
 1822.             endif
 1836.             if ( -2 + ipar >= 0 ) then
 1836.                $I_L1836_383 = 0
 1836.                do
 1837.                   $I_L1837_363 = 0
 1837.                   do
 1838.                      if ( (myrecsgr%base_addr)(4, $I_L1836_383 + -$I_L1837_363 + 2, 0) >= (myrecsgr%base_addr)(4, $I_L1836_383 + -$I_L1837_363 + 1, 0) ) exit
 1839.                      $I_L1839_331 = 0
 1839. !dir$ ivdep
 1839.                      do
 1839.                         $aux_WR0_R0 = (myrecsgr%base_addr)(1 + $I_L1839_331, $I_L1836_383 + -$I_L1837_363 + 1, 0)
 1840.                         (myrecsgr%base_addr)(1 + $I_L1839_331, $I_L1836_383 + -$I_L1837_363 + 1, 0) = (myrecsgr%base_addr)(1 + $I_L1839_331, $I_L1836_383 + -$I_L1837_363 + 2, 0)
 1841.                         (myrecsgr%base_addr)(1 + $I_L1839_331, $I_L1836_383 + -$I_L1837_363 + 2, 0) = $aux_WR0_R0
 1839.                         $I_L1839_331 = 1 + $I_L1839_331
 1839.                         if ( $I_L1839_331 >= 4 ) exit
 1839.                      enddo
 1845.                      $I_L1837_363 = 1 + $I_L1837_363
 1839.                      if ( $I_L1837_363 >= 1 + $I_L1836_383 ) exit
 1839.                   enddo
 1846.                   $I_L1836_383 = 1 + $I_L1836_383
 1845.                   if ( $I_L1836_383 >= -1 + ipar ) exit
 1845.                enddo
 1845.             endif
 1847.             (myrecspr%base_addr)(1, 1, 0) = (myrecsgr%base_addr)(4, 1, 0)
 1848.             nrecs_gr = 1
 1849.             if ( -2 + ipar >= 0 ) then
 1849.                $I_L1849_243 = 0
 1849. !dir$ ivdep
 1849.                do
 1850.                   if ( (myrecsgr%base_addr)(4, 1 + $I_L1849_243, 0) + -(myrecsgr%base_addr)(4, 2 + $I_L1849_243, 0) /= 0 ) then
 1851.                      nrecs_gr = 1 + nrecs_gr
 1852.                      (myrecspr%base_addr)(2, -1 + nrecs_gr, 0) = ( 1 + $I_L1849_243 )
 1853.                      (myrecspr%base_addr)(1, nrecs_gr, 0) = (myrecsgr%base_addr)(4, 2 + $I_L1849_243, 0)
 1853.                   endif
 1855.                   $I_L1849_243 = 1 + $I_L1849_243
 1854.                   if ( $I_L1849_243 >= -1 + ipar ) exit
 1854.                enddo
 1854.             endif
 1856.             (myrecspr%base_addr)(2, nrecs_gr, 0) = ipar
 1857.             if ( ipar == 0 ) then
 1858.                nrecs_gr = 0
 1859.                nsends_gr = 0
 1859.             endif
 1859.             goto 20
 1859.          endif
 1859.       else
 1859.    20    continue
 1866.          $Reduc_A93 = 0xffffffff80000001
 1866.          $F_A95 = _zla( 0, ( $ngroups_S2 + 2 * $iex_S1 ) )
 1866.          if ( $ngroups_S2 + 2 * $iex_S1 > 0 ) then
 1866.             $I_L1866_333 = 0
 1866. !dir$ ivdep
 1866.             do
 1866.                $Reduc_A93 = max( $Reduc_A93, (nprocsingroup%base_addr)(1 + $I_L1866_333, 0) )
 1866.                $I_L1866_333 = 1 + $I_L1866_333
 1866.                if ( $I_L1866_333 >= $F_A95 ) exit
 1866.             enddo
 1866.          endif
 1866.          ndim_f = 3 * jmaxlocal_f + jmaxlocal_f * $Reduc_A93
 1867.          messages_f%header%a_contig = 1
 1867.          messages_f%dim_1%LB = 1
 1867.          messages_f%dim_1%EX = 4
 1867.          messages_f%dim_1%SM = 1
 1867.          messages_f%dim_2%LB = 1
 1867.          messages_f%dim_2%EX = ( max( 0, 3 * jmaxlocal_f + jmaxlocal_f * $Reduc_A93 ) )
 1867.          messages_f%dim_2%SM = 4
 1867.          $_allo_P30(0) = 0x1000000000001L
 1867.          $_allo_P30(1) = loc( messages_f )
 1867.          call __allocate( $_allo_P30, 0, 0, _fcd( 0, 0 ) )
 1868.          messproc_f%header%a_contig = 1
 1868.          messproc_f%dim_1%LB = 1
 1868.          messproc_f%dim_1%EX = 2
 1868.          messproc_f%dim_1%SM = 1
 1868.          messproc_f%dim_2%LB = 0
 1868.          messproc_f%dim_2%EX = ( max( 0, 1 + nproc ) )
 1868.          messproc_f%dim_2%SM = 2
 1868.          $_allo_P31(0) = 0x1000000000001L
 1868.          $_allo_P31(1) = loc( messproc_f )
 1868.          call __allocate( $_allo_P31, 0, 0, _fcd( 0, 0 ) )
 1869.          messages_g%header%a_contig = 1
 1869.          messages_g%dim_1%LB = 1
 1869.          messages_g%dim_1%EX = 4
 1869.          messages_g%dim_1%SM = 1
 1869.          messages_g%dim_2%LB = 1
 1869.          messages_g%dim_2%EX = ( max( 0, ndim_f ) )
 1869.          messages_g%dim_2%SM = 4
 1869.          $_allo_P32(0) = 0x1000000000001L
 1869.          $_allo_P32(1) = loc( messages_g )
 1869.          call __allocate( $_allo_P32, 0, 0, _fcd( 0, 0 ) )
 1870.          messproc_g%header%a_contig = 1
 1870.          messproc_g%dim_1%LB = 1
 1870.          messproc_g%dim_1%EX = 2
 1870.          messproc_g%dim_1%SM = 1
 1870.          messproc_g%dim_2%LB = 0
 1870.          messproc_g%dim_2%EX = ( max( 0, 1 + nproc ) )
 1870.          messproc_g%dim_2%SM = 2
 1870.          $_allo_P33(0) = 0x1000000000001L
 1870.          $_allo_P33(1) = loc( messproc_g )
 1870.          call __allocate( $_allo_P33, 0, 0, _fcd( 0, 0 ) )
 1871.          $ipar_S59 = 1
 1872.          if ( mylastlat_f + -myfirstlat_f >= 0 ) then
 1872.             $I_L1872_365 = 0
 1872.             do
 1873.                (messages_f%base_addr)(1, $ipar_S59, 0) = 1
 1874.                (messages_f%base_addr)(3, $ipar_S59, 0) = ( myfirstlat_f + $I_L1872_365 )
 1875.                (messages_f%base_addr)(4, $ipar_S59, 0) = (gridmap%base_addr)(1, myfirstlat_f + $I_L1872_365, 0)
 1876.                $t_S61 = (imaxperj%base_addr)(myfirstlat_f + $I_L1872_365, 0)
 1876.                if ( -2 + $t_S61 >= 0 ) then
 1888.                   if ( 0 < -2 + $t_S61 ) then
 1876.                      $I_L1876_245 = 0
 1876. !dir$ unroll 2
 1876.                      do
 1877.                         if ( (gridmap%base_addr)(2 + $I_L1876_245, myfirstlat_f + $I_L1872_365, 0) + -(messages_f%base_addr)(4, $ipar_S59, 0) /= 0 ) then
 1878.                            (messages_f%base_addr)(2, $ipar_S59, 0) = ( 1 + $I_L1876_245 )
 1879.                            $ipar_S59 = $ipar_S59 + ( (messages_f%base_addr)(4, $ipar_S59, 0) + -myid /= 0 )
 1880.                            (messages_f%base_addr)(1, $ipar_S59, 0) = ( 2 + $I_L1876_245 )
 1881.                            (messages_f%base_addr)(3, $ipar_S59, 0) = ( myfirstlat_f + $I_L1872_365 )
 1882.                            (messages_f%base_addr)(4, $ipar_S59, 0) = (gridmap%base_addr)(2 + $I_L1876_245, myfirstlat_f + $I_L1872_365, 0)
 1882.                         endif
 1888.                         $I_L1876_245 = 1 + $I_L1876_245
 1887.                         if ( $I_L1876_245 >= -2 + $t_S61 ) exit
 1887.                      enddo
 1887.                   endif
 1877.                   if ( (gridmap%base_addr)($t_S61, myfirstlat_f + $I_L1872_365, 0) + -(messages_f%base_addr)(4, $ipar_S59, 0) /= 0 ) then
 1878.                      (messages_f%base_addr)(2, $ipar_S59, 0) = ( -1 + $t_S61 )
 1879.                      $ipar_S59 = $ipar_S59 + ( (messages_f%base_addr)(4, $ipar_S59, 0) + -myid /= 0 )
 1880.                      (messages_f%base_addr)(1, $ipar_S59, 0) = $t_S61
 1881.                      (messages_f%base_addr)(3, $ipar_S59, 0) = ( myfirstlat_f + $I_L1872_365 )
 1882.                      (messages_f%base_addr)(4, $ipar_S59, 0) = (gridmap%base_addr)($t_S61, myfirstlat_f + $I_L1872_365, 0)
 1882.                   endif
 1885.                   (messages_f%base_addr)(2, $ipar_S59, 0) = $t_S61
 1886.                   $ipar_S59 = $ipar_S59 + ( (messages_f%base_addr)(4, $ipar_S59, 0) + -myid /= 0 )
 1886.                endif
 1889.                $I_L1872_365 = 1 + $I_L1872_365
 1888.                if ( $I_L1872_365 >= mylastlat_f + -myfirstlat_f + 1 ) exit
 1888.             enddo
 1888.          endif
 1891.          if ( -1 + $ipar_S59 > ndim_f ) then
 1892.             $Unit_temp_O2 = nfprt
 1892.             $_IOitem_P1(0) = ndim_f
 1892.             $_IOitem_P1(1) = -1 + $ipar_S59
 1892.             _fwrite( _clist( 0, 0, 3, $Unit_temp_O2, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( ' ndim_f, ipar  ', 0x800600000000L ), _iotype( $_IOitem_P1(:( 0, 1, 1 )), 0x2000200000000L ) ) )
 1893.             $Unit_temp_O3 = nfprt
 1893.             _fwrite( _clist( 0, 0, 3, $Unit_temp_O3, Null_Arg, Null_Arg, t$106,  _substr(t$105,1,53), Null_Arg, Null_Arg, Null_Arg, Null_Arg, 0, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg, Null_Arg ), _iolist( _iotype( '**(GridDecomposition)**', 0x800600000000L ) ) )
 1894.              _substr(t$631,1,23) = '**(GridDecomposition)**'
 1894.             call _stop(  _substr(t$631,1,23) )
 1894.          else
 1899.             if ( -3 + $ipar_S59 >= 0 ) then
 1899.                $I_L1899_385 = 0
 1899.                do
 1900.                   $I_L1900_367 = 0
 1900.                   do
 1901.                      if ( (messages_f%base_addr)(4, $I_L1899_385 + -$I_L1900_367 + 2, 0) >= (messages_f%base_addr)(4, $I_L1899_385 + -$I_L1900_367 + 1, 0) ) exit
 1902.                      $I_L1902_335 = 0
 1902. !dir$ ivdep
 1902.                      do
 1902.                         $aux_WR0_R1 = (messages_f%base_addr)(1 + $I_L1902_335, $I_L1899_385 + -$I_L1900_367 + 1, 0)
 1903.                         (messages_f%base_addr)(1 + $I_L1902_335, $I_L1899_385 + -$I_L1900_367 + 1, 0) = (messages_f%base_addr)(1 + $I_L1902_335, $I_L1899_385 + -$I_L1900_367 + 2, 0)
 1904.                         (messages_f%base_addr)(1 + $I_L1902_335, $I_L1899_385 + -$I_L1900_367 + 2, 0) = $aux_WR0_R1
 1902.                         $I_L1902_335 = 1 + $I_L1902_335
 1902.                         if ( $I_L1902_335 >= 4 ) exit
 1902.                      enddo
 1908.                      $I_L1900_367 = 1 + $I_L1900_367
 1902.                      if ( $I_L1900_367 >= 1 + $I_L1899_385 ) exit
 1902.                   enddo
 1909.                   $I_L1899_385 = 1 + $I_L1899_385
 1908.                   if ( $I_L1899_385 >= -2 + $ipar_S59 ) exit
 1908.                enddo
 1908.             endif
 1910.             (messproc_f%base_addr)(2, 0, 0) = 0
 1911.             if ( -1 + $ipar_S59 > 0 ) then
 1912.                (messproc_f%base_addr)(1, 1, 0) = (messages_f%base_addr)(4, 1, 0)
 1913.                nrecs_f = 1
 1914.                if ( -3 + $ipar_S59 >= 0 ) then
 1914.                   $I_L1914_247 = 0
 1914. !dir$ ivdep
 1914.                   do
 1915.                      if ( (messages_f%base_addr)(4, 1 + $I_L1914_247, 0) + -(messages_f%base_addr)(4, 2 + $I_L1914_247, 0) /= 0 ) then
 1916.                         nrecs_f = 1 + nrecs_f
 1917.                         (messproc_f%base_addr)(2, -1 + nrecs_f, 0) = ( 1 + $I_L1914_247 )
 1918.                         (messproc_f%base_addr)(1, nrecs_f, 0) = (messages_f%base_addr)(4, 2 + $I_L1914_247, 0)
 1918.                      endif
 1920.                      $I_L1914_247 = 1 + $I_L1914_247
 1919.                      if ( $I_L1914_247 >= -2 + $ipar_S59 ) exit
 1919.                   enddo
 1919.                endif
 1921.                (messproc_f%base_addr)(2, nrecs_f, 0) = -1 + $ipar_S59
 1921.             else
 1923.                nrecs_f = 0
 1923.             endif
 1928.             firstandlastlat%header%a_contig = 1
 1928.             firstandlastlat%dim_1%LB = 1
 1928.             firstandlastlat%dim_1%EX = 2
 1928.             firstandlastlat%dim_1%SM = 1
 1928.             firstandlastlat%dim_2%LB = 0
 1928.             firstandlastlat%dim_2%EX = ( max( 0, maxnodes ) )
 1928.             firstandlastlat%dim_2%SM = 2
 1928.             $_allo_P34(0) = 0x1000000000001L
 1928.             $_allo_P34(1) = loc( firstandlastlat )
 1928.             call __allocate( $_allo_P34, 0, 0, _fcd( 0, 0 ) )
 1929.             nlatsinproc_d%header%a_contig = 1
 1929.             nlatsinproc_d%dim_1%LB = 0
 1929.             nlatsinproc_d%dim_1%EX = ( max( 0, maxnodes ) )
 1929.             nlatsinproc_d%dim_1%SM = 1
 1929.             $_allo_P35(0) = 0x1000000000001L
 1929.             $_allo_P35(1) = loc( nlatsinproc_d )
 1929.             call __allocate( $_allo_P35, 0, 0, _fcd( 0, 0 ) )
 1930.             $lat_S68 = jmax / maxnodes
 1934.             $n_S66 = 0
 1935.             if ( maxnodes > 0 ) then
 1935.                $I_L1935_249 = 0
 1935. !dir$ unroll 2
 1935.                do
 1936.                   (firstandlastlat%base_addr)(1, $I_L1935_249, 0) = 1 + $n_S66
 1937.                   $n_S66 = $n_S66 + cvmg( 1 + $lat_S68, $lat_S68, or( $I_L1935_249 < ( jmax + -( maxnodes * $lat_S68 ) ) / 2, $I_L1935_249 >= maxnodes + ( jmax + -( maxnodes * $lat_S68 ) ) / 2 + -jmax + maxnodes * $lat_S68 ) )
 1942.                   (firstandlastlat%base_addr)(2, $I_L1935_249, 0) = $n_S66
 1943.                   $I_L1935_249 = 1 + $I_L1935_249
 1935.                   if ( $I_L1935_249 >= maxnodes ) exit
 1935.                enddo
 1935.             endif
 1944.             $F_A96 = maxnodes
 1944.             if ( maxnodes > 0 ) then
 1944.                $I_L1944_337 = 0
 1944. !dir$ ivdep
 1944.                do
 1944.                   (nlatsinproc_d%base_addr)($I_L1944_337, 0) = (firstandlastlat%base_addr)(2, $I_L1944_337, 0) + -(firstandlastlat%base_addr)(1, $I_L1944_337, 0) + 1
 1944.                   $I_L1944_337 = 1 + $I_L1944_337
 1944.                   if ( $I_L1944_337 >= $F_A96 ) exit
 1944.                enddo
 1944.             endif
 1945.             myfirstlat_diag = (firstandlastlat%base_addr)(1, myid, 0)
 1946.             mylastlat_diag = (firstandlastlat%base_addr)(2, myid, 0)
 1947.             myjmax_d = mylastlat_diag + -myfirstlat_diag + 1
 1949.             $Reduc_A97 = 0xffffffff80000001
 1949.             $F_A99 = _zla( 0, ( $ngroups_S2 + 2 * $iex_S1 ) )
 1949.             if ( $ngroups_S2 + 2 * $iex_S1 > 0 ) then
 1949.                $I_L1949_339 = 0
 1949. !dir$ ivdep
 1949.                do
 1949.                   $Reduc_A97 = max( $Reduc_A97, (nprocsingroup%base_addr)(1 + $I_L1949_339, 0) )
 1949.                   $I_L1949_339 = 1 + $I_L1949_339
 1949.                   if ( $I_L1949_339 >= $F_A99 ) exit
 1949.                enddo
 1949.             endif
 1949.             $Reduc_A100 = 0xffffffff80000001
 1949.             $F_A102 = _zla( 0, ( $ngroups_S2 + 2 * $iex_S1 ) )
 1949.             if ( $ngroups_S2 + 2 * $iex_S1 > 0 ) then
 1949.                $I_L1949_341 = 0
 1949. !dir$ ivdep
 1949.                do
 1949.                   $Reduc_A100 = max( $Reduc_A100, (nprocsingroup%base_addr)(1 + $I_L1949_341, 0) )
 1949.                   $I_L1949_341 = 1 + $I_L1949_341
 1949.                   if ( $I_L1949_341 >= $F_A102 ) exit
 1949.                enddo
 1949.             endif
 1950.             mysends_diag%header%a_contig = 1
 1950.             mysends_diag%dim_1%LB = 1
 1950.             mysends_diag%dim_1%EX = 4
 1950.             mysends_diag%dim_1%SM = 1
 1950.             mysends_diag%dim_2%LB = 1
 1950.             mysends_diag%dim_2%EX = ( max( 0, $Reduc_A97 + 5 * $lat_S68 + $lat_S68 * $Reduc_A100 + 5 ) )
 1950.             mysends_diag%dim_2%SM = 4
 1950.             $_allo_P36(0) = 0x1000000000001L
 1950.             $_allo_P36(1) = loc( mysends_diag )
 1950.             call __allocate( $_allo_P36, 0, 0, _fcd( 0, 0 ) )
 1951.             mysendspr_diag%header%a_contig = 1
 1951.             mysendspr_diag%dim_1%LB = 1
 1951.             mysendspr_diag%dim_1%EX = 2
 1951.             mysendspr_diag%dim_1%SM = 1
 1951.             mysendspr_diag%dim_2%LB = 0
 1951.             mysendspr_diag%dim_2%EX = ( max( 0, 1 + nproc ) )
 1951.             mysendspr_diag%dim_2%SM = 2
 1951.             $_allo_P37(0) = 0x1000000000001L
 1951.             $_allo_P37(1) = loc( mysendspr_diag )
 1951.             call __allocate( $_allo_P37, 0, 0, _fcd( 0, 0 ) )
 1952.             myrecs_diag%header%a_contig = 1
 1952.             myrecs_diag%dim_1%LB = 1
 1952.             myrecs_diag%dim_1%EX = 4
 1952.             myrecs_diag%dim_1%SM = 1
 1952.             myrecs_diag%dim_2%LB = 1
 1952.             myrecs_diag%dim_2%EX = ( max( 0, $Reduc_A97 + 5 * $lat_S68 + $lat_S68 * $Reduc_A100 + 5 ) )
 1952.             myrecs_diag%dim_2%SM = 4
 1952.             $_allo_P38(0) = 0x1000000000001L
 1952.             $_allo_P38(1) = loc( myrecs_diag )
 1952.             call __allocate( $_allo_P38, 0, 0, _fcd( 0, 0 ) )
 1953.             myrecspr_diag%header%a_contig = 1
 1953.             myrecspr_diag%dim_1%LB = 1
 1953.             myrecspr_diag%dim_1%EX = 2
 1953.             myrecspr_diag%dim_1%SM = 1
 1953.             myrecspr_diag%dim_2%LB = 0
 1953.             myrecspr_diag%dim_2%EX = ( max( 0, 1 + nproc ) )
 1953.             myrecspr_diag%dim_2%SM = 2
 1953.             $_allo_P39(0) = 0x1000000000001L
 1953.             $_allo_P39(1) = loc( myrecspr_diag )
 1953.             call __allocate( $_allo_P39, 0, 0, _fcd( 0, 0 ) )
 1955.             $ij_S70 = 0
 1956.             if ( mylastlat_diag + -myfirstlat_diag >= 0 ) then
 1956.                $I_L1956_369 = 0
 1956.                do
 1957.                   $ij_S70 = 1 + $ij_S70
 1958.                   (myrecs_diag%base_addr)(1, $ij_S70, 0) = 1
 1959.                   (myrecs_diag%base_addr)(3, $ij_S70, 0) = ( myfirstlat_diag + $I_L1956_369 )
 1960.                   (myrecs_diag%base_addr)(4, $ij_S70, 0) = (gridmap%base_addr)(1, myfirstlat_diag + $I_L1956_369, 0)
 1961.                   $t_S72 = (imaxperj%base_addr)(myfirstlat_diag + $I_L1956_369, 0)
 1961.                   if ( -2 + $t_S72 >= 0 ) then
 1961.                      $I_L1961_251 = 0
 1961. !dir$ unroll 4
 1961.                      do
 1962.                         if ( (myrecs_diag%base_addr)(4, $ij_S70, 0) + -(gridmap%base_addr)(2 + $I_L1961_251, myfirstlat_diag + $I_L1956_369, 0) /= 0 ) then
 1963.                            (myrecs_diag%base_addr)(2, $ij_S70, 0) = ( 1 + $I_L1961_251 )
 1964.                            $ij_S70 = 1 + $ij_S70
 1965.                            (myrecs_diag%base_addr)(1, $ij_S70, 0) = ( 2 + $I_L1961_251 )
 1966.                            (myrecs_diag%base_addr)(3, $ij_S70, 0) = ( myfirstlat_diag + $I_L1956_369 )
 1967.                            (myrecs_diag%base_addr)(4, $ij_S70, 0) = (gridmap%base_addr)(2 + $I_L1961_251, myfirstlat_diag + $I_L1956_369, 0)
 1967.                         endif
 1969.                         $I_L1961_251 = 1 + $I_L1961_251
 1968.                         if ( $I_L1961_251 >= -1 + $t_S72 ) exit
 1968.                      enddo
 1968.                   endif
 1970.                   (myrecs_diag%base_addr)(2, $ij_S70, 0) = $t_S72
 1971.                   $I_L1956_369 = 1 + $I_L1956_369
 1969.                   if ( $I_L1956_369 >= mylastlat_diag + -myfirstlat_diag + 1 ) exit
 1969.                enddo
 1969.             endif
 1975.             if ( -2 + $ij_S70 >= 0 ) then
 1975.                $I_L1975_387 = 0
 1975.                do
 1976.                   $I_L1976_371 = 0
 1976.                   do
 1977.                      if ( (myrecs_diag%base_addr)(4, $I_L1975_387 + -$I_L1976_371 + 2, 0) >= (myrecs_diag%base_addr)(4, $I_L1975_387 + -$I_L1976_371 + 1, 0) ) exit
 1978.                      $I_L1978_343 = 0
 1978. !dir$ ivdep
 1978.                      do
 1978.                         $aux_WR0_R2 = (myrecs_diag%base_addr)(1 + $I_L1978_343, $I_L1975_387 + -$I_L1976_371 + 1, 0)
 1979.                         (myrecs_diag%base_addr)(1 + $I_L1978_343, $I_L1975_387 + -$I_L1976_371 + 1, 0) = (myrecs_diag%base_addr)(1 + $I_L1978_343, $I_L1975_387 + -$I_L1976_371 + 2, 0)
 1980.                         (myrecs_diag%base_addr)(1 + $I_L1978_343, $I_L1975_387 + -$I_L1976_371 + 2, 0) = $aux_WR0_R2
 1978.                         $I_L1978_343 = 1 + $I_L1978_343
 1978.                         if ( $I_L1978_343 >= 4 ) exit
 1978.                      enddo
 1984.                      $I_L1976_371 = 1 + $I_L1976_371
 1978.                      if ( $I_L1976_371 >= 1 + $I_L1975_387 ) exit
 1978.                   enddo
 1985.                   $I_L1975_387 = 1 + $I_L1975_387
 1984.                   if ( $I_L1975_387 >= -1 + $ij_S70 ) exit
 1984.                enddo
 1984.             endif
 1986.             $n_S77 = 0
 1987.             $i1_S79 = 0
 1988.             if ( $ij_S70 > 0 ) then
 1988.                $I_L1988_253 = 0
 1988. !dir$ ivdep
 1988.                do
 1989.                   if ( (myrecs_diag%base_addr)(4, 1 + $I_L1988_253, 0) + -myid == 0 ) then
 1990.                      $i1_S79 = ( 1 + $I_L1988_253 )
 1991.                      $n_S77 = 1 + $n_S77
 1991.                   endif
 1993.                   $I_L1988_253 = 1 + $I_L1988_253
 1992.                   if ( $I_L1988_253 >= $ij_S70 ) exit
 1992.                enddo
 1992.             endif
 1995.             if ( $ij_S70 + -$i1_S79 > 0 ) then
 1995.                $I_L1995_373 = 0
 1995.                do
 1996.                   $I_L1996_345 = 0
 1996. !dir$ ivdep
 1996.                   do
 1996.                      (myrecs_diag%base_addr)(1 + $I_L1996_345, $i1_S79 + $I_L1995_373 + -$n_S77 + 1, 0) = (myrecs_diag%base_addr)(1 + $I_L1996_345, $i1_S79 + $I_L1995_373 + 1, 0)
 1996.                      $I_L1996_345 = 1 + $I_L1996_345
 1996.                      if ( $I_L1996_345 >= 4 ) exit
 1996.                   enddo
 1997.                   $I_L1995_373 = 1 + $I_L1995_373
 1995.                   if ( $I_L1995_373 >= ( $ij_S70 + -$i1_S79 ) ) exit
 1995.                enddo
 1995.             endif
 1998.             (myrecspr_diag%base_addr)(2, 0, 0) = 0
 1999.             if ( $ij_S70 + -$n_S77 > 0 ) then
 2000.                (myrecspr_diag%base_addr)(1, 1, 0) = (myrecs_diag%base_addr)(4, 1, 0)
 2001.                nrecs_diag = 1
 2002.                if ( $ij_S70 + -$n_S77 + -2 >= 0 ) then
 2002.                   $I_L2002_255 = 0
 2002. !dir$ ivdep
 2002.                   do
 2003.                      if ( (myrecs_diag%base_addr)(4, 1 + $I_L2002_255, 0) + -(myrecs_diag%base_addr)(4, 2 + $I_L2002_255, 0) /= 0 ) then
 2004.                         nrecs_diag = 1 + nrecs_diag
 2005.                         (myrecspr_diag%base_addr)(2, -1 + nrecs_diag, 0) = ( 1 + $I_L2002_255 )
 2006.                         (myrecspr_diag%base_addr)(1, nrecs_diag, 0) = (myrecs_diag%base_addr)(4, 2 + $I_L2002_255, 0)
 2006.                      endif
 2008.                      $I_L2002_255 = 1 + $I_L2002_255
 2007.                      if ( $I_L2002_255 >= $ij_S70 + -$n_S77 + -1 ) exit
 2007.                   enddo
 2007.                endif
 2009.                (myrecspr_diag%base_addr)(2, nrecs_diag, 0) = $ij_S70 + -$n_S77
 2009.             else
 2011.                nrecs_diag = 0
 2011.             endif
 1492.             $_allo_P40(0) = 0xb000000000001L
 1492.             $_allo_P40(1) = loc( procingroup )
 1492.             $_allo_P40(2) = loc( nprocsingroup )
 1492.             $_allo_P40(3) = loc( npointsingroup )
 1492.             $_allo_P40(4) = loc( lon )
 1492.             $_allo_P40(5) = loc( lastloningroup )
 1492.             $_allo_P40(6) = loc( lastlatingroup )
 1492.             $_allo_P40(7) = loc( jbmaxingroup )
 1492.             $_allo_P40(8) = loc( iovlap )
 1492.             $_allo_P40(9) = loc( iaux )
 1492.             $_allo_P40(10) = loc( firstloningroup )
 1492.             $_allo_P40(11) = loc( firstlatingroup )
 1492.             call _dealloc( $_allo_P40, 0, 0, _fcd( 0, 0 ) )
 1492.          endif
 1492.       endif
 2014.       return
 2014.       end
 2014.       
  364.       
  364.       module sizes
 2016.       return
 2016.       end
 2016.       
