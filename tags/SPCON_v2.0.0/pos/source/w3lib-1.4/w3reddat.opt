       !        
       !        Cray Inc. Decompilation
       !        WARNING - This output is provided for information only.
       !        
       !        Cray Inc. reserves the right to change the format of this
       !        information at any time and does not guarantee the
       !        readability or accuracy of this information.
       !        
       !        This information may not be compilable and corresponds to
       !        the internal representation of the program during the
       !        optimization phase of the compilation process.
       !        
       !        Source                :  w3reddat.f
       !        File                  :  w3reddat.opt
       !        Format                :  Fortran
       !        Target                :  X86, 64-bit
       !        
    1.       
    1.       subroutine w3reddat( it, rinc, dinc )
  109.       $Dotp_A33 = 0.0
  106.       $I_L106_0 = 0
  106. !dir$ ivdep
  106.       do
  106.          $iinc_WR0_R0 = floor( rinc(1 + $I_L106_0) )
  106.          iinc(1 + $I_L106_0) = $iinc_WR0_R0
  109.          $Dotp_A33 = $Dotp_A33 + t$5(1 + $I_L106_0) * ( rinc(1 + $I_L106_0) + -$iinc_WR0_R0 )
  106.          $I_L106_0 = 1 + $I_L106_0
  106.          if ( $I_L106_0 >= 4 ) exit
  106.       enddo
  109.       jinc(5) = _rnd( rinc(5) + $Dotp_A33 )
  110.       kinc(5) = modulo( jinc(5), 1000 )
  112.       jinc(4) = iinc(4) + ( jinc(5) + -kinc(5) ) / 1000
  113.       kinc(4) = modulo( jinc(4), 60 )
  115.       jinc(3) = iinc(3) + ( jinc(4) + -kinc(4) ) / 60
  116.       kinc(3) = modulo( jinc(3), 60 )
  118.       jinc(2) = iinc(2) + ( jinc(3) + -kinc(3) ) / 60
  119.       kinc(2) = modulo( jinc(2), 24 )
  121.       kinc(1) = iinc(1) + ( jinc(2) + -kinc(2) ) / 24
  122.       $Dotp_A35 = 0
  122.       $I_L122_2 = 0
  122. !dir$ ivdep
  122.       do
  122.          $Dotp_A35 = $Dotp_A35 + t$6(1 + $I_L122_2) * kinc(2 + $I_L122_2)
  122.          $I_L122_2 = 1 + $I_L122_2
  122.          if ( $I_L122_2 >= 4 ) exit
  122.       enddo
  126.       if ( it <= 0 ) then
  126.          goto 10
  126.       else if ( it <= 5 ) then
  129.          $rp_S1 = 16 * $Dotp_A35 / itm(it) + ( mod( 16 * $Dotp_A35, itm(it) ) * 1.0/( real( itm(it) ) ) )
  130.          $I_L130_4 = 0
  130. !dir$ ivdep
  130.          do
  130.             dinc(1 + $I_L130_4) = 0.0
  130.             $I_L130_4 = 1 + $I_L130_4
  130.             if ( $I_L130_4 >= 5 ) exit
  130.          enddo
  131.          dinc(it) = ( 6.25e-2 * $rp_S1 ) + itd(it) * real( kinc(1) )
  131.       else
  131.    10    continue
  135.          $I_L135_6 = 0
  135. !dir$ ivdep
  135.          do
  135.             dinc(1 + $I_L135_6) = real( kinc(1 + $I_L135_6) )
  135.             $I_L135_6 = 1 + $I_L135_6
  135.             if ( $I_L135_6 >= 5 ) exit
  135.          enddo
  136.          if ( it == 0 ) then
  136.             if ( kinc(1) < 0 ) then
  136.                if ( $Dotp_A35 > 0 ) then
  137.                   dinc(1) = 1.0 + dinc(1)
  138.                   $I_L138_8 = 0
  138. !dir$ ivdep
  138.                   do
  138.                      dinc(2 + $I_L138_8) = real( mod( -86400000 + $Dotp_A35, t$7(1 + $I_L138_8) ) / itm(2 + $I_L138_8) )
  138.                      $I_L138_8 = 1 + $I_L138_8
  138.                      if ( $I_L138_8 >= 4 ) exit
  138.                   enddo
  138.                endif
  138.             endif
  138.          endif
  138.       endif
  142.       return
  142.       end
  142.       
