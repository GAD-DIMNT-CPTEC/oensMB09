#!/bin/ksh
. ../include/config.sx6

LABELI=$1
if [ -s $LABELI ]; then
      echo "ERRO: FALTA PARAMETRO.\nrunensmedg.sx6 YYYYMMDDHH"
      exit 1
else
      if [ ${#LABELI} -lt 10 ]; then
            echo "ERRO: PARAMETRO INCORRETO.\nrunensmedg.sx6 YYYYMMDDHH"
            exit 2
      else
            YYYY=`echo $LABELI |cut -c 1-4`
            MM=`echo $LABELI |cut -c 5-6`
            DD=`echo $LABELI |cut -c 7-8`
            HH=`echo $LABELI |cut -c 9-10`

            LABELF=`date -d "${NFDAYS} day ${YYYY}${MM}${DD}" +"%Y%m%d${HH}"`
            YYYYF=`echo $LABELF |cut -c 1-4`
            MMF=`echo $LABELF |cut -c 5-6`
            DDF=`echo $LABELF |cut -c 7-8`
            HHF=`echo $LABELF |cut -c 9-10`
      fi
fi

PERT=$2

NFCTDY=$FSCT
let NMEMBR=${NPERT}*2+1
PREFX=${PERT}

NPROC=1
#
#     End of setting parameters to run
#####
#
export LABELI
echo "LABELI="${LABELI}
#
#     Select parameter for the resolution:
#
if [ "${1}" = "run" ]
then
case ${TRC} in
021) MR=22 ; IR=64 ; JR=32 ; NPGH=93 ;
     DT=1800
;;
030) MR=31 ; IR=96 ; JR=48 ; NPGH=140 ;
     DT=1800
;;
042) MR=43 ; IR=128 ; JR=64 ; NPGH=187 ;
     DT=1800
;;
047) MR=48 ; IR=144 ; JR=72 ; NPGH=26 ;
     DT=1200
;;
062) MR=63 ; IR=192 ; JR=96 ; NPGH=315 ;
     DT=1200
;;
079) MR=80 ; IR=240 ; JR=120 ; NPGH=26 ;
     DT=900
;;
085) MR=86 ; IR=256 ; JR=128 ; NPGH=26 ;
     DT=720
;;
094) MR=95 ; IR=288 ; JR=144 ; NPGH=591 ;
     DT=720
;;
106) MR=107 ; IR=320 ; JR=160 ; NPGH=711 ;
     DT=600
;;
126) MR=127 ; IR=384 ; JR=192 ; NPGH=284 ;
     DT=600
;;
159) MR=160 ; IR=480 ; JR=240 ; NPGH=1454 ;
     DT=450
;;
170) MR=171 ; IR=512 ; JR=256 ; NPGH=1633 ;
     DT=450
;;
213) MR=214 ; IR=640 ; JR=320 ; NPGH=2466 ;
     DT=360
;;
254) MR=255 ; IR=768 ; JR=384 ; NPGH=3502 ;
     DT=300
;;
319) MR=320 ; IR=960 ; JR=480 ; NPGH=26 ;
     DT=240
;;
*) echo "Wrong request for horizontal resolution: ${TRC}" ; exit 1;
esac
fi
#
#   Set host, machine, NQS Queue, Run time and Extention
#
HSTMAQ=`hostname`
MAQUI=sx6
if [ "run" != "run" ]
then
  QUEUE=compila
  NPROC=1
else
  QUEUE=${QUEUE}
  NPROC=4
  NNODE=1
fi
RUNTM=`date +'%Y%m%d%T'`
EXT=out
echo ${MAQUI}
echo ${QUEUE}
echo ${RUNTM}
echo ${EXT}
#
#   Set directories
#
#   OPERMO is the directory for sources, scripts and printouts.
#   SOPERM is the directory for input and output files.
#   ROPERM is the directory for big selected output files.
#   AOPERM is the directory for alternative initial conditions.
#
. ../includes/config.sx6
echo ${OPERM}
echo ${SOPERM}
echo ${ROPERM}
#
#   Set truncation and layers
#
RESOL=T${TRC}
NIVEL=L${LV}
#

cd ${OPERM}/run

if [ "${1}" != "run" ]
then

cat <<EOT0 > setensmed${RESOL}${NIVEL}.${MAQUI}
#!/bin/ksh 
#PBS -l cpunum_prc=${NPROC}
#PBS -l tasknum_prc=${NPROC}
#PBS -l memsz_job=5.0gb  
#PBS -l cputim_job=3600
#PBS -o ${HSTMAQ}:${OPERM}/run/setout/setensmed${RESOL}${NIVEL}.${MAQUI}.${RUNTM}.${EXT}
#PBS -j o

OPERMOD=${OPERM}
SOPERMOD=${SOPERM}
ROPERMOD=${ROPERM}
export OPERMOD SOPERMOD ROPERMOD 

cd \${OPERMOD}/ensmed/source
make -f Makefile clean
make -f Makefile
EOT0

chmod +x setensmed${RESOL}${NIVEL}.${MAQUI}
echo "/usr/bin/nqsII/qsub -q ${QUEUE} ${OPERM}/run/setensmed${RESOL}${NIVEL}.${MAQUI}"
/usr/bin/nqsII/qsub -q ${QUEUE} ${OPERM}/run/setensmed${RESOL}${NIVEL}.${MAQUI}

else
NNODE=1
NPROC=4
node=${NNODE}
cpu0=${NPROC}
cpu1=0
cpu2=0
cpu3=0
CpuPerNode=${NPROC}
TaskPerProc=${NPROC}
MemPerNode=5gb
BUFFER=20480
cputime=`echo "1*12*3600" | bc -l`
nnode=`expr ${node} - 1`
cpu=`expr ${cpu0} + ${cpu1} + ${cpu2} + ${cpu3}`

cat <<EOF1> MpisepEnsmed${LABELI}.scr
#!/usr/bin/sh
cd ${OPERM}/ensmed/bin
exec ${OPERM}/ensmed/bin/ensmed.x ${LABELI} >  ${OPERM}/run/setout/setensmed.${RESOL}${NIVEL}_P${cpu}.${LABELI}.out
EOF1
chmod 755 MpisepEnsmed${LABELI}.scr


cat <<EOT0 > setensmed${RESOL}${NIVEL}.${MAQUI}
#!/bin/ksh 
#PBS -q multi                    # queue: dq for <=8 CPUs
#PBS -T mpisx                    # Job type: mpisx for MPI
#PBS -V
#PBS -l cpunum_prc=${CpuPerNode} # cpus per Node
#PBS -l tasknum_prc=${TaskPerProc}
#PBS -b ${node}                  # number of nodes
#PBS -l cputim_job=${cputime}    # max accumulated cputime
#PBS -l memsz_job=${MemPerNode}  # memory per node
#PBS -o ${HSTMAQ}:${OPERM}/run/setout/setensmed${RESOL}${NIVEL}.${MAQUI}.${RUNTM}.${EXT}
#PBS -e ${HSTMAQ}:${OPERM}/run/setout/setensmed${RESOL}${NIVEL}.${MAQUI}.${RUNTM}.${EXT}
#PBS -j o                        # join stdout/stderr
#PBS -N Ensmed.$LABELI.${TRUNC}${LAYER}   # job name
#######PBS -M mendonca@cptec.inpe.br    # you should always specify your email 
                                        # mail to the outside does not yet work!
#
#*****************************************************************#
#                                                                 #
#       Name:           setensmed${RESOL}${NIVEL}.${MAQUI}        #
#                                                                 #
#       Function:       This script file is used to set the       #
#                       environmental variables and start         #
#                       the global model scripts.                 #
#                                                                 #
#*****************************************************************#
#
#  At SX6 Both the output (stdout) and the error
#  messages (stderr) are written to the same file
#
##   Set date (day,month,year) and hour (hour:minute) 
#
# we should ALWAYS
export OMP_NUM_THREADS=${OpenMPProc}
export F_RSVTASK=${TaskPerProc}
export MPIPROGINF=DETAIL
export F_FILEINF=DETAIL
export F_PROGINF=DETAIL
export F_ERRCNT=1
export F_SETBUF=20480
export F_SYSLE=N300
#
#   DATE=yyyymmdd
#   HOUR=hh:mn:ss
#
DATE=`date +'%Y%m%d'`
HOUR=`date +'%T'`
export DATE HOUR
#
#   Set directories
#
#   OPERMOD  is the directory for sources, scripts and
#            printouts files.
#   SOPERMOD is the directory for input and output data
#            and bin files.
#   ROPERMOD is the directory for big selected output files.
#   AOPERMOD is the directory for alternative initial conditions.
#
OPERMOD=${OPERM}
SOPERMOD=${SOPERM}
ROPERMOD=${ROPERM}
export OPERMOD SOPERMOD ROPERMOD 
echo \${OPERMOD}
echo \${SOPERMOD}
echo \${ROPERMOD}
#
cd \${OPERMOD}/run
#
#   Set Horizontal Truncation and Vertical Layers
#
LEV=${NIVEL}
TRUNC=${RESOL}
export TRUNC LEV
#
#   Set machine
MACH=${MAQUI}
export MACH
#
#   Set option for compiling or not the source codes.
#
#   If COMPILE=make then only the modified sources will be compiled.
#   If COMPILE=clean then the touch files will be removed and 
#              all sources will be compiled.
#             =run for run with no compilation
#
#   If COMPILE is make or clean then the script generates the binary file 
#              and exits;
#              if it is run then the script runs the existent binary file.
#
COMPILE=${1}
export COMPILE
echo \${COMPILE}
#
# Define variables to generate variable data file names:
#
OUT=${EXT}
export OUT
#
EXTS=S.unf
export EXTS 
#
#   Set SX6 FORTRAN variables for output time diagnostics
#
#   F_PROGINF gives the elapsed, user, system and vector instruction
#             execution time, and execution count of all instructions
#             and number of vector instruction executions.
#   F_FILEINF gives informations about I/O operations.
#
F_PROGINF=DETAIL
export F_PROGINF
#
#   Set FORTRAN compilation flags
#
#   -float0 floating-point data format IEEE is enabled
#   -ew     sets the basic numeric size to 8 bytes
#
#   Set FORTRAN environment file name
#
#   FFFn is associated with FORTRAN file unit = n
#
FFF=F_FF
export FFF
#
#   Set environmental variables to binary conversion
#
F_SETBUF=2048
export F_SETBUF
echo " F_SETBUF = \${F_SETBUF}"
#
#   Set number of processors to use on the execution of the script
#
OMP_NUM_THREADS=${NPROC}
export OMP_NUM_THREADS
#
#   Run AGCM
#
echo 'MODEL  -- SUBMITTED ...'
#
####################################################################
#                         				           #
#        Os dados devem sempre ser organizados de forma            #
#        que os dados fiquem separados por blocos dos tipos:       #            
#        1o. Inteiros                                              #
#        2o. Floats                                                #
#	 3o. Chars                                                 #
#								   #
####################################################################
#
#
#Parametros a serem lidos pelo programa ensmed.f90
#NBYTE     : ( INTEGER ) number of bytes for each grib point information
#NFCTDY    : ( INTEGER ) number of forecast days
#FREQCALC  : ( INTEGER ) interval in hours for computing ensemble mean
#MEMB      : ( INTEIRO ) number of members of the ensemble
#IMAX      : ( INTEIRO ) number of points in zonal direction
#JMAX      : ( INTEIRO ) number of points in merdional direction
#DATAINDIR : ( CHAR    ) input directory (ensemble members)
#DATAOUTDIR: ( CHAR    ) output directory of ensemble mean
#RESOL     : ( CHAR    ) horizontal and vertical model resolution
#PREFX     : ( CHAR    ) preffix for input and output files 
cat <<EOT > \${OPERMOD}/ensmed/bin/ensmed.${LABELI}.nml
NBYTE     :   2
NFCTDY    :   ${NFCTDY}
FREQCALC  :   6
MEMB      :   ${NMEMBR}
IMAX      :   ${IR}
JMAX      :   ${JR}
DATAINDIR :   \${SOPERMOD}/pos/dataout/\${TRUNC}\${LEV}/
DATAOUTDIR:   \${SOPERMOD}/ensmed/dataout/\${TRUNC}\${LEV}/
RESOL     :   \${TRUNC}\${LEV}
PREFX     :   ${PREFX}
EOT
#
#-------------------------------------------------------------
#
# Verify if all files of grid-history ensemble forecast were produced
# If is True, it calculates the plumes. If is False, makes 600 trials (each trial equal 1 minute)
# 
ntrialmax=600
NMEMBRP=${NMEMBR}
let NP=NMEMBRP-1
let NPR=NP/2

cd \${ROPERMOD}/pos/dataout/\${TRUNC}\${LEV}
cd /gfs/dk17/mendonca/oens/pos/dataout/\${TRUNC}\${LEV}/
rm -f \${OPERMOD}/ensmed/bin/name.${LABELI}.list

cd \${OPERMOD}/run

#
#   Submit probabilities evaluation
#
#
#   Run the ensmed fortran program
#

if [[ ${node} -eq  4 ]] ; then
mpirun  -v -host 0 -np ${cpu0} -host 1 -np ${cpu1} -host 2 -np ${cpu2} -host 3 -np ${cpu3} \${OPERMOD}/run/MpisepEnsmed${LABELI}.scr
fi
if [[ ${node} -eq  3 ]] ; then
mpirun  -v -host 0 -np ${cpu0} -host 1 -np ${cpu1} -host 2 -np ${cpu2}  \${OPERMOD}/run/MpisepEnsmed${LABELI}.scr
fi
if [[ ${node} -eq  2 ]] ; then
mpirun  -v -host 0 -np ${cpu0} -host 1 -np ${cpu1}  \${OPERMOD}/run/MpisepEnsmed${LABELI}.scr
fi
if [[ ${node} -eq  1 ]] ; then
mpirun  -v -host 0 -np ${cpu0} \${OPERMOD}/run/MpisepEnsmed${LABELI}.scr
fi

#
#   Transfer files of ensemble mean to DEC
#
exit 0
EOT0

chmod +x setensmed${RESOL}${NIVEL}.${MAQUI}

#
#   Run ensmed script
#
echo 'ensmed  -- Run script ...'
#
echo 'ensmed  -- SUBMITTED TO NQS QUEUE ...'
#
echo "/usr/bin/nqsII/qsub -q ${QUEUE} ${OPERM}/run/setensmed${RESOL}${NIVEL}.${MAQUI}"
/usr/bin/nqsII/qsub -q ${QUEUE} ${OPERM}/run/setensmed${RESOL}${NIVEL}.${MAQUI}

fi


