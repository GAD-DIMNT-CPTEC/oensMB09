      PROGRAM ORGPHY
C
C     REVISED MEAN TOPOGRAPHY, VARIANCE, AND LAND/SEA MASK PROGRAM
C     HIGHLIGHTS:
C     1.  LOW MEMORY USAGE: CAN RUN ON ANY PLATFORM.
C     2.  REASONABLY COMPUTATIONALY EFFICIENT.
C     3.  ALL AREAS TREATED AS SECTORS OF ZONES ON A SPHERE FOR
C         GEOMETRICALLY CORRECT CALCULATION.
C     4.  NAVY DATA CORRECTLY TREATED ACCORDING TO ITS DOCUMENTED
C         LAYOUT.  EDGE AREAS INCLUDED AND CORRECTLY PARTITIONED.
C     5.  OUTPUT RESOLUTION EASILY SPECIFIED IN PARAMETER STATEMENTS.
C     6.  DOUBLE PRECISION USED EXTENSIVELY TO ASSURE ACCURATE
C         RESULTS AND AVOID BOUNDARY CROSSING PROBLEMS.
C     7.  FULL FLEXIBILITY IN DETERMINING SPECTRAL SMOOTHING AND
C         GAUSSIAN GRID FILLING.
C     8.  INTERPOLATION STEP CAN BE BYPASSED AND ONLY SMOOTHING
C         AND/OR FILLING WILL BE DONE.  INTERPOLATED DATA IS READ IN.
C
C      N O T E :  REQUIRES NCAR FFT
C
C      DATA SETS:
C      INPUT -
C     1)  U.S. NAVY DATA              UNIT=18
C     (CAN BE SEQUENTIAL OR DIRECT ACCESS AS DATA IS READ IN ITS
C     ORIGINAL ORDER WITHOUT RESCANNING)
C     2)  UNSMOOTHED G.GRID OROGRAPHY UNIT=22  ARRAY  OROG
C         NOTE: ONLY IF INTERP=.FALSE.
C
C      OUTPUT -
C     1)  G.GRID LAND/SEA MASK        UNIT=11  ARRAY  ZMSK
C     2)  UNSMOOTHED G.GRID OROGRAPHY UNIT=22  ARRAY  OROG
C     3)  G.GRID TERRAIN VARIANCE     UNIT=33  ARRAY  VAR
C     4)  SPECTRAL OROGRAPHY          UNIT=44  ARRAY  DQDT
C     5)  SMOOTHED G.GRID OROGRAPHY   UNIT=55  ARRAY  GGS2
C         IF INTERP=.FALSE., ONLY 4 AND 5 ARE WRITTEN.
C
C      NAMELIST PARAMETERS:
C
C      NAME    TYPE            DESCRIPTION
C---------------------------------------------------------------------
C      ITER   INTEGER  NUMBER OF SMOOTHING AND/OR FILLING ITERATIONS
C                      AFTER INITIAL FORWARD AND BACK TRANSFORMS
C
C      ALLSM  LOGICAL  DO SPECTRAL SMOOTHING AT EACH ITERATION
C
C      ALLFL  LOGICAL  DO FILLING OF NEGATIVE HEIGHTS WITH ORIGINAL
C                      HEIGTHS AT EACH ITERATION
C
C      FILL   LOGICAL  SET FILLING FOR EACH SPECIFIC ITERATION IF
C              (20)    ALLFL=F
C
C      SMOOTH LOGICAL  SET SMOOTHING FOR EACH SPECIFIC ITERATION IF
C              (20)    ALLSM=F
C
C      INTERP LOGICAL  INTERPOLATE NAVY DATA TO GAUSSIAN GRID IF TRUE
C                      READ IN INTERPOLATED OROGRAPHY IF FALSE
C
C      RED     REAL    REDUCTION FACTOR FOR SPECTRAL SMOOTHING.
C                      I.E. FOR HIGHEST TOTAL WAVENUMBER, SPECTRAL
C                      COEFFICIENT WILL BE REDUCED TO 1./RED OF ITS
C                      ORIGINAL VALUE.
C
C     GEOMETRY:
C
C     THE U.S. NAVY DATA ARE ASSUMED TO BE AS DOCUMENTED WITH EACH
C     LOCATION BEGINNING AT THE SOUTHWEST CORNER WITH THE DATA
C     ORIGINATING AT THE SOUTH POLE AND THE GREENWICH MERIDIAN.
C     EACH LOCATION IS TREATED AS A 10' X 10' ZONAL SECTOR.  THE
C     GAUSSIAN GRID IS ASSUMED TO HAVE ITS LATITUDES AND LONGITUDES
C     CENTERED AT EACH LOCATION.  THE AREAS ARE ASSUMED TO EXTEND MIDWAY
C     TO THE NEXT GAUSSIAN LATITUDE OR LONGITUDE, OR TO THE POLES.
C     THESE AREAS ARE ALSO TREATED AS ZONAL SECTORS.  THE GAUSSIAN GRID
C     DATA ARE EVENTUALLY SET SO THAT THEY BEGIN AT THE NORTH POLE AND
C     THE GREENWICH MERIDIAN.  DURING INTERPOLATION, THE SOUTH POLE IS
C     USED AS THE ORIGIN TO EASE CALCULATION.
C*
      INTEGER MEND1,NEND1,JEND1,IMAX,JMAX
C*
      INCLUDE "reshoro.h"
C*
      INTEGER IMX,JMAX1,JMAXHF,MNWV2,MNWV3,MNWV1,MNWV0,NEND2,JEND2
      PARAMETER(IMX=IMAX+2,JMAX1=JMAX+1,JMAXHF=(JMAX+1)/2,
     *          MNWV2=JEND1*(JEND1+1)
     *                -(JEND1-NEND1)*(JEND1-NEND1+1)
     *                -(JEND1-MEND1)*(JEND1-MEND1+1),
     *          MNWV3=MNWV2+2*MEND1,MNWV1=MNWV3/2,
     *          MNWV0=MNWV2/2,NEND2=NEND1+1,JEND2=JEND1+1)
C*
      INTEGER ITER
      INTEGER IT,J,MG,NG,NGM,I,II,JJH,NJ,JJL,IIH,NI,MN
      INTEGER LAT,LON,JJ,IIL,IR,MM,JJP,IVMN,JVMN,JR,LAND,NSEA
      REAL RED,DEGRAD,DELTA,VRMN,RMSE1,RLMAX,RLMIN
      REAL RSMAX,RSMIN,ALM,RM,RMSE2,ALMLAND,ALMSEA,RMSE
C*
      INTEGER  MSK(IMAX,JMAX)
      REAL ZMSK(IMAX,JMAX),GLAT(JMAX),OROG(IMAX,JMAX),
     *     VAR(IMAX,JMAX),RLATN(1080),RLATS(1080),
     *     ZM(30,30),SL(30,30),GGS2(IMAX,JMAX),GWT(JMAXHF),
     *     GLATS(JMAX),GLATN(JMAX),COLAT(JMAXHF),SING(JMAXHF)
C*
      REAL*4 VARGRD(IMAX,JMAX),CFT4(MNWV2)
C
      DOUBLE PRECISION DN,DL,PI,WGHT,TPMN,DELRAD,WAC,RLTM,RLTP
C*
      DOUBLE PRECISION SINGLA(JMAX1),SINVY(1081),TOPOG(IMAX,JMAX),
     *       SMSQ(IMAX,JMAX),DLONE(2160),DLONW(2160),DGLONE(IMAX),
     *       DGLONW(IMAX),SLND(IMAX,JMAX)
C*
      LOGICAL EB,NB,ALLSM,ALLFL,INTERP
      LOGICAL FILL(20),SMOOTH(20)
C*
      CHARACTER*7 FORM80
C*
      REAL GRD(IMAX,JMAX),CFT(MNWV2)
C*
      DOUBLE PRECISION PLN,EPS,COLRAD,WGT
      REAL QLN
      COMMON /PLNCOM/ PLN(MNWV1),EPS(MNWV1),
     *                COLRAD(JMAXHF),WGT(JMAXHF),
     *                QLN(MNWV2)
C*
      REAL TRIGS
      INTEGER IFAX,LA0,LA1
      COMMON /COMBIT/ TRIGS(IMAX*3/2+1),IFAX(13),
     *                LA0(MEND1,NEND1),LA1(MEND1,NEND2)
C*
      REAL QWORK,GWORK,GN,GS
      COMMON /SCRTCH/ QWORK(MNWV2,2),GWORK(IMX),GN(IMX),GS(IMX)
C*
      NAMELIST /ORGNML/ ITER,RED,ALLSM,ALLFL,INTERP,FILL,SMOOTH
C*
      DATA FORM80/'(   I1)'/, ITER /1/, RED/10.0/
      DATA ALLSM /.TRUE./, ALLFL /.TRUE./,INTERP /.TRUE./
      DATA FILL /20*.FALSE./, SMOOTH /20*.FALSE./
C*
C*    READS IN NAMELIST
C*
      READ(*,ORGNML)
      WRITE(*,ORGNML)
C*
      DO 2 IT=1,ITER
      IF(ALLSM)SMOOTH(IT)=.TRUE.
      IF(ALLFL)FILL(IT)=.TRUE.
    2 CONTINUE
C*
      WRITE(*,'(A10,20L3)')' SMOOTH = ',SMOOTH
      WRITE(*,'(A10,20L3)')' FILL   = ',FILL
C*
      OPEN(11,FORM='FORMATTED',STATUS='UNKNOWN')
      OPEN(22,FORM='UNFORMATTED',STATUS='UNKNOWN')
      OPEN(33,FORM='UNFORMATTED',STATUS='UNKNOWN')
      OPEN(34,FORM='UNFORMATTED',STATUS='UNKNOWN')
      OPEN(44,FORM='UNFORMATTED',STATUS='UNKNOWN')
      OPEN(55,FORM='UNFORMATTED',STATUS='UNKNOWN')
C*
C*    INITIALIZE PARAMETERS FOR FFT, SPECTRAL COEFFICIENTS INDICES,
C*               LEGENGRE ASSOCIATED FUNCTIONS AND GAUSSIAN QUADRATURE
C*
      CALL FFTFXT(IMAX,IFAX,TRIGS)
      CALL LA0LA1(LA0,LA1,MEND1,NEND1,JEND1,NEND2,JEND2,MNWV2)
      CALL EPSLON(EPS,MEND1,NEND2,JEND2,MNWV1)
      CALL GSLATS(JMAXHF,COLRAD,WGT)
C*
C*    BEGIN INTERPOLATION
C*
      IF(INTERP)THEN
C*
C*
      OPEN(18,FORM='FORMATTED',STATUS='UNKNOWN')
C*
      DEGRAD=45.0/ATAN(1.0)
      WAC=0.0D0
C
      DO 9876 J=1,JMAXHF
C     COLAT(J)=SNGL(DEGRAD*COLRAD(J))
      COLAT(J)=DEGRAD*COLRAD(J)
      WRITE(*,9877) J,COLAT(J)
 9876 CONTINUE
 9877 FORMAT(1X,I4,F8.3)
C
C     COMPUTE GAUSSIAN GRID BOX LIMITS.
C
C     CHANGE MG,NG AS DESIRED. MUST BE CONSISTENT
C     WITH DIMENSIONS.
C
      MG=IMAX
      NG=JMAX
      NGM=NG-1
      DELTA=360.0/FLOAT(MG)
      VRMN=1.0E25
      PI=3.1415926535897932384626433832795D0
      DELRAD=(2.0D0*PI)/DFLOAT(IMAX)
C
      DO 5 J=1,JMAXHF
      GLAT(J)=-90.0+COLAT(J)
      GLAT(JMAX+1-J)=90.0-COLAT(J)
    5 CONTINUE
      DO 7 J=2,JMAX
      IF(J.LE.JMAXHF)THEN
      RLTM=-PI/2.0D0+COLRAD(J-1)
      RLTP=-PI/2.0D0+COLRAD(J)
      ELSE IF(J.GT.JMAXHF+1)THEN
      RLTM=PI/2.0D0-COLRAD(JMAX-J+2)
      RLTP=PI/2.0D0-COLRAD(JMAX-J+1)
      ELSE
      RLTM=0.0D0
      RLTP=0.0D0
      END IF
      SINGLA(J)=DSIN((RLTM+RLTP)/2.0D0)
    7 CONTINUE
      SINGLA(1)=-1.0D0
      SINGLA(JMAXHF+1)=0.0D0
      SINGLA(JMAX1)=1.0D0
      DO 10 I=1,MG
      DGLONE(I)=(0.5D0+DFLOAT(I-1))*DELRAD
      II=I+1
      IF(II.GT.MG)II=1
      DGLONW(II)=DGLONE(I)
   10 CONTINUE
      GLATS(1)=-90.0
      DO 20 J=2,NG
      GLATS(J)=0.5*(GLAT(J-1)+GLAT(J))
   20 CONTINUE
      GLATN(NG)=90.0
      DO 30 J=1,NGM
      GLATN(J)=0.5*(GLAT(J)+GLAT(J+1))
   30 CONTINUE
C*
      DO 35 J=1,JMAX
      DO 33 I=1,IMAX
      TOPOG(I,J)=0.0D0
      SMSQ(I,J)=0.0D0
      SLND(I,J)=0.0D0
   33 CONTINUE
   35 CONTINUE
C
C     PRINT GRID LIMIT QUANTITIES.
C
      WRITE(*,503) (COLAT(J),J=1,JMAXHF)
  503 FORMAT(/,' CO-LATITUDES OF GAUSSIAN GRID'/(10F12.2))
      WRITE(*,504)
  504 FORMAT(/,1X,4X,'J',6X,'GLAT',5X,'GLATS',5X,'GLATN')
      WRITE(*,505) (J,GLAT(J),GLATS(J),GLATN(J),J=1,JMAX)
  505 FORMAT(I5,3F10.2)
      WRITE(*,514)
  514 FORMAT(/,1X,4X,'I',6X,'DGLONW',4X,'DGLONE',5X,'SINGLA')
      WRITE(*,515) (I,DGLONW(I),DGLONE(I),SINGLA(I),I=1,JMAX1)
      WRITE(*,516) (I,DGLONW(I),DGLONE(I),I=JMAX1+1,IMAX)
  515 FORMAT(I5,3F10.6)
  516 FORMAT(I5,2F10.6)
C
C     DETERMINE WEIGHTS AND BOUNDARIES FOR NAVY GRID
C
      DO 40 J=2,1080
      RLATS(J)=-90.0+FLOAT(J-1)/6.0
      RLATN(J-1)=RLATS(J)
      SINVY(J)=DSIN((-0.5D0+DFLOAT(J-1)/1080.0D0)*PI)
   40 CONTINUE
      SINVY(1)=-1.0D0
      SINVY(541)=0.0D0
      SINVY(1081)=1.0D0
      RLATS(1)=-90.0
      RLATN(1080)=90.0
      DO 50 I=1,2160
      DLONW(I)=DFLOAT(I-1)*PI/1080.0D0
      DLONE(I)=DFLOAT(I)*PI/1080.0D0
   50 CONTINUE
C
C     BEGIN READING THROUGH NAVY DATA AND ACCUMULATE AREA WEIGHTED
C     HEIGHTS, SQUARES OF HEIGHTS AND WATER PERCENTAGE
C
      JJH=1
      DO 240 NJ=1,36
      JJL=JJH
      IIH=1
      DO 200 NI=1,72
      CALL GETROW(ZM,SL,LAT,LON)
      JJ=JJL
      IF(SINGLA(JJ+1).LT.SINVY(1+LAT*6))GO TO 1300
      IF(SINGLA(JJ+1).EQ.SINVY(1+LAT*6))THEN
      JJ=JJ+1
      JJH=MAX(JJH,JJ)
      END IF
      IIL=IIH
      DO 180 J=1,30
      JR=J+LAT*6
      NB=.FALSE.
      IF(SINVY(JR+1).GT.SINGLA(JJ+1))NB=.TRUE.
      II=IIL
      IF(II.LT.0)II=1
      IF(IIL.GT.0.AND.DGLONE(II).LT.DLONW(1+LON*6))GO TO 1500
      IF(DGLONE(II).EQ.DLONW(1+LON*6))II=II+1
      IF(II.GT.IMAX)II=1
      IF(.NOT.NB)THEN
      DO 140 I=1,30
      IR=I+LON*6
      EB=.FALSE.
      IF(II.GE.IIL.AND.IIL.GT.0.AND.DLONE(IR).GT.DGLONE(II))
     *EB=.TRUE.
C
C     ORDINARY (NO BOUNDARY) CASE
C
      IF(.NOT.EB)THEN
      WGHT=(SINVY(JR+1)-SINVY(JR))*(DLONE(IR)-DLONW(IR))
      IF(WGHT.LT.0.0D0)GO TO 2000
      WAC=WAC+WGHT
      TOPOG(II,JJ)=TOPOG(II,JJ)+WGHT*DBLE(ZM(I,J))
      SMSQ(II,JJ)=SMSQ(II,JJ)+WGHT*DBLE(ZM(I,J)*ZM(I,J))
      IF(SMSQ(II,JJ).LT.0.0D0)GO TO 2500
      SLND(II,JJ)=SLND(II,JJ)+WGHT*DBLE(SL(I,J))
C
C     EASTERN BOUNDARY CASE WITH NO NORTHERN BOUNDARY
C
      ELSE
      MM=1
      WGHT=(SINVY(JR+1)-SINVY(JR))*(DGLONE(II)-DLONW(IR))
      IF(WGHT.LT.0.0D0)GO TO 2000
      WAC=WAC+WGHT
      TOPOG(II,JJ)=TOPOG(II,JJ)+WGHT*DBLE(ZM(I,J))
      SMSQ(II,JJ)=SMSQ(II,JJ)+WGHT*DBLE(ZM(I,J)*ZM(I,J))
      IF(SMSQ(II,JJ).LT.0.0D0)GO TO 2500
      SLND(II,JJ)=SLND(II,JJ)+WGHT*DBLE(SL(I,J))
      II=II+1
      IIH=MAX(IIH,II)
      IF(II.GT.IMAX)II=1
      IF(IIH.GT.IMAX)IIH=-1
      MM=2
      WGHT=(SINVY(JR+1)-SINVY(JR))*(DLONE(IR)-DGLONW(II))
      IF(WGHT.LT.0.0D0)GO TO 2000
      WAC=WAC+WGHT
      TOPOG(II,JJ)=TOPOG(II,JJ)+WGHT*DBLE(ZM(I,J))
      SMSQ(II,JJ)=SMSQ(II,JJ)+WGHT*DBLE(ZM(I,J)*ZM(I,J))
      IF(SMSQ(II,JJ).LT.0.0D0)GO TO 2500
      SLND(II,JJ)=SLND(II,JJ)+WGHT*DBLE(SL(I,J))
      END IF
  140 CONTINUE
C
C     NORTHERN BOUNDARY CASES
C
      ELSE
      JJP=JJ+1
      DO 150 I=1,30
      IR=I+LON*6
      EB=.FALSE.
      IF(II.GE.IIL.AND.IIL.GT.0.AND.DLONE(IR).GT.DGLONE(II))
     *EB=.TRUE.
C
C     NORTHERN BOUNDARY CASE WITH NO EASTERN BOUNDARY
C
      IF(.NOT.EB)THEN
      WGHT=(SINGLA(JJP)-SINVY(JR))*(DLONE(IR)-DLONW(IR))
      IF(WGHT.LT.0.0D0)GO TO 2000
      WAC=WAC+WGHT
      TOPOG(II,JJ)=TOPOG(II,JJ)+WGHT*DBLE(ZM(I,J))
      SMSQ(II,JJ)=SMSQ(II,JJ)+WGHT*DBLE(ZM(I,J)*ZM(I,J))
      IF(SMSQ(II,JJ).LT.0.0D0)GO TO 2500
      SLND(II,JJ)=SLND(II,JJ)+WGHT*DBLE(SL(I,J))
      WGHT=(SINVY(JR+1)-SINGLA(JJP))*(DLONE(IR)-DLONW(IR))
      IF(WGHT.LT.0.0D0)GO TO 2000
      WAC=WAC+WGHT
      TOPOG(II,JJP)=TOPOG(II,JJP)+WGHT*DBLE(ZM(I,J))
      SMSQ(II,JJP)=SMSQ(II,JJP)+WGHT*DBLE(ZM(I,J)*ZM(I,J))
      IF(SMSQ(II,JJ).LT.0.0D0)GO TO 2500
      SLND(II,JJP)=SLND(II,JJP)+WGHT*DBLE(SL(I,J))
C
C     CASE WITH BOTH EASTERN AND NORTHERN BOUNDARIES
C
      ELSE
      WGHT=(SINGLA(JJP)-SINVY(JR))*(DGLONE(II)-DLONW(IR))
      IF(WGHT.LT.0.0D0)GO TO 2000
      WAC=WAC+WGHT
      TOPOG(II,JJ)=TOPOG(II,JJ)+WGHT*DBLE(ZM(I,J))
      SMSQ(II,JJ)=SMSQ(II,JJ)+WGHT*DBLE(ZM(I,J)*ZM(I,J))
      IF(SMSQ(II,JJ).LT.0.0D0)GO TO 2500
      SLND(II,JJ)=SLND(II,JJ)+WGHT*DBLE(SL(I,J))
      WGHT=(SINVY(JR+1)-SINGLA(JJP))*(DGLONE(II)-DLONW(IR))
      IF(WGHT.LT.0.0D0)GO TO 2000
      WAC=WAC+WGHT
      TOPOG(II,JJP)=TOPOG(II,JJP)+WGHT*DBLE(ZM(I,J))
      SMSQ(II,JJP)=SMSQ(II,JJP)+WGHT*DBLE(ZM(I,J)*ZM(I,J))
      IF(SMSQ(II,JJ).LT.0.0D0)GO TO 2500
      SLND(II,JJP)=SLND(II,JJP)+WGHT*DBLE(SL(I,J))
      II=II+1
      IIH=MAX(IIH,II)
      IF(II.GT.IMAX)II=1
      IF(IIH.GT.IMAX)IIH=-1
      WGHT=(SINGLA(JJP)-SINVY(JR))*(DLONE(IR)-DGLONW(II))
      IF(WGHT.LT.0.0D0)GO TO 2000
      WAC=WAC+WGHT
      TOPOG(II,JJ)=TOPOG(II,JJ)+WGHT*DBLE(ZM(I,J))
      SMSQ(II,JJ)=SMSQ(II,JJ)+WGHT*DBLE(ZM(I,J)*ZM(I,J))
      IF(SMSQ(II,JJ).LT.0.0D0)GO TO 2500
      SLND(II,JJ)=SLND(II,JJ)+WGHT*DBLE(SL(I,J))
      WGHT=(SINVY(JR+1)-SINGLA(JJP))*(DLONE(IR)-DGLONW(II))
      IF(WGHT.LT.0.0D0)GO TO 2000
      WAC=WAC+WGHT
      TOPOG(II,JJP)=TOPOG(II,JJP)+WGHT*DBLE(ZM(I,J))
      SMSQ(II,JJP)=SMSQ(II,JJP)+WGHT*DBLE(ZM(I,J)*ZM(I,J))
      IF(SMSQ(II,JJ).LT.0.0D0)GO TO 2500
      SLND(II,JJP)=SLND(II,JJP)+WGHT*DBLE(SL(I,J))
      END IF
  150 CONTINUE
      JJ=JJP
      JJH=MAX(JJH,JJ)
      END IF
  180 CONTINUE
  200 CONTINUE
  240 CONTINUE
C
C     HAVING READ ALL THE NAVY DATA, DETERMINE MEANS BY DIVIDING BY
C     GAUSSIAN GRID BOX AREAS
C
      DO 500 J=1,JMAX
      DO 400 I=1,IMAX
      DL=DGLONE(I)-DGLONW(I)
      IF(DL.LT.0.0D0)DL=DL+2.0*PI
      DN=(SINGLA(J+1)-SINGLA(J))*DL
      TPMN=TOPOG(I,J)/DN
C     OROG(I,J)=SNGL(TPMN)
C     VAR(I,J)=SNGL(SMSQ(I,J)/DN-TPMN*TPMN)
      OROG(I,J)=TPMN
      VAR(I,J)=SMSQ(I,J)/DN-TPMN*TPMN
      IF(VAR(I,J).LT.0.0)THEN
      WRITE(*,350)I,J,VAR(I,J),TPMN,DL,TOPOG(I,J),SMSQ(I,J),DN
  350 FORMAT(' VAR(',I3,',',I3,')=',6G11.4)
      VAR(I,J)=0.0
      END IF
      IF(VAR(I,J).NE.0..AND.VAR(I,J).LT.VRMN)THEN
      VRMN=VAR(I,J)
      IVMN=I
      JVMN=J
      END IF
C
C  COMPUTE OCEAN COVERAGE
C
c     ZMSK(I,J)=SNGL(SLND(I,J)/DN)
      ZMSK(I,J)=SLND(I,J)/DN
      IF(ZMSK(I,J).LT.50.0) THEN
      MSK(I,J)=1
      ELSE
      MSK(I,J)=0
      ENDIF
  400 CONTINUE
  500 CONTINUE
C
C     OUTPUT LSMASK
C
      WRITE(FORM80(2:4),807)IMAX
  807 FORMAT(I3)
      CALL REVROW(MSK,IMAX,JMAX)
      DO J=1,JMAX
      DO I=1,IMAX
      VARGRD(I,J)=FLOAT(MSK(I,J))
      ENDDO
      ENDDO
      WRITE(11,FORM80) MSK
      WRITE(34)VARGRD
C
C     OUTPUT INTERPOLATED OROGRAPHY
C
      CALL REVROW(OROG,IMAX,JMAX)
      DO J=1,JMAX
      DO I=1,IMAX
      VARGRD(I,J)=OROG(I,J)
      ENDDO
      ENDDO
      WRITE(22) OROG
      WRITE(34)VARGRD
C
C     OUTPUT OROGRAPHY VARIANCE
C
      CALL REVROW(VAR,IMAX,JMAX)
      DO J=1,JMAX
      DO I=1,IMAX
      VARGRD(I,J)=VAR(I,J)
      ENDDO
      ENDDO
      WRITE(33) VARGRD
      WRITE(34) VARGRD
C
      WRITE(*,833)VRMN,IVMN,JVMN,WAC
  833 FORMAT(' MINIMUM POSITIVE VARIANCE=',G16.8,' IVMN=',I3,' JVMN=',
     *I3/' AREA SUM=',G22.12)
C*
C*    END OF INTERPOLATION
C*
      ELSE
C*
C*    IF OROGRAPHY IS ALREADY INTERPOLATED AND NEEDS MORE SMOOTHING
C*
      READ(22) OROG
      ENDIF
C*
C*    SAVES INTERPOLATED OROGRAPHY
C*
      DO 840 J=1,JMAX
      DO 835 I=1,IMAX
      GGS2(I,J)=OROG(I,J)
  835 CONTINUE
  840 CONTINUE
C*
C*    COMPUTES SPHERICAL HARMONICS OF OROGRAPHY (SHO <-> CFT)
C*
      CALL GRD2SP(GGS2,CFT)
C*
C*    RECOMPOSES OROGRAPHY
C*
      CALL SP2GRD(CFT,GGS2)
C*
C*    COMPUTES STATISTICS FOR LAND, OCEAN
C*                        AND RECOMPOSED X INTERPOLATED
C*
      RMSE1=0.
      RLMAX=-1.E+33
      RLMIN=1.E+33
      RSMAX=-1.E+33
      RSMIN=1.E+33
      ALM=0.
      LAND=0
      DO 855 J=1,JMAX
      DO 853 I=1,IMAX
      IF(OROG(I,J).NE.0.) THEN
      LAND=LAND+1
      RM=GGS2(I,J)-OROG(I,J)
      IF(RM.GT.RLMAX) RLMAX=RM
      IF(RM.LT.RLMIN) RLMIN=RM
      RMSE1=RMSE1+RM*RM
      ALM=ALM+RM
      ENDIF
  853 CONTINUE
  855 CONTINUE
      RMSE2=0.
      ALMLAND=ALM
      ALMSEA=0.
      NSEA=0
      DO 869 J=1,JMAX
      DO 867 I=1,IMAX
      IF(OROG(I,J).EQ.0.) THEN
      NSEA=NSEA+1
      RM=GGS2(I,J)-OROG(I,J)
      IF(RM.GT.RSMAX) RSMAX=RM
      IF(RM.LT.RSMIN) RSMIN=RM
      RMSE2=RMSE2+RM*RM
      ALM=ALM+RM
      ALMSEA=ALMSEA+RM
      ENDIF
  867 CONTINUE
  869 CONTINUE
      RMSE=SQRT((RMSE1+RMSE2)/FLOAT(LAND+NSEA))
      RMSE1=SQRT(RMSE1/FLOAT(LAND))
      RMSE2=SQRT(RMSE2/FLOAT(NSEA))
      ALM=ALM/FLOAT(LAND+NSEA)
      ALMLAND=ALMLAND/FLOAT(LAND)
      ALMSEA=ALMSEA/FLOAT(NSEA)
      IT=0
      WRITE(*,888)IT,LAND,NSEA
  888 FORMAT(' AT IT=',I2,' #LAND=',I5,'   #SEA= ',I5)
      WRITE(*,966) RMSE1
      WRITE(*,967) RMSE2
      WRITE(*,968) RMSE
      WRITE(*,969) RLMAX
      WRITE(*,970) RLMIN
      WRITE(*,971) RSMAX
      WRITE(*,972) RSMIN
      WRITE(*,973) ALM
      WRITE(*,974) ALMLAND
      WRITE(*,975) ALMSEA
  966 FORMAT(' RMSE (LAND)  ',2X,G16.8)
  967 FORMAT(' RMSE (OCEAN) ',2X,G16.8)
  968 FORMAT(' RMSE (GLOBAL)',2X,G16.8)
  969 FORMAT(' EMAX (LAND)  ',2X,G16.8)
  970 FORMAT(' EMIN (LAND)  ',2X,G16.8)
  971 FORMAT(' EMAX (OCEAN) ',2X,G16.8)
  972 FORMAT(' EMIN (OCEAN) ',2X,G16.8)
  973 FORMAT('     ALM      ',2X,G16.8)
  974 FORMAT('   ALMLAND    ',2X,G16.8)
  975 FORMAT('    ALMSEA    ',2X,G16.8)
C*
C*    BEGIN FILL ZEROS AND RESET NEGATIVE VALUES AND/OR SMOOTHING
C*
      IF(ITER.GT.0)THEN
      DO 1100 IT=1,ITER
      IF(FILL(IT))THEN
      DO 1008 J=1,JMAX
      DO 1006 I=1,IMAX
      IF(GGS2(I,J).LT.0.0) GGS2(I,J)=OROG(I,J)
      IF(OROG(I,J).EQ.0.0) GGS2(I,J)=0.0
 1006 CONTINUE
 1008 CONTINUE
      END IF
C*
C*    RECOMPOSE AND SMOOTH
C*
      CALL GRD2SP(GGS2,CFT)
      IF (SMOOTH(IT)) CALL SMTCFT(CFT,RED,MEND1,NEND1,JEND1,MNWV2)
C*
C*    RECOMPOSE STOOTHED OROGRAPHY
C*
      CALL SP2GRD(CFT,GGS2)
C*
C*    COMPUTES STATISTICS FOR LAND, OCEAN
C*                        AND RECOMPOSED X INTERPOLATED
C*
      RMSE1=0.0
      RLMAX=-1.E+33
      RLMIN=1.E+33
      RSMAX=-1.E+33
      RSMIN=1.E+33
      ALM=0.0
      LAND=0
      DO 1055 J=1,JMAX
      DO 1053 I=1,IMAX
      IF(OROG(I,J).NE.0.0) THEN
      LAND=LAND+1
      RM=GGS2(I,J)-OROG(I,J)
      IF(RM.GT.RLMAX) RLMAX=RM
      IF(RM.LT.RLMIN) RLMIN=RM
      RMSE1=RMSE1+RM*RM
      ALM=ALM+RM
      ENDIF
 1053 CONTINUE
 1055 CONTINUE
      RMSE2=0.0
      ALMLAND=ALM
      ALMSEA=0.0
      NSEA=0
      DO 1069 J=1,JMAX
      DO 1067 I=1,IMAX
      IF(OROG(I,J).EQ.0.0) THEN
      NSEA=NSEA+1
      RM=GGS2(I,J)-OROG(I,J)
      IF(RM.GT.RSMAX) RSMAX=RM
      IF(RM.LT.RSMIN) RSMIN=RM
      RMSE2=RMSE2+RM*RM
      ALM=ALM+RM
      ALMSEA=ALMSEA+RM
      ENDIF
 1067 CONTINUE
 1069 CONTINUE
      RMSE=SQRT((RMSE1+RMSE2)/FLOAT(LAND+NSEA))
      RMSE1=SQRT(RMSE1/FLOAT(LAND))
      RMSE2=SQRT(RMSE2/FLOAT(NSEA))
      ALM=ALM/FLOAT(LAND+NSEA)
      ALMLAND=ALMLAND/FLOAT(LAND)
      ALMSEA=ALMSEA/FLOAT(NSEA)
      WRITE(*,888) IT,LAND,NSEA
      WRITE(*,966) RMSE1
      WRITE(*,967) RMSE2
      WRITE(*,968) RMSE
      WRITE(*,969) RLMAX
      WRITE(*,970) RLMIN
      WRITE(*,971) RSMAX
      WRITE(*,972) RSMIN
      WRITE(*,973) ALM
      WRITE(*,974) ALMLAND
      WRITE(*,975) ALMSEA
 1100 CONTINUE
      END IF
C*
C*    WRITE SPECTRAL OROGRAPHY, FIRST TRANSP TO COLUMNWISE STORAGE
C*
      CALL TRANSP(CFT,MNWV2,MEND1,NEND1,JEND1,1,LA0,QWORK,1)
C*
      DO MN=1,MNWV2
      CFT4(MN)=CFT(MN)
      ENDDO
      WRITE(44)CFT4
C*
C*    WRITE FILLED/SMOOTHED GAUSSIAN OROGRAPHY
C*
      WRITE(55)GGS2
      DO J=1,JMAX
      DO I=1,IMAX
      VARGRD(I,J)=GGS2(I,J)
      ENDDO
      ENDDO
      WRITE(34)VARGRD
C*
      STOP
C*
C*    (SINGLA(JJ+1).LT.SINVY(1+LAT*6))
C*
 1300 WRITE(*,1400)NJ,NI,JJ,LAT,LON,JJL,JJH,GLATN(JJ),RLATS(1+LAT*6)
 1400 FORMAT(' ERROR IN DETERMINING LATITUDE BOUNDARY.  NJ=',I2,
     *' NI=',I2,' JJ=',I3,' LAT=',I3,' LON=',I3,' JJL=',I3,' JJH=',I3/
     *' GLATN=',G16.8,' RLATS=',G16.8)
      STOP 1400
C*
C*    (IIL.GT.0.AND.DGLONE(II).LT.DLONW(1+LON*6))
C*
 1500 WRITE(*,1600)NJ,NI,II,LAT,LON,IIL,IIH,DGLONE(II),DLONW(1+LON*6)
 1600 FORMAT(' ERROR IN DETERMINING LONGITUDE BOUNDARY.  NJ=',I2,
     *' NI=',I2,' II=',I3,' LAT=',I3,' LON=',I3,' IIL=',I3,' IIH=',I3/
     *' DGLONE=',G16.8,' DLONW=',G16.8)
      STOP 1600
C*
C*    (WGHT.LT.0.0D0)
C*
 2000 WRITE(*,2100)WGHT,NJ,NI,JR,IR,JJ,II,I,J,IIL,IIH,MM,
     *EB,NB,DLONE(IR),DLONW(IR),DGLONE(II),DGLONW(II)
 2100 FORMAT(' WGTH=',G16.8,' AT NJ,NI,JR,IR,JJ,II,I,J,L,=',11I5/
     *' EB,NB=',2L2,' DLONE,W=',2G24.16,' DGLONE,W=',2G24.16)
      STOP 2100
C*
C*    (SMSQ(II,JJ).LT.0.0D0)
C*
 2500 WRITE(*,2600)SMSQ(II,JJ),ZM(I,J),WGHT,NJ,NI,JR,IR,JJ,II,I,J
 2600 FORMAT(' SMSQ=',G16.8, ' ZM=',G16.8,' WGTH=',G16.8/
     *' AT NJ,NI,JR,IR,JJ,II,I,J=',8I6)
      STOP 2600
C*
      END
